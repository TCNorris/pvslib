(hutch (Eq_computed_remainder_seq?_TCC1 0
        (Eq_computed_remainder_seq?_TCC1-1 nil 3688737352
         ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (Eq_computed_remainder_seq? subtype "hutch.n(hutch.j)"
          "{n_1 | IF reals.<=(n_1, hutch.n(hutch.j)) THEN hutch.p(hutch.j)(n_1) ELSE 0 ENDIF /= 0}")))
       (Eq_computed_remainder_seq?_TCC2 0
        (Eq_computed_remainder_seq?_TCC2-1 nil 3688737352
         ("" (subtype-tcc) nil nil)
         ((poly_deriv const-decl "real" polynomials reals)
          (int_plus_int_is_int application-judgement "int" integers nil))
         nil
         (Eq_computed_remainder_seq? subtype
          "polynomials.poly_deriv(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.n(hutch.j)) THEN hutch.p(hutch.j)(i) ELSE 0 ENDIF)"
          "[nat -> int]")))
       (Eq_computed_remainder_seq?_TCC3 0
        (Eq_computed_remainder_seq?_TCC3-1 nil 3688737352
         ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (int_times_int_is_int application-judgement "int" integers nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (poly_deriv const-decl "real" polynomials reals))
         nil
         (Eq_computed_remainder_seq? subtype
          "(number_fields.-)(hutch.n(hutch.j), 1)"
          "{m | polynomials.poly_deriv(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.n(hutch.j)) THEN hutch.p(hutch.j)(i) ELSE 0 ENDIF)(remainder_sequence.m) /= 0}")))
       (sturm_chain_list_TCC1 0
        (sturm_chain_list_TCC1-1 nil 3689324793 ("" (subtype-tcc) nil nil)
         ((remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil))
         nil
         (sturm_chain_list subtype
          "array2list[list[list[int]]].array2list((number_fields.+)(hutch.k, 1))(LAMBDA (j: naturalnumbers.nat): IF reals.<=(j, hutch.k) THEN remainder_sequence.remainder_seq(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.n(j)) THEN hutch.p(j)(i) ELSE 0 ENDIF, hutch.n(j), polynomials.poly_deriv(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.n(j)) THEN hutch.p(j)(i) ELSE 0 ENDIF), (number_fields.-)(hutch.n(j), 1)) ELSE list_adt[list[int]].cons(list_adt[int].cons(0, list_adt[int].null), list_adt[list[int]].null) ENDIF)"
          "(hutch.Eq_computed_remainder_seq?(hutch.k, hutch.p, hutch.n))")))
       (decidable_interval_TCC1 0
        (decidable_interval_TCC1-1 nil 3689335053 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (sound_signs? const-decl "bool" hutch nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (/= const-decl "boolean" notequal nil))
         nil
         (decidable_interval subtype "hutch.n(hutch.i)"
                             "{d: integers.posnat | hutch.p(hutch.i)(d) /= 0}")))
       (decidable_interval_TCC2 0
        (decidable_interval_TCC2-1 nil 3689335053 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (sound_signs? const-decl "bool" hutch nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (decidable_interval subtype "hutch.i"
                             "below[length[list[list[int]]](slseq)]")))
       (decidable_interval_TCC3 0
        (decidable_interval_TCC3-1 nil 3689335053
         ("" (skeep*)
          (("" (typepred "slseq")
            (("" (hide -1)
              (("" (expand "Eq_computed_remainder?")
                (("" (expand "Eq_computed_remainder_seq?")
                  (("" (replaces -1)
                    ((""
                      (typepred "array2list[list[list[int]]]
               (1 + k)
               (LAMBDA (j: nat):
                  IF j <= k
                    THEN remainder_seq(LAMBDA
                                       (i: nat):
                                       IF i <= n(j)
                                       THEN p(j)(i)
                                       ELSE 0
                                       ENDIF,
                                       n(j),
                                       poly_deriv
                                       (LAMBDA
                                        (i: nat):
                                        IF i <= n(j)
                                        THEN p(j)(i)
                                        ELSE 0
                                        ENDIF),
                                       n(j) - 1)
                  ELSE cons[list[int]]
                           (cons[int](0, null[int]), null[list[int]])
                  ENDIF)")
                      (("1" (hide (-1 -2))
                        (("1" (inst - "i") (("1" (assert) nil nil)) nil)) nil)
                       ("2" (hide 2)
                        (("2" (skeep*)
                          (("2" (expand "poly_deriv")
                            (("2" (assert)
                              (("2" (typepred "n")
                                (("2" (inst?)
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (skeep*)
                          (("3" (expand "poly_deriv") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (skeep*)
                          (("4" (typepred "n")
                            (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (k skolem-const-decl "nat" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (length def-decl "nat" list_props nil)
          (listn type-eq-decl nil listn structures)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (sequence type-eq-decl nil sequences nil)
          (poly_deriv const-decl "real" polynomials reals)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval subtype
                             "list_props[list[list[int]]].nth(hutch.slseq, hutch.i)"
                             "(compute_sturm.Eq_computed_remainder?(hutch.p(hutch.i), hutch.n(hutch.i)))")))
       (sum_square_zero_havers_TCC1 0
        (sum_square_zero_havers_TCC1-1 nil 3690626725
         ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (/= const-decl "boolean" notequal nil))
         nil
         (sum_square_zero_havers subtype "(number_fields.-)(hutch.i, 1)"
           "naturalnumbers.upto(hutch.k)")))
       (sum_square_zero_havers_TCC2 0
        (sum_square_zero_havers_TCC2-1 nil 3690626725
         ("" (termination-tcc) nil nil)
         ((/= const-decl "boolean" notequal nil)) nil
         (sum_square_zero_havers termination
           "hutch.sum_square_zero_havers(hutch.k, hutch.p, hutch.n, hutch.known_signs, (number_fields.-)(hutch.i, 1))"
           "nil")))
       (sum_square_zero_havers_TCC3 0
        (sum_square_zero_havers_TCC3-1 nil 3690626725
         ("" (skeep*)
          (("" (replaces -7 +)
            (("" (assert)
              (("" (replaces -5 +)
                (("" (assert)
                  (("" (replaces -2)
                    (("" (assert)
                      (("" (lemma "polynomial_prod_int")
                        (("" (inst?)
                          (("" (flatten)
                            (("" (assert)
                              ((""
                                (case "EXISTS (zz:int): zz = polynomial_prod(p(i), n(i), p(i), n(i))(x1)")
                                (("1" (skeep)
                                  (("1" (replaces -1 :dir rl)
                                    (("1" (lift-if)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst +
                                   "polynomial_prod(p(i), n(i), p(i), n(i))(x1)")
                                  nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((polynomial_prod_int formula-decl nil poly_families nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (sequence type-eq-decl nil sequences nil)
          (polynomial_prod const-decl "real" polynomials reals)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (even_plus_even_is_even application-judgement "even_int" integers
           nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
           real_defs nil)
          (nonneg_rat_max application-judgement
           "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (sum_square_zero_havers subtype "hutch.totalarray" "[nat -> int]")))
       (sum_square_zero_havers_def 0
        (sum_square_zero_havers_def-1 nil 3690639495
         ("" (induct "i")
          (("1" (assert) nil nil)
           ("2" (skeep*)
            (("2" (split)
              (("1" (flatten)
                (("1" (skeep -)
                  (("1" (case "NOT z=0")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (expand "sum_square_zero_havers")
                          (("2" (assert)
                            (("2" (typepred "n")
                              (("2" (inst - "0")
                                (("2" (flatten)
                                  (("2" (assert)
                                    (("2" (assert)
                                      (("2"
                                        (typepred
                                         "array2list[int]
                          (1 + 2 * n(0))
                          (LAMBDA (d_1: nat):
                             polynomial_prod(p(0), n(0), p(0), n(0))(d_1) +
                              IF d_1 < 1 THEN nth(cons[int](0, null[int]), d_1)
                              ELSE 0
                              ENDIF)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "list2array_sound[int]")
                                                (("1"
                                                  (rewrite -1)
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (replaces -3 :dir rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "polynomial_prod")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand "max")
                                                              (("1"
                                                                (expand
                                                                 "sigma")
                                                                (("1"
                                                                  (expand
                                                                   "sigma")
                                                                  (("1"
                                                                    (mult-by
                                                                     1
                                                                     "p(0)(n(0))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 -2))
                                                    (("2"
                                                      (lemma
                                                       "polynomial_prod_int")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (case
                                                               "EXISTS (zz:int): zz = polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                              (("1"
                                                                (skeep -)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 +
                                                                 "polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3" (skosimp*) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (case
                                               "EXISTS (zz:int): zz = polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (inst
                                                   +
                                                   "polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                  (("2"
                                                    (lemma
                                                     "polynomial_prod_int")
                                                    (("2" (inst?) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 3)
                                          (("3" (skosimp*) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (inst + "0")
                  (("2" (expand "sum_square_zero_havers")
                    (("2" (assert)
                      (("2" (splash +)
                        (("1" (replaces -1)
                          (("1" (decompose-equality +)
                            (("1" (lemma "list2array_sound[int]")
                              (("1" (inst?)
                                (("1" (replaces -1)
                                  (("1" (lift-if)
                                    (("1" (ground) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "array2list")
                          (("2" (expand "array2list_it")
                            (("2" (expand "array2list_it")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep*)
                (("3" (expand "sum_square_zero_havers")
                  (("3" (lift-if)
                    (("3" (ground)
                      (("1" (expand "sigma")
                        (("1" (expand "sigma")
                          (("1" (expand "polynomial")
                            (("1" (expand "sigma")
                              (("1" (expand "sigma")
                                (("1" (lemma "list2array_sound[int]")
                                  (("1" (rewrite -1)
                                    (("1" (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "array2list")
                                            (("1"
                                              (expand "array2list_it")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp*) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "sigma")
                          (("2" (expand "sigma")
                            (("2" (expand "sq")
                              (("2" (rewrite "polynomial_prod_def")
                                (("2" (lemma "poly_eq_le_degree")
                                  (("2" (rewrite -1 :dir rl)
                                    (("1" (hide 2)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (lemma "list2array_sound[int]")
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred
                                                     "array2list[int]
                          (1 + 2 * n(0))
                          (LAMBDA (d_1: nat):
                             polynomial_prod(p(0), n(0), p(0), n(0))(d_1) +
                              IF d_1 < 1 THEN nth(cons[int](0, null[int]), d_1)
                              ELSE 0
                              ENDIF)")
                                                    (("1"
                                                      (hide (-1 -2))
                                                      (("1"
                                                        (rewrite -1 :dir rl)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (lemma
                                                           "polynomial_prod_int")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (case
                                                               "EXISTS (zz:int): zz = polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                              (("1"
                                                                (skeep*)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 +
                                                                 "polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (skosimp*)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (lemma
                                                     "polynomial_prod_int")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (case
                                                         "EXISTS (zz:int): zz = polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                        (("1"
                                                          (skeep -)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (skosimp*) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (lemma "polynomial_prod_int")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (case
                                               "EXISTS (zz:int): zz = polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 +
                                                 "polynomial_prod(p(0), n(0), p(0), n(0))(d!1)")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (skosimp*) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skolem 1 "j")
            (("3" (flatten)
              (("3" (assert)
                (("3" (skeep +)
                  (("3" (insteep -)
                    (("3" (split +)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (case "NOT (EXISTS (z: upto(j)): known_signs(z) = 0)")
                            (("1" (replace 1)
                              (("1" (case "NOT known_signs(1+j)=0")
                                (("1" (assert)
                                  (("1" (skeep -)
                                    (("1" (inst + "z")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (hide -6)
                                    (("2" (expand "sum_square_zero_havers" +)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (replace -4)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (inst - "1+j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "array2list[int]
                  (1 + 2 * n(1 + j))
                  (LAMBDA (d_1: nat):
                     polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))
                                    (d_1)
                      +
                      IF d_1 < 1 THEN nth(cons[int](0, null[int]), d_1)
                      ELSE 0
                      ENDIF)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (lemma
                                                                     "polynomial_prod_int")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (case
                                                                         "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (replaces
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "list2array_sound[int]")
                                                            (("2"
                                                              (rewrite -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "array2list[int]
                  (1 + 2 * n(1 + j))
                  (LAMBDA (d_1: nat):
                     polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))
                                    (d_1)
                      +
                      IF d_1 < 1 THEN nth(cons[int](0, null[int]), d_1)
                      ELSE 0
                      ENDIF)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       -3
                                                                       +
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -2
                                                                          -3))
                                                                        (("1"
                                                                          (expand
                                                                           "polynomial_prod")
                                                                          (("1"
                                                                            (expand
                                                                             "max")
                                                                            (("1"
                                                                              (expand
                                                                               "sigma")
                                                                              (("1"
                                                                                (expand
                                                                                 "sigma")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sq_gt_0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sq"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (lemma
                                                                         "polynomial_prod_int")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (case
                                                                             "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (case
                                                                     "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                                        (("2"
                                                                          (lemma
                                                                           "polynomial_prod_int")
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide 2)
                                                                (("3"
                                                                  (skosimp*)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2" (flatten)
                                (("2" (hide -6)
                                  (("2"
                                    (name "sszh"
                                          "sum_square_zero_havers(k, p, n, known_signs, j)")
                                    (("2" (expand "sum_square_zero_havers" +)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (ground)
                                              (("1"
                                                (typepred
                                                 "array2list[int]
                  (1 + sszh`sqdeg)
                  (LAMBDA (d_1: nat):
                     IF d_1 < length(sszh`sqlist)
                       THEN nth(sszh`sqlist, d_1)
                     ELSE 0
                     ENDIF)")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "list2array_sound")
                                                (("2"
                                                  (typepred
                                                   "array2list[int]
                  (1 + sszh`sqdeg)
                  (LAMBDA (d_1: nat):
                     IF d_1 < length(sszh`sqlist)
                       THEN nth(sszh`sqlist, d_1)
                     ELSE 0
                     ENDIF)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite -3 :dir rl)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide (-1 -2 -3))
                                                          (("2"
                                                            (rewrite
                                                             "list2array_sound")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (rewrite "list2array_sound")
                                                (("1"
                                                  (typepred
                                                   "array2list[int]
              (1 + max(2 * n(1 + j), sszh`sqdeg))
              (LAMBDA (d_1: nat):
                 polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))
                                (d_1)
                  +
                  IF d_1 < length(sszh`sqlist) THEN nth(sszh`sqlist, d_1)
                  ELSE 0
                  ENDIF)")
                                                  (("1"
                                                    (rewrite -3 :dir rl)
                                                    (("1"
                                                      (hide (-1 -2 -3))
                                                      (("1"
                                                        (expand "max" 1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "list2array_sound")
                                                                    (("1"
                                                                      (expand
                                                                       "polynomial_prod"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "sigma"
                                                                           +)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "list2array_sound[int]")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "NOT 2*n(1+j)=sszh`sqdeg")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "polynomial_prod"
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             +)
                                                                            (("2"
                                                                              (expand
                                                                               "sigma")
                                                                              (("2"
                                                                                (expand
                                                                                 "sigma")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "sq(p(1+j)(n(1+j)))")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sq"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "polynomial_prod")
                                                                    (("3"
                                                                      (expand
                                                                       "max"
                                                                       +)
                                                                      (("3"
                                                                        (expand
                                                                         "sigma")
                                                                        (("3"
                                                                          (expand
                                                                           "sigma")
                                                                          (("3"
                                                                            (typepred
                                                                             "sq(p(1+j)(n(1+j)))")
                                                                            (("3"
                                                                              (lemma
                                                                               "sq_eq_0")
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (expand
                                                                                   "sq")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "n")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "1+j")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (case
                                                         "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "polynomial_prod_int")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (case
                                                       "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                      (("1"
                                                        (skeep -)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                          (("2"
                                                            (lemma
                                                             "polynomial_prod_int")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (case "EXISTS (z:upto(j)): known_signs(z)=0")
                          (("1" (hide-all-but (-1 1))
                            (("1" (skeep) (("1" (inst + "z") nil nil)) nil))
                            nil)
                           ("2" (replace 1)
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (hide -4)
                                  (("2"
                                    (name "sszh"
                                          "sum_square_zero_havers(k, p, n, known_signs, j)")
                                    (("2" (replace -1)
                                      (("2"
                                        (expand "sum_square_zero_havers" +)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (inst-cp 2 "1+j")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (flatten)
                          (("3" (hide (-1 -2))
                            (("3" (skeep)
                              (("3" (insteep)
                                (("3" (expand "sigma" +)
                                  (("3"
                                    (case "NOT sigma(0, j,
             LAMBDA (j_2: nat):
               IF j_2 > j OR known_signs(j_2) /= 0 THEN 0
               ELSE sq(polynomial(p(j_2), n(j_2))(x))
               ENDIF) =
        sigma(0, j,
              LAMBDA (j_2: nat):
                IF j_2 > 1 + j OR known_signs(j_2) /= 0 THEN 0
                ELSE sq(polynomial(p(j_2), n(j_2))(x))
                ENDIF)")
                                    (("1" (hide 2)
                                      (("1"
                                        (hide -1)
                                        (("1" (rewrite "sigma_eq") nil nil))
                                        nil))
                                      nil)
                                     ("2" (replaces -1 :dir rl)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (name
                                           "A"
                                           "sum_square_zero_havers(k,
                                             p,
                                             n,
                                             known_signs,
                                             1 + j)")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (name
                                               "sszh"
                                               "sum_square_zero_havers(k, p, n, known_signs, j)")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (expand
                                                   "sum_square_zero_havers"
                                                   -2)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "poly_eq_le_degree"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (hide 3)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (rewrite
                                                                       "list2array_sound")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "array2list[int]
              (1 + sszh`sqdeg)
              (LAMBDA (d_1: nat):
                 IF d_1 < length(sszh`sqlist) THEN nth(sszh`sqlist, d_1)
                 ELSE 0
                 ENDIF)")
                                                                          (("1"
                                                                            (rewrite
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "list2array_sound")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "sq"
                                                                   +)
                                                                  (("2"
                                                                    (rewrite
                                                                     "polynomial_prod_def")
                                                                    (("2"
                                                                      (lemma
                                                                       "sum_polynomial")
                                                                      (("2"
                                                                        (case
                                                                         "NOT FORALL (a, b: sequence[real], m, n: nat, x:real):
        ((FORALL (i: posnat): a(n + i) = 0) AND
          (FORALL (i: posnat): b(m + i) = 0))
         IMPLIES
         polynomial(a, n)(x) + polynomial(b, m)(x) = polynomial(a + b, max(n, m))(x)")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst?
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -3)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             -1
                                                                             +)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "max(sszh`sqdeg, 2 * n(1 + j)) = max(2 * n(1 + j), sszh`sqdeg)")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "poly_eq_le_degree")
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "list2array_sound")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "array2list[int]
              (1 + max(2 * n(1 + j), sszh`sqdeg))
              (LAMBDA (d_1: nat):
                 polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))
                                (d_1)
                  +
                  IF d_1 < length(sszh`sqlist) THEN nth(sszh`sqlist, d_1)
                  ELSE 0
                  ENDIF)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -3
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     (-1
                                                                                                      -2
                                                                                                      -3))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "list2array_sound")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -4)
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "polynomial_prod_int")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               (-4
                                                                                                2))
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "polynomial_prod_int")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "polynomial_prod_int")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "EXISTS (zz:int): zz = polynomial_prod(p(1+j), n(1+j), p(1+j), n(1+j))(d!1)")
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "polynomial_prod(p(1 + j), n(1 + j), p(1 + j), n(1 + j))(d!1)")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "list2array_sound")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         -)
                                                                                        (("2"
                                                                                          (hide
                                                                                           (-1
                                                                                            -2
                                                                                            -3
                                                                                            -4
                                                                                            -5
                                                                                            -8))
                                                                                          (("2"
                                                                                            (case
                                                                                             "(EXISTS (z: upto(j)): known_signs(z) = 0)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -10)
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (expand
                                                                                   "polynomial_prod"
                                                                                   +)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "max"
                                                                                     +)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "sigma"
                                                                                       +)
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((sigma_eq formula-decl nil sigma reals)
          (real_times_real_is_real application-judgement "real" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (+ const-decl "[T -> real]" real_fun_ops reals)
          (d!1 skolem-const-decl "nat" hutch nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (sum_polynomial formula-decl nil polynomials reals)
          (z skolem-const-decl "upto(1 + j)" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (sq_gt_0 formula-decl nil sq reals)
          (d!1 skolem-const-decl "nat" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (max_0_nnreal formula-decl nil min_max reals)
          (d!1 skolem-const-decl "nat" hutch nil)
          (sq_eq_0 formula-decl nil sq reals)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (TRUE const-decl "bool" booleans nil)
          (polynomial_prod_def formula-decl nil polynomials reals)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (d!1 skolem-const-decl "nat" hutch nil)
          (poly_eq_le_degree formula-decl nil polynomials reals)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (bijective? const-decl "bool" functions nil)
          (id const-decl "(bijective?[T, T])" identity nil)
          (array2list_it def-decl
                         "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                         array2list structures)
          (max_0_npreal formula-decl nil min_max reals)
          (int_max application-judgement "{k: int | i <= k AND j <= k}"
           real_defs nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (max_nnreal_0 formula-decl nil min_max reals)
          (length_singleton formula-decl nil more_list_props structures)
          (listn type-eq-decl nil listn structures)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (polynomial_prod const-decl "real" polynomials reals)
          (odd_minus_odd_is_even application-judgement "even_int" integers
           nil)
          (list2array_sound formula-decl nil array2list structures)
          (d!1 skolem-const-decl "nat" hutch nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (polynomial_prod_int formula-decl nil poly_families nil)
          (both_sides_times1 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (d!1 skolem-const-decl "nat" hutch nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (nonneg_rat_max application-judgement
           "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
          (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
           real_defs nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (sum_square_zero_havers def-decl
            "[# sqlist: list[int], sqdeg: nat #]" hutch nil)
          (list2array def-decl "T" array2list structures)
          (sq const-decl "nonneg_real" sq reals)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list type-decl nil list_adt nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (pred type-eq-decl nil defined_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         shostak))
       (decidable_interval_sq_TCC1 0
        (decidable_interval_sq_TCC1-1 nil 3690626725
         ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (sound_signs? const-decl "bool" hutch nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (/= const-decl "boolean" notequal nil))
         nil
         (decidable_interval_sq subtype "hutch.n(hutch.i)"
           "{d: integers.posnat | hutch.p(hutch.i)(d) /= 0}")))
       (decidable_interval_sq_TCC2 0
        (decidable_interval_sq_TCC2-1 nil 3690626725
         ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (sound_signs? const-decl "bool" hutch nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (decidable_interval_sq subtype "hutch.i"
           "below[length[list[list[int]]](slseq)]")))
       (decidable_interval_sq_TCC3 0
        (decidable_interval_sq_TCC3-2 nil 3690632178
         ("" (skeep*)
          (("" (typepred "slseq")
            (("" (hide -1)
              (("" (expand "Eq_computed_remainder?")
                (("" (expand "Eq_computed_remainder_seq?")
                  (("" (replaces -1)
                    ((""
                      (typepred "array2list[list[list[int]]]
                 (1 + k)
                 (LAMBDA (j: nat):
                    IF j <= k
                      THEN remainder_seq(LAMBDA
                                         (i: nat):
                                         IF i <= n(j)
                                         THEN p(j)(i)
                                         ELSE 0
                                         ENDIF,
                                         n(j),
                                         poly_deriv
                                         (LAMBDA
                                          (i: nat):
                                          IF i <= n(j)
                                          THEN p(j)(i)
                                          ELSE 0
                                          ENDIF),
                                         n(j) - 1)
                    ELSE cons[list[int]]
                             (cons[int](0, null[int]), null[list[int]])
                    ENDIF)")
                      (("1" (hide (-1 -2))
                        (("1" (inst - "i") (("1" (assert) nil nil)) nil)) nil)
                       ("2" (hide 2)
                        (("2" (skeep*)
                          (("2" (expand "poly_deriv")
                            (("2" (assert)
                              (("2" (typepred "n")
                                (("2" (inst?)
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (skeep*)
                          (("3" (expand "poly_deriv") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (skeep*)
                          (("4" (typepred "n")
                            (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (k skolem-const-decl "nat" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (length def-decl "nat" list_props nil)
          (listn type-eq-decl nil listn structures)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (sequence type-eq-decl nil sequences nil)
          (poly_deriv const-decl "real" polynomials reals)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval_sq subtype
           "list_props[list[list[int]]].nth(hutch.slseq, hutch.i)"
           "(compute_sturm.Eq_computed_remainder?(hutch.p(hutch.i), hutch.n(hutch.i)))"))
        (decidable_interval_sq_TCC3-1 nil 3690626725
         ("" (subtype-tcc) nil nil) nil nil
         (decidable_interval_sq subtype
           "list_props[list[list[int]]].nth(hutch.slseq, hutch.i)"
           "(compute_sturm.Eq_computed_remainder?(hutch.p(hutch.i), hutch.n(hutch.i)))")))
       (decidable_interval_sq_TCC4 0
        (decidable_interval_sq_TCC4-1 nil 3690626725
         ("" (subtype-tcc) nil nil)
         ((roots_in_int const-decl "nat" hutch nil)) nil
         (decidable_interval_sq subtype "hutch.k"
           "naturalnumbers.upto(hutch.k)")))
       (decidable_interval_sq_TCC5 0
        (decidable_interval_sq_TCC5-2 nil 3690641161
         ("" (skeep*)
          (("" (lemma "sum_square_zero_havers_def")
            (("" (insteep :but "i")
              (("" (inst - "k")
                (("" (assert)
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (hide -2)
                        (("" (replace -4 :dir rl)
                          (("" (replace -5)
                            (("" (assert)
                              (("" (split -)
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (lemma "list2array_sound[int]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "i") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((sum_square_zero_havers_def formula-decl nil hutch nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (list2array_sound formula-decl nil array2list structures)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (sound_signs? const-decl "bool" hutch nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval_sq subtype "hutch.sszh`sqdeg"
           "{n | IF reals.<=(remainder_sequence.n, hutch.sszh`sqdeg) THEN hutch.spoly(remainder_sequence.n) ELSE 0 ENDIF /= 0}"))
        (decidable_interval_sq_TCC5-1 nil 3690626725
         ("" (subtype-tcc) nil nil) nil nil
         (decidable_interval_sq subtype "hutch.sszh`sqdeg"
           "{n | IF reals.<=(remainder_sequence.n, hutch.sszh`sqdeg) THEN hutch.spoly(remainder_sequence.n) ELSE 0 ENDIF /= 0}")))
       (decidable_interval_sq_TCC6 0
        (decidable_interval_sq_TCC6-1 nil 3690626725
         ("" (skeep*) (("" (expand "poly_deriv") (("" (propax) nil nil)) nil))
          nil)
         ((int_plus_int_is_int application-judgement "int" integers nil)
          (poly_deriv const-decl "real" polynomials reals)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval_sq subtype
           "polynomials.poly_deriv(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.sszh`sqdeg) THEN hutch.spoly(i) ELSE 0 ENDIF)"
           "[nat -> int]")))
       (decidable_interval_sq_TCC7 0
        (decidable_interval_sq_TCC7-2 nil 3690641233
         ("" (skeep*)
          (("" (lemma "sum_square_zero_havers_def")
            (("" (insteep :but "i")
              (("" (inst - "k")
                (("" (assert)
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (hide -2)
                        (("" (replace -4 :dir rl)
                          (("" (replace -5)
                            (("" (split -)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (expand "poly_deriv")
                                    (("1" (lemma "list2array_sound[int]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (mult-by -3 "sszh`sqdeg")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst + "i") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((sum_square_zero_havers_def formula-decl nil hutch nil)
          (poly_deriv const-decl "real" polynomials reals)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (int_times_int_is_int application-judgement "int" integers nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (length def-decl "nat" list_props nil)
          (< const-decl "bool" reals nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (both_sides_times_pos_gt1 formula-decl nil real_props nil)
          (list2array_sound formula-decl nil array2list structures)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (sound_signs? const-decl "bool" hutch nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval_sq subtype
           "(number_fields.-)(hutch.sszh`sqdeg, 1)"
           "{m | polynomials.poly_deriv(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.sszh`sqdeg) THEN hutch.spoly(i) ELSE 0 ENDIF)(remainder_sequence.m) /= 0}"))
        (decidable_interval_sq_TCC7-1 nil 3690626725
         ("" (subtype-tcc) nil nil)
         ((poly_deriv const-decl "real" polynomials reals)) nil
         (decidable_interval_sq subtype
           "(number_fields.-)(hutch.sszh`sqdeg, 1)"
           "{m | polynomials.poly_deriv(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, hutch.sszh`sqdeg) THEN hutch.spoly(i) ELSE 0 ENDIF)(remainder_sequence.m) /= 0}")))
       (decidable_interval_sq_TCC8 0
        (decidable_interval_sq_TCC8-2 nil 3690634647
         ("" (skeep*)
          (("" (lemma "sum_square_zero_havers_def")
            (("" (insteep :but "i")
              (("" (inst - "k")
                (("" (assert)
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (hide -2)
                        (("" (replace -4 :dir rl)
                          (("" (replace -5)
                            (("" (split -)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (expand "poly_deriv")
                                    (("1" (lemma "list2array_sound[int]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst + "i") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((sum_square_zero_havers_def formula-decl nil hutch nil)
          (poly_deriv const-decl "real" polynomials reals)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (list2array_sound formula-decl nil array2list structures)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (sound_signs? const-decl "bool" hutch nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval_sq subtype "hutch.sszh`sqdeg"
           "{d: integers.posnat | hutch.spoly(d) /= 0}"))
        (decidable_interval_sq_TCC8-1 nil 3690626725
         ("" (subtype-tcc) nil nil) nil nil
         (decidable_interval_sq subtype "hutch.sszh`sqdeg"
           "{d: integers.posnat | hutch.spoly(d) /= 0}")))
       (decidable_interval_sq_TCC9 0
        (decidable_interval_sq_TCC9-3 nil 3690641287
         ("" (skeep*)
          (("" (typepred "slseq")
            (("" (hide -1)
              (("" (expand "Eq_computed_remainder?") (("" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (decidable_interval_sq subtype "hutch.sl"
           "(compute_sturm.Eq_computed_remainder?(hutch.spoly, hutch.sszh`sqdeg))"))
        (decidable_interval_sq_TCC9-2 nil 3690638514
         ("" (skeep*)
          (("" (lemma "sum_square_zero_havers_def")
            (("" (insteep :but "i")
              (("" (inst - "k")
                (("" (assert)
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (replace -4 :dir rl)
                        (("" (replace -5)
                          (("" (split -)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (expand "poly_deriv")
                                  (("1" (lemma "list2array_sound[int]")
                                    (("1" (inst?)
                                      (("1"
                                        (replaces -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "i") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((list2array_sound formula-decl nil array2list structures)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (list type-decl nil list_adt nil)
          (poly_deriv const-decl "real" polynomials reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (gt_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (decidable_interval_sq subtype "hutch.sl"
           "(compute_sturm.Eq_computed_remainder?(hutch.spoly, hutch.sszh`sqdeg))"))
        (decidable_interval_sq_TCC9-1 nil 3690626725
         ("" (subtype-tcc) nil nil) nil nil
         (decidable_interval_sq subtype "hutch.sl"
           "(compute_sturm.Eq_computed_remainder?(hutch.spoly, hutch.sszh`sqdeg))")))
       (decidable_interval_def_TCC1 0
        (decidable_interval_def_TCC1-1 nil 3689684029
         ("" (skeep*)
          (("" (typepred "psql")
            (("" (case "NOT nsq>=1")
              (("1" (hide 2)
                (("1" (replaces -6 +)
                  (("1" (replaces -2)
                    (("1" (hide 2)
                      (("1" (expand "sigma")
                        (("1" (expand "*")
                          (("1" (assert)
                            (("1" (lemma "sigma_ge_0")
                              (("1" (inst?)
                                (("1" (split -)
                                  (("1" (assert)
                                    (("1" (case "n(k)>=1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "n")
                                        (("2"
                                          (inst - "k")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "n")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst - "n!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (replace -8 +)
                  (("2" (lemma "list2array_sound[int]")
                    (("2" (inst?)
                      (("2" (replaces -1)
                        (("2" (case "nth(psql,nsq)/=0")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (hide 2)
                              (("2" (decompose-equality -4)
                                (("2" (inst - "nsq")
                                  (("2" (assert)
                                    (("2" (replaces -1 :dir rl)
                                      (("2"
                                        (typepred
                                         "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "i!1")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (subrange type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (<= const-decl "bool" reals nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (list2array_sound formula-decl nil array2list structures)
          (i!1 skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (sigma_ge_0 formula-decl nil sigma reals)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (decidable_interval_def subtype "hutch.nsq"
          "{n | hutch.psq(compute_sturm.n) /= 0}")))
       (decidable_interval_def_TCC2 0
        (decidable_interval_def_TCC2-1 nil 3690714439
         ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
           real_defs nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (sequence type-eq-decl nil sequences nil)
          (subrange type-eq-decl nil integers nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (every adt-def-decl "boolean" list_adt nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sound_signs? const-decl "bool" hutch nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (real_times_real_is_real application-judgement "real" reals nil))
         nil
         (decidable_interval_def subtype "hutch.sqsl"
          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))")))
       (decidable_interval_def 0
        (decidable_interval_def-2 nil 3690032365
         ("" (skeep)
          (("" (name "psql" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
            (("" (name "nnsq" "length(psql)-1")
              (("" (name "psqf" "list2array[int](0)(psql)")
                (("" (assert)
                  (("" (skeep)
                    (("" (copy -5)
                      (("" (hide -6)
                        (("" (replace -4)
                          (("" (replace -3)
                            (("" (replace -2)
                              (("" (typepred "sqsl")
                                (("" (hide -1)
                                  (("" (typepred "slseq")
                                    (("" (hide -1)
                                      ((""
                                        (copy -3)
                                        ((""
                                          (hide -4)
                                          ((""
                                            (case
                                             "FORALL (i,j:upto(k),y,z:real): low<=y AND y<=high AND low<=z AND z<=high and polynomial(p(i),n(i))(y)=0 and polynomial(p(j),n(j))(z)=0 IMPLIES y=z")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (skeep*)
                                                (("1"
                                                  (label "hyp" -1)
                                                  (("1"
                                                    (hide "hyp")
                                                    (("1"
                                                      (label "iz" 3)
                                                      (("1"
                                                        (expand
                                                         "decidable_interval")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             "polynomial(p(i!2),n(i!2))(x)=0")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (expand
                                                                 "sign_ext"
                                                                 3
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "sign_ext"
                                                                   3)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "known_signs(i!2)=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "sound_signs?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!2")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "x")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (hide 4)
                                                                (("2"
                                                                  (case
                                                                   "EXISTS (y:real,i:upto(k)): low<=y AND y<=high AND polynomial(p(i),n(i))(y)=0")
                                                                  (("1"
                                                                    (skeep -)
                                                                    (("1"
                                                                      (case
                                                                       "x>y")
                                                                      (("1"
                                                                        (expand
                                                                         "sign_ext"
                                                                         3
                                                                         2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sign_ext"
                                                                                     1)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "poly_intermediate_value_dec")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               _
                                                                                               "0"
                                                                                               _
                                                                                               "x"
                                                                                               "high")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skolem
                                                                                                       -
                                                                                                       "z")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (reveal
                                                                                                           "hyp")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i!1"
                                                                                                             "i!3"
                                                                                                             "z"
                                                                                                             "y")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     +)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sign_ext"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "poly_intermediate_value_inc")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   "0"
                                                                                                   _
                                                                                                   "x"
                                                                                                   "high")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         -
                                                                                                         "z")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             "hyp")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "i!1"
                                                                                                               "i!3"
                                                                                                               "z"
                                                                                                               "y")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       "hyp")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i!1"
                                                                                                         "i!3"
                                                                                                         "x"
                                                                                                         "y")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         "iz")
                                                                                        (("2"
                                                                                          (reveal
                                                                                           "hyp")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1"
                                                                                             "i!3"
                                                                                             "high"
                                                                                             "y")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "x<y")
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext"
                                                                             2
                                                                             2)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sign_ext"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "poly_intermediate_value_inc")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   "0"
                                                                                                   _
                                                                                                   "low"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "z")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (reveal
                                                                                                               "hyp")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "i!3"
                                                                                                                 "z"
                                                                                                                 "y")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sign_ext"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "poly_intermediate_value_dec")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       _
                                                                                                       "0"
                                                                                                       _
                                                                                                       "low"
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (skolem
                                                                                                             -
                                                                                                             "z")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 "hyp")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i"
                                                                                                                   "i!3"
                                                                                                                   "z"
                                                                                                                   "y")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           "hyp")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i"
                                                                                                             "i!3"
                                                                                                             "x"
                                                                                                             "y")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             "hyp")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "i!3"
                                                                                               "low"
                                                                                               "y")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "NOT x=y")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (1
                                                                              2))
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (reveal
                                                                                 "iz")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "sound_signs?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "i!2")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -7)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "sign_ext"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sign_ext"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     (-2
                                                                                                                      -3
                                                                                                                      -4
                                                                                                                      -5
                                                                                                                      -6))
                                                                                                                    (("2"
                                                                                                                      (skolem
                                                                                                                       +
                                                                                                                       "w")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "w>y")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "poly_intermediate_value_inc")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               _
                                                                                                                               "0"
                                                                                                                               _
                                                                                                                               "y"
                                                                                                                               "w")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (skolem
                                                                                                                                     -
                                                                                                                                     "zz")
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (reveal
                                                                                                                                         "hyp")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "i!2"
                                                                                                                                           "i!3"
                                                                                                                                           "zz"
                                                                                                                                           "y")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "poly_intermediate_value_dec")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               _
                                                                                                                               "0"
                                                                                                                               _
                                                                                                                               "w"
                                                                                                                               "y")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (skolem
                                                                                                                                     -
                                                                                                                                     "zz")
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (reveal
                                                                                                                                         "hyp")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "i!2"
                                                                                                                                           "i!3"
                                                                                                                                           "zz"
                                                                                                                                           "y")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sign_ext"
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   +)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       (-2
                                                                                                                        -4
                                                                                                                        -5))
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "y")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           (-2
                                                                                                                            -3
                                                                                                                            -4))
                                                                                                                          (("2"
                                                                                                                            (skolem
                                                                                                                             -
                                                                                                                             "w")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "w = y")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (reveal
                                                                                                                                   "hyp")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "i!2"
                                                                                                                                     "i!3"
                                                                                                                                     "w"
                                                                                                                                     "y")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide 3)
                                                                      (("2"
                                                                        (expand
                                                                         "sign_ext"
                                                                         +)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "poly_intermediate_value_dec")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   "0"
                                                                                                   _
                                                                                                   "low"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skolem
                                                                                                         -
                                                                                                         "zz")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "zz"
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "poly_intermediate_value_inc")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         _
                                                                                                         "0"
                                                                                                         _
                                                                                                         "low"
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               -
                                                                                                               "zz")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 +
                                                                                                                 "zz"
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "low"
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x"
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "decidable_interval")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (split -)
                                                            (("1"
                                                              (expand
                                                               "roots_in_int")
                                                              (("1"
                                                                (lemma
                                                                 "number_roots_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "bijective?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "surjective?")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -
                                                                                   "y")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "z")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "contains?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "psql")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "z")
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -5
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nnsq"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "product(0, k, LAMBDA (j): polynomial(p(j), n(j))(z) ^ 1) = 0")
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "poly_eq_le_degree")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "psqf"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "list2array_sound[int]")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "sigma_ge_0")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "product_split[nat]")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "product"
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         +
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "contains?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "psql")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "y")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -5
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "nnsq")
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "product(0, k, LAMBDA (j): polynomial(p(j), n(j))(y) ^ 1) = 0")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "poly_eq_le_degree")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "psqf"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -6
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "list2array_sound[int]")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -4
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "sigma_ge_0")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "product_split[nat]")
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "product"
                                                                                                                 +
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "^"
                                                                                                                   +
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "expt")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "expt")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "psqf"
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "list2array_sound[int]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "psql")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -3)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "nnsq")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "nnsq")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "n")
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "sigma_ge_0")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "sigma_ge_0")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "psql")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sigma_ge_0")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "psql")
                                                                    (("2"
                                                                      (lemma
                                                                       "sigma_ge_0")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "sound_signs?"
                                                                 -1)
                                                                (("2"
                                                                  (inst + "i")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "y")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "decidable_interval_sq"
                                                     :assert?
                                                     none)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (skoletin -)
                                                          (("1"
                                                            (skoletin -)
                                                            (("1"
                                                              (name
                                                               "sl"
                                                               "remainder_seq(LAMBDA (i: nat):
                                         IF i <= sszh`sqdeg THEN spoly(i) ELSE 0 ENDIF,
                                       sszh`sqdeg,
                                       poly_deriv(LAMBDA
                                                  (i: nat):
                                                  IF i <= sszh`sqdeg
                                                  THEN spoly(i)
                                                  ELSE 0
                                                  ENDIF),
                                       sszh`sqdeg - 1)")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (label
                                                                     "igz"
                                                                     -6)
                                                                    (("1"
                                                                      (expand
                                                                       "roots_in_int")
                                                                      (("1"
                                                                        (lemma
                                                                         "number_roots_interval_def")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "bijective?")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "surjective?")
                                                                                        (("1"
                                                                                          (case
                                                                                           "FORALL (jj:upto(k),yy:real): low<=yy AND yy<=high AND polynomial(p(jj), n(jj))(yy) = 0 IMPLIES polynomial(spoly, sszh`sqdeg)(yy) = 0")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -
                                                                                             "i"
                                                                                             "y")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "z")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "z")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "y")
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "contains?")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "contains?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep*)
                                                                                            (("2"
                                                                                              (case
                                                                                               "known_signs(jj)=0")
                                                                                              (("1"
                                                                                                (name
                                                                                                 "qq"
                                                                                                 "bij(0)")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "qq")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "polynomial(p(jj),n(jj))(qq)=0")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "contains?"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (copy
                                                                                                         "igz")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           "igz")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "jj")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "number_roots_interval"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "roots_closed_int_def")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -)
                                                                                                                          (("1"
                                                                                                                            (skolem
                                                                                                                             -
                                                                                                                             "bb")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "bijective?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "surjective?")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst-cp
                                                                                                                                     -
                                                                                                                                     "qq")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "yy")
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "n")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "jj")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       (-1
                                                                                                        -9
                                                                                                        "igz"))
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "sum_square_zero_havers_def")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -12
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -10)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "qq")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "list2array_sound[int]")
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT list2array[int](0)(sszh`sqlist) = spoly")
                                                                                                                            (("1"
                                                                                                                              (decompose-equality
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -11)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "FORALL (F:[nat->real],zzq:nat): (FORALL (rr:nat): F(rr)>=0) IMPLIES (sigma(0,zzq,F)>=0 AND (sigma(0,zzq,F)=0 IMPLIES FORALL (bbq:nat): bbq<=zzq IMPLIES (sigma(0,bbq,F)=0 AND F(bbq)=0)))")
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "jj")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_eq_0")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (skolem
                                                                                                                                             1
                                                                                                                                             "rr")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (induct
                                                                                                                                         "zzq")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skolem
                                                                                                                                           1
                                                                                                                                           "m")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (insteep)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (splash
                                                                                                                                                         +)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "sigma"
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -
                                                                                                                                                                 "1+m")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (skeep*)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "NOT bbq=1+m")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "bbq")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "sigma"
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "sigma"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "1+m")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 (-5
                                                                                                  -6
                                                                                                  -7
                                                                                                  "igz"))
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "sound_signs?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "yy")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sum_square_zero_havers_def")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -3
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "list2array_sound[int]")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        +))
                                                                                                      (("2"
                                                                                                        (skeep*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "sound_signs?")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "i")
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "y")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (hide
                                                                                     -)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "sum_square_zero_havers_def")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (case
                                                                               "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  +))
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skeep*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sound_signs?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               -2)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "i")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "y")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 +))
                                                            (("2"
                                                              (skeep*)
                                                              (("2"
                                                                (expand
                                                                 "sound_signs?")
                                                                (("2"
                                                                  (inst - "i")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "i")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         +
                                                                         "y")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (boolean nonempty-type-decl nil booleans nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (list2array def-decl "T" array2list structures)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (TRUE const-decl "bool" booleans nil)
          (decidable_interval const-decl "bool" hutch nil)
          (sign_ext const-decl
                    "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
                    sign reals)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
           real_defs nil)
          (sound_signs? const-decl "bool" hutch nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (poly_intermediate_value_inc formula-decl nil polynomials reals)
          (poly_intermediate_value_dec formula-decl nil polynomials reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (number_roots_interval_def formula-decl nil compute_sturm Sturm)
          (bijective? const-decl "bool" functions nil)
          (surjective? const-decl "bool" functions nil)
          (z skolem-const-decl "real" hutch nil)
          (product_split formula-decl nil product reals)
          (real_times_real_is_real application-judgement "real" reals nil)
          (expt def-decl "real" exponentiation nil)
          (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
          (poly_eq_le_degree formula-decl nil polynomials reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (sigma_ge_0 formula-decl nil sigma reals)
          (list2array_sound formula-decl nil array2list structures)
          (psql skolem-const-decl "{ll |
   length(ll) - 1 = sigma(0, k, n * LAMBDA i: 1) AND
    prod_polynomials(p, n, LAMBDA i: 1, k) =
     (LAMBDA (i): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (psqf skolem-const-decl "[nat -> int]" hutch nil)
          (y skolem-const-decl "real" hutch nil)
          (high skolem-const-decl "real" hutch nil)
          (low skolem-const-decl "real" hutch nil)
          (contains? const-decl "bool" RealInt reals)
          (i!1 skolem-const-decl "nat" hutch nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (RealInt type-eq-decl nil RealInt reals)
          (nnsq skolem-const-decl "int" hutch nil)
          (roots_in_int const-decl "nat" hutch nil)
          (decidable_interval_sq const-decl "bool" hutch nil)
          (below type-eq-decl nil naturalnumbers nil)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (spoly skolem-const-decl "[nat -> int]" hutch nil)
          (sszh skolem-const-decl "[# sqdeg: nat, sqlist: list[int] #]" hutch
           nil)
          (qq skolem-const-decl "({z: real |
    contains?((# lb := low,
                 ub := high,
                 bounded_below := TRUE,
                 bounded_above := TRUE,
                 closed_below := TRUE,
                 closed_above := TRUE #))
             (z)
     AND polynomial(spoly, sszh`sqdeg)(z) = 0})" hutch nil)
          (roots_closed_int_def formula-decl nil compute_sturm Sturm)
          (sum_square_zero_havers_def formula-decl nil hutch nil)
          (sq_eq_0 formula-decl nil sq reals)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (sq const-decl "nonneg_real" sq reals)
          (pred type-eq-decl nil defined_types nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (y skolem-const-decl "real" hutch nil)
          (z skolem-const-decl "real" hutch nil)
          (IFF const-decl "[bool, bool -> bool]" booleans nil)
          (id const-decl "(bijective?[T, T])" identity nil)
          (sum_square_zero_havers def-decl
            "[# sqlist: list[int], sqdeg: nat #]" hutch nil)
          (poly_deriv const-decl "real" polynomials reals)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil))
         nil)
        (decidable_interval_def-1 nil 3689684933
         ("" (skeep)
          (("" (name "psql" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
            (("" (name "nnsq" "length(psql)-1")
              (("" (name "psqf" "list2array[int](0)(psql)")
                (("" (assert)
                  (("" (skeep*)
                    (("" (replace -3)
                      (("" (replace -2)
                        (("" (replace -1)
                          (("" (typepred "sqsl")
                            (("" (hide -1)
                              (("" (typepred "slseq")
                                (("" (hide -1)
                                  (("" (replace -5)
                                    (("" (replace -4)
                                      ((""
                                        (replace -3)
                                        ((""
                                          (case
                                           "FORALL (i,j:upto(k),y,z:real): low<=y AND y<=high AND low<=z AND z<=high and polynomial(p(i),n(i))(y)=0 and polynomial(p(j),n(j))(z)=0 IMPLIES y=z")
                                          (("1"
                                            (label "hyp" -1)
                                            (("1"
                                              (hide "hyp")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (skeep*)
                                                    (("1"
                                                      (label "iz" 3)
                                                      (("1"
                                                        (expand
                                                         "decidable_interval")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "polynomial(p(i!2),n(i!2))(x)=0")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (expand
                                                                 "sign_ext"
                                                                 3
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "sign_ext"
                                                                   3)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "known_signs(i!2)=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "sound_signs?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!2")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "x")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (hide 4)
                                                                (("2"
                                                                  (case
                                                                   "EXISTS (y:real,i:below(k)): low<=y AND y<=high AND polynomial(p(i),n(i))(y)=0")
                                                                  (("1"
                                                                    (skeep -)
                                                                    (("1"
                                                                      (case
                                                                       "x>y")
                                                                      (("1"
                                                                        (expand
                                                                         "sign_ext"
                                                                         3
                                                                         2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sign_ext"
                                                                                     1)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "poly_intermediate_value_dec")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               _
                                                                                               "0"
                                                                                               _
                                                                                               "x"
                                                                                               "high")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skolem
                                                                                                       -
                                                                                                       "z")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (reveal
                                                                                                           "hyp")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i!1"
                                                                                                             "i!3"
                                                                                                             "z"
                                                                                                             "y")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     +)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sign_ext"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "poly_intermediate_value_inc")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   "0"
                                                                                                   _
                                                                                                   "x"
                                                                                                   "high")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         -
                                                                                                         "z")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             "hyp")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "i!1"
                                                                                                               "i!3"
                                                                                                               "z"
                                                                                                               "y")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       "hyp")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i!1"
                                                                                                         "i!3"
                                                                                                         "x"
                                                                                                         "y")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         "iz")
                                                                                        (("2"
                                                                                          (reveal
                                                                                           "hyp")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1"
                                                                                             "i!3"
                                                                                             "high"
                                                                                             "y")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "x<y")
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext"
                                                                             2
                                                                             2)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sign_ext"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "poly_intermediate_value_inc")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   "0"
                                                                                                   _
                                                                                                   "low"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -
                                                                                                           "z")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (reveal
                                                                                                               "hyp")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "i!3"
                                                                                                                 "z"
                                                                                                                 "y")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sign_ext"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "poly_intermediate_value_dec")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       _
                                                                                                       "0"
                                                                                                       _
                                                                                                       "low"
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (skolem
                                                                                                             -
                                                                                                             "z")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 "hyp")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i"
                                                                                                                   "i!3"
                                                                                                                   "z"
                                                                                                                   "y")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           "hyp")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i"
                                                                                                             "i!3"
                                                                                                             "x"
                                                                                                             "y")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             "hyp")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "i!3"
                                                                                               "low"
                                                                                               "y")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "NOT x=y")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (1
                                                                              2))
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (reveal
                                                                                 "iz")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT sound_signs?(k, p, n, low, high)(known_signs)")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "sound_signs?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "i!2")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sign_ext"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   (-2
                                                                                                                    -3
                                                                                                                    -4
                                                                                                                    -5
                                                                                                                    -6))
                                                                                                                  (("2"
                                                                                                                    (skolem
                                                                                                                     +
                                                                                                                     "w")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "w>y")
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "poly_intermediate_value_inc")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             _
                                                                                                                             "0"
                                                                                                                             _
                                                                                                                             "y"
                                                                                                                             "w")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (skolem
                                                                                                                                   -
                                                                                                                                   "zz")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       "hyp")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "i!2"
                                                                                                                                         "i!3"
                                                                                                                                         "zz"
                                                                                                                                         "y")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "poly_intermediate_value_dec")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             _
                                                                                                                             "0"
                                                                                                                             _
                                                                                                                             "w"
                                                                                                                             "y")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skolem
                                                                                                                                   -
                                                                                                                                   "zz")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (reveal
                                                                                                                                       "hyp")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "i!2"
                                                                                                                                         "i!3"
                                                                                                                                         "zz"
                                                                                                                                         "y")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "sign_ext"
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     (-2
                                                                                                                      -4
                                                                                                                      -5))
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "y")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         (-2
                                                                                                                          -3
                                                                                                                          -4))
                                                                                                                        (("2"
                                                                                                                          (skolem
                                                                                                                           -
                                                                                                                           "w")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "w = y")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (reveal
                                                                                                                                 "hyp")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "i!2"
                                                                                                                                   "i!3"
                                                                                                                                   "w"
                                                                                                                                   "y")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide 3)
                                                                      (("2"
                                                                        (expand
                                                                         "sign_ext"
                                                                         +)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "poly_intermediate_value_dec")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   "0"
                                                                                                   _
                                                                                                   "low"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skolem
                                                                                                         -
                                                                                                         "zz")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "zz"
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (postpone)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (decide_interval_def_TCC1 0
        (decide_interval_def_TCC1-1 nil 3690043689
         ("" (skeep*)
          (("" (typepred "psql")
            (("" (hide -1)
              (("" (lemma "sigma_gt_0")
                (("" (inst?)
                  (("" (assert)
                    (("" (split -)
                      (("1" (assert)
                        (("1"
                          (typepred "prod_polynomials(p, n, LAMBDA i: 1, k)")
                          (("1" (replace -6 -2)
                            (("1" (assert)
                              (("1" (replace -9 +)
                                (("1" (lemma "list2array_sound[int]")
                                  (("1" (inst?)
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "n")
                                              (("1"
                                                (inst - "i!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2" (skosimp*)
                          (("2" (expand "*")
                            (("2" (typepred "n")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (subrange type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (<= const-decl "bool" reals nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (sigma_gt_0 formula-decl nil sigma reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (i!1 skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (list2array_sound formula-decl nil array2list structures)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (decide_interval_def subtype "hutch.nsq"
          "{n | hutch.psq(compute_sturm.n) /= 0}")))
       (decide_interval_def_TCC2 0
        (decide_interval_def_TCC2-2 nil 3690707622
         ("" (skeep*) (("" (typepred "sqsl") (("" (assert) nil nil)) nil))
          nil)
         ((nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (^ const-decl "real" exponentiation nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (subrange type-eq-decl nil integers nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (<= const-decl "bool" reals nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list2array def-decl "T" array2list structures)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (/= const-decl "boolean" notequal nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil))
         nil
         (decide_interval_def subtype "hutch.sqsl"
          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))"))
        (decide_interval_def_TCC2-1 nil 3690626725
         ("" (skeep*) (("" (postpone) nil nil)) nil)
         ((list type-decl nil list_adt nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm))
         nil
         (decide_interval_def subtype "hutch.sqsl"
          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))")))
       (decide_interval_def 0
        (decide_interval_def-1 nil 3690043425
         ("" (skeep*)
          (("" (name "psql" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
            (("" (name "nnsq" "length(psql) - 1")
              (("" (name "ppsq" "list2array[int](0)(psql)")
                (("" (assert)
                  (("" (replace -3)
                    (("" (replace -2)
                      (("" (replace -1)
                        (("" (case "nnsq>0")
                          (("1" (assert)
                            (("1" (skeep*)
                              (("1" (label "klu" -7)
                                (("1" (lemma "decidable_interval_def")
                                  (("1" (insteep -)
                                    (("1" (replace -5)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (insteep)
                                              (("1"
                                                (replace -6)
                                                (("1"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "decide_interval")
                                                      (("1"
                                                        (split -)
                                                        (("1"
                                                          (expand
                                                           "SystemSat?")
                                                          (("1"
                                                            (inst + "low")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "SystemSat?")
                                                          (("2"
                                                            (inst + "high")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "known_signs")
                                                          (("3"
                                                            (expand
                                                             "sound_signs?")
                                                            (("3"
                                                              (case
                                                               "EXISTS (i:upto(k)): known_signs(i)=0")
                                                              (("1"
                                                                (skolem
                                                                 -
                                                                 "ii")
                                                                (("1"
                                                                  (copy -2)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "ii")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           (1
                                                                            2))
                                                                          (("1"
                                                                            (skolem
                                                                             -
                                                                             "x")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "FORALL (i:upto(k)): sign_ext(polynomial(p(i), n(i))(x))=known_signs(i)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "SystemSat?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "(LAMBDA (i: upto(NumTerms)):
                                                                rel5(RelF6(i))(known_signs(PolyTerms(i)), 0)) = (LAMBDA (i: upto(NumTerms)):
                                                                rel5(RelF6(i))
                                                                    (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             (-6
                                                                                              -9
                                                                                              2))
                                                                                            (("2"
                                                                                              (decompose-equality)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "PolyTerms(x!1)")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     "polynomial")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "i")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "LET aa = known_signs(i) IN (aa=0 OR aa=1 OR aa=-1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "qq")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "qq=x")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sign_ext"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "ii"
                                                                                                         "i"
                                                                                                         "x"
                                                                                                         "qq")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "sign_ext"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "sign_ext"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "known_signs")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sound_signs?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     "polynomial")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "SystemSat?")
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "low")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "(LAMBDA (i: upto(NumTerms)):
                                                          rel5(RelF6(i))(known_signs(PolyTerms(i)), 0)) = (LAMBDA (i: upto(NumTerms)):
                                                          rel5(RelF6(i))
                                                              (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(low), 0))")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-4
                                                                          3))
                                                                        (("2"
                                                                          (decompose-equality
                                                                           +)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "PolyTerms(x!1)")
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "PolyTerms(x!1)")
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  +))
                                                                                (("2"
                                                                                  (grind
                                                                                   :exclude
                                                                                   "polynomial")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "decide_interval")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "SystemSat?")
                                                          (("2"
                                                            (skeep -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "EXISTS (ii:upto(k)): polynomial(p(ii),n(ii))(x)=0")
                                                                (("1"
                                                                  (hide (1 2))
                                                                  (("1"
                                                                    (case
                                                                     "FORALL (jj:upto(k)): sign_ext(polynomial(p(jj),n(jj))(x))=known_signs(jj)")
                                                                    (("1"
                                                                      (case
                                                                       "(LAMBDA (i: upto(NumTerms)):
                                                          rel5(RelF6(i))
                                                              (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0))=(LAMBDA (i: upto(NumTerms)):
                                                          rel5(RelF6(i))(known_signs(PolyTerms(i)), 0))")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-5
                                                                          2))
                                                                        (("2"
                                                                          (decompose-equality
                                                                           +)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "PolyTerms(x!1)")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (grind
                                                                                 :exclude
                                                                                 "polynomial")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-4 2))
                                                                      (("2"
                                                                        (skeep*)
                                                                        (("2"
                                                                          (case
                                                                           "LET aa = known_signs(jj) IN (aa=0 OR aa=1 OR aa=-1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "known_signs")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sound_signs?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "jj")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             (1
                                                                                              2))
                                                                                            (("1"
                                                                                              (skolem
                                                                                               -
                                                                                               "qq")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "qq=x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sign_ext"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "jj"
                                                                                                   "ii"
                                                                                                   "qq"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "known_signs")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sound_signs?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "jj")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (hide
                                                                                             (1
                                                                                              2))
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "x")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "sign_ext"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (typepred
                                                                                 "known_signs")
                                                                                (("3"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "sound_signs?"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -
                                                                                       "jj")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (hide
                                                                                             (1
                                                                                              2))
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "x")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "sign_ext"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "known_signs")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sound_signs?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "jj")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind
                                                                                               :exclude
                                                                                               "polynomial")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "EXISTS (ii:upto(k),yy:real): low<=yy AND yy<=high AND polynomial(p(ii),n(ii))(yy)=0")
                                                                  (("1"
                                                                    (skeep -)
                                                                    (("1"
                                                                      (case
                                                                       "x=yy")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "ii")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "x>yy")
                                                                        (("1"
                                                                          (case
                                                                           "(LAMBDA (i: upto(NumTerms)):
                                                                      rel5(RelF6(i))
                                                                          (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0)) = (LAMBDA (i: upto(NumTerms)):
                                                                      rel5(RelF6(i))
                                                                          (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(high), 0))")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (4
                                                                              5
                                                                              6))
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (case
                                                                                 "sign_ext(polynomial(p(PolyTerms(x!1)), n(PolyTerms(x!1)))(x))=sign_ext(polynomial(p(PolyTerms(x!1)), n(PolyTerms(x!1)))(high))")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "polynomial")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -9)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sign_ext"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -13)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           "klu")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_inc")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 _
                                                                                                                 "0"
                                                                                                                 _
                                                                                                                 "x"
                                                                                                                 "high")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (skolem
                                                                                                                       -
                                                                                                                       "ww")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "ii"
                                                                                                                           "PolyTerms(x!1)"
                                                                                                                           "yy"
                                                                                                                           "ww")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_dec")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 _
                                                                                                                 "0"
                                                                                                                 _
                                                                                                                 "x"
                                                                                                                 "high")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (skolem
                                                                                                                       -
                                                                                                                       "ww")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "ii"
                                                                                                                           "PolyTerms(x!1)"
                                                                                                                           "yy"
                                                                                                                           "ww")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "ii"
                                                                                                               "PolyTerms(x!1)"
                                                                                                               "yy"
                                                                                                               "high")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "ii"
                                                                                                               "PolyTerms(x!1)"
                                                                                                               "yy"
                                                                                                               "x")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "(LAMBDA (i: upto(NumTerms)):
                                                                      rel5(RelF6(i))
                                                                          (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0)) = (LAMBDA (i: upto(NumTerms)):
                                                                      rel5(RelF6(i))
                                                                          (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(low), 0))")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (5
                                                                              6
                                                                              7))
                                                                            (("2"
                                                                              (decompose-equality
                                                                               +)
                                                                              (("2"
                                                                                (case
                                                                                 "sign_ext(polynomial(p(PolyTerms(x!1)), n(PolyTerms(x!1)))(x))=sign_ext(polynomial(p(PolyTerms(x!1)), n(PolyTerms(x!1)))(low))")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "polynomial")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sign_ext"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -12)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           "klu")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_dec")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 _
                                                                                                                 "0"
                                                                                                                 _
                                                                                                                 "low"
                                                                                                                 "x")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (skolem
                                                                                                                       -
                                                                                                                       "ww")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "ii"
                                                                                                                           "PolyTerms(x!1)"
                                                                                                                           "yy"
                                                                                                                           "ww")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_inc")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 _
                                                                                                                 "0"
                                                                                                                 _
                                                                                                                 "low"
                                                                                                                 "x")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (skolem
                                                                                                                       -
                                                                                                                       "ww")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "ii"
                                                                                                                           "PolyTerms(x!1)"
                                                                                                                           "yy"
                                                                                                                           "ww")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "ii"
                                                                                                               "PolyTerms(x!1)"
                                                                                                               "yy"
                                                                                                               "low")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "ii"
                                                                                                               "PolyTerms(x!1)"
                                                                                                               "yy"
                                                                                                               "x")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-4 -5))
                                                                    (("2"
                                                                      (case
                                                                       "(LAMBDA (i: upto(NumTerms)):
                                           rel5(RelF6(i))
                                               (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0))=(LAMBDA (i: upto(NumTerms)):
                                           rel5(RelF6(i))
                                               (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(high), 0))")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (4
                                                                          5
                                                                          6))
                                                                        (("2"
                                                                          (decompose-equality
                                                                           +)
                                                                          (("2"
                                                                            (case
                                                                             "sign_ext(polynomial(p(PolyTerms(x!1)), n(PolyTerms(x!1)))(x))=sign_ext(polynomial(p(PolyTerms(x!1)), n(PolyTerms(x!1)))(high))")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (grind
                                                                                 :exclude
                                                                                 "polynomial")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "sign_ext"
                                                                                 1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     "klu")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "poly_intermediate_value_inc")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           _
                                                                                                           "0"
                                                                                                           _
                                                                                                           "x"
                                                                                                           "high")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skolem
                                                                                                                 -
                                                                                                                 "ww")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "PolyTerms(x!1)"
                                                                                                                     "ww")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "poly_intermediate_value_dec")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           _
                                                                                                           "0"
                                                                                                           _
                                                                                                           "x"
                                                                                                           "high")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skolem
                                                                                                                 -
                                                                                                                 "ww")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "PolyTerms(x!1)"
                                                                                                                     "ww")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "PolyTerms(x!1)"
                                                                                                         "high")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "PolyTerms(x!1)"
                                                                                                         "x")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "sqsl")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "psql")
                              (("2" (hide -1)
                                (("2" (replaces -4 + :dir rl)
                                  (("2" (replaces -1)
                                    (("2" (lemma "sigma_gt_0")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (list2array def-decl "T" array2list structures)
          (sigma_gt_0 formula-decl nil sigma reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (sound_signs? const-decl "bool" hutch nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (poly_intermediate_value_inc formula-decl nil polynomials reals)
          (poly_intermediate_value_dec formula-decl nil polynomials reals)
          (SystemSat? const-decl "bool" hutch nil)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (minus_int_is_int application-judgement "int" integers nil)
          (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
           real_defs nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (rel5 const-decl "bool" preprocessing_univariate nil)
          (sign_ext const-decl
                    "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
                    sign reals)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (abs_nat_rew formula-decl nil abs_rews ints)
          (decide_interval const-decl "bool" hutch nil)
          (sqsl skolem-const-decl "{sqsl |
   (NOT sumsquares) IMPLIES
    Eq_computed_remainder?(list2array[int]
                               (0)
                               (prod_polynomials_list(p,
                                                      n,
                                                      LAMBDA i: 1,
                                                      k)),
                           length(prod_polynomials_list(p,
                                                        n,
                                                        LAMBDA i: 1,
                                                        k))
                            - 1)
                          (sqsl)}" hutch nil)
          (psql skolem-const-decl "{ll |
   length(ll) - 1 = sigma(0, k, n * LAMBDA i: 1) AND
    prod_polynomials(p, n, LAMBDA i: 1, k) =
     (LAMBDA (i): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (sumsquares skolem-const-decl "bool" hutch nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (decidable_interval_def formula-decl nil hutch nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (int_minus_int_is_int application-judgement "int" integers nil))
         shostak))
       (decidable_intervals_exist_TCC1 0
        (decidable_intervals_exist_TCC1-1 nil 3690113149
         ("" (skeep*)
          (("" (case "nsq>0")
            (("1" (lemma "list2array_sound[int]")
              (("1" (inst?)
                (("1" (inst?)
                  (("1" (replace -7 +)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (typepred "psql")
                          (("1" (decompose-equality -3)
                            (("1" (inst - "nsq")
                              (("1" (assert)
                                (("1" (replaces -1 :dir rl)
                                  (("1" (replace -7)
                                    (("1" (replace -2)
                                      (("1"
                                        (typepred
                                         "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "n")
                                              (("1"
                                                (inst - "i!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (typepred "psql")
                  (("2" (lemma "sigma_gt_0")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (skosimp*)
                          (("2" (expand "*")
                            (("2" (typepred "n")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (> const-decl "bool" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (length def-decl "nat" list_props nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (<= const-decl "bool" reals nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (/= const-decl "boolean" notequal nil)
          (subrange type-eq-decl nil integers nil)
          (sequence type-eq-decl nil sequences nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (^ const-decl "real" exponentiation nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (i!1 skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (nsq skolem-const-decl "int" hutch nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (list2array_sound formula-decl nil array2list structures)
          (sigma_gt_0 formula-decl nil sigma reals)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (decidable_intervals_exist subtype "hutch.nsq"
          "{n | hutch.psq(compute_sturm.n) /= 0}")))
       (decidable_intervals_exist 0
        (decidable_intervals_exist-1 nil 3690111555
         ("" (skeep*)
          ((""
            (name "Aset"
                  "LAMBDA (z:real): EXISTS (i:upto(k)): polynomial(p(i),n(i))(z)=0")
            ((""
              (case "EXISTS (eps:posreal): FORALL (x,y:(Aset)): x<y IMPLIES y-x>eps")
              (("1" (skeep)
                (("1" (inst + "eps")
                  (("1" (skeep*)
                    (("1"
                      (name "psql"
                            "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                      (("1" (replace -1)
                        (("1" (name "nnsq" "length(psql)-1")
                          (("1" (name "ppsq" "list2array[int](0)(psql)")
                            (("1" (assert)
                              (("1" (replace -2)
                                (("1" (replace -1)
                                  (("1" (skeep*)
                                    (("1" (expand "decidable_interval")
                                      (("1"
                                        (split +)
                                        (("1"
                                          (skeep*)
                                          (("1"
                                            (typepred "known_signs")
                                            (("1"
                                              (expand "sound_signs?")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide (1 2))
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "roots_in_int")
                                                          (("1"
                                                            (lemma
                                                             "number_roots_interval_def")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "n")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (skeep
                                                                             -)
                                                                            (("1"
                                                                              (expand
                                                                               "bijective?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (case
                                                                                   "number_roots_interval(p(i), n(i),
                                       (# lb := low,
                                          ub := high,
                                          bounded_below := TRUE,
                                          bounded_above := TRUE,
                                          closed_below := TRUE,
                                          closed_above := TRUE #),
                                       nth(slseq, i))<1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "surjective?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "contains?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "NOT number_roots_interval(p(i), n(i),
                                         (# lb := low,
                                            ub := high,
                                            bounded_below := TRUE,
                                            bounded_above := TRUE,
                                            closed_below := TRUE,
                                            closed_above := TRUE #),
                                         nth(slseq, i))>1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "injective?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "0"
                                                                                           "1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "Aset(bij(0))")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "Aset(bij(1))")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "bij(0)")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "bij(1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "contains?")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "bij(0)<bij(1)")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "bij(0)"
                                                                                                             "bij(1)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "bij(1)"
                                                                                                             "bij(0)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "Aset")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "bij(1)")
                                                                                                    (("2"
                                                                                                      (insteep
                                                                                                       +)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "Aset")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "bij(0)")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "i")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (skeep -)
                                            (("2"
                                              (typepred "known_signs")
                                              (("2"
                                                (expand "sound_signs?")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide (1 2))
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "roots_in_int")
                                                            (("2"
                                                              (lemma
                                                               "number_roots_interval_def")
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "ppsq(nnsq)/=0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (skeep
                                                                           -)
                                                                          (("1"
                                                                            (expand
                                                                             "bijective?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (case
                                                                                 "number_roots_interval(ppsq, nnsq,
                            (# lb := low,
                               ub := high,
                               bounded_below := TRUE,
                               bounded_above := TRUE,
                               closed_below := TRUE,
                               closed_above := TRUE #),
                            sqsl)<1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "surjective?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "x")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "contains?")
                                                                                      (("2"
                                                                                        (hide
                                                                                         (-1
                                                                                          3))
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "prod_polynomials(p,n,LAMBDA (i:nat): 1,k)")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "psql")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nnsq"
                                                                                               1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "polynomial(prod_polynomials(p, n, LAMBDA (i: nat): 1, k),
                 sigma(0, k, n * (LAMBDA i: 1)))
                (x) = polynomial(ppsq, sigma(0, k, n * (LAMBDA i: 1)))(x)")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       +
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "product_split[nat]")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "product"
                                                                                                                     +
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "expt")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "poly_eq_le_degree")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         -1
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (skeep*)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "ii")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ppsq"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (decompose-equality
                                                                                                                     -5)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "ii")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "list2array_sound[int]")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "sigma_ge_0")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "*"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "n")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "n!1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "sigma_ge_0")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (skosimp*)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "*"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (typepred
                                                                                                                   "n")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "n!1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "NOT number_roots_interval(ppsq, nnsq,
                            (# lb := low,
                               ub := high,
                               bounded_below := TRUE,
                               bounded_above := TRUE,
                               closed_below := TRUE,
                               closed_above := TRUE #),
                            sqsl)>1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (1
                                                                                      3))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "prod_polynomials(p,n,LAMBDA (i:nat): 1,k)")
                                                                                      (("2"
                                                                                        (case
                                                                                         "FORALL (yy:real): polynomial(prod_polynomials(p, n, LAMBDA (i: nat): 1, k),
                   sigma(0, k, n * (LAMBDA i: 1)))(yy) = polynomial(ppsq,nnsq)(yy)")
                                                                                        (("1"
                                                                                          (case
                                                                                           "Aset(bij(0))")
                                                                                          (("1"
                                                                                            (case
                                                                                             "Aset(bij(1))")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "bij(0)")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "bij(1)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "contains?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       (-9
                                                                                                        -10))
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "bij(0)<bij(1)")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "bij(0)"
                                                                                                           "bij(1)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "bij(1)"
                                                                                                           "bij(0)")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "injective?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Aset"
                                                                                               1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "bij(1)")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "bij(1)")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -3
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "bij(1)")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "product_nz[nat]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "n!1")
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (grind
                                                                                                                         :exclude
                                                                                                                         "polynomial")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "bij(0)")
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Aset"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   -2
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "bij(0)")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "expt")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "product_nz[nat]")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "n!1")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "poly_eq_le_degree")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "ppsq")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "list2array_sound[int]")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "psql")
                                                                                                                (("1"
                                                                                                                  (decompose-equality
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "ii!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "sigma_ge_0")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "n")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "n!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lemma
                                                                                           "sigma_ge_0")
                                                                                          (("3"
                                                                                            (inst?)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("3"
                                                                                                    (typepred
                                                                                                     "n")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "ppsq"
                                                                             +)
                                                                            (("2"
                                                                              (lemma
                                                                               "list2array_sound[int]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "psql")
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -3)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "prod_polynomials(p,n,LAMBDA (i:nat): 1,k)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "n")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "sigma_ge_0")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "n")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "sigma_ge_0")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "psql")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -4)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "n")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "n!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       (-1 2))
                                                                      (("3"
                                                                        (typepred
                                                                         "psql")
                                                                        (("3"
                                                                          (lemma
                                                                           "sigma_ge_0")
                                                                          (("3"
                                                                            (inst?)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (expand
                                                                                   "*"
                                                                                   1)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "n")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -
                                                                                       "n!1")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (typepred
                                                                     "psql")
                                                                    (("2"
                                                                      (lemma
                                                                       "sigma_ge_0")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*")
                                                                              (("2"
                                                                                (typepred
                                                                                 "n")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "n!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "prod_polynomials(p,n,LAMBDA (i:nat): 1,k)")
                  (("2"
                    (name "Psq"
                          "prod_polynomials(p, n, LAMBDA (i: nat): 1, k)")
                    (("2"
                      (case "EXISTS (Pdeg:nat): Pdeg = sigma(0, k, n * (LAMBDA i: 1))")
                      (("1" (skeep -)
                        (("1" (name "E" "min_poly_root_dist(Psq,Pdeg)")
                          (("1" (inst + "E")
                            (("1" (skeep*)
                              (("1" (typepred "E")
                                (("1" (inst - "x" "y")
                                  (("1" (assert)
                                    (("1"
                                      (case
                                       "FORALL (yy:real,ii:upto(k)): polynomial(p(ii),n(ii))(yy) = 0 IMPLIES polynomial(Psq,Pdeg)(yy)=0")
                                      (("1"
                                        (split -)
                                        (("1"
                                          (expand "abs")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "x")
                                              (("2"
                                                (expand "Aset" -1)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst - "i!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst?)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "y")
                                              (("3"
                                                (expand "Aset" -1)
                                                (("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (inst - "i!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (skeep*)
                                          (("2"
                                            (expand "Psq" 1)
                                            (("2"
                                              (replace -6 1)
                                              (("2"
                                                (inst - "yy")
                                                (("2"
                                                  (replaces -8)
                                                  (("2"
                                                    (expand "^" 1)
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (expand "expt")
                                                        (("2"
                                                          (lemma
                                                           "product_split[nat]")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst - "ii")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "product"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (assert)
                              (("2" (skosimp*)
                                (("2" (typepred "n")
                                  (("2" (inst - "i!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (case "FORALL (ii:nat): EXISTS (Pdeg:nat): Pdeg = sigma(0, ii, n * (LAMBDA i: 1))")
                          (("1" (inst - "k") nil nil)
                           ("2" (hide 2)
                            (("2" (induct "ii")
                              (("1" (expand "sigma" +)
                                (("1" (expand "sigma" +)
                                  (("1" (expand "*" 1)
                                    (("1" (inst + "n(0)") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (skeep -)
                                  (("2" (expand "sigma" +)
                                    (("2" (expand "*" + 1)
                                      (("2"
                                        (inst + "Pdeg+n(1+j)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (pred type-eq-decl nil defined_types nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (Psq skolem-const-decl "{a |
   (FORALL (x):
      polynomial(a, sigma(0, k, n * LAMBDA i: 1))(x) =
       product(0, k, LAMBDA (j): polynomial(p(j), n(j))(x) ^ 1))
    AND
    ((FORALL (i_1: nat): i_1 <= k IMPLIES p(i_1)(n(i_1)) /= 0) IMPLIES
      a(sigma(0, k, n * LAMBDA i: 1)) /= 0)
     AND
     FORALL (i_1: nat):
       i_1 > sigma(0, k, n * LAMBDA i: 1) IMPLIES a(i_1) = 0}" hutch nil)
          (minus_real_is_real application-judgement "real" reals nil)
          (min_poly_root_dist const-decl "{epsil: posreal |
   FORALL (x, y: real):
     polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y IMPLIES
      abs(x - y) > epsil}" more_polynomial_props reals)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (list2array def-decl "T" array2list structures)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (sound_signs? const-decl "bool" hutch nil)
          (number_roots_interval_def formula-decl nil compute_sturm Sturm)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (injective? const-decl "bool" functions nil)
          (Aset skolem-const-decl "[real -> boolean]" hutch nil)
          (bij skolem-const-decl "[below(number_roots_interval(p(i), n(i),
                             (# lb := low,
                                ub := high,
                                bounded_below := TRUE,
                                bounded_above := TRUE,
                                closed_below := TRUE,
                                closed_above := TRUE #),
                             nth(slseq, i))) ->
   ({z: real |
       contains?((# lb := low,
                    ub := high,
                    bounded_below := TRUE,
                    bounded_above := TRUE,
                    closed_below := TRUE,
                    closed_above := TRUE #))
                (z)
        AND polynomial(p(i), n(i))(z) = 0})]" hutch nil)
          (below type-eq-decl nil naturalnumbers nil)
          (slseq skolem-const-decl "(Eq_computed_remainder_seq?(k, p, n))"
           hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (i skolem-const-decl "upto(k)" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (surjective? const-decl "bool" functions nil)
          (x skolem-const-decl "real" hutch nil)
          (high skolem-const-decl "real" hutch nil)
          (low skolem-const-decl "real" hutch nil)
          (contains? const-decl "bool" RealInt reals)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (bijective? const-decl "bool" functions nil)
          (RealInt type-eq-decl nil RealInt reals)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (roots_in_int const-decl "nat" hutch nil)
          (abs_nat_rew formula-decl nil abs_rews ints)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (nnsq skolem-const-decl "int" hutch nil)
          (x skolem-const-decl "real" hutch nil)
          (ppsq skolem-const-decl "[nat -> int]" hutch nil)
          (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
          (expt def-decl "real" exponentiation nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (product_split formula-decl nil product reals)
          (list2array_sound formula-decl nil array2list structures)
          (sigma_ge_0 formula-decl nil sigma reals)
          (poly_eq_le_degree formula-decl nil polynomials reals)
          (bij skolem-const-decl "[below(number_roots_interval(ppsq, nnsq,
                             (# lb := low,
                                ub := high,
                                bounded_below := TRUE,
                                bounded_above := TRUE,
                                closed_below := TRUE,
                                closed_above := TRUE #),
                             sqsl)) ->
   ({z: real |
       contains?((# lb := low,
                    ub := high,
                    bounded_below := TRUE,
                    bounded_above := TRUE,
                    closed_below := TRUE,
                    closed_above := TRUE #))
                (z)
        AND polynomial(ppsq, nnsq)(z) = 0})]" hutch nil)
          (sqsl skolem-const-decl
           "(Eq_computed_remainder?(list2array[int](0)(psql), length(psql) - 1))"
           hutch nil)
          (psql skolem-const-decl "{ll |
   length(ll) - 1 = sigma(0, k, n * LAMBDA i: 1) AND
    prod_polynomials(p, n, LAMBDA i: 1, k) =
     (LAMBDA (i): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}" hutch nil)
          (product_nz formula-decl nil product reals)
          (i!1 skolem-const-decl "nat" hutch nil)
          (decidable_interval const-decl "bool" hutch nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (list type-decl nil list_adt nil)
          (subrange type-eq-decl nil integers nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (length def-decl "nat" list_props nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (^ const-decl "real" exponentiation nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (< const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         shostak))
       (decidable_intervals_sq_exist 0
        (decidable_intervals_sq_exist-1 nil 3690807801
         ("" (skeep*)
          ((""
            (name "Aset"
                  "LAMBDA (z:real): EXISTS (i:upto(k)): polynomial(p(i),n(i))(z)=0")
            ((""
              (case "EXISTS (eps:posreal): FORALL (x,y:(Aset)): x<y IMPLIES y-x>eps")
              (("1" (skeep)
                (("1" (inst + "eps")
                  (("1" (skeep*)
                    (("1" (expand "decidable_interval_sq" :assert? none)
                      (("1"
                        (case "NOT (FORALL (i: upto(k)):
         known_signs(i) = 0 IMPLIES
          roots_in_int(p(i), n(i), low, high, nth(slseq, i)) = 1)")
                        (("1" (hide 2)
                          (("1" (skeep*)
                            (("1" (typepred "known_signs")
                              (("1" (expand "sound_signs?")
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (hide (1 2))
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "roots_in_int")
                                            (("1"
                                              (lemma
                                               "number_roots_interval_def")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "n")
                                                    (("1"
                                                      (inst - "i")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide (-1 1))
                                                            (("1"
                                                              (skeep -)
                                                              (("1"
                                                                (expand
                                                                 "bijective?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (case
                                                                     "number_roots_interval(p(i), n(i),
                                                             (# lb := low,
                                                                ub := high,
                                                                bounded_below := TRUE,
                                                                bounded_above := TRUE,
                                                                closed_below := TRUE,
                                                                closed_above := TRUE #),
                                                             nth(slseq, i))<1")
                                                                    (("1"
                                                                      (expand
                                                                       "surjective?")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "contains?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "NOT number_roots_interval(p(i), n(i),
                                                                   (# lb := low,
                                                                      ub := high,
                                                                      bounded_below := TRUE,
                                                                      bounded_above := TRUE,
                                                                      closed_below := TRUE,
                                                                      closed_above := TRUE #),
                                                                   nth(slseq, i))>1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         +)
                                                                        (("2"
                                                                          (expand
                                                                           "injective?")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "Aset(bij(0))")
                                                                                (("1"
                                                                                  (case
                                                                                   "Aset(bij(1))")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bij(0)")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "bij(1)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "contains?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (case
                                                                                             "bij(0)<bij(1)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "bij(0)"
                                                                                               "bij(1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "bij(1)"
                                                                                               "bij(0)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "Aset")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "bij(1)")
                                                                                      (("2"
                                                                                        (insteep
                                                                                         +)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "Aset")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "bij(0)")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "i")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (flatten)
                            (("2" (skeep -)
                              (("2" (skoletin)
                                (("2" (skoletin)
                                  (("2"
                                    (name "sl" "remainder_seq(LAMBDA (i: nat):
                            IF i <= sszh`sqdeg THEN spoly(i) ELSE 0 ENDIF,
                          sszh`sqdeg,
                          poly_deriv(LAMBDA
                                     (i: nat):
                                     IF i <= sszh`sqdeg
                                     THEN spoly(i)
                                     ELSE 0
                                     ENDIF),
                          sszh`sqdeg - 1)")
                                    (("1" (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "known_signs")
                                          (("1"
                                            (expand "roots_in_int")
                                            (("1"
                                              (lemma
                                               "number_roots_interval_def")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "spoly(sszh`sqdeg) /= 0")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep -)
                                                          (("1"
                                                            (expand
                                                             "bijective?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "sum_square_zero_havers_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (label
                                                                       "hypz"
                                                                       -8)
                                                                      (("1"
                                                                        (hide
                                                                         "hypz")
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "(EXISTS (z: upto(k)): known_signs(z) = 0)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (case
                                                                                         "number_roots_interval(spoly, sszh`sqdeg,
                            (# lb := low,
                               ub := high,
                               bounded_below := TRUE,
                               bounded_above := TRUE,
                               closed_below := TRUE,
                               closed_above := TRUE #),
                            sl)<1")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skeep
                                                                                             -)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "known_signs")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sound_signs?"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "z")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         -
                                                                                                         "zz")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "zz")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "surjective?")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "zz")
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "contains?"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "NOT spoly = list2array[int](0)(sszh`sqlist)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "spoly"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (decompose-equality
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "list2array_sound"
                                                                                                                             1)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -9
                                                                                                                           +)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "sigma_restrict_eq_0")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     (2
                                                                                                                                      3))
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -11)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -4)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (ground)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "known_signs")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "sound_signs?"
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "i!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (skolem
                                                                                                                                                           -
                                                                                                                                                           "xy")
                                                                                                                                                          (("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               "xy=zz")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "sq_eq_0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (case
                                                                                                                                                                 "xy<zz")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "xy"
                                                                                                                                                                   "zz")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Aset"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "z")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Aset"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "i!1")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "zz"
                                                                                                                                                                   "xy")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Aset"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "i!1")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Aset"
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "z")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT number_roots_interval(spoly, sszh`sqdeg,
                            (# lb := low,
                               ub := high,
                               bounded_below := TRUE,
                               bounded_above := TRUE,
                               closed_below := TRUE,
                               closed_above := TRUE #),
                            sl)>1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               (1
                                                                                                3))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "injective?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0"
                                                                                                   "1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "bij(1)")
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "FORALL (dd:real): polynomial(spoly, sszh`sqdeg)(dd) = 0 IMPLIES Aset(dd)")
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "bij(0)")
                                                                                                          (("1"
                                                                                                            (inst-cp
                                                                                                             -
                                                                                                             "bij(0)")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "bij(1)")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "contains?")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "bij(0)<bij(1)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "bij(0)"
                                                                                                                       "bij(1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "bij(1)"
                                                                                                                       "bij(0)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3))
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "Aset"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "NOT spoly = list2array[int](0)(sszh`sqlist)")
                                                                                                                  (("1"
                                                                                                                    (decompose-equality
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "spoly"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "list2array_sound"
                                                                                                                         1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "sum_square_zero_havers_def")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -13
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -3
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "dd")
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "NOT FORALL (F:[nat->real],ii:nat): (FORALL (j:nat): F(j)>=0) AND sigma(0,ii,F)=0 IMPLIES (FORALL (kz:nat): kz<=ii IMPLIES F(kz)=0)")
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (induct
                                                                                                                                         "ii")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skolem
                                                                                                                                           1
                                                                                                                                           "ii")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (insteep)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma_ge_0")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "F"
                                                                                                                                                       "ii"
                                                                                                                                                       "0")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "sigma"
                                                                                                                                                             -4)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "1+ii")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (skeep)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (insteep
                                                                                                                                                                     -)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "n!1")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -)
                                                                                                                                          (("1"
                                                                                                                                            (skeep
                                                                                                                                             -)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "z")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sq_eq_0")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         +
                                                                                                                                                         "z")
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "spoly"
                                                                                         2)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3
                                                                                               +)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (lemma
                                                             "sum_square_zero_havers_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -4
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           "list2array_sound[int]"
                                                                           -)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "spoly"
                                                                                 -7)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         +
                                                                         "i")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma "sum_square_zero_havers_def")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2" (inst + "i") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (typepred "slseq")
                            (("3" (hide -1)
                              (("3" (expand "Eq_computed_remainder_seq?")
                                (("3" (replaces -1)
                                  (("3" (skeep*)
                                    (("3" (expand "Eq_computed_remainder?")
                                      (("3"
                                        (typepred
                                         "array2list[list[list[int]]]
               (1 + k)
               (LAMBDA (j: nat):
                  IF j <= k
                    THEN remainder_seq(LAMBDA
                                       (i: nat):
                                       IF i <= n(j)
                                       THEN p(j)(i)
                                       ELSE 0
                                       ENDIF,
                                       n(j),
                                       poly_deriv
                                       (LAMBDA
                                        (i: nat):
                                        IF i <= n(j)
                                        THEN p(j)(i)
                                        ELSE 0
                                        ENDIF),
                                       n(j) - 1)
                  ELSE cons[list[int]]
                           (cons[int](0, null[int]), null[list[int]])
                  ENDIF)")
                                        (("1" (rewrite -3) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "poly_deriv")
                                                      (("2"
                                                        (mult-by 1 "n(j!1)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (expand "poly_deriv")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (typepred "n")
                                              (("4"
                                                (inst?)
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (skeep*)
                            (("4" (assert)
                              (("4" (typepred "slseq")
                                (("4" (hide -1)
                                  (("4" (expand "Eq_computed_remainder_seq?")
                                    (("4" (replaces -1)
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 2)
                          (("5" (skeep*)
                            (("5" (typepred "n")
                              (("5" (inst?)
                                (("5" (assert) (("5" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "prod_polynomials(p,n,LAMBDA (i:nat): 1,k)")
                  (("2"
                    (name "Psq"
                          "prod_polynomials(p, n, LAMBDA (i: nat): 1, k)")
                    (("2"
                      (case "EXISTS (Pdeg:nat): Pdeg = sigma(0, k, n * (LAMBDA i: 1))")
                      (("1" (skeep -)
                        (("1" (name "E" "min_poly_root_dist(Psq,Pdeg)")
                          (("1" (inst + "E")
                            (("1" (skeep*)
                              (("1" (typepred "E")
                                (("1" (inst - "x" "y")
                                  (("1" (assert)
                                    (("1"
                                      (case
                                       "FORALL (yy:real,ii:upto(k)): polynomial(p(ii),n(ii))(yy) = 0 IMPLIES polynomial(Psq,Pdeg)(yy)=0")
                                      (("1"
                                        (split -)
                                        (("1"
                                          (expand "abs")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "x")
                                              (("2"
                                                (expand "Aset" -1)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst - "i!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst?)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "y")
                                              (("3"
                                                (expand "Aset" -1)
                                                (("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (inst - "i!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (skeep*)
                                          (("2"
                                            (expand "Psq" 1)
                                            (("2"
                                              (replace -6 1)
                                              (("2"
                                                (inst - "yy")
                                                (("2"
                                                  (replaces -8)
                                                  (("2"
                                                    (expand "^" 1)
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (expand "expt")
                                                        (("2"
                                                          (lemma
                                                           "product_split[nat]")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst - "ii")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "product"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (assert)
                              (("2" (skosimp*)
                                (("2" (typepred "n")
                                  (("2" (inst - "i!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (case "FORALL (ii:nat): EXISTS (Pdeg:nat): Pdeg = sigma(0, ii, n * (LAMBDA i: 1))")
                          (("1" (inst - "k") nil nil)
                           ("2" (hide 2)
                            (("2" (induct "ii")
                              (("1" (expand "sigma" +)
                                (("1" (expand "sigma" +)
                                  (("1" (expand "*" 1)
                                    (("1" (inst + "n(0)") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (skeep -)
                                  (("2" (expand "sigma" +)
                                    (("2" (expand "*" + 1)
                                      (("2"
                                        (inst + "Pdeg+n(1+j)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (Psq skolem-const-decl "{a |
   (FORALL (x):
      polynomial(a, sigma(0, k, n * LAMBDA (i: nat): 1))(x) =
       product(0, k, LAMBDA (j): polynomial(p(j), n(j))(x) ^ 1))
    AND
    ((FORALL (i_1: nat): i_1 <= k IMPLIES p(i_1)(n(i_1)) /= 0) IMPLIES
      a(sigma(0, k, n * LAMBDA (i: nat): 1)) /= 0)
     AND
     FORALL (i_1: nat):
       i_1 > sigma(0, k, n * LAMBDA (i: nat): 1) IMPLIES a(i_1) = 0}" hutch
           nil)
          (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (product_split formula-decl nil product reals)
          (expt def-decl "real" exponentiation nil)
          (minus_real_is_real application-judgement "real" reals nil)
          (min_poly_root_dist const-decl "{epsil: posreal |
   FORALL (x, y: real):
     polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y IMPLIES
      abs(x - y) > epsil}" more_polynomial_props reals)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (^ const-decl "real" exponentiation nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (length def-decl "nat" list_props nil)
          (roots_in_int const-decl "nat" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (sound_signs? const-decl "bool" hutch nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (abs_nat_rew formula-decl nil abs_rews ints)
          (RealInt type-eq-decl nil RealInt reals)
          (bijective? const-decl "bool" functions nil)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (contains? const-decl "bool" RealInt reals)
          (low skolem-const-decl "real" hutch nil)
          (high skolem-const-decl "real" hutch nil)
          (x skolem-const-decl "real" hutch nil)
          (surjective? const-decl "bool" functions nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (i skolem-const-decl "upto(k)" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (slseq skolem-const-decl "(Eq_computed_remainder_seq?(k, p, n))"
           hutch nil)
          (below type-eq-decl nil naturalnumbers nil)
          (bij skolem-const-decl "[below(number_roots_interval(p(i), n(i),
                             (# lb := low,
                                ub := high,
                                bounded_below := TRUE,
                                bounded_above := TRUE,
                                closed_below := TRUE,
                                closed_above := TRUE #),
                             nth(slseq, i))) ->
   ({z: real |
       contains?((# lb := low,
                    ub := high,
                    bounded_below := TRUE,
                    bounded_above := TRUE,
                    closed_below := TRUE,
                    closed_above := TRUE #))
                (z)
        AND polynomial(p(i), n(i))(z) = 0})]" hutch nil)
          (Aset skolem-const-decl "[real -> boolean]" hutch nil)
          (injective? const-decl "bool" functions nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (number_roots_interval_def formula-decl nil compute_sturm Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (poly_deriv const-decl "real" polynomials reals)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (sum_square_zero_havers def-decl
            "[# sqlist: list[int], sqdeg: nat #]" hutch nil)
          (id const-decl "(bijective?[T, T])" identity nil)
          (IFF const-decl "[bool, bool -> bool]" booleans nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (sum_square_zero_havers_def formula-decl nil hutch nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (sigma_restrict_eq_0 formula-decl nil sigma reals)
          (subrange type-eq-decl nil integers nil)
          (xy skolem-const-decl "real" hutch nil)
          (sq_eq_0 formula-decl nil sq reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (sq const-decl "nonneg_real" sq reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (list2array_sound formula-decl nil array2list structures)
          (list2array def-decl "T" array2list structures)
          (sszh skolem-const-decl "[# sqdeg: nat, sqlist: list[int] #]" hutch
           nil)
          (spoly skolem-const-decl "[nat -> int]" hutch nil)
          (zz skolem-const-decl "real" hutch nil)
          (bij skolem-const-decl
           "[below(number_roots_interval(spoly, sszh`sqdeg,
                             (# lb := low,
                                ub := high,
                                bounded_below := TRUE,
                                bounded_above := TRUE,
                                closed_below := TRUE,
                                closed_above := TRUE #),
                             sl)) ->
   ({z: real |
       contains?((# lb := low,
                    ub := high,
                    bounded_below := TRUE,
                    bounded_above := TRUE,
                    closed_below := TRUE,
                    closed_above := TRUE #))
                (z)
        AND polynomial(spoly, sszh`sqdeg)(z) = 0})]" hutch nil)
          (sl skolem-const-decl "{crem:
   (is_neg_remainder_list?(LAMBDA (i: nat):
                             IF i <= sszh`sqdeg THEN spoly(i) ELSE 0 ENDIF,
                           sszh`sqdeg,
                           poly_deriv(LAMBDA
                                      (i: nat):
                                      IF i <= sszh`sqdeg
                                      THEN spoly(i)
                                      ELSE 0
                                      ENDIF),
                           sszh`sqdeg - 1)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" hutch nil)
          (sigma def-decl "real" sigma reals)
          (pred type-eq-decl nil defined_types nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (sigma_ge_0 formula-decl nil sigma reals)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (listn type-eq-decl nil listn structures)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (j!1 skolem-const-decl "nat" hutch nil)
          (both_sides_times1 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (j skolem-const-decl "nat" hutch nil)
          (decidable_interval_sq const-decl "bool" hutch nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (< const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil))
       (hutch_int_meas_TCC1 0
        (hutch_int_meas_TCC1-1 nil 3690123637
         ("" (skeep*)
          (("" (typepred "psq")
            (("" (typepred "nsq") (("" (assert) nil nil)) nil)) nil))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (list2array def-decl "T" array2list structures)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch_int_meas subtype "hutch.nsq"
          "{n | hutch.psq(compute_sturm.n) /= 0}")))
       (hutch_int_meas_TCC2 0
        (hutch_int_meas_TCC2-3 nil 3690897919
         ("" (skeep*)
          (("" (assert)
            (("" (typepred "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
              (("" (replace -4 :dir rl)
                (("" (hide -1)
                  (("" (assert)
                    (("" (lemma "sigma_gt_0")
                      (("" (inst?)
                        (("" (assert)
                          (("" (split -)
                            (("1" (assert)
                              (("1" (decompose-equality -3)
                                (("1" (inst - "nsq1")
                                  (("1" (assert)
                                    (("1" (replace -6)
                                      (("1"
                                        (rewrite "list2array_sound")
                                        (("1"
                                          (replace -9)
                                          (("1"
                                            (typepred
                                             "prod_polynomials(p,n,LAMBDA (i:nat): 1,k)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred "n")
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "*" 1)
                              (("2" (skosimp*)
                                (("2" (typepred "n")
                                  (("2" (inst - "n!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (posint_exp application-judgement "posint" exponentiation nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (list2array_sound formula-decl nil array2list structures)
          (i!1 skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (sigma_gt_0 formula-decl nil sigma reals)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (subrange type-eq-decl nil integers nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (length def-decl "nat" list_props nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sequence type-eq-decl nil sequences nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (/= const-decl "boolean" notequal nil)
          (^ const-decl "real" exponentiation nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int_meas subtype "hutch.nsq"
          "{nsq: integers.posnat | hutch.psq(nsq) /= 0}"))
        (hutch_int_meas_TCC2-2 nil 3690897817
         ("" (skeep*)
          (("" (lemma "decidable_intervals_exist")
            (("" (insteep -)
              (("" (skeep -)
                (("" (case "EXISTS (d:nat): (high-low)/(2^d)<eps")
                  (("1" (skeep -)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (replaces -6)
                            (("1" (inst - "d")
                              (("1" (skeep)
                                (("1" (skeep)
                                  (("1" (inst - "low1" "high1")
                                    (("1" (assert)
                                      (("1"
                                        (insteep -)
                                        (("1"
                                          (replaces -3 :dir rl)
                                          (("1"
                                            (replaces -3 :dir rl)
                                            (("1"
                                              (replaces -3 :dir rl)
                                              nil)))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (typepred "eps")
                      (("2" (hide -1)
                        (("2" (lemma "archimedean")
                          (("2" (inst - "eps/(high-low)")
                            (("1" (skolem - "mm")
                              (("1" (case "1/2^mm<=1/mm")
                                (("1" (inst + "mm")
                                  (("1" (cross-mult 1)
                                    (("1" (cross-mult -2)
                                      (("1"
                                        (cross-mult -1)
                                        (("1"
                                          (mult-by -1 "eps")
                                          (("1" (assert) nil)))))))))))
                                 ("2" (cross-mult 1)
                                  (("2" (hide 2)
                                    (("2" (case "FORALL (ii:nat): ii<=2^ii")
                                      (("1" (inst?) (("1" (assert) nil)))
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "ii")
                                          (("1" (grind) nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (case "j = 0")
                                              (("1"
                                                (replaces -1)
                                                (("1" (grind) nil)))
                                               ("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt" +)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))
                             ("2" (split)
                              (("1" (cross-mult 1) nil)
                               ("2" (cross-mult 1) nil))))))))))))))))))))))
          nil)
         nil nil
         (hutch_int_meas subtype "hutch.nsq"
          "{nsq: integers.posnat | hutch.psq(nsq) /= 0}"))
        (hutch_int_meas_TCC2-1 nil 3690123637
         ("" (skeep*)
          (("" (lemma "decidable_intervals_exist")
            (("" (insteep -)
              (("" (skeep -)
                (("" (case "EXISTS (d:nat): (high-low)/(2^d)<eps")
                  (("1" (skeep -)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (replaces -6)
                            (("1" (inst - "d")
                              (("1" (skeep)
                                (("1" (skeep)
                                  (("1" (inst - "low1" "high1")
                                    (("1" (assert)
                                      (("1"
                                        (insteep -)
                                        (("1"
                                          (replaces -3 :dir rl)
                                          (("1"
                                            (replaces -3 :dir rl)
                                            (("1"
                                              (replaces -3 :dir rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "eps")
                      (("2" (hide -1)
                        (("2" (lemma "archimedean")
                          (("2" (inst - "eps/(high-low)")
                            (("1" (skolem - "mm")
                              (("1" (case "1/2^mm<=1/mm")
                                (("1" (inst + "mm")
                                  (("1" (cross-mult 1)
                                    (("1" (cross-mult -2)
                                      (("1"
                                        (cross-mult -1)
                                        (("1"
                                          (mult-by -1 "eps")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (cross-mult 1)
                                  (("2" (hide 2)
                                    (("2" (case "FORALL (ii:nat): ii<=2^ii")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "ii")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (case "j = 0")
                                              (("1"
                                                (replaces -1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt" +)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1" (cross-mult 1) nil nil)
                               ("2" (cross-mult 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((gt_realorder name-judgement "RealOrder" real_orders reals)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (list type-decl nil list_adt nil))
         nil
         (hutch_int_meas subtype "hutch.nsq"
          "{nsq: integers.posnat | hutch.psq(nsq) /= 0}")))
       (hutch_int_meas_TCC3 0
        (hutch_int_meas_TCC3-3 nil 3690897705
         ("" (skeep*)
          (("" (expand "Eq_computed_remainder?")
            (("" (typepred "sqsl")
              (("" (hide -1)
                (("" (assert)
                  (("" (expand "Eq_computed_remainder?")
                    (("" (typepred "nsq")
                      (("" (assert)
                        (("" (flatten)
                          (("" (assert)
                            (("" (case "NOT nsq1=nsq")
                              (("1" (assert) nil nil)
                               ("2" (replace -1)
                                (("2"
                                  (case "(LAMBDA (i: nat): IF i <= nsq THEN psq(i) ELSE 0 ENDIF) = (LAMBDA (i: nat):
                       IF i <= nsq THEN psq1(i) ELSE 0 ENDIF)")
                                  (("1" (assert) nil nil)
                                   ("2" (hide 4)
                                    (("2" (hide -4)
                                      (("2"
                                        (decompose-equality +)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (replace -7 +)
                                              (("2"
                                                (rewrite "list2array_sound")
                                                (("2"
                                                  (typepred "psq")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (list2array_sound formula-decl nil array2list structures)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (/= const-decl "boolean" notequal nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list2array def-decl "T" array2list structures)
          (<= const-decl "bool" reals nil)
          (subrange type-eq-decl nil integers nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (length def-decl "nat" list_props nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sequence type-eq-decl nil sequences nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (^ const-decl "real" exponentiation nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int_meas subtype "hutch.sqsl"
          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))"))
        (hutch_int_meas_TCC3-2 nil 3690132901
         ("" (skeep*)
          (("" (lemma "decidable_intervals_exist")
            (("" (insteep -)
              (("" (skeep -)
                (("" (case "EXISTS (d:nat): (high-low)/(2^d)<eps")
                  (("1" (skeep -)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (replaces -6)
                            (("1" (inst - "d")
                              (("1" (skeep)
                                (("1" (skeep)
                                  (("1" (inst - "low1" "high1")
                                    (("1" (assert)
                                      (("1"
                                        (insteep -)
                                        (("1"
                                          (replaces -3 :dir rl)
                                          (("1"
                                            (replaces -3 :dir rl)
                                            (("1"
                                              (replaces -3 :dir rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "eps")
                      (("2" (hide -1)
                        (("2" (lemma "archimedean")
                          (("2" (inst - "eps/(high-low)")
                            (("1" (skolem - "mm")
                              (("1" (case "1/2^mm<=1/mm")
                                (("1" (inst + "mm")
                                  (("1" (cross-mult 1)
                                    (("1" (cross-mult -2)
                                      (("1"
                                        (cross-mult -1)
                                        (("1"
                                          (mult-by -1 "eps")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (cross-mult 1)
                                  (("2" (hide 2)
                                    (("2" (case "FORALL (ii:nat): ii<=2^ii")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "ii")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (case "j = 0")
                                              (("1"
                                                (replaces -1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt" +)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1" (cross-mult 1) nil nil)
                               ("2" (cross-mult 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((gt_realorder name-judgement "RealOrder" real_orders reals)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (list2array def-decl "T" array2list structures)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (list type-decl nil list_adt nil))
         nil
         (hutch_int_meas subtype "hutch.sqsl"
          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))"))
        (hutch_int_meas_TCC3-1 nil 3690132672 ("" (subtype-tcc) nil nil) nil
         nil
         (hutch_int_meas subtype "hutch.sqsl"
          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))")))
       (hutch_int_meas_TCC4 0
        (hutch_int_meas_TCC4-4 nil 3690904491
         (""
          (case "NOT FORALL (eps:posreal,low,high:real): EXISTS (d: nat): (high - low) / (2 ^ d) < eps")
          (("1" (hide 2)
            (("1" (skeep)
              (("1" (case "low<high")
                (("1" (typepred "eps")
                  (("1" (hide -1)
                    (("1" (lemma "archimedean")
                      (("1" (inst - "eps/(high-low)")
                        (("1" (skolem - "mm")
                          (("1" (case "1/2^mm<=1/mm")
                            (("1" (inst + "mm")
                              (("1" (cross-mult 1)
                                (("1" (cross-mult -2)
                                  (("1" (cross-mult -1)
                                    (("1" (mult-by -1 "eps")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (cross-mult 1)
                              (("2" (hide 2)
                                (("2" (case "FORALL (ii:nat): ii<=2^ii")
                                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (induct "ii")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (skeep*)
                                        (("2"
                                          (case "j = 0")
                                          (("1"
                                            (replaces -1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt" +)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (cross-mult 1) nil nil)
                           ("2" (cross-mult 1) nil nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst + "0") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (label "hyp" -1)
            (("2" (hide "hyp")
              (("2" (skeep*)
                (("2" (case "NOT sumsquares")
                  (("1" (assert)
                    (("1" (lemma "decidable_intervals_exist")
                      (("1" (insteep -)
                        (("1" (skeep -)
                          (("1" (reveal "hyp")
                            (("1" (insteep -)
                              (("1" (skeep -)
                                (("1" (expand "nonempty?")
                                  (("1" (expand "empty?")
                                    (("1" (expand "member")
                                      (("1"
                                        (inst - "d")
                                        (("1"
                                          (replaces -6)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "low1" "high1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (insteep -)
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred "sqsl")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -4
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (case
                                                                       "psq1=psq AnD nsq=nsq1")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "psq")
                                                                        (("2"
                                                                          (typepred
                                                                           "nsq1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -5
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (replace
                                                                                 -7
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "nsq")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (lemma "decidable_intervals_sq_exist")
                      (("2" (insteep -)
                        (("2" (skeep -)
                          (("2" (reveal "hyp")
                            (("2" (insteep -)
                              (("2" (skeep -)
                                (("2" (expand "nonempty?")
                                  (("2" (expand "empty?")
                                    (("2" (expand "member")
                                      (("2"
                                        (replaces -7)
                                        (("2"
                                          (inst - "d")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst - "low1" "high1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (decidable_intervals_sq_exist formula-decl nil hutch nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (empty? const-decl "bool" sets nil)
          (sqsl skolem-const-decl
           "{sqsl | (NOT sumsquares) IMPLIES Eq_computed_remainder?(psq, nsq)(sqsl)}"
           hutch nil)
          (nsq skolem-const-decl "{nsq: posnat |
   (NOT sumsquares) IMPLIES
    psq(nsq) /= 0 AND
     nsq = length(prod_polynomials_list(p, n, LAMBDA i: 1, k)) - 1}" hutch
           nil)
          (psq skolem-const-decl "{psq: [nat -> int] |
   (NOT sumsquares) IMPLIES
    psq = list2array[int](0)(prod_polynomials_list(p, n, LAMBDA i: 1, k))}"
           hutch nil)
          (sumsquares skolem-const-decl "bool" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (length def-decl "nat" list_props nil)
          (subrange type-eq-decl nil integers nil)
          (list2array def-decl "T" array2list structures)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (sound_signs? const-decl "bool" hutch nil)
          (member const-decl "bool" sets nil)
          (nonempty? const-decl "bool" sets nil)
          (decidable_intervals_exist formula-decl nil hutch nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
           real_types nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (high skolem-const-decl "real" hutch nil)
          (low skolem-const-decl "real" hutch nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (eps skolem-const-decl "posreal" hutch nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (<= const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (div_mult_pos_lt1 formula-decl nil real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (posreal_times_posreal_is_posreal application-judgement "posreal"
           real_types nil)
          (div_mult_pos_le1 formula-decl nil real_props nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (div_mult_pos_le2 formula-decl nil real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (div_mult_pos_lt2 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (times_div2 formula-decl nil real_props nil)
          (TRUE const-decl "bool" booleans nil)
          (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (expt def-decl "real" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (pred type-eq-decl nil defined_types nil)
          (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
          (div_mult_pos_ge1 formula-decl nil real_props nil)
          (archimedean formula-decl nil real_props nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (> const-decl "bool" reals nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (< const-decl "bool" reals nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (/= const-decl "boolean" notequal nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil))
         nil (hutch_int_meas subtype "hutch.Aset" "(sets[nat].nonempty?)"))
        (hutch_int_meas_TCC4-3 nil 3690897694
         ("" (skeep*)
          (("" (lemma "decidable_intervals_exist")
            (("" (insteep -)
              (("" (skeep -)
                (("" (case "EXISTS (d:nat): (high-low)/(2^d)<eps")
                  (("1" (skeep -)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (replaces -6)
                            (("1" (inst - "d")
                              (("1" (skeep)
                                (("1" (skeep)
                                  (("1" (inst - "low1" "high1")
                                    (("1" (assert)
                                      (("1"
                                        (insteep -)
                                        (("1"
                                          (replaces -3 :dir rl)
                                          (("1"
                                            (replaces -3 :dir rl)
                                            (("1"
                                              (replaces -3 :dir rl)
                                              nil)))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (typepred "eps")
                      (("2" (hide -1)
                        (("2" (lemma "archimedean")
                          (("2" (inst - "eps/(high-low)")
                            (("1" (skolem - "mm")
                              (("1" (case "1/2^mm<=1/mm")
                                (("1" (inst + "mm")
                                  (("1" (cross-mult 1)
                                    (("1" (cross-mult -2)
                                      (("1"
                                        (cross-mult -1)
                                        (("1"
                                          (mult-by -1 "eps")
                                          (("1" (assert) nil)))))))))))
                                 ("2" (cross-mult 1)
                                  (("2" (hide 2)
                                    (("2" (case "FORALL (ii:nat): ii<=2^ii")
                                      (("1" (inst?) (("1" (assert) nil)))
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "ii")
                                          (("1" (grind) nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (case "j = 0")
                                              (("1"
                                                (replaces -1)
                                                (("1" (grind) nil)))
                                               ("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt" +)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))
                             ("2" (split)
                              (("1" (cross-mult 1) nil)
                               ("2" (cross-mult 1) nil))))))))))))))))))))))
          nil)
         nil nil
         (hutch_int_meas subtype "hutch.Aset" "(sets[nat].nonempty?)"))
        (hutch_int_meas_TCC4-2 nil 3690628761
         ("" (skeep*)
          (("" (lemma "decidable_intervals_exist")
            (("" (insteep -)
              (("" (skeep -)
                (("" (case "EXISTS (d:nat): (high-low)/(2^d)<eps")
                  (("1" (skeep -)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (replaces -6)
                            (("1" (inst - "d")
                              (("1" (skeep)
                                (("1" (skeep)
                                  (("1" (inst - "low1" "high1")
                                    (("1" (assert)
                                      (("1"
                                        (insteep -)
                                        (("1"
                                          (replaces -3 :dir rl)
                                          (("1"
                                            (replaces -3 :dir rl)
                                            (("1"
                                              (replaces -3 :dir rl)
                                              nil)))))))))))))))))))))))))))
                   ("2" (hide-all-but 1)
                    (("2" (typepred "eps")
                      (("2" (hide -1)
                        (("2" (lemma "archimedean")
                          (("2" (inst - "eps/(high-low)")
                            (("1" (skolem - "mm")
                              (("1" (case "1/2^mm<=1/mm")
                                (("1" (inst + "mm")
                                  (("1" (cross-mult 1)
                                    (("1" (cross-mult -2)
                                      (("1"
                                        (cross-mult -1)
                                        (("1"
                                          (mult-by -1 "eps")
                                          (("1" (assert) nil)))))))))))
                                 ("2" (cross-mult 1)
                                  (("2" (hide 2)
                                    (("2" (case "FORALL (ii:nat): ii<=2^ii")
                                      (("1" (inst?) (("1" (assert) nil)))
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "ii")
                                          (("1" (grind) nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (case "j = 0")
                                              (("1"
                                                (replaces -1)
                                                (("1" (grind) nil)))
                                               ("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt" +)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))
                             ("2" (split)
                              (("1" (cross-mult 1) nil)
                               ("2" (cross-mult 1) nil))))))))))))))))))))))
          nil)
         nil nil
         (hutch_int_meas subtype "hutch.Aset" "(sets[nat].nonempty?)"))
        (hutch_int_meas_TCC4-1 nil 3690626725 ("" (subtype-tcc) nil nil)
         ((list type-decl nil list_adt nil)
          (list2array def-decl "T" array2list structures)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures))
         nil (hutch_int_meas subtype "hutch.Aset" "(sets[nat].nonempty?)")))
       (signs_upd_TCC1 0
        (signs_upd_TCC1-1 nil 3690125732 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (/= const-decl "boolean" notequal nil))
         nil
         (signs_upd subtype "hutch.n(hutch.i)"
                    "{d: integers.posnat | hutch.p(hutch.i)(d) /= 0}")))
       (signs_upd_TCC2 0
        (signs_upd_TCC2-1 nil 3690125732 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (/= const-decl "boolean" notequal nil))
         nil
         (signs_upd subtype "hutch.i"
                    "below[length[list[list[int]]](slseq)]")))
       (signs_upd_TCC3 0
        (signs_upd_TCC3-1 nil 3690125732
         ("" (skeep*)
          (("" (typepred "slseq")
            (("" (hide -1)
              (("" (expand "Eq_computed_remainder_seq?")
                (("" (invoke (name "AA" "%1") (! -1 2))
                  (("1" (replaces -1)
                    (("1" (typepred "AA")
                      (("1" (inst - "i")
                        (("1" (assert)
                          (("1" (replace -4 +)
                            (("1" (replace -3 :dir rl)
                              (("1" (expand "Eq_computed_remainder?")
                                (("1" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (skosimp*)
                      (("2" (assert)
                        (("2" (typepred "n")
                          (("2" (inst - "j!1")
                            (("2" (flatten)
                              (("2" (assert)
                                (("2" (expand "poly_deriv")
                                  (("2" (mult-by 1 "n(j!1)")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1)
                    (("3" (skosimp*)
                      (("3" (expand "poly_deriv") (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (typepred "n")
                      (("4" (inst - "j!1") (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (j!1 skolem-const-decl "nat" hutch nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (both_sides_times1 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (i skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (poly_deriv const-decl "real" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (below type-eq-decl nil naturalnumbers nil)
          (< const-decl "bool" reals nil)
          (listn type-eq-decl nil listn structures)
          (length def-decl "nat" list_props nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (signs_upd subtype
                    "list_props[list[list[int]]].nth(hutch.slseq, hutch.i)"
                    "(compute_sturm.Eq_computed_remainder?(hutch.p(hutch.i), hutch.n(hutch.i)))")))
       (signs_upd_sound 0
        (signs_upd_sound-1 nil 3690126400
         ("" (skeep*)
          (("" (expand "sound_signs?" +)
            (("" (skeep*)
              ((""
                (name "G"
                      "signs_upd(k, p, n, low1, high1, known_signs, slseq)(i)")
                (("" (replace -1)
                  (("" (expand "signs_upd")
                    (("" (lemma "list2array_sound[int]")
                      (("" (inst?)
                        (("1" (assert)
                          (("1" (replaces -1)
                            (("1"
                              (typepred "array2list[int]
                  (1 + k)
                  (LAMBDA (i: nat):
                     IF i > k THEN 0
                     ELSIF known_signs(i) /= 0 THEN known_signs(i)
                     ELSIF roots_in_int(p(i),
                                               n(i),
                                               low1,
                                               high1,
                                               nth(slseq, i))
                            /= 0
                       THEN 0
                     ELSIF polynomial(p(i), n(i))(low1) > 0 THEN 1
                     ELSE -1
                     ENDIF)")
                              (("1" (inst - "i")
                                (("1" (replace -3 :dir rl)
                                  (("1" (hide (-1 -2))
                                    (("1" (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lift-if -1)
                                          (("1"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "known_signs(i)>0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (skeep -)
                                                        (("1"
                                                          (expand
                                                           "sound_signs?")
                                                          (("1"
                                                            (inst - "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst + "x")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "sound_signs?")
                                                        (("2"
                                                          (inst -4 "i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "low1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "low1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "sound_signs?")
                                                        (("3"
                                                          (inst - "i")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (inst - "x")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (expand
                                                         "sound_signs?")
                                                        (("4"
                                                          (inst - "i")
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "NOT known_signs(i)<0")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (hide (1 2))
                                                      (("2"
                                                        (expand
                                                         "sound_signs?")
                                                        (("2"
                                                          (inst - "i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (split +)
                                                                (("1"
                                                                  (skeep -)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (inst
                                                                   -
                                                                   "low1")
                                                                  (("3"
                                                                    (inst
                                                                     -
                                                                     "low1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "roots_in_int")
                                                        (("1"
                                                          (lemma
                                                           "number_roots_interval_def")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split -)
                                                                (("1"
                                                                  (skeep -)
                                                                  (("1"
                                                                    (typepred
                                                                     "bij(0)")
                                                                    (("1"
                                                                      (hide 1)
                                                                      (("1"
                                                                        (expand
                                                                         "contains?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "bij(0)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -
                                                                               "bij(0)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (inst
                                                                               -
                                                                               "bij(0)")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (expand
                                                               "roots_in_int")
                                                              (("1"
                                                                (lemma
                                                                 "number_roots_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (expand
                                                                           "bijective?")
                                                                          (("1"
                                                                            (expand
                                                                             "surjective?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "contains?")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "i")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst - "low1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep*)
                                                              (("3"
                                                                (case
                                                                 "x>=low1")
                                                                (("1"
                                                                  (lemma
                                                                   "poly_intermediate_value_dec")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     _
                                                                     "0"
                                                                     _
                                                                     "low1"
                                                                     "x")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skolem
                                                                           -
                                                                           "ww")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "roots_in_int")
                                                                              (("1"
                                                                                (lemma
                                                                                 "number_roots_interval_def")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (skeep
                                                                                         -)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "bijective?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "surjective?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "ww")
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "contains?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "n")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split +)
                                                            (("1"
                                                              (skeep -)
                                                              (("1"
                                                                (expand
                                                                 "roots_in_int")
                                                                (("1"
                                                                  (lemma
                                                                   "number_roots_interval_def")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (skeep
                                                                           -)
                                                                          (("1"
                                                                            (expand
                                                                             "bijective?")
                                                                            (("1"
                                                                              (expand
                                                                               "surjective?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x")
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "contains?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "n")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep*)
                                                              (("2"
                                                                (lemma
                                                                 "poly_intermediate_value_inc")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   _
                                                                   "0"
                                                                   _
                                                                   "low1"
                                                                   "x")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skolem
                                                                         -
                                                                         "ww")
                                                                        (("2"
                                                                          (expand
                                                                           "roots_in_int")
                                                                          (("2"
                                                                            (lemma
                                                                             "number_roots_interval_def")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (skeep
                                                                                     -)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bijective?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "surjective?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "ww")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "contains?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "n")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst - "low1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (assert)
                                                              (("4"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("4"
                                                                  (expand
                                                                   "abs")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide (-1 2))
                                (("2" (skeep*)
                                  (("2" (typepred "slseq")
                                    (("2" (hide -1)
                                      (("2"
                                        (expand "Eq_computed_remainder_seq?")
                                        (("2"
                                          (typepred
                                           "array2list[list[list[int]]]
           (1 + k)
           (LAMBDA (j: nat):
              IF j <= k
                THEN remainder_seq(LAMBDA (i: nat):
                                     IF i <= n(j)
                                     THEN p(j)(i)
                                     ELSE 0
                                     ENDIF,
                                   n(j),
                                   poly_deriv(LAMBDA
                                              (i: nat):
                                              IF i <= n(j)
                                              THEN p(j)(i)
                                              ELSE 0
                                              ENDIF),
                                   n(j) - 1)
              ELSE cons[list[int]]
                       (cons[int](0, null[int]), null[list[int]])
              ENDIF)")
                                          (("1"
                                            (replace -4 :dir rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (inst - "i!1")
                                                (("1"
                                                  (replace -2 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (expand
                                                         "Eq_computed_remainder?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (inst - "j")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "poly_deriv")
                                                      (("2"
                                                        (mult-by -1 "n(j)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep*)
                                            (("3"
                                              (expand "poly_deriv")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep*)
                                            (("4"
                                              (typepred "n")
                                              (("4"
                                                (inst - "j")
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide 2)
                                (("3" (skeep*)
                                  (("3" (assert)
                                    (("3" (typepred "slseq")
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (expand
                                           "Eq_computed_remainder_seq?")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (hide 2)
                                (("4" (skeep*)
                                  (("4" (typepred "n")
                                    (("4" (inst - "i!1")
                                      (("1"
                                        (assert)
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep*)
                            (("2" (hide -2)
                              (("2" (expand "Eq_computed_remainder?")
                                (("2" (typepred "slseq")
                                  (("2" (hide -1)
                                    (("2"
                                      (expand "Eq_computed_remainder_seq?")
                                      (("2"
                                        (typepred
                                         "array2list[list[list[int]]]
           (1 + k)
           (LAMBDA (j: nat):
              IF j <= k
                THEN remainder_seq(LAMBDA (i: nat):
                                     IF i <= n(j)
                                     THEN p(j)(i)
                                     ELSE 0
                                     ENDIF,
                                   n(j),
                                   poly_deriv(LAMBDA
                                              (i: nat):
                                              IF i <= n(j)
                                              THEN p(j)(i)
                                              ELSE 0
                                              ENDIF),
                                   n(j) - 1)
              ELSE cons[list[int]]
                       (cons[int](0, null[int]), null[list[int]])
              ENDIF)")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (inst - "i!1")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep*)
                                          (("2"
                                            (expand "poly_deriv")
                                            (("2"
                                              (hide 3)
                                              (("2"
                                                (typepred "n")
                                                (("2"
                                                  (inst - "j")
                                                  (("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 3)
                                          (("3"
                                            (skeep*)
                                            (("3"
                                              (expand "poly_deriv")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide 3)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (typepred "n")
                                              (("4"
                                                (inst - "j")
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (hide -1)
                            (("3" (skeep*)
                              (("3" (typepred "slseq")
                                (("3" (hide -1)
                                  (("3" (expand "Eq_computed_remainder_seq?")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (skeep*)
                            (("4" (typepred "n")
                              (("4" (inst - "i!1")
                                (("1" (ground) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((sound_signs? const-decl "bool" hutch nil)
          (signs_upd const-decl "[nat -> int]" hutch nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (number nonempty-type-decl nil numbers nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (known_signs skolem-const-decl "[nat -> int]" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (slseq skolem-const-decl "(Eq_computed_remainder_seq?(k, p, n))"
           hutch nil)
          (length def-decl "nat" list_props nil)
          (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (listn type-eq-decl nil listn structures)
          (below type-eq-decl nil naturalnumbers nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (roots_in_int const-decl "nat" hutch nil)
          (sequence type-eq-decl nil sequences nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (j skolem-const-decl "nat" hutch nil)
          (both_sides_times_pos_gt1 formula-decl nil real_props nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (poly_deriv const-decl "real" polynomials reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
           real_defs nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (abs_nat_rew formula-decl nil abs_rews ints)
          (x skolem-const-decl "real" hutch nil)
          (poly_intermediate_value_inc formula-decl nil polynomials reals)
          (ww skolem-const-decl "real" hutch nil)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (surjective? const-decl "bool" functions nil)
          (low1 skolem-const-decl "real" hutch nil)
          (high1 skolem-const-decl "real" hutch nil)
          (x!1 skolem-const-decl "real" hutch nil)
          (i skolem-const-decl "upto(k)" hutch nil)
          (bijective? const-decl "bool" functions nil)
          (ww skolem-const-decl "real" hutch nil)
          (poly_intermediate_value_dec formula-decl nil polynomials reals)
          (RealInt type-eq-decl nil RealInt reals)
          (contains? const-decl "bool" RealInt reals)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (number_roots_interval_def formula-decl nil compute_sturm Sturm)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (list2array_sound formula-decl nil array2list structures)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         shostak))
       (hutch_int_basic_TCC1 0
        (hutch_int_basic_TCC1-1 nil 3690128946
         ("" (skeep*) (("" (typepred "sqsl") (("" (assert) nil nil)) nil))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (^ const-decl "real" exponentiation nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (list2array def-decl "T" array2list structures)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (/= const-decl "boolean" notequal nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch_int_basic subtype "hutch.sqsl"
                          "(compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq))")))
       (hutch_int_basic_TCC2 0
        (hutch_int_basic_TCC2-2 nil 3690912494
         ("" (skeep*)
          (("" (typepred "psq")
            (("" (split -2)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (replaces -2)
                    (("1" (typepred "nsq")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (replaces -2)
                            (("1" (lemma "decide_interval_def")
                              (("1" (insteep)
                                (("1" (assert)
                                  (("1" (insteep)
                                    (("1" (assert) (("1" (ground) nil nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (typepred "psq")
                                        (("2"
                                          (replace 3)
                                          (("2"
                                            (replaces -1 :dir rl)
                                            (("2"
                                              (typepred "sqsl")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "nsq")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (hide -3)
                    (("2" (lemma "decide_interval_def")
                      (("2" (insteep)
                        (("2" (assert)
                          (("2" (insteep)
                            (("2" (assert) (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (list2array def-decl "T" array2list structures)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (BoolTuple type-eq-decl nil hutch nil)
          (BoolExpr type-eq-decl nil hutch nil)
          (sound_signs? const-decl "bool" hutch nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (sqsl skolem-const-decl
           "{sqsl | (NOT sumsquares) IMPLIES Eq_computed_remainder?(psq, nsq)(sqsl)}"
           hutch nil)
          (nsq skolem-const-decl "{nsq: posnat |
   (NOT sumsquares) IMPLIES
    psq(nsq) /= 0 AND
     nsq = length(prod_polynomials_list(p, n, LAMBDA i: 1, k)) - 1}" hutch
           nil)
          (psq skolem-const-decl "{psq: [nat -> int] |
   (NOT sumsquares) IMPLIES
    psq = list2array[int](0)(prod_polynomials_list(p, n, LAMBDA i: 1, k))}"
           hutch nil)
          (sumsquares skolem-const-decl "bool" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (decide_interval_def formula-decl nil hutch nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch_int_basic subtype
                          "hutch.decide_interval(hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.low, hutch.high, hutch.known_signs, hutch.unsatl?, hutch.slseq)"
                          "{bb: booleans.bool | booleans.IMPLIES((booleans.IMPLIES(hutch.unsatl?, ((booleans.NOT)(hutch.be(LAMBDA (i: naturalnumbers.upto(hutch.NumTerms)): preprocessing_univariate.rel5(hutch.RelF6(i))(polynomials.polynomial(hutch.p(hutch.PolyTerms(i)), hutch.n(hutch.PolyTerms(i)))(hutch.low), 0)))))), (booleans.IFF(bb, hutch.SystemSat?(hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, LAMBDA (qz: reals.real): booleans.AND(reals.<=(hutch.low, qz), reals.<=(qz, hutch.high))))))}"))
        (hutch_int_basic_TCC2-1 nil 3690128946
         ("" (skeep*) (("" (assert) (("" (postpone) nil nil)) nil)) nil)
         ((number_roots_interval const-decl "nat" compute_sturm Sturm)
          (roots_closed_int const-decl "int" compute_sturm Sturm)
          (poly_rootless_width const-decl "posreal" more_polynomial_props
                               reals)
          (poly_n_deriv const-decl "real" polynomials reals)
          (C const-decl "posnat" binomial reals)
          (polynomial const-decl "[real -> real]" polynomials reals))
         nil
         (hutch_int_basic subtype
                          "hutch.decide_interval(hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.low, hutch.high, hutch.known_signs, hutch.unsatl?, hutch.slseq)"
                          "{bb: booleans.bool | booleans.IMPLIES((booleans.IMPLIES(hutch.unsatl?, ((booleans.NOT)(hutch.be(LAMBDA (i: naturalnumbers.upto(hutch.NumTerms)): preprocessing_univariate.rel5(hutch.RelF6(i))(polynomials.polynomial(hutch.p(hutch.PolyTerms(i)), hutch.n(hutch.PolyTerms(i)))(hutch.low), 0)))))), (booleans.IFF(bb, hutch.SystemSat?(hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, LAMBDA (qz: reals.real): booleans.AND(reals.<=(hutch.low, qz), reals.<=(qz, hutch.high))))))}")))
       (hutch_int_basic_TCC3 0
        (hutch_int_basic_TCC3-3 "" 3790099689
         ("" (skeep*)
          (("" (typepred "psq")
            (("" (typepred "nsq")
              (("" (lemma "decide_interval_def") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak
         (hutch_int_basic subtype
                          "number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2)"
                          "{high | reals.<(hutch.low, hutch.high)}"))
        (hutch_int_basic_TCC3-2 nil 3690909236
         ("" (skeep*)
          (("" (typepred "psq")
            (("" (replaces -1)
              (("" (typepred "nsq")
                (("" (replaces -3)
                  (("" (lemma "decide_interval_def")
                    (("" (insteep)
                      (("" (assert)
                        (("" (insteep) (("" (assert) nil))))))))))))))))))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (list2array def-decl "T" array2list structures)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (decide_interval_def formula-decl nil hutch nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch_int_basic subtype
                          "number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2)"
                          "{high | reals.<(hutch.low, hutch.high)}"))
        (hutch_int_basic_TCC3-1 nil 3690128946
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (insteep)
              (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ((lt_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (list type-decl nil list_adt nil))
         nil
         (hutch_int_basic subtype
                          "number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2)"
                          "{high | reals.<(hutch.low, hutch.high)}")))
       (hutch_int_basic_TCC4 0
        (hutch_int_basic_TCC4-3 "" 3790099689
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (insteep)
              (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         nil shostak
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2)))"))
        (hutch_int_basic_TCC4-2 nil 3690912520
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (insteep)
              (("" (assert) (("" (inst?) (("" (assert) nil))))))))))
          nil)
         ((signs_upd_sound formula-decl nil hutch nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (< const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (sound_signs? const-decl "bool" hutch nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2)))"))
        (hutch_int_basic_TCC4-1 nil 3690128946
         ("" (skeep*)
          (("" (expand "hutch_int_meas" :assert? none)
            (("" (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
              (("" (replace -1)
                (("" (name "nnsq" "length(ppl)-1")
                  (("" (name "ppsq" "list2array[int](0)(ppl)")
                    (("" (assert)
                      ((""
                        (name "Asetbig" "(LAMBDA (d: nat):
                                         FORALL (low1, high1: real):
                                           low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                                            IMPLIES
                                            (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                               decidable_interval(k,
                                                                  p,
                                                                  n,
                                                                  list2array[int](0)(ppl),
                                                                  length(ppl) - 1,
                                                                  low1,
                                                                  high1,
                                                                  known_signs,
                                                                  slseq,
                                                                  sqsl)))")
                        (("" (replace -1)
                          ((""
                            (name "Asetsmall" "(LAMBDA (d: nat):
                                        FORALL (low1, high1: real):
                                          low1 < high1 AND
                                           high1 - low1 <= ((high + low) / 2 - low) / (2 ^ d)
                                           IMPLIES
                                           (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                              decidable_interval(k,
                                                                 p,
                                                                 n,
                                                                 list2array[int](0)(ppl),
                                                                 length(ppl) - 1,
                                                                 low1,
                                                                 high1,
                                                                 known_signs,
                                                                 slseq,
                                                                 sqsl)))")
                            (("" (replace -1)
                              ((""
                                (case "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                                (("1" (skeep -)
                                  (("1" (typepred "d")
                                    (("1" (typepred "min(Asetsmall)")
                                      (("1"
                                        (inst - "d")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "d<=min(Asetbig)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 4))
                                              (("2"
                                                (name "z" "min(Asetbig)")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (typepred "z")
                                                      (("2"
                                                        (expand
                                                         "Asetbig"
                                                         (-1 2))
                                                        (("2"
                                                          (skeep*)
                                                          (("2"
                                                            (insteep -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "known_signs!1")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "1/2^d<1/2^z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "high-low")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "d-z-1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (induct
                                                                             "kz")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +
                                                                                   2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "min(Asetbig)-1")
                                  (("1" (typepred "min(Asetbig)")
                                    (("1" (inst - "min(Asetbig)-1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "Asetbig(0)")
                                          (("1"
                                            (expand "Asetbig" -1)
                                            (("1"
                                              (inst - "low" "high")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (expand "expt" -1)
                                                    (("1"
                                                      (inst - "known_signs")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "min(Asetbig)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (case "Asetbig(0)")
                                      (("1"
                                        (expand "Asetbig" -1)
                                        (("1"
                                          (inst - "low" "high")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (expand "expt" -1)
                                                (("1"
                                                  (insteep -)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide (-1 -2))
                                          (("2"
                                            (typepred "min(Asetbig)")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand "Asetbig" -1 1)
                                                (("2"
                                                  (expand "Asetsmall" 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst - "low1" "high1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand "^")
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (list type-decl nil list_adt nil)
          (list2array def-decl "T" array2list structures)
          (lt_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2)))")))
       (hutch_int_basic_TCC5 0
        (hutch_int_basic_TCC5-3 nil 3690912536
         ("" (skeep*)
          (("" (case "NOT sumsquares")
            (("1" (replace 1)
              (("1" (expand "hutch_int_meas" :assert? none)
                (("1" (hide 1)
                  (("1"
                    (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                    (("1" (replace -1)
                      (("1" (name "nnsq" "length(ppl)-1")
                        (("1" (name "ppsq" "list2array[int](0)(ppl)")
                          (("1" (assert)
                            (("1"
                              (name "Asetbig" "(LAMBDA (d: nat):
                                                                       FORALL (low1, high1: real):
                                                                         low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                                                                          IMPLIES
                                                                          (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                                             decidable_interval(k,
                                                                                                p,
                                                                                                n,
                                                                                                list2array[int](0)(ppl),
                                                                                                length(ppl) - 1,
                                                                                                low1,
                                                                                                high1,
                                                                                                known_signs,
                                                                                                slseq,
                                                                                                sqsl)))")
                              (("1" (replace -1)
                                (("1"
                                  (name "Asetsmall" "(LAMBDA (d: nat):
                                                                        FORALL (low1, high1: real):
                                                                          low1 < high1 AND
                                                                           high1 - low1 <= ((high + low) / 2 - low) / (2 ^ d)
                                                                           IMPLIES
                                                                           (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                                              decidable_interval(k,
                                                                                                 p,
                                                                                                 n,
                                                                                                 list2array[int](0)(ppl),
                                                                                                 length(ppl) - 1,
                                                                                                 low1,
                                                                                                 high1,
                                                                                                 known_signs,
                                                                                                 slseq,
                                                                                                 sqsl)))")
                                  (("1" (replace -1)
                                    (("1"
                                      (case
                                       "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (typepred "d")
                                          (("1"
                                            (typepred "min(Asetsmall)")
                                            (("1"
                                              (inst - "d")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "d<=min(Asetbig)")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide (-1 -2 -3 -4 4))
                                                    (("2"
                                                      (name
                                                       "z"
                                                       "min(Asetbig)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (typepred "z")
                                                            (("2"
                                                              (expand
                                                               "Asetbig"
                                                               (-1 2))
                                                              (("2"
                                                                (skeep*)
                                                                (("2"
                                                                  (insteep -)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "known_signs!1")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "1/2^d<1/2^z")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (mult-by
                                                                             -1
                                                                             "high-low")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "d-z-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (induct
                                                                                   "kz")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst + "min(Asetbig)-1")
                                        (("1"
                                          (typepred "min(Asetbig)")
                                          (("1"
                                            (inst - "min(Asetbig)-1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case "Asetbig(0)")
                                                (("1"
                                                  (expand "Asetbig" -1)
                                                  (("1"
                                                    (inst - "low" "high")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "^" -1 1)
                                                        (("1"
                                                          (expand "expt" -1)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "known_signs")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "psq")
                                                                (("1"
                                                                  (typepred
                                                                   "nsq")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       +)
                                                                      (("1"
                                                                        (replace
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "Asetbig(0)")
                                            (("1"
                                              (expand "Asetbig" -1)
                                              (("1"
                                                (inst - "low" "high")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^" -1)
                                                    (("1"
                                                      (expand "expt" -1)
                                                      (("1"
                                                        (insteep -)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred "psq")
                                                            (("1"
                                                              (typepred "nsq")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (reveal +)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide (-1 -2))
                                                (("2"
                                                  (typepred "min(Asetbig)")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand "Asetbig" -1 1)
                                                      (("2"
                                                        (expand "Asetsmall" 2)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "low1"
                                                             "high1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand "^")
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (skeep*)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "sqsl")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (typepred "psq")
                                              (("2"
                                                (typepred "nsq")
                                                (("2"
                                                  (reveal +)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide 3)
                                    (("3" (skeep*)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (typepred "ppl")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand "sigma" -2)
                                              (("3"
                                                (expand "*" -2)
                                                (("3"
                                                  (lemma "sigma_ge_0")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (split -)
                                                        (("1"
                                                          (typepred "n")
                                                          (("1"
                                                            (inst - "k")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "list2array_sound"
                                                                   +)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -5)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -8)
                                                                          (("1"
                                                                            (typepred
                                                                             "ppl")
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -2))
                                                                                (("1"
                                                                                  (typepred
                                                                                   "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "n")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred "n")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 3)
                                (("2" (skeep*)
                                  (("2" (typepred "sqsl")
                                    (("2" (reveal "+")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (case
                                               "psq = list2array[int](0)(ppl) AND nsq = length[int](ppl) - 1")
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (splash +)
                                                (("1"
                                                  (typepred "nsq")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "psq")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide 3)
                                (("3" (skeep*)
                                  (("3" (assert)
                                    (("3"
                                      (case
                                       "psq = list2array[int](0)(ppl) AND nsq = length[int](ppl) - 1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (typepred "ppl")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (rewrite "list2array_sound")
                                                  (("1"
                                                    (decompose-equality -)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (typepred
                                                             "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "n")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "psq")
                                        (("2"
                                          (typepred "nsq")
                                          (("2"
                                            (reveal +)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 1)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 1)
                (("2" (expand "hutch_int_meas" :assert? none)
                  (("2" (assert)
                    (("2"
                      (name "Asetbig" "(LAMBDA (d: nat):
             FORALL (low1, high1: real):
               low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                IMPLIES
                (FORALL (known_signs:
                           (sound_signs?(k, p, n, low1, high1))):
                   decidable_interval_sq(k,
                                         p,
                                         n,
                                         low1,
                                         high1,
                                         known_signs,
                                         slseq)))")
                      (("2" (replace -1)
                        (("2"
                          (name "Asetsmall" "(LAMBDA (d: nat):
            FORALL (low1, high1: real):
              low1 < high1 AND
               high1 - low1 <= ((high + low) / 2 - low) / (2 ^ d)
               IMPLIES
               (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                  decidable_interval_sq(k,
                                        p,
                                        n,
                                        low1,
                                        high1,
                                        known_signs,
                                        slseq)))")
                          (("2" (replace -1)
                            (("2"
                              (case "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                              (("1" (skeep -)
                                (("1" (typepred "d")
                                  (("1" (typepred "min(Asetsmall)")
                                    (("1" (inst - "d")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "d<=min(Asetbig)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide (-1 -2 -3 -4 4))
                                            (("2"
                                              (name "z" "min(Asetbig)")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (typepred "z")
                                                    (("2"
                                                      (expand
                                                       "Asetbig"
                                                       (-1 2))
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (insteep -)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "known_signs!1")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "1/2^d<1/2^z")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "high-low")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "d-z-1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (induct
                                                                           "kz")
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt"
                                                                               +
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst + "min(Asetbig)-1")
                                (("1" (typepred "min(Asetbig)")
                                  (("1" (inst - "min(Asetbig)-1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert)
                                      (("2"
                                        (case "Asetbig(0)")
                                        (("1"
                                          (expand "Asetbig" -1)
                                          (("1"
                                            (inst - "low" "high")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "^" -1 1)
                                                (("1"
                                                  (expand "expt" -1)
                                                  (("1"
                                                    (inst - "known_signs")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (case "Asetbig(0)")
                                    (("1" (expand "Asetbig" -1)
                                      (("1"
                                        (inst - "low" "high")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "^" -1)
                                            (("1"
                                              (expand "expt" -1)
                                              (("1" (insteep -) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (hide (-1 -2))
                                        (("2"
                                          (typepred "min(Asetbig)")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (expand "Asetbig" -1 1)
                                              (("2"
                                                (expand "Asetsmall" 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst - "low1" "high1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand "^")
                                                          (("2"
                                                            (expand "expt" 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((NOT const-decl "[bool -> bool]" booleans nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (hutch_int_meas const-decl "nat" hutch nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (i!1 skolem-const-decl "nat" hutch nil)
          (bijective? const-decl "bool" functions nil)
          (id const-decl "(bijective?[T, T])" identity nil)
          (k skolem-const-decl "nat" hutch nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (list2array_sound formula-decl nil array2list structures)
          (sigma_ge_0 formula-decl nil sigma reals)
          (Asetsmall skolem-const-decl "[nat -> boolean]" hutch nil)
          (set type-eq-decl nil sets nil)
          (nonempty? const-decl "bool" sets nil)
          (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
               min_nat nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (both_sides_times_pos_lt1 formula-decl nil real_props nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (expt def-decl "real" exponentiation nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (pred type-eq-decl nil defined_types nil)
          (posrat_exp application-judgement "posrat" exponentiation nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (div_mult_pos_lt2 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (times_div2 formula-decl nil real_props nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (div_mult_pos_lt1 formula-decl nil real_props nil)
          (Asetbig skolem-const-decl "[nat -> boolean]" hutch nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (decidable_interval const-decl "bool" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (sound_signs? const-decl "bool" hutch nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (list2array def-decl "T" array2list structures)
          (Asetsmall skolem-const-decl "[nat -> boolean]" hutch nil)
          (Asetbig skolem-const-decl "[nat -> boolean]" hutch nil)
          (decidable_interval_sq const-decl "bool" hutch nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq), hutch.unsatl?, hutch.slseq, hutch.sqsl)"
                          "nil"))
        (hutch_int_basic_TCC5-2 nil 3690909212
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (insteep)
              (("" (assert) (("" (inst?) (("" (assert) nil))))))))))
          nil)
         ((lt_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (list type-decl nil list_adt nil))
         nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq), hutch.unsatl?, hutch.slseq, hutch.sqsl)"
                          "nil"))
        (hutch_int_basic_TCC5-1 nil 3690128946
         ("" (skeep*) (("" (assert) (("" (postpone) nil nil)) nil)) nil)
         ((lt_realorder name-judgement "RealOrder" real_orders reals)) nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq), hutch.unsatl?, hutch.slseq, hutch.sqsl)"
                          "nil")))
       (hutch_int_basic_TCC6 0
        (hutch_int_basic_TCC6-3 "" 3790099693
         ("" (skeep*)
          (("" (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
            (("" (name "nnsq" "length(ppl)-1")
              (("" (name "ppsq" "list2array[int](0)(ppl)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         nil shostak
         (hutch_int_basic subtype "hutch.high"
                          "{high_1 | reals.<(number_fields./((number_fields.+)(hutch.high, hutch.low), 2), high_1)}"))
        (hutch_int_basic_TCC6-2 nil 3690909182
         ("" (skeep*)
          (("" (expand "hutch_int_meas" :assert? none)
            (("" (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
              (("" (replace -1)
                (("" (name "nnsq" "length(ppl)-1")
                  (("" (name "ppsq" "list2array[int](0)(ppl)")
                    (("" (assert)
                      ((""
                        (name "Asetbig" "(LAMBDA (d: nat):
                                                FORALL (low1, high1: real):
                                                  low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                                                   IMPLIES
                                                   (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                      decidable_interval(k,
                                                                         p,
                                                                         n,
                                                                         list2array[int](0)(ppl),
                                                                         length(ppl) - 1,
                                                                         low1,
                                                                         high1,
                                                                         known_signs,
                                                                         slseq,
                                                                         sqsl)))")
                        (("" (replace -1)
                          ((""
                            (name "Asetsmall" "(LAMBDA (d: nat):
                                               FORALL (low1, high1: real):
                                                 low1 < high1 AND
                                                  high1 - low1 <= ((high + low) / 2 - low) / (2 ^ d)
                                                  IMPLIES
                                                  (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                     decidable_interval(k,
                                                                        p,
                                                                        n,
                                                                        list2array[int](0)(ppl),
                                                                        length(ppl) - 1,
                                                                        low1,
                                                                        high1,
                                                                        known_signs,
                                                                        slseq,
                                                                        sqsl)))")
                            (("" (replace -1)
                              ((""
                                (case "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                                (("1" (skeep -)
                                  (("1" (typepred "d")
                                    (("1" (typepred "min(Asetsmall)")
                                      (("1"
                                        (inst - "d")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "d<=min(Asetbig)")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 4))
                                              (("2"
                                                (name "z" "min(Asetbig)")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (typepred "z")
                                                      (("2"
                                                        (expand
                                                         "Asetbig"
                                                         (-1 2))
                                                        (("2"
                                                          (skeep*)
                                                          (("2"
                                                            (insteep -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "known_signs!1")
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "1/2^d<1/2^z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "high-low")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "d-z-1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (induct
                                                                             "kz")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +
                                                                                   2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                 ("2" (inst + "min(Asetbig)-1")
                                  (("1" (typepred "min(Asetbig)")
                                    (("1" (inst - "min(Asetbig)-1")
                                      (("1" (assert) nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "Asetbig(0)")
                                          (("1"
                                            (expand "Asetbig" -1)
                                            (("1"
                                              (inst - "low" "high")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (expand "expt" -1)
                                                    (("1"
                                                      (inst - "known_signs")
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))))))
                                           ("2"
                                            (typepred "min(Asetbig)")
                                            (("2" (assert) nil)))))))))))
                                   ("2" (assert)
                                    (("2" (case "Asetbig(0)")
                                      (("1"
                                        (expand "Asetbig" -1)
                                        (("1"
                                          (inst - "low" "high")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (expand "expt" -1)
                                                (("1"
                                                  (insteep -)
                                                  (("1"
                                                    (assert)
                                                    nil)))))))))))))
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide (-1 -2))
                                          (("2"
                                            (typepred "min(Asetbig)")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand "Asetbig" -1 1)
                                                (("2"
                                                  (expand "Asetsmall" 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst - "low1" "high1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1" (propax) nil)
                                                           ("2"
                                                            (expand "^")
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil))))))))))))))))))))))))))))))))))))))))))))))))))))))
          nil)
         ((upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (list2array def-decl "T" array2list structures)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (real_plus_real_is_real application-judgement "real" reals nil))
         nil
         (hutch_int_basic subtype "hutch.high"
                          "{high_1 | reals.<(number_fields./((number_fields.+)(hutch.high, hutch.low), 2), high_1)}"))
        (hutch_int_basic_TCC6-1 nil 3690128946
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (assert)
              (("" (insteep)
                (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ((list type-decl nil list_adt nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (hutch_int_basic subtype "hutch.high"
                          "{high_1 | reals.<(number_fields./((number_fields.+)(hutch.high, hutch.low), 2), high_1)}")))
       (hutch_int_basic_TCC7 0
        (hutch_int_basic_TCC7-4 "" 3790099693
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (assert)
              (("" (insteep)
                (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high))"))
        (hutch_int_basic_TCC7-3 nil 3690912583
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (assert)
              (("" (insteep)
                (("" (assert) (("" (inst?) (("" (assert) nil))))))))))))
          nil)
         ((signs_upd_sound formula-decl nil hutch nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (sound_signs? const-decl "bool" hutch nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (< const-decl "bool" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (real_plus_real_is_real application-judgement "real" reals nil))
         nil
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high))"))
        (hutch_int_basic_TCC7-2 nil 3690134824
         ("" (skeep*)
          (("" (expand "hutch_int_meas" :assert? none)
            (("" (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
              (("" (replace -1)
                (("" (name "nnsq" "length(ppl)-1")
                  (("" (name "ppsq" "list2array[int](0)(ppl)")
                    (("" (assert)
                      ((""
                        (name "Asetbig" "(LAMBDA (d: nat):
                                                       FORALL (low1, high1: real):
                                                         low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                                                          IMPLIES
                                                          (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                             decidable_interval(k,
                                                                                p,
                                                                                n,
                                                                                list2array[int](0)(ppl),
                                                                                length(ppl) - 1,
                                                                                low1,
                                                                                high1,
                                                                                known_signs,
                                                                                slseq,
                                                                                sqsl)))")
                        (("" (replace -1)
                          ((""
                            (name "Asetsmall" "(LAMBDA (d: nat):
            FORALL (low1, high1: real):
              low1 < high1 AND
               high1 - low1 <= (high - (high + low) / 2) / (2 ^ d)
               IMPLIES
               (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                  decidable_interval(k,
                                     p,
                                     n,
                                     list2array[int](0)(ppl),
                                     length(ppl) - 1,
                                     low1,
                                     high1,
                                     known_signs,
                                     slseq,
                                     sqsl)))")
                            (("" (replace -1)
                              ((""
                                (case "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                                (("1" (skeep -)
                                  (("1" (typepred "d")
                                    (("1" (typepred "min(Asetsmall)")
                                      (("1"
                                        (inst - "d")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "d<=min(Asetbig)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 4))
                                              (("2"
                                                (name "z" "min(Asetbig)")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (typepred "z")
                                                      (("2"
                                                        (expand
                                                         "Asetbig"
                                                         (-1 2))
                                                        (("2"
                                                          (skeep*)
                                                          (("2"
                                                            (insteep -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "known_signs!1")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "1/2^d<1/2^z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "high-low")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "d-z-1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (induct
                                                                             "kz")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +
                                                                                   2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "min(Asetbig)-1")
                                  (("1" (typepred "min(Asetbig)")
                                    (("1" (inst - "min(Asetbig)-1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "Asetbig(0)")
                                          (("1"
                                            (expand "Asetbig" -1)
                                            (("1"
                                              (inst - "low" "high")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (expand "expt" -1)
                                                    (("1"
                                                      (inst - "known_signs")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "min(Asetbig)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (case "Asetbig(0)")
                                      (("1"
                                        (expand "Asetbig" -1)
                                        (("1"
                                          (inst - "low" "high")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (expand "expt" -1)
                                                (("1"
                                                  (insteep -)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide (-1 -2))
                                          (("2"
                                            (typepred "min(Asetbig)")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand "Asetbig" -1 1)
                                                (("2"
                                                  (expand "Asetsmall" 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst - "low1" "high1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand "^")
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (list type-decl nil list_adt nil)
          (list2array def-decl "T" array2list structures)
          (lt_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high))"))
        (hutch_int_basic_TCC7-1 nil 3690128946
         ("" (skeep*) (("" (assert) (("" (postpone) nil nil)) nil)) nil) nil
         nil
         (hutch_int_basic subtype
                          "hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq)"
                          "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high))")))
       (hutch_int_basic_TCC8 0
        (hutch_int_basic_TCC8-4 nil 3691151991
         ("" (skeep*)
          (("" (case "NOT sumsquares")
            (("1" (replace 1)
              (("1" (expand "hutch_int_meas" :assert? none)
                (("1" (hide 1)
                  (("1"
                    (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                    (("1" (replace -1)
                      (("1" (name "nnsq" "length(ppl)-1")
                        (("1" (name "ppsq" "list2array[int](0)(ppl)")
                          (("1" (assert)
                            (("1"
                              (name "Asetbig" "(LAMBDA (d: nat):
                                                                                FORALL (low1, high1: real):
                                                                                  low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                                                                                   IMPLIES
                                                                                   (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                                                      decidable_interval(k,
                                                                                                         p,
                                                                                                         n,
                                                                                                         list2array[int](0)(ppl),
                                                                                                         length(ppl) - 1,
                                                                                                         low1,
                                                                                                         high1,
                                                                                                         known_signs,
                                                                                                         slseq,
                                                                                                         sqsl)))")
                              (("1" (replace -1)
                                (("1"
                                  (name "Asetsmall" "(LAMBDA (d: nat):
                                                                                   FORALL (low1, high1: real):
                                                                                     low1 < high1 AND
                                                                                      high1 - low1 <= ((high + low) / 2 - low) / (2 ^ d)
                                                                                      IMPLIES
                                                                                      (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                                                         decidable_interval(k,
                                                                                                            p,
                                                                                                            n,
                                                                                                            list2array[int](0)(ppl),
                                                                                                            length(ppl) - 1,
                                                                                                            low1,
                                                                                                            high1,
                                                                                                            known_signs,
                                                                                                            slseq,
                                                                                                            sqsl)))")
                                  (("1" (replace -1)
                                    (("1"
                                      (case
                                       "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (typepred "d")
                                          (("1"
                                            (typepred "min(Asetsmall)")
                                            (("1"
                                              (inst - "d")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "d<=min(Asetbig)")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide (-1 -2 -3 -4 4))
                                                    (("2"
                                                      (name
                                                       "z"
                                                       "min(Asetbig)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (typepred "z")
                                                            (("2"
                                                              (expand
                                                               "Asetbig"
                                                               (-1 2))
                                                              (("2"
                                                                (skeep*)
                                                                (("2"
                                                                  (insteep -)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "known_signs!1")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "1/2^d<1/2^z")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (mult-by
                                                                             -1
                                                                             "high-low")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "d-z-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (induct
                                                                                   "kz")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst + "min(Asetbig)-1")
                                        (("1"
                                          (typepred "min(Asetbig)")
                                          (("1"
                                            (inst - "min(Asetbig)-1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case "Asetbig(0)")
                                                (("1"
                                                  (expand "Asetbig" -1)
                                                  (("1"
                                                    (inst - "low" "high")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "^" -1 1)
                                                        (("1"
                                                          (expand "expt" -1)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "known_signs")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "psq")
                                                                (("1"
                                                                  (typepred
                                                                   "nsq")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       +)
                                                                      (("1"
                                                                        (replace
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "Asetbig(0)")
                                            (("1"
                                              (expand "Asetbig" -1)
                                              (("1"
                                                (inst - "low" "high")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^" -1)
                                                    (("1"
                                                      (expand "expt" -1)
                                                      (("1"
                                                        (insteep -)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred "psq")
                                                            (("1"
                                                              (typepred "nsq")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (reveal +)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide (-1 -2))
                                                (("2"
                                                  (typepred "min(Asetbig)")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand "Asetbig" -1 1)
                                                      (("2"
                                                        (expand "Asetsmall" 2)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "low1"
                                                             "high1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand "^")
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (skeep*)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "sqsl")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (typepred "psq")
                                              (("2"
                                                (typepred "nsq")
                                                (("2"
                                                  (reveal +)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide 3)
                                    (("3" (skeep*)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (typepred "ppl")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand "sigma" -2)
                                              (("3"
                                                (expand "*" -2)
                                                (("3"
                                                  (lemma "sigma_ge_0")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (split -)
                                                        (("1"
                                                          (typepred "n")
                                                          (("1"
                                                            (inst - "k")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "list2array_sound"
                                                                   +)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -5)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -8)
                                                                          (("1"
                                                                            (typepred
                                                                             "ppl")
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -2))
                                                                                (("1"
                                                                                  (typepred
                                                                                   "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "n")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred "n")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 3)
                                (("2" (skeep*)
                                  (("2" (typepred "sqsl")
                                    (("2" (reveal "+")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (case
                                               "psq = list2array[int](0)(ppl) AND nsq = length[int](ppl) - 1")
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (splash +)
                                                (("1"
                                                  (typepred "nsq")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "psq")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide 3)
                                (("3" (skeep*)
                                  (("3" (assert)
                                    (("3"
                                      (case
                                       "psq = list2array[int](0)(ppl) AND nsq = length[int](ppl) - 1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (typepred "ppl")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (rewrite "list2array_sound")
                                                  (("1"
                                                    (decompose-equality -)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (typepred
                                                             "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "n")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "psq")
                                        (("2"
                                          (typepred "nsq")
                                          (("2"
                                            (reveal +)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 1)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 1)
                (("2" (expand "hutch_int_meas" :assert? none)
                  (("2" (assert)
                    (("2"
                      (name "Asetbig" "(LAMBDA (d: nat):
                      FORALL (low1, high1: real):
                        low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                         IMPLIES
                         (FORALL (known_signs:
                                    (sound_signs?(k, p, n, low1, high1))):
                            decidable_interval_sq(k,
                                                  p,
                                                  n,
                                                  low1,
                                                  high1,
                                                  known_signs,
                                                  slseq)))")
                      (("2" (replace -1)
                        (("2"
                          (name "Asetsmall" "(LAMBDA (d: nat):
                     FORALL (low1, high1: real):
                       low1 < high1 AND
                        high1 - low1 <= ((high + low) / 2 - low) / (2 ^ d)
                        IMPLIES
                        (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                           decidable_interval_sq(k,
                                                 p,
                                                 n,
                                                 low1,
                                                 high1,
                                                 known_signs,
                                                 slseq)))")
                          (("2" (replace -1)
                            (("2"
                              (case "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                              (("1" (skeep -)
                                (("1" (typepred "d")
                                  (("1" (typepred "min(Asetsmall)")
                                    (("1" (inst - "d")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "d<=min(Asetbig)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide (-1 -2 -3 -4 4))
                                            (("2"
                                              (name "z" "min(Asetbig)")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (typepred "z")
                                                    (("2"
                                                      (expand
                                                       "Asetbig"
                                                       (-1 2))
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (insteep -)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "known_signs!1")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "1/2^d<1/2^z")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "high-low")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "d-z-1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (induct
                                                                           "kz")
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt"
                                                                               +
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst + "min(Asetbig)-1")
                                (("1" (typepred "min(Asetbig)")
                                  (("1" (inst - "min(Asetbig)-1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert)
                                      (("2"
                                        (case "Asetbig(0)")
                                        (("1"
                                          (expand "Asetbig" -1)
                                          (("1"
                                            (inst - "low" "high")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "^" -1 1)
                                                (("1"
                                                  (expand "expt" -1)
                                                  (("1"
                                                    (inst - "known_signs")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (case "Asetbig(0)")
                                    (("1" (expand "Asetbig" -1)
                                      (("1"
                                        (inst - "low" "high")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "^" -1)
                                            (("1"
                                              (expand "expt" -1)
                                              (("1" (insteep -) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (hide (-1 -2))
                                        (("2"
                                          (typepred "min(Asetbig)")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (expand "Asetbig" -1 1)
                                              (("2"
                                                (expand "Asetsmall" 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst - "low1" "high1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand "^")
                                                          (("2"
                                                            (expand "expt" 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((NOT const-decl "[bool -> bool]" booleans nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (hutch_int_meas const-decl "nat" hutch nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (i!1 skolem-const-decl "nat" hutch nil)
          (bijective? const-decl "bool" functions nil)
          (id const-decl "(bijective?[T, T])" identity nil)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (k skolem-const-decl "nat" hutch nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (list2array_sound formula-decl nil array2list structures)
          (sigma_ge_0 formula-decl nil sigma reals)
          (Asetsmall skolem-const-decl "[nat -> boolean]" hutch nil)
          (set type-eq-decl nil sets nil)
          (nonempty? const-decl "bool" sets nil)
          (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
               min_nat nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (both_sides_times_pos_lt1 formula-decl nil real_props nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (expt def-decl "real" exponentiation nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (pred type-eq-decl nil defined_types nil)
          (posrat_exp application-judgement "posrat" exponentiation nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (div_mult_pos_lt2 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (times_div2 formula-decl nil real_props nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (div_mult_pos_lt1 formula-decl nil real_props nil)
          (Asetbig skolem-const-decl "[nat -> boolean]" hutch nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (decidable_interval const-decl "bool" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (sound_signs? const-decl "bool" hutch nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (list2array def-decl "T" array2list structures)
          (Asetsmall skolem-const-decl "[nat -> boolean]" hutch nil)
          (Asetbig skolem-const-decl "[nat -> boolean]" hutch nil)
          (decidable_interval_sq const-decl "bool" hutch nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (real_plus_real_is_real application-judgement "real" reals nil))
         nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq), booleans.TRUE, hutch.slseq, hutch.sqsl)"
                          "nil"))
        (hutch_int_basic_TCC8-3 nil 3690912600
         ("" (skeep*)
          (("" (expand "hutch_int_meas" :assert? none)
            (("" (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
              (("" (replace -1)
                (("" (name "nnsq" "length(ppl)-1")
                  (("" (name "ppsq" "list2array[int](0)(ppl)")
                    (("" (assert)
                      ((""
                        (name "Asetbig" "(LAMBDA (d: nat):
                                                                     FORALL (low1, high1: real):
                                                                       low1 < high1 AND high1 - low1 <= (high - low) / (2 ^ d)
                                                                        IMPLIES
                                                                        (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                                                           decidable_interval(k,
                                                                                              p,
                                                                                              n,
                                                                                              list2array[int](0)(ppl),
                                                                                              length(ppl) - 1,
                                                                                              low1,
                                                                                              high1,
                                                                                              known_signs,
                                                                                              slseq,
                                                                                              sqsl)))")
                        (("" (replace -1)
                          ((""
                            (name "Asetsmall" "(LAMBDA (d: nat):
                          FORALL (low1, high1: real):
                            low1 < high1 AND
                             high1 - low1 <= (high - (high + low) / 2) / (2 ^ d)
                             IMPLIES
                             (FORALL (known_signs: (sound_signs?(k, p, n, low1, high1))):
                                decidable_interval(k,
                                                   p,
                                                   n,
                                                   list2array[int](0)(ppl),
                                                   length(ppl) - 1,
                                                   low1,
                                                   high1,
                                                   known_signs,
                                                   slseq,
                                                   sqsl)))")
                            (("" (replace -1)
                              ((""
                                (case "EXISTS (d:(Asetsmall)): NOT Asetbig(d)")
                                (("1" (skeep -)
                                  (("1" (typepred "d")
                                    (("1" (typepred "min(Asetsmall)")
                                      (("1"
                                        (inst - "d")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "d<=min(Asetbig)")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 4))
                                              (("2"
                                                (name "z" "min(Asetbig)")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (typepred "z")
                                                      (("2"
                                                        (expand
                                                         "Asetbig"
                                                         (-1 2))
                                                        (("2"
                                                          (skeep*)
                                                          (("2"
                                                            (insteep -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "known_signs!1")
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "1/2^d<1/2^z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "high-low")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "FORALL (kz:nat): 2^z<2^(z+kz+1)")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "d-z-1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (induct
                                                                             "kz")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +
                                                                                   2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                 ("2" (inst + "min(Asetbig)-1")
                                  (("1" (typepred "min(Asetbig)")
                                    (("1" (inst - "min(Asetbig)-1")
                                      (("1" (assert) nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "Asetbig(0)")
                                          (("1"
                                            (expand "Asetbig" -1)
                                            (("1"
                                              (inst - "low" "high")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (expand "expt" -1)
                                                    (("1"
                                                      (inst - "known_signs")
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))))))
                                           ("2"
                                            (typepred "min(Asetbig)")
                                            (("2" (assert) nil)))))))))))
                                   ("2" (assert)
                                    (("2" (case "Asetbig(0)")
                                      (("1"
                                        (expand "Asetbig" -1)
                                        (("1"
                                          (inst - "low" "high")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (expand "expt" -1)
                                                (("1"
                                                  (insteep -)
                                                  (("1"
                                                    (assert)
                                                    nil)))))))))))))
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide (-1 -2))
                                          (("2"
                                            (typepred "min(Asetbig)")
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand "Asetbig" -1 1)
                                                (("2"
                                                  (expand "Asetsmall" 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst - "low1" "high1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1" (propax) nil)
                                                           ("2"
                                                            (expand "^")
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil))))))))))))))))))))))))))))))))))))))))))))))))))))))
          nil)
         nil nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq), booleans.TRUE, hutch.slseq, hutch.sqsl)"
                          "nil"))
        (hutch_int_basic_TCC8-2 nil 3690909158
         ("" (skeep*)
          (("" (lemma "signs_upd_sound")
            (("" (assert)
              (("" (insteep)
                (("" (assert) (("" (inst?) (("" (assert) nil))))))))))))
          nil)
         ((list type-decl nil list_adt nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq), booleans.TRUE, hutch.slseq, hutch.sqsl)"
                          "nil"))
        (hutch_int_basic_TCC8-1 nil 3690128946
         ("" (skeep*)
          ((""
            (name "G"
                  "v(NumTerms, k, be, RelF6, PolyTerms, p, n, psq, nsq, low,
               (low + high) / 2,
               signs_upd(k, p, n, low, (low + high) / 2, known_signs,
                                  slseq),
               slseq, sqsl)")
            (("1" (replaces -1)
              (("1"
                (name "H" "v(NumTerms, k, be, RelF6, PolyTerms, p, n, psq, nsq,
                  (low + high) / 2, high,
                  signs_upd(k, p, n, (low + high) / 2, high, known_signs,
                                     slseq),
                  slseq, sqsl)")
                (("1" (replaces -1)
                  (("1" (typepred "G")
                    (("1"
                      (case "G IFF SystemSat?(NumTerms, k, be, RelF6, PolyTerms, p, n,LAMBDA (qz:real): low<=qz AND qz<=
                             (high + low) / 2)")
                      (("1" (hide (-2 -3))
                        (("1" (replaces -1)
                          (("1" (typepred "H")
                            (("1"
                              (case "H IFF SystemSat?(NumTerms, k, be, RelF6, PolyTerms, p, n,LAMBDA (qz:real): (high + low) / 2<=qz AND qz<=
                              high)")
                              (("1" (hide (-2 -3))
                                (("1" (replaces -1)
                                  (("1" (ground)
                                    (("1" (expand "SystemSat?")
                                      (("1"
                                        (skeep*)
                                        (("1"
                                          (insteep +)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "SystemSat?")
                                      (("2"
                                        (skeep -)
                                        (("2"
                                          (insteep +)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (expand "SystemSat?")
                                      (("3"
                                        (skeep -)
                                        (("3"
                                          (inst + "x")
                                          (("3"
                                            (inst + "x")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (lemma "signs_upd_sound")
                    (("2" (insteep -)
                      (("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (lemma "signs_upd_sound")
                (("2" (insteep)
                  (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (list2array def-decl "T" array2list structures)
          (list type-decl nil list_adt nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (hutch_int_basic termination
                          "hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq), booleans.TRUE, hutch.slseq, hutch.sqsl)"
                          "nil")))
       (hutch_int_basic_TCC9 0
        (hutch_int_basic_TCC9-2 nil 3690909116
         ("" (skeep*)
          ((""
            (typepred
             "v(sumsquares, NumTerms, k, be, RelF6, PolyTerms, p, n, psq, nsq, low,
            (low + high) / 2,
            signs_upd(k, p, n, low, (low + high) / 2, known_signs,
                               slseq),
            unsatl?,slseq, sqsl)")
            (("1"
              (typepred
               "v(sumsquares, NumTerms, k, be, RelF6, PolyTerms, p, n, psq, nsq,
                 (low + high) / 2, high,
                 signs_upd(k, p, n, (low + high) / 2, high, known_signs,
                                    slseq),
                 TRUE,slseq, sqsl)")
              (("1" (split 3)
                (("1" (flatten)
                  (("1" (split -)
                    (("1" (assert)
                      (("1" (hide (-1 -2))
                        (("1" (replace -2)
                          (("1" (expand "SystemSat?")
                            (("1" (skeep -)
                              (("1" (inst + "x") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (hide (-1 -3))
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (expand "SystemSat?")
                              (("1" (skeep)
                                (("1" (insteep) (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (expand "SystemSat?")
                              (("2" (inst + "(high+low)/2")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "SystemSat?")
                      (("2" (skeep)
                        (("2" (split -)
                          (("1" (assert)
                            (("1" (split -)
                              (("1" (insteep)
                                (("1" (insteep) (("1" (ground) nil nil)) nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (inst + "(high+low)/2")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "signs_upd_sound")
                (("2" (insteep -)
                  (("2" (assert) (("2" (rewrite -1) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (lemma "signs_upd_sound")
              (("2" (insteep -)
                (("2" (assert) (("2" (rewrite -1) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ((signs_upd const-decl "[nat -> int]" hutch nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (SystemSat? const-decl "bool" hutch nil)
          (hutch_int_meas const-decl "nat" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (sound_signs? const-decl "bool" hutch nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (^ const-decl "real" exponentiation nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (list2array def-decl "T" array2list structures)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (IFF const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (rel5 const-decl "bool" preprocessing_univariate nil)
          (subrange type-eq-decl nil integers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (BoolExpr type-eq-decl nil hutch nil)
          (BoolTuple type-eq-decl nil hutch nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (real_div_nzreal_is_real application-judgement "real" reals nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (signs_upd_sound formula-decl nil hutch nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (real_plus_real_is_real application-judgement "real" reals nil))
         nil
         (hutch_int_basic subtype
                          "booleans.OR(hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq), hutch.unsatl?, hutch.slseq, hutch.sqsl), hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq), booleans.TRUE, hutch.slseq, hutch.sqsl))"
                          "{bb: booleans.bool | booleans.IMPLIES((booleans.IMPLIES(hutch.unsatl?, ((booleans.NOT)(hutch.be(LAMBDA (i: naturalnumbers.upto(hutch.NumTerms)): preprocessing_univariate.rel5(hutch.RelF6(i))(polynomials.polynomial(hutch.p(hutch.PolyTerms(i)), hutch.n(hutch.PolyTerms(i)))(hutch.low), 0)))))), (booleans.IFF(bb, hutch.SystemSat?(hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, LAMBDA (qz: reals.real): booleans.AND(reals.<=(hutch.low, qz), reals.<=(qz, hutch.high))))))}"))
        (hutch_int_basic_TCC9-1 nil 3690626725
         ("" (skeep*) (("" (postpone) nil nil)) nil) nil nil
         (hutch_int_basic subtype
                          "booleans.OR(hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.signs_upd(hutch.k, hutch.p, hutch.n, hutch.low, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.known_signs, hutch.slseq), hutch.unsatl?, hutch.slseq, hutch.sqsl), hutch.hutch_int_basic(hutch.sumsquares, hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, hutch.psq, hutch.nsq, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.signs_upd(hutch.k, hutch.p, hutch.n, number_fields./(((number_fields.+)(hutch.low, hutch.high)), 2), hutch.high, hutch.known_signs, hutch.slseq), booleans.TRUE, hutch.slseq, hutch.sqsl))"
                          "{bb: booleans.bool | booleans.IMPLIES((booleans.IMPLIES(hutch.unsatl?, ((booleans.NOT)(hutch.be(LAMBDA (i: naturalnumbers.upto(hutch.NumTerms)): preprocessing_univariate.rel5(hutch.RelF6(i))(polynomials.polynomial(hutch.p(hutch.PolyTerms(i)), hutch.n(hutch.PolyTerms(i)))(hutch.low), 0)))))), (booleans.IFF(bb, hutch.SystemSat?(hutch.NumTerms, hutch.k, hutch.be, hutch.RelF6, hutch.PolyTerms, hutch.p, hutch.n, LAMBDA (qz: reals.real): booleans.AND(reals.<=(hutch.low, qz), reals.<=(qz, hutch.high))))))}")))
       (Knuth_total_TCC1 0
        (Knuth_total_TCC1-1 nil 3690626725 ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (Knuth_total termination
                      "hutch.Knuth_total(hutch.k, hutch.p, hutch.n, hutch.k)"
                      "nil")))
       (Knuth_total_TCC2 0
        (Knuth_total_TCC2-1 nil 3690626725 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (/= const-decl "boolean" notequal nil))
         nil
         (Knuth_total subtype "hutch.n(0)"
                      "{n | hutch.p(0)(more_polynomial_props.n) /= 0}")))
       (Knuth_total_TCC3 0
        (Knuth_total_TCC3-1 nil 3690626725 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (/= const-decl "boolean" notequal nil))
         nil
         (Knuth_total subtype "hutch.n(hutch.i)"
                      "{n | hutch.p(hutch.i)(more_polynomial_props.n) /= 0}")))
       (Knuth_total_TCC4 0
        (Knuth_total_TCC4-1 nil 3690626725 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals))
         nil (Knuth_total subtype "(number_fields.-)(hutch.i, 1)" "nat")))
       (Knuth_total_TCC5 0
        (Knuth_total_TCC5-1 nil 3690626725 ("" (termination-tcc) nil nil) nil
         nil
         (Knuth_total termination
                      "hutch.Knuth_total(hutch.k, hutch.p, hutch.n, (number_fields.-)(hutch.i, 1))"
                      "nil")))
       (hutch_int_TCC1 0
        (hutch_int_TCC1-1 nil 3690198003
         ("" (skeep*)
          (("" (typepred "slseq")
            (("" (hide -1)
              (("" (expand "Eq_computed_remainder_seq?")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (poly_deriv const-decl "real" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (> const-decl "bool" reals nil)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (/= const-decl "boolean" notequal nil)
          (below type-eq-decl nil naturalnumbers nil)
          (< const-decl "bool" reals nil)
          (listn type-eq-decl nil listn structures)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (length def-decl "nat" list_props nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int subtype "hutch.slseq"
                    "(hutch.Eq_computed_remainder_seq?(hutch.k, hutch.p, hutch.n))")))
       (hutch_int_TCC2 0
        (hutch_int_TCC2-2 nil 3691154129
         ("" (skeep*)
          (("" (typepred "ppl")
            (("" (hide -1)
              (("" (assert)
                (("" (typepred "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                  (("" (replace -4 :dir rl)
                    (("" (hide -1)
                      (("" (replace -1)
                        (("" (lemma "sigma_ge_0")
                          (("" (inst?)
                            (("" (split -)
                              (("1" (assert)
                                (("1" (lemma "list2array_sound[int]")
                                  (("1" (replace -6 +)
                                    (("1" (rewrite -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (decompose-equality -4)
                                          (("1"
                                            (inst - "nsq")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred
                                                 "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (typepred "n")
                                                      (("1"
                                                        (inst - "i!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2" (expand "*")
                                  (("2" (typepred "n")
                                    (("2" (inst - "n!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (i!1 skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (list2array_sound formula-decl nil array2list structures)
          (sigma_ge_0 formula-decl nil sigma reals)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (subrange type-eq-decl nil integers nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (length def-decl "nat" list_props nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sequence type-eq-decl nil sequences nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (/= const-decl "boolean" notequal nil)
          (^ const-decl "real" exponentiation nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (> const-decl "bool" reals nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int subtype "hutch.nsq"
                    "{n | hutch.psq(remainder_sequence.n) /= 0}"))
        (hutch_int_TCC2-1 nil 3690198003 ("" (subtype-tcc) nil nil)
         ((list type-decl nil list_adt nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (poly_deriv const-decl "real" polynomials reals)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (listn type-eq-decl nil listn structures)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures))
         nil
         (hutch_int subtype "hutch.nsq"
                    "{n | hutch.psq(remainder_sequence.n) /= 0}")))
       (hutch_int_TCC3 0
        (hutch_int_TCC3-1 nil 3690198003 ("" (subtype-tcc) nil nil)
         ((remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (C const-decl "posnat" binomial reals)
          (poly_n_deriv const-decl "real" polynomials reals)
          (poly_rootless_width const-decl "posreal" more_polynomial_props
                               reals)
          (roots_closed_int const-decl "int" compute_sturm Sturm)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (roots_in_int const-decl "nat" hutch nil)
          (signs_upd const-decl "[nat -> int]" hutch nil)
          (poly_deriv const-decl "real" polynomials reals)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (posreal_div_posreal_is_posreal application-judgement "posreal"
           real_types nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (int_minus_int_is_int application-judgement "int" integers nil))
         nil
         (hutch_int subtype "polynomials.poly_deriv(hutch.psq)"
                    "[nat -> int]")))
       (hutch_int_TCC4 0
        (hutch_int_TCC4-1 nil 3690198003
         ("" (skeep*)
          (("" (assert)
            (("" (typepred "nsq")
              (("" (assert)
                (("" (replace -3)
                  (("" (expand "poly_deriv" +)
                    (("" (rewrite "list2array_sound")
                      (("1" (typepred "ppl")
                        (("1" (hide -1)
                          (("1"
                            (typepred
                             "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                            (("1" (replace -5 :dir rl)
                              (("1" (assert)
                                (("1" (replace -2)
                                  (("1" (case "EXISTS (ev:posnat): nsq = ev")
                                    (("1" (skeep -)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "nzreal_times_nzreal_is_nzreal")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (decompose-equality -5)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (replaces
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace -7)
                                                              (("2"
                                                                (typepred
                                                                 "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "n")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "FORALL (ii:nat): EXISTS (d:int): sigma(0, ii, n * (LAMBDA i: 1)) = d")
                                      (("1"
                                        (replace -8 1)
                                        (("1"
                                          (inst - "k")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst + "d!1")
                                              (("1"
                                                (case "d!1>0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (replaces -1 1 :dir rl)
                                                    (("2"
                                                      (lemma "sigma_gt_0")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (expand "*")
                                                              (("2"
                                                                (typepred "n")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "ii")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "*")
                                                (("1"
                                                  (inst + "n(0)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "sigma" +)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (inst + "d+n(1+j)")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (typepred
                         "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                        (("2" (lemma "sigma_gt_0")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (skosimp*)
                                (("2" (expand "*")
                                  (("2" (typepred "n")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (poly_deriv const-decl "real" polynomials reals)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
          (int_times_even_is_even application-judgement "even_int" integers
           nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (nzreal nonempty-type-eq-decl nil reals nil)
          (ev skolem-const-decl "posnat" hutch nil)
          (ppl skolem-const-decl "list[int]" hutch nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (pred type-eq-decl nil defined_types nil)
          (sigma_gt_0 formula-decl nil sigma reals)
          (d!1 skolem-const-decl "int" hutch nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (list2array_sound formula-decl nil array2list structures)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int subtype "(number_fields.-)(hutch.nsq, 1)"
                    "{m | polynomials.poly_deriv(hutch.psq)(remainder_sequence.m) /= 0}")))
       (hutch_int_TCC5 0
        (hutch_int_TCC5-1 nil 3690198003 ("" (subtype-tcc) nil nil)
         ((listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (every adt-def-decl "boolean" list_adt nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (poly_deriv const-decl "real" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (below type-eq-decl nil naturalnumbers nil)
          (< const-decl "bool" reals nil)
          (listn type-eq-decl nil listn structures)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (length def-decl "nat" list_props nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (C const-decl "posnat" binomial reals)
          (poly_n_deriv const-decl "real" polynomials reals)
          (poly_rootless_width const-decl "posreal" more_polynomial_props
                               reals)
          (roots_closed_int const-decl "int" compute_sturm Sturm)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (roots_in_int const-decl "nat" hutch nil)
          (signs_upd const-decl "[nat -> int]" hutch nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (posreal_div_posreal_is_posreal application-judgement "posreal"
           real_types nil))
         nil
         (hutch_int subtype "hutch.psq"
                    "{psq: [naturalnumbers.nat -> integers.int] | booleans.IMPLIES(((booleans.NOT)(hutch.sumsquares)), psq = array2list[int].list2array(0)(poly_families.prod_polynomials_list(hutch.p, hutch.n, LAMBDA i: 1, hutch.k)))}")))
       (hutch_int_TCC6 0
        (hutch_int_TCC6-2 nil 3690205188
         ("" (skeep*)
          (("" (assert)
            (("" (case "NOT nsq>0")
              (("1" (hide 2)
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1"
                        (typepred
                         "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                        (("1" (replaces -6 :dir rl)
                          (("1" (replaces -2)
                            (("1" (lemma "sigma_gt_0")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (expand "*")
                                      (("1"
                                        (typepred "n")
                                        (("1"
                                          (inst - "n!1")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (replaces -3 +)
                      (("2" (rewrite "list2array_sound")
                        (("2"
                          (typepred
                           "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                          (("2" (replaces -5 :dir rl)
                            (("2" (replace -2)
                              (("2" (replace -5 +)
                                (("2" (decompose-equality -3)
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (typepred
                                           "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "i!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (list2array_sound formula-decl nil array2list structures)
          (k skolem-const-decl "nat" hutch nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (subrange type-eq-decl nil integers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (sigma_gt_0 formula-decl nil sigma reals)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (> const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int subtype "hutch.nsq"
                    "{nsq: integers.posnat | booleans.IMPLIES(((booleans.NOT)(hutch.sumsquares)), booleans.AND(hutch.psq(nsq) /= 0, nsq = (number_fields.-)(list_props[int].length(poly_families.prod_polynomials_list(hutch.p, hutch.n, LAMBDA i: 1, hutch.k)), 1)))}"))
        (hutch_int_TCC6-1 nil 3690198003
         ("" (skeep*)
          (("" (assert)
            (("" (replace -1 :dir rl)
              (("" (typepred "ppl")
                (("" (lemma "sigma_gt_0")
                  (("" (inst?)
                    (("" (assert)
                      (("" (split -)
                        (("1" (postpone) nil nil) ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil nil
         (hutch_int subtype "hutch.nsq"
                    "{nsq: integers.posnat | booleans.IMPLIES(((booleans.NOT)(hutch.sumsquares)), booleans.AND(hutch.psq(nsq) /= 0, nsq = (number_fields.-)(list_props[int].length(poly_families.prod_polynomials_list(hutch.p, hutch.n, LAMBDA i: 1, hutch.k)), 1)))}")))
       (hutch_int_TCC7 0
        (hutch_int_TCC7-1 nil 3690198003 ("" (subtype-tcc) nil nil)
         ((remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (^ const-decl "real" exponentiation nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (C const-decl "posnat" binomial reals)
          (poly_n_deriv const-decl "real" polynomials reals)
          (poly_rootless_width const-decl "posreal" more_polynomial_props
                               reals)
          (roots_closed_int const-decl "int" compute_sturm Sturm)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (roots_in_int const-decl "nat" hutch nil)
          (signs_upd const-decl "[nat -> int]" hutch nil)
          (posreal_div_posreal_is_posreal application-judgement "posreal"
           real_types nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (int_minus_int_is_int application-judgement "int" integers nil))
         nil
         (hutch_int subtype "hutch.root_bound"
                    "{high | reals.<((number_fields.-)(hutch.root_bound), hutch.high)}")))
       (hutch_int_TCC8 0
        (hutch_int_TCC8-1 nil 3690198003
         ("" (skeep*)
          (("" (hide (-1 -2 -3 -5))
            (("" (hide -3)
              (("" (expand "sound_signs?")
                (("" (skeep*)
                  (("" (decompose-equality -)
                    (("" (inst - "i")
                      (("" (expand "signs_upd")
                        (("" (lemma "list2array_sound[int]")
                          (("" (rewrite -1)
                            (("1" (assert)
                              (("1" (hide -1)
                                (("1"
                                  (typepred "array2list[int]
                       (1 + k)
                       (LAMBDA (i_1: nat):
                          IF i_1 > k THEN 0
                          ELSIF roots_in_int(p(i_1),
                                                    n(i_1),
                                                    -root_bound,
                                                    root_bound,
                                                    nth(slseq, i_1))
                                 /= 0
                            THEN 0
                          ELSIF polynomial(p(i_1), n(i_1))(-root_bound) > 0 THEN 1
                          ELSE -1
                          ENDIF)")
                                  (("1" (hide (-1 -2))
                                    (("1" (inst - "i")
                                      (("1"
                                        (replaces -1 :dir rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (lift-if -)
                                              (("1"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "roots_in_int")
                                                        (("1"
                                                          (lemma
                                                           "number_roots_interval_def")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "bij!1(0)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "bij!1(0)")
                                                                        (("1"
                                                                          (expand
                                                                           "contains?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (skeep -)
                                                        (("1"
                                                          (expand
                                                           "roots_in_int")
                                                          (("1"
                                                            (lemma
                                                             "number_roots_interval_def")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split -)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "bijective?")
                                                                      (("1"
                                                                        (expand
                                                                         "surjective?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x")
                                                                            (("1"
                                                                              (skosimp*)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "contains?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "n")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "roots_in_int")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (lemma
                                                             "number_roots_interval_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (skeep -)
                                                                    (("1"
                                                                      (expand
                                                                       "bijective?")
                                                                      (("1"
                                                                        (expand
                                                                         "surjective?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x")
                                                                            (("1"
                                                                              (skosimp*)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "contains?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "n")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (ground)
                                                      (("3"
                                                        (lemma
                                                         "poly_intermediate_value_inc")
                                                        (("3"
                                                          (skeep)
                                                          (("3"
                                                            (inst
                                                             -
                                                             _
                                                             "0"
                                                             _
                                                             "-root_bound"
                                                             "x")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (skolem
                                                                   -
                                                                   "zz")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (expand
                                                                       "roots_in_int")
                                                                      (("3"
                                                                        (lemma
                                                                         "number_roots_interval_def")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (expand
                                                                                   "bijective?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "surjective?")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "zz")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "contains?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "n")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (flatten)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "roots_in_int")
                                                        (("1"
                                                          (lemma
                                                           "number_roots_interval_def")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "bij(0)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "bij(0)")
                                                                        (("1"
                                                                          (expand
                                                                           "contains?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst - "-root_bound")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (flatten)
                                                  (("5"
                                                    (assert)
                                                    (("5"
                                                      (ground)
                                                      (("5"
                                                        (skeep*)
                                                        (("5"
                                                          (lemma
                                                           "poly_intermediate_value_dec")
                                                          (("5"
                                                            (inst
                                                             -
                                                             _
                                                             "0"
                                                             _
                                                             "-root_bound"
                                                             "x")
                                                            (("5"
                                                              (inst?)
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (skolem
                                                                   -
                                                                   "zz")
                                                                  (("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (expand
                                                                       "roots_in_int")
                                                                      (("5"
                                                                        (lemma
                                                                         "number_roots_interval_def")
                                                                        (("5"
                                                                          (inst?)
                                                                          (("5"
                                                                            (assert)
                                                                            (("5"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (skeep
                                                                                 -)
                                                                                (("1"
                                                                                  (expand
                                                                                   "bijective?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "surjective?")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "zz")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "contains?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "n")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (flatten)
                                                  (("6"
                                                    (assert)
                                                    (("6"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "roots_in_int")
                                                        (("1"
                                                          (lemma
                                                           "number_roots_interval_def")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "bij(0)")
                                                                    (("1"
                                                                      (expand
                                                                       "bijective?")
                                                                      (("1"
                                                                        (typepred
                                                                         "bij(0)")
                                                                        (("1"
                                                                          (expand
                                                                           "contains?")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst - "-root_bound")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (expand "abs")
                                                  (("7"
                                                    (lift-if)
                                                    (("7" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (assert)
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (typepred "slseq")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (inst - "i_1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "Eq_computed_remainder?")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide 2)
                                    (("3" (skosimp*) (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4" (hide 2)
                                    (("4" (hide -1)
                                      (("4"
                                        (skeep*)
                                        (("4"
                                          (typepred "n")
                                          (("4"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (hide -1)
                                (("2" (skosimp*)
                                  (("2" (typepred "slseq")
                                    (("2" (hide -1)
                                      (("2"
                                        (inst - "i!1")
                                        (("1"
                                          (expand "Eq_computed_remainder?")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3" (skosimp*) (("3" (assert) nil nil)) nil))
                              nil)
                             ("4" (hide 2)
                              (("4" (skosimp*)
                                (("4" (typepred "n")
                                  (("4" (inst?)
                                    (("1" (ground) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((sound_signs? const-decl "bool" hutch nil)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (signs_upd const-decl "[nat -> int]" hutch nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (length def-decl "nat" list_props nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (listn type-eq-decl nil listn structures)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil naturalnumbers nil)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (sequence type-eq-decl nil sequences nil)
          (poly_deriv const-decl "real" polynomials reals)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
           real_defs nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (k skolem-const-decl "nat" hutch nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (slseq skolem-const-decl "{l: listn[list[list[int]]](1 + k) |
   FORALL (i_1: below(1 + k)):
     remainder_seq(LAMBDA (i: nat):
                     IF i <= n(i_1) THEN p(i_1)(i) ELSE 0 ENDIF,
                   n(i_1),
                   poly_deriv(LAMBDA (i: nat):
                                IF i <= n(i_1) THEN p(i_1)(i)
                                ELSE 0
                                ENDIF),
                   n(i_1) - 1)
      = nth(l, i_1)}" hutch nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (roots_in_int const-decl "nat" hutch nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (i_1 skolem-const-decl "nat" hutch nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (i_1 skolem-const-decl "nat" hutch nil)
          (RealInt type-eq-decl nil RealInt reals)
          (contains? const-decl "bool" RealInt reals)
          (number_roots_interval const-decl "nat" compute_sturm Sturm)
          (number_roots_interval_def formula-decl nil compute_sturm Sturm)
          (x skolem-const-decl "real" hutch nil)
          (surjective? const-decl "bool" functions nil)
          (root_bound skolem-const-decl "posreal" hutch nil)
          (x skolem-const-decl "real" hutch nil)
          (bijective? const-decl "bool" functions nil)
          (poly_intermediate_value_inc formula-decl nil polynomials reals)
          (zz skolem-const-decl "real" hutch nil)
          (zz skolem-const-decl "real" hutch nil)
          (poly_intermediate_value_dec formula-decl nil polynomials reals)
          (minus_int_is_int application-judgement "int" integers nil)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (list2array_sound formula-decl nil array2list structures)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int subtype "hutch.known_signs"
                    "(hutch.sound_signs?(hutch.k, hutch.p, hutch.n, (number_fields.-)(hutch.root_bound), hutch.root_bound))")))
       (hutch_int_TCC9 0
        (hutch_int_TCC9-3 nil 3691169232
         ("" (skeep*)
          (("" (expand "Eq_computed_remainder?")
            (("" (assert)
              ((""
                (case "psq = (LAMBDA (i: nat): IF i <= nsq THEN psq(i) ELSE 0 ENDIF)")
                (("1" (replaces -1 :dir rl) nil nil)
                 ("2" (hide 3)
                  (("2" (hide -5)
                    (("2" (decompose-equality +)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (rewrite -2 +)
                            (("2" (rewrite "list2array_sound")
                              (("2" (lift-if)
                                (("2" (ground)
                                  (("2"
                                    (typepred
                                     "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                                    (("2" (replace -5 :dir rl)
                                      (("2"
                                        (decompose-equality -)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (typepred
                                                 "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                (("2"
                                                  (inst -3 "x!1")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (<= const-decl "bool" reals nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (> const-decl "bool" reals nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (length def-decl "nat" list_props nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (subrange type-eq-decl nil integers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (list2array_sound formula-decl nil array2list structures)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
         nil
         (hutch_int subtype "hutch.sqsl"
                    "{sqsl | booleans.IMPLIES(((booleans.NOT)(hutch.sumsquares)), compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq)(hutch.sqsl))}"))
        (hutch_int_TCC9-2 nil 3691154194
         ("" (skeep*)
          (("" (hide (-1 -2 -3 -5))
            (("" (expand "sound_signs?")
              (("" (skeep*)
                (("" (decompose-equality -)
                  (("" (inst - "i")
                    (("" (expand "signs_upd")
                      (("" (lemma "list2array_sound[int]")
                        (("" (rewrite -1)
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1"
                                (typepred "array2list[int]
                       (1 + k)
                       (LAMBDA (i_1: nat):
                          IF i_1 > k THEN 0
                          ELSIF roots_in_int(p(i_1),
                                                    n(i_1),
                                                    -root_bound,
                                                    root_bound,
                                                    nth(slseq, i_1))
                                 /= 0
                            THEN 0
                          ELSIF polynomial(p(i_1), n(i_1))(-root_bound) > 0 THEN 1
                          ELSE -1
                          ENDIF)")
                                (("1" (hide (-1 -2))
                                  (("1" (inst - "i")
                                    (("1" (replaces -1 :dir rl)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (lift-if -)
                                            (("1"
                                              (split +)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "roots_in_int")
                                                      (("1"
                                                        (lemma
                                                         "number_roots_interval_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "bij!1(0)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "bij!1(0)")
                                                                      (("1"
                                                                        (expand
                                                                         "contains?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))
                                                               ("2"
                                                                (typepred "n")
                                                                (("2"
                                                                  (inst - "i")
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (skeep -)
                                                      (("1"
                                                        (expand
                                                         "roots_in_int")
                                                        (("1"
                                                          (lemma
                                                           "number_roots_interval_def")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split -)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (expand
                                                                     "bijective?")
                                                                    (("1"
                                                                      (expand
                                                                       "surjective?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "contains?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (expand "roots_in_int")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (lemma
                                                           "number_roots_interval_def")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (skeep -)
                                                                  (("1"
                                                                    (expand
                                                                     "bijective?")
                                                                    (("1"
                                                                      (expand
                                                                       "surjective?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "contains?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))))))))
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (lemma
                                                       "poly_intermediate_value_inc")
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (inst
                                                           -
                                                           _
                                                           "0"
                                                           _
                                                           "-root_bound"
                                                           "x")
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (skolem
                                                                 -
                                                                 "zz")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (expand
                                                                     "roots_in_int")
                                                                    (("3"
                                                                      (lemma
                                                                       "number_roots_interval_def")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (expand
                                                                                 "bijective?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "surjective?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "zz")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "contains?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (typepred
                                                                               "n")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))))))))))))
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (ground)
                                                    (("1"
                                                      (expand "roots_in_int")
                                                      (("1"
                                                        (lemma
                                                         "number_roots_interval_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "bij(0)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "bij(0)")
                                                                      (("1"
                                                                        (expand
                                                                         "contains?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))
                                                               ("2"
                                                                (typepred "n")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))
                                                     ("2"
                                                      (inst - "-root_bound")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))
                                               ("5"
                                                (flatten)
                                                (("5"
                                                  (assert)
                                                  (("5"
                                                    (ground)
                                                    (("5"
                                                      (skeep*)
                                                      (("5"
                                                        (lemma
                                                         "poly_intermediate_value_dec")
                                                        (("5"
                                                          (inst
                                                           -
                                                           _
                                                           "0"
                                                           _
                                                           "-root_bound"
                                                           "x")
                                                          (("5"
                                                            (inst?)
                                                            (("5"
                                                              (assert)
                                                              (("5"
                                                                (skolem
                                                                 -
                                                                 "zz")
                                                                (("5"
                                                                  (flatten)
                                                                  (("5"
                                                                    (expand
                                                                     "roots_in_int")
                                                                    (("5"
                                                                      (lemma
                                                                       "number_roots_interval_def")
                                                                      (("5"
                                                                        (inst?)
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (skeep
                                                                               -)
                                                                              (("1"
                                                                                (expand
                                                                                 "bijective?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "surjective?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "zz")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "contains?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (typepred
                                                                               "n")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))))))))))))
                                               ("6"
                                                (flatten)
                                                (("6"
                                                  (assert)
                                                  (("6"
                                                    (ground)
                                                    (("1"
                                                      (expand "roots_in_int")
                                                      (("1"
                                                        (lemma
                                                         "number_roots_interval_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "bij(0)")
                                                                  (("1"
                                                                    (expand
                                                                     "bijective?")
                                                                    (("1"
                                                                      (typepred
                                                                       "bij(0)")
                                                                      (("1"
                                                                        (expand
                                                                         "contains?")
                                                                        (("1"
                                                                          (ground)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (typepred "n")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))
                                                     ("2"
                                                      (inst - "-root_bound")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))
                                               ("7"
                                                (expand "abs")
                                                (("7"
                                                  (lift-if)
                                                  (("7"
                                                    (ground)
                                                    nil)))))))))))))))))))
                                 ("2" (hide 2)
                                  (("2" (assert)
                                    (("2" (skeep*)
                                      (("2"
                                        (typepred "slseq")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (inst - "i_1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "Eq_computed_remainder?")
                                                (("1" (assert) nil)))))
                                             ("2" (assert) nil)))))))))))))
                                 ("3" (hide 2)
                                  (("3" (skosimp*) (("3" (assert) nil)))))
                                 ("4" (hide 2)
                                  (("4" (hide -1)
                                    (("4" (skeep*)
                                      (("4"
                                        (typepred "n")
                                        (("4"
                                          (inst?)
                                          (("1" (assert) (("1" (ground) nil)))
                                           ("2" (assert) nil)))))))))))))))))
                           ("2" (hide 2)
                            (("2" (hide -1)
                              (("2" (skosimp*)
                                (("2" (typepred "slseq")
                                  (("2" (hide -1)
                                    (("2" (inst - "i!1")
                                      (("1"
                                        (expand "Eq_computed_remainder?")
                                        (("1" (assert) nil)))
                                       ("2" (assert) nil)))))))))))))
                           ("3" (hide 2)
                            (("3" (skosimp*) (("3" (assert) nil)))))
                           ("4" (hide 2)
                            (("4" (skosimp*)
                              (("4" (typepred "n")
                                (("4" (inst?)
                                  (("1" (ground) nil)
                                   ("2" (assert) nil))))))))))))))))))))))))))
          nil)
         nil nil
         (hutch_int subtype "hutch.sqsl"
                    "{sqsl | booleans.IMPLIES(((booleans.NOT)(hutch.sumsquares)), compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq)(hutch.sqsl))}"))
        (hutch_int_TCC9-1 nil 3690198003
         ("" (skeep*)
          (("" (expand "Eq_computed_remainder?")
            ((""
              (case "psq=(LAMBDA (i: nat): IF i <= nsq THEN psq(i) ELSE 0 ENDIF)")
              (("1" (replaces -1 :dir rl) nil nil)
               ("2" (hide 2)
                (("2" (decompose-equality +)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (ground)
                        (("2" (replace -2 +)
                          (("2" (lemma "list2array_sound[int]")
                            (("2" (inst?)
                              (("2" (replaces -1)
                                (("2" (assert)
                                  (("2" (both-sides "+" 1 -3)
                                    (("2" (assert)
                                      (("2"
                                        (replaces -3 :dir rl)
                                        (("2"
                                          (case "x!1<1+nsq")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb")
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (list2array_sound formula-decl nil array2list structures)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (product def-decl "real" product reals)
          (T_high type-eq-decl nil product reals)
          (T_low type-eq-decl nil product reals)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sigma def-decl "real" sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (T_low type-eq-decl nil sigma reals)
          (list type-decl nil list_adt nil)
          (le_realorder name-judgement "RealOrder" real_orders reals))
         nil
         (hutch_int subtype "hutch.sqsl"
                    "{sqsl | booleans.IMPLIES(((booleans.NOT)(hutch.sumsquares)), compute_sturm.Eq_computed_remainder?(hutch.psq, hutch.nsq)(hutch.sqsl))}")))
       (hutch_int_def 0
        (hutch_int_def-1 nil 3690215627
         ("" (skeep*)
          ((""
            (name "G"
                  "hutch_int(sumsquares,NumTerms, k, be, RelF6, PolyTerms, p, n)")
            (("" (replace -1)
              (("" (expand "hutch_int" - :assert? none)
                ((""
                  (name "ppl" "prod_polynomials_list(p, n, LAMBDA i: 1, k)")
                  ((""
                    (name "ppsq" " list2array[int]
                                                    (0)(prod_polynomials_list(p, n, LAMBDA i: 1, k))")
                    ((""
                      (name "nnsq"
                            "IF sumsquares THEN 1 ELSE length(prod_polynomials_list(p, n, LAMBDA i: 1, k)) - 1 ENDIF")
                      (("" (name "root_bound" "Knuth_total(k,p,n,k)")
                        ((""
                          (name "sslseq" "array2list[list[list[int]]]
                                                            (k + 1)
                                                            (LAMBDA (j: nat):
                                                               IF j <= k
                                                                 THEN remainder_seq(LAMBDA
                                                                                    (i: nat):
                                                                                    IF i <= n(j)
                                                                                    THEN p(j)(i)
                                                                                    ELSE 0
                                                                                    ENDIF,
                                                                                    n(j),
                                                                                    poly_deriv
                                                                                    (LAMBDA
                                                                                     (i: nat):
                                                                                     IF i <= n(j)
                                                                                     THEN p(j)(i)
                                                                                     ELSE 0
                                                                                     ENDIF),
                                                                                    n(j) - 1)
                                                               ELSE cons[list[int]]
                                                                        (cons[int](0, null[int]), null[list[int]])
                                                               ENDIF)")
                          (("1"
                            (name "known_signss"
                                  "signs_upd(k, p, n, -root_bound, root_bound,
                                                                          (LAMBDA (i: nat): 0), sslseq)")
                            (("1"
                              (name "ssqsl" "IF (NOT sumsquares)
                          THEN remainder_seq(ppsq, nnsq, poly_deriv(ppsq), nnsq - 1)
                        ELSE null[list[int]]
                        ENDIF")
                              (("1" (assert)
                                (("1" (replace -6)
                                  (("1" (replace -5)
                                    (("1" (replace -4)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -7)
                                            (("1"
                                              (case
                                               "NOT nnsq =( IF (not sumsquares) THEN length(ppl)-1 ELSE 1 ENDIF)")
                                              (("1"
                                                (hide (-8 2))
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "FORALL (ii:upto(k),x:real): polynomial(p(ii),n(ii))(x)=0 IMPLIES abs(x)<root_bound")
                                                (("1"
                                                  (label "hyp" -1)
                                                  (("1"
                                                    (hide "hyp")
                                                    (("1"
                                                      (case
                                                       "NOT (IF (NOT sumsquares)
                                         THEN remainder_seq(ppsq,
                                                            length(ppl) - 1,
                                                            poly_deriv(ppsq),
                                                            length(ppl) - 2)
                                       ELSE null[list[int]]
                                       ENDIF) = ssqsl")
                                                      (("1"
                                                        (replace -2 1 :dir rl)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lift-if +)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (case
                                                           "SystemSat?(NumTerms, k, be, RelF6, PolyTerms, p, n,
                                                                                            LAMBDA (qz: real): TRUE) IFF SystemSat?(NumTerms, k, be, RelF6, PolyTerms, p, n,
                                                                                            LAMBDA (qz: real): -root_bound<=qz AND qz<=root_bound)")
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (hide (-1 -3))
                                                              (("1"
                                                                (typepred
                                                                 "hutch_int_basic(sumsquares, NumTerms, k, be, RelF6, PolyTerms, p, n,
                                      IF sumsquares THEN list2array[int](0)(null[int])
                                      ELSE ppsq
                                      ENDIF,
                                      nnsq, -root_bound, root_bound, known_signss, FALSE,sslseq,
                                      ssqsl)")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lift-if -1)
                                                                  (("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (typepred
                                                                         "ppl")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "sigma_ge_0")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "n")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "*")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "n!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide
                                                               (-1 -2 -3 -5))
                                                              (("2"
                                                                (hide -6)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "SystemSat?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (case
                                                                           "x<-root_bound")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "-root_bound")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "(LAMBDA (i: upto(NumTerms)):
                                                                                                             rel5(RelF6(i))
                                                                                                                 (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0)) = (LAMBDA (i: upto(NumTerms)):
                                                                                                             rel5(RelF6(i))
                                                                                                                 (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(-root_bound),
                                                                                                                  0))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (-2
                                                                                    -3
                                                                                    2))
                                                                                  (("2"
                                                                                    (decompose-equality)
                                                                                    (("2"
                                                                                      (name
                                                                                       "ii"
                                                                                       "PolyTerms(x!1)")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "sign_ext(polynomial(p(ii), n(ii))(x)) =
                                                                                                                 sign_ext(polynomial(p(ii), n(ii))(-root_bound))")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1))
                                                                                              (("1"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 "polynomial")
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "hyp")
                                                                                                (("2"
                                                                                                  (copy
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     "hyp")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "ii"
                                                                                                       _)
                                                                                                      (("2"
                                                                                                        (inst-cp
                                                                                                         -
                                                                                                         "-root_bound")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "abs")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sign_ext")
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "poly_intermediate_value_inc")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   _
                                                                                                                                   "0"
                                                                                                                                   _
                                                                                                                                   "x"
                                                                                                                                   "-root_bound")
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (skolem
                                                                                                                                         -
                                                                                                                                         "zz")
                                                                                                                                        (("1"
                                                                                                                                          (reveal
                                                                                                                                           "hyp")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "ii"
                                                                                                                                             "zz")
                                                                                                                                            (("1"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "poly_intermediate_value_inc")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   _
                                                                                                                                   "0"
                                                                                                                                   _
                                                                                                                                   "x"
                                                                                                                                   "-root_bound")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (skolem
                                                                                                                                         -
                                                                                                                                         "zz")
                                                                                                                                        (("2"
                                                                                                                                          (reveal
                                                                                                                                           "hyp")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "ii"
                                                                                                                                             "zz")
                                                                                                                                            (("2"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (lemma
                                                                                                                                 "poly_intermediate_value_dec")
                                                                                                                                (("3"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   _
                                                                                                                                   "0"
                                                                                                                                   _
                                                                                                                                   "x"
                                                                                                                                   "-root_bound")
                                                                                                                                  (("3"
                                                                                                                                    (inst?)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      (("3"
                                                                                                                                        (skolem
                                                                                                                                         -
                                                                                                                                         "zz")
                                                                                                                                        (("3"
                                                                                                                                          (reveal
                                                                                                                                           "hyp")
                                                                                                                                          (("3"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "ii"
                                                                                                                                             "zz")
                                                                                                                                            (("3"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (lemma
                                                                                                                                 "poly_intermediate_value_dec")
                                                                                                                                (("4"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   _
                                                                                                                                   "0"
                                                                                                                                   _
                                                                                                                                   "x"
                                                                                                                                   "-root_bound")
                                                                                                                                  (("4"
                                                                                                                                    (inst?)
                                                                                                                                    (("4"
                                                                                                                                      (assert)
                                                                                                                                      (("4"
                                                                                                                                        (skolem
                                                                                                                                         -
                                                                                                                                         "zz")
                                                                                                                                        (("4"
                                                                                                                                          (reveal
                                                                                                                                           "hyp")
                                                                                                                                          (("4"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "ii"
                                                                                                                                             "zz")
                                                                                                                                            (("4"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "x>root_bound")
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "(LAMBDA (i: upto(NumTerms)):
                                                                                                                 rel5(RelF6(i))
                                                                                                                     (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(x), 0)) = (LAMBDA (i: upto(NumTerms)):
                                                                                                                 rel5(RelF6(i))
                                                                                                                     (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(root_bound),
                                                                                                                      0))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "root_bound")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (-2
                                                                                      -3
                                                                                      2))
                                                                                    (("2"
                                                                                      (decompose-equality)
                                                                                      (("2"
                                                                                        (name
                                                                                         "ii"
                                                                                         "PolyTerms(x!1)")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "sign_ext(polynomial(p(ii), n(ii))(x)) =
                                                                                                                     sign_ext(polynomial(p(ii), n(ii))(root_bound))")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (grind
                                                                                                   :exclude
                                                                                                   "polynomial")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   "hyp")
                                                                                                  (("2"
                                                                                                    (copy
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       "hyp")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "ii"
                                                                                                         _)
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -
                                                                                                           "root_bound")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "sign_ext")
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "poly_intermediate_value_dec")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     _
                                                                                                                                     "0"
                                                                                                                                     _
                                                                                                                                     "root_bound"
                                                                                                                                     "x")
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skolem
                                                                                                                                           -
                                                                                                                                           "zz")
                                                                                                                                          (("1"
                                                                                                                                            (reveal
                                                                                                                                             "hyp")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "ii"
                                                                                                                                               "zz")
                                                                                                                                              (("1"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lemma
                                                                                                                                   "poly_intermediate_value_dec")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     _
                                                                                                                                     "0"
                                                                                                                                     _
                                                                                                                                     "root_bound"
                                                                                                                                     "x")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (skolem
                                                                                                                                           -
                                                                                                                                           "zz")
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             "hyp")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "ii"
                                                                                                                                               "zz")
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (lemma
                                                                                                                                   "poly_intermediate_value_inc")
                                                                                                                                  (("3"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     _
                                                                                                                                     "0"
                                                                                                                                     _
                                                                                                                                     "root_bound"
                                                                                                                                     "x")
                                                                                                                                    (("3"
                                                                                                                                      (inst?)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        (("3"
                                                                                                                                          (skolem
                                                                                                                                           -
                                                                                                                                           "zz")
                                                                                                                                          (("3"
                                                                                                                                            (reveal
                                                                                                                                             "hyp")
                                                                                                                                            (("3"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "ii"
                                                                                                                                               "zz")
                                                                                                                                              (("3"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("4"
                                                                                                                                  (lemma
                                                                                                                                   "poly_intermediate_value_inc")
                                                                                                                                  (("4"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     _
                                                                                                                                     "0"
                                                                                                                                     _
                                                                                                                                     "root_bound"
                                                                                                                                     "x")
                                                                                                                                    (("4"
                                                                                                                                      (inst?)
                                                                                                                                      (("4"
                                                                                                                                        (assert)
                                                                                                                                        (("4"
                                                                                                                                          (skolem
                                                                                                                                           -
                                                                                                                                           "zz")
                                                                                                                                          (("4"
                                                                                                                                            (reveal
                                                                                                                                             "hyp")
                                                                                                                                            (("4"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "ii"
                                                                                                                                               "zz")
                                                                                                                                              (("4"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               +
                                                                               "x")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "SystemSat?")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (insteep)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (hide (-4 -9))
                                                            (("3"
                                                              (hide 3)
                                                              (("3"
                                                                (typepred
                                                                 "ppl")
                                                                (("3"
                                                                  (lemma
                                                                   "sigma_gt_0")
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "EXISTS (ez:int): ez = sigma(0, k, n * (LAMBDA i: 1))")
                                                                            (("1"
                                                                              (skeep
                                                                               -)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (case
                                                                                     "NOT ez-1>=0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "FORALL (ezz:posnat): ezz-1>=0")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "ez")
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "poly_deriv"
                                                                                         +)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -4)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT length(ppl)-1/=0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (mult-by
                                                                                                 1
                                                                                                 "ppsq(length[int](ppl) - 1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT list2array[int](0)(ppl) = ppsq")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -2
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "list2array_sound")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (decompose-equality
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -4
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "n")
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "i!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               +
                                                                               "sigma(0, k, n * (LAMBDA i: 1))")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "n")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (hide (-2 -3 -4 -9))
                                                        (("4"
                                                          (hide 2)
                                                          (("4"
                                                            (flatten)
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (typepred
                                                                 "ppl")
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (lemma
                                                                     "sigma_gt_0")
                                                                    (("4"
                                                                      (inst?)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -8
                                                                               +
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "list2array_sound")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ppl")
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -3)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "*")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (typepred
                                                                                 "n")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "n!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-4 2))
                                                  (("2"
                                                    (hide -8)
                                                    (("2"
                                                      (typepred "root_bound")
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (skeep*)
                                                          (("2"
                                                            (case
                                                             "FORALL (jj:upto(k),iz:nat): jj<=iz AND iz<=k IMPLIES Knuth_poly_root_strict_bound(p(jj),n(jj))<=Knuth_total(k,p,n,iz)")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "ii"
                                                               "k")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "Knuth_poly_root_strict_bound(p(ii), n(ii))")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (induct "iz")
                                                                (("1"
                                                                  (skeep*)
                                                                  (("1"
                                                                    (expand
                                                                     "Knuth_total")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem
                                                                   +
                                                                   "zzz")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (skeep*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "jj")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (expand
                                                                               "Knuth_total"
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "Knuth_total"
                                                                               +)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide 2)
                                                                  (("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (typepred
                                                                       "n")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -)
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (typepred
                                                                   "n")
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -7)
                                (("2" (case "NOT nnsq-1>=0")
                                  (("1" (hide 2)
                                    (("1" (hide 2)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (typepred "ppl")
                                                  (("1"
                                                    (lemma "sigma_gt_0")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand "*")
                                                            (("1"
                                                              (typepred "n")
                                                              (("1"
                                                                (inst - "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (hide 2)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "poly_deriv" -2)
                                          (("2"
                                            (lemma
                                             "nzreal_times_nzreal_is_nzreal")
                                            (("2"
                                              (inst?)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -8 -1 :dir rl)
                                                  (("2"
                                                    (rewrite
                                                     "list2array_sound"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred "ppl")
                                                          (("2"
                                                            (replace -12)
                                                            (("2"
                                                              (decompose-equality
                                                               -3)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (typepred
                                                                       "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -10)
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide -7)
                                (("3" (hide -2)
                                  (("3" (hide 2)
                                    (("3" (flatten)
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (expand "poly_deriv")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (hide 2)
                                (("4" (hide -7)
                                  (("4" (hide -2)
                                    (("4" (flatten)
                                      (("4"
                                        (typepred "ppl")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (lemma "sigma_gt_0")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (split -)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (replace -8 :dir rl)
                                                        (("1"
                                                          (rewrite
                                                           "list2array_sound"
                                                           +)
                                                          (("1"
                                                            (decompose-equality
                                                             -)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace -5)
                                                                  (("1"
                                                                    (typepred
                                                                     "prod_polynomials(p, n, LAMBDA i: 1, k)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "n")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "n")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (expand "*")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -6)
                              (("2" (expand "Eq_computed_remainder_seq?")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (hide -5)
                            (("2" (hide 2)
                              (("2" (skeep*)
                                (("2" (typepred "n")
                                  (("2" (inst?)
                                    (("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "poly_deriv")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -5)
                            (("3" (skeep*)
                              (("3" (expand "poly_deriv")
                                (("3" (propax) nil nil)) nil))
                              nil))
                            nil)
                           ("4" (hide -5)
                            (("4" (skeep*)
                              (("4" (typepred "n")
                                (("4" (inst?) (("4" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((hutch_int const-decl "bool" hutch nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (subrange type-eq-decl nil integers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (BoolExpr type-eq-decl nil hutch nil)
          (BoolTuple type-eq-decl nil hutch nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (list2array def-decl "T" array2list structures)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (Knuth_total def-decl "posreal" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (j skolem-const-decl "nat" hutch nil)
          (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
           nil)
          (Eq_computed_remainder_seq? const-decl "bool" hutch nil)
          (signs_upd const-decl "[nat -> int]" hutch nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (nzreal nonempty-type-eq-decl nil reals nil)
          (nnsq skolem-const-decl "int" hutch nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (i!1 skolem-const-decl "nat" hutch nil)
          (both_sides_times1 formula-decl nil real_props nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (ppl skolem-const-decl "{ll |
   length(ll) - 1 = sigma(0, k, n * LAMBDA i: 1) AND
    prod_polynomials(p, n, LAMBDA i: 1, k) =
     (LAMBDA (i): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): p(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (p skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (ppsq skolem-const-decl "[nat -> int]" hutch nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (list2array_sound formula-decl nil array2list structures)
          (i!1 skolem-const-decl "nat" hutch nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (sigma_gt_0 formula-decl nil sigma reals)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (sign_ext const-decl
                    "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
                    sign reals)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (abs_neg_rew formula-decl nil abs_rews ints)
          (poly_intermediate_value_dec formula-decl nil polynomials reals)
          (poly_intermediate_value_inc formula-decl nil polynomials reals)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (sound_signs? const-decl "bool" hutch nil)
          (Eq_computed_remainder? const-decl "bool" compute_sturm Sturm)
          (rel5 const-decl "bool" preprocessing_univariate nil)
          (hutch_int_basic def-decl "{bb: bool |
   (unsatl? IMPLIES
     (NOT be(LAMBDA (i: upto(NumTerms)):
               rel5(RelF6(i))
                   (polynomial(p(PolyTerms(i)), n(PolyTerms(i)))(low),
                    0))))
    IMPLIES
    (bb IFF
      SystemSat?(NumTerms, k, be, RelF6, PolyTerms, p, n,
                 LAMBDA (qz: real): low <= qz AND qz <= high))}" hutch nil)
          (FALSE const-decl "bool" booleans nil)
          (sigma_ge_0 formula-decl nil sigma reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (SystemSat? const-decl "bool" hutch nil)
          (IFF const-decl "[bool, bool -> bool]" booleans nil)
          (Knuth_poly_root_strict_bound const-decl
            "{K: posreal | FORALL (x: real): polynomial(a, n)(x) = 0 IMPLIES abs(x) < K}"
            more_polynomial_props reals)
          (pred type-eq-decl nil defined_types nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (posreal_max application-judgement
           "{z: posreal | z >= x AND z >= y}" real_defs nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (null adt-constructor-decl "(null?)" list_adt nil)
          (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
          (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
          (poly_deriv const-decl "real" polynomials reals)
          (remainder_seq const-decl
                         "{crem: (is_neg_remainder_list?(g, n, h, m)) |
   length(crem) > 1 AND length(nth(crem, 0)) = 0}" remainder_sequence Sturm)
          (is_neg_remainder_list? const-decl "bool" remainder_sequence Sturm)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (below type-eq-decl nil naturalnumbers nil)
          (listn type-eq-decl nil listn structures)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (length def-decl "nat" list_props nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (T_low type-eq-decl nil sigma reals)
          (T_high type-eq-decl nil sigma reals)
          (sigma def-decl "real" sigma reals)
          (* const-decl "[T -> real]" real_fun_ops reals)
          (sequence type-eq-decl nil sequences nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (T_low type-eq-decl nil product reals)
          (T_high type-eq-decl nil product reals)
          (product def-decl "real" product reals)
          (^ const-decl "real" exponentiation nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
                            poly_families nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (< const-decl "bool" reals nil)
          (below type-eq-decl nil nat_types nil)
          (nth def-decl "T" list_props nil)
          (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
            poly_families nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         shostak))
       (poly_system_list_TCC1 0
        (poly_system_list_TCC1-1 nil 3690275234 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil))
         nil
         (poly_system_list subtype "hutch.i"
                           "below[length[list[int]](lli)]")))
       (poly_system_list_TCC2 0
        (poly_system_list_TCC2-1 nil 3690275234 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (every adt-def-decl "boolean" list_adt nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil
         (poly_system_list subtype "hutch.i"
                           "below[length[int](nth[list[int]](lli, j))]")))
       (poly_system_list_TCC3 0
        (poly_system_list_TCC3-2 nil 3690275558
         ("" (skeep)
          (("" (split 1)
            (("1" (grind) nil nil)
             ("2" (skeep)
              (("2"
                (typepred "array2list[list[int]]
                        (k + 1)
                        (LAMBDA (j: nat): array2list[int](n(j) + 1)(p(j)))")
                (("2" (inst -3 "i")
                  (("2" (typepred "array2list[int](1 + n(i))(p(i))")
                    (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3"
                (typepred "array2list[list[int]]
                        (k + 1)
                        (LAMBDA (j: nat): array2list[int](n(j) + 1)(p(j)))")
                (("3" (inst -3 "j_1")
                  (("3" (typepred "array2list[int](1 + n(j_1))(p(j_1))")
                    (("3" (inst -3 "i") (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (length def-decl "nat" list_props nil)
          (array2list_it def-decl
                         "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                         array2list structures)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (below type-eq-decl nil naturalnumbers nil)
          (< const-decl "bool" reals nil)
          (listn type-eq-decl nil listn structures)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil
         (poly_system_list subtype
                           "array2list[list[int]].array2list((number_fields.+)(hutch.k, 1))(LAMBDA (j: naturalnumbers.nat): array2list[int].array2list((number_fields.+)(hutch.n(j), 1))(hutch.p(j)))"
                           "{lli: list_adt[list[int]].list | booleans.AND(list_props[list[int]].length(lli) = (number_fields.+)(1, hutch.k), booleans.AND(FORALL (i: naturalnumbers.upto(hutch.k)): list_props[int].length(list_props[list[int]].nth(lli, i)) = (number_fields.+)(1, hutch.n(i)), FORALL (j: naturalnumbers.upto(hutch.k), i: naturalnumbers.upto(hutch.n(hutch.j))): list_props[int].nth(list_props[list[int]].nth(lli, j), i) = hutch.p(j)(i)))}"))
        (poly_system_list_TCC3-1 nil 3690275234 ("" (subtype-tcc) nil nil) nil
         nil
         (poly_system_list subtype
                           "array2list[list[int]].array2list((number_fields.+)(hutch.k, 1))(LAMBDA (j: naturalnumbers.nat): array2list[int].array2list((number_fields.+)(hutch.n(j), 1))(hutch.p(j)))"
                           "{lli: list_adt[list[int]].list | booleans.AND(list_props[list[int]].length(lli) = (number_fields.+)(1, hutch.k), booleans.AND(FORALL (i: naturalnumbers.upto(hutch.k)): list_props[int].length(list_props[list[int]].nth(lli, i)) = (number_fields.+)(1, hutch.n(i)), FORALL (j: naturalnumbers.upto(hutch.k), i: naturalnumbers.upto(hutch.n(hutch.j))): list_props[int].nth(list_props[list[int]].nth(lli, j), i) = hutch.p(j)(i)))}")))
       (hutch_TCC1 0
        (hutch_TCC1-2 nil 3690275671
         ("" (skeep*)
          (("" (typepred "n")
            (("" (inst - "j")
              (("" (flatten)
                (("" (assert)
                  (("" (replaces -2)
                    (("" (flatten)
                      (("" (assert)
                        (("" (typepred "rat_poly_to_int(pq(j), n(j))")
                          (("" (skosimp*)
                            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((> const-decl "bool" reals nil)
          (rat nonempty-type-eq-decl nil rationals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (rat_times_rat_is_rat application-judgement "rat" rationals nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (nonneg_rat nonempty-type-eq-decl nil rationals nil)
          (posrat nonempty-type-eq-decl nil rationals nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
                           clear_denominators Sturm)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch subtype "hutch.n"
                "{n | FORALL (j: naturalnumbers.upto(hutch.k)): booleans.AND(hutch.pi(j)(hutch.n(j)) /= 0, reals.>(hutch.n(j), 0))}"))
        (hutch_TCC1-1 nil 3690275234 ("" (subtype-tcc) nil nil) nil nil
         (hutch subtype "hutch.n"
                "{n | FORALL (j: naturalnumbers.upto(hutch.k)): booleans.AND(hutch.pi(j)(hutch.n(j)) /= 0, reals.>(hutch.n(j), 0))}")))
       (hutch_TCC2 0
        (hutch_TCC2-1 nil 3690275234 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (rat nonempty-type-eq-decl nil rationals nil)
          (> const-decl "bool" reals nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (posrat nonempty-type-eq-decl nil rationals nil)
          (nonneg_rat nonempty-type-eq-decl nil rationals nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (length def-decl "nat" list_props nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
                           clear_denominators Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (poly_system_list const-decl "{lli: list[list[int]] |
   length[list[int]](lli) = k + 1 AND
    (FORALL (i: upto(k)): length[int](nth[list[int]](lli, i)) = n(i) + 1)
     AND
     (FORALL (j: upto(k), i: upto(n(j))):
        nth[int](nth[list[int]](lli, j), i) = p(j)(i))}" hutch nil))
         nil (hutch subtype "hutch.i" "below[length[list[int]](pl)]")))
       (hutch_TCC3 0
        (hutch_TCC3-1 nil 3690275234 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (/= const-decl "boolean" notequal nil)
          (rat nonempty-type-eq-decl nil rationals nil)
          (> const-decl "bool" reals nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (posrat nonempty-type-eq-decl nil rationals nil)
          (nonneg_rat nonempty-type-eq-decl nil rationals nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (length def-decl "nat" list_props nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
                           clear_denominators Sturm)
          (array2list const-decl
                      "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                      array2list structures)
          (poly_system_list const-decl "{lli: list[list[int]] |
   length[list[int]](lli) = k + 1 AND
    (FORALL (i: upto(k)): length[int](nth[list[int]](lli, i)) = n(i) + 1)
     AND
     (FORALL (j: upto(k), i: upto(n(j))):
        nth[int](nth[list[int]](lli, j), i) = p(j)(i))}" hutch nil))
         nil
         (hutch subtype "hutch.j"
                "below[length[int](nth[list[int]](pl, i))]")))
       (hutch_TCC4 0
        (hutch_TCC4-1 nil 3690275234
         ("" (skeep*)
          (("" (typepred "n")
            (("" (inst - "j")
              (("" (flatten)
                (("" (assert)
                  (("" (replaces -4 +)
                    (("" (assert)
                      (("" (typepred "pl")
                        (("" (hide -1)
                          (("" (inst? -3)
                            (("" (replaces -3)
                              (("" (assert)
                                (("" (replaces -4)
                                  (("" (assert)
                                    ((""
                                      (typepred
                                       "rat_poly_to_int(pq(j), n(j))")
                                      ((""
                                        (skosimp*)
                                        ((""
                                          (inst?)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((> const-decl "bool" reals nil)
          (rat nonempty-type-eq-decl nil rationals nil)
          (/= const-decl "boolean" notequal nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (posrat nonempty-type-eq-decl nil rationals nil)
          (nonneg_rat nonempty-type-eq-decl nil rationals nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (length def-decl "nat" list_props nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (rat_times_rat_is_rat application-judgement "rat" rationals nil)
          (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
                           clear_denominators Sturm)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil
         (hutch subtype "hutch.n"
                "{n | FORALL (j: naturalnumbers.upto(hutch.k)): booleans.AND(hutch.p(j)(hutch.n(j)) /= 0, reals.>(hutch.n(j), 0))}")))
       (hutch_def 0
        (hutch_def-2 nil 3690290292
         ("" (skeep*)
          ((""
            (name "G"
                  "hutch(sumsquares,NumTerms, k, be, RelF6, PolyTerms, pq, n)")
            (("" (replace -1)
              (("" (expand "hutch" :assert? none)
                (("" (skoletin -)
                  (("" (name "pl" "poly_system_list(k, pi, n)")
                    (("" (replace -1)
                      ((""
                        (name "pt" "LAMBDA (i):
                                    LAMBDA (j):
                                      IF i <= k AND j <= n(i)
                                        THEN nth[int](nth[list[int]](pl, i), j)
                                      ELSE 0
                                      ENDIF")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (lemma "hutch_int_def")
                              (("1" (inst?)
                                (("1" (replaces -4)
                                  (("1" (replaces -1)
                                    (("1" (expand "SystemSatRat?")
                                      (("1"
                                        (expand "SystemSat?")
                                        (("1"
                                          (case
                                           "FORALL (x:real): (LAMBDA (i: upto(NumTerms)):
                                         rel5(RelF6(i))
                                             (polynomial(pt(PolyTerms(i)), n(PolyTerms(i)))(x), 0)) = (LAMBDA (i: upto(NumTerms)):
                                      rel5(RelF6(i))
                                          (polynomial(pq(PolyTerms(i)), n(PolyTerms(i)))(x), 0))")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (insteep +)
                                                (("1"
                                                  (insteep -)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep*)
                                              (("2"
                                                (insteep)
                                                (("2"
                                                  (insteep)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skeep*)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (name "ii" "PolyTerms(x!1)")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (case
                                                       "sign_ext(polynomial(pt(ii), n(ii))(x)) = sign_ext(polynomial(pq(ii), n(ii))(x))")
                                                      (("1"
                                                        (hide-all-but (-1 1))
                                                        (("1"
                                                          (grind
                                                           :exclude
                                                           "polynomial")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "rat_poly_to_int(pq(ii), n(ii))")
                                                          (("2"
                                                            (skeep*)
                                                            (("2"
                                                              (case
                                                               "FORALL (zz:nat): zz<=n(ii) IMPLIES cp*polynomial(pq(ii), zz)(x) = polynomial(pt(ii), zz)(x)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n(ii)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide -)
                                                                      (("1"
                                                                        (expand
                                                                         "sign_ext")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (mult-by
                                                                                             1
                                                                                             "cp")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (mult-by
                                                                                             -1
                                                                                             "cp")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (case
                                                                                             "polynomial(pq(ii), n(ii))(x) = 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (mult-by
                                                                                               1
                                                                                               "cp")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (induct "zz")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "polynomial"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "sigma")
                                                                      (("1"
                                                                        (expand
                                                                         "sigma")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "pl")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -3)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -7
                                                                                             +)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem
                                                                   1
                                                                   "zz")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "polynomial"
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "sigma"
                                                                           +)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "pq(ii)(1 + zz) * cp
                        =
                         pt(ii)(1 + zz) ")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "1+zz")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -3
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "pl")
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -6
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (assert)
                            (("2" (typepred "pl")
                              (("2" (hide -1)
                                (("2" (inst? -2) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((hutch const-decl "bool" hutch nil) (> const-decl "bool" reals nil)
          (/= const-decl "boolean" notequal nil)
          (rat nonempty-type-eq-decl nil rationals nil)
          (subrange type-eq-decl nil integers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (BoolExpr type-eq-decl nil hutch nil)
          (BoolTuple type-eq-decl nil hutch nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (SystemSat? const-decl "bool" hutch nil)
          (pred type-eq-decl nil defined_types nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
          (ii skolem-const-decl "upto(k)" hutch nil)
          (n skolem-const-decl
           "{n | FORALL (j: upto(k)): pq(j)(n(j)) /= 0 AND n(j) > 0}" hutch
           nil)
          (pq skolem-const-decl "[nat -> [nat -> rat]]" hutch nil)
          (k skolem-const-decl "nat" hutch nil)
          (sigma def-decl "real" sigma reals)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (both_sides_times1 formula-decl nil real_props nil)
          (both_sides_times_pos_lt1 formula-decl nil real_props nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
          (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
           rationals nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (gt_realorder name-judgement "RealOrder" real_orders reals)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (ge_realorder name-judgement "RealOrder" real_orders reals)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (le_realorder name-judgement "RealOrder" real_orders reals)
          (lt_realorder name-judgement "RealOrder" real_orders reals)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (sign_ext const-decl
                    "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
                    sign reals)
          (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
               nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (- const-decl "[numfield -> numfield]" number_fields nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (polynomial const-decl "[real -> real]" polynomials reals)
          (sequence type-eq-decl nil sequences nil)
          (rel5 const-decl "bool" preprocessing_univariate nil)
          (SystemSatRat? const-decl "bool" hutch nil)
          (hutch_int_def formula-decl nil hutch nil)
          (hutch_int const-decl "bool" hutch nil)
          (IFF const-decl "[bool, bool -> bool]" booleans nil)
          (id const-decl "(bijective?[T, T])" identity nil)
          (bijective? const-decl "bool" functions nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (poly_system_list const-decl "{lli: list[list[int]] |
   length[list[int]](lli) = k + 1 AND
    (FORALL (i: upto(k)): length[int](nth[list[int]](lli, i)) = n(i) + 1)
     AND
     (FORALL (j: upto(k), i: upto(n(j))):
        nth[int](nth[list[int]](lli, j), i) = p(j)(i))}" hutch nil)
          (nth def-decl "T" list_props nil)
          (below type-eq-decl nil nat_types nil)
          (< const-decl "bool" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (length def-decl "nat" list_props nil)
          (every adt-def-decl "boolean" list_adt nil)
          (PRED type-eq-decl nil defined_types nil)
          (list type-decl nil list_adt nil)
          (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
                           clear_denominators Sturm)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (posrat nonempty-type-eq-decl nil rationals nil)
          (nonneg_rat nonempty-type-eq-decl nil rationals nil)
          (rat_times_rat_is_rat application-judgement "rat" rationals nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (TRUE const-decl "bool" booleans nil))
         nil)
        (hutch_def-1 nil 3690276064
         ("" (skeep*)
          (("" (name "G" "hutch(NumTerms, k, be, RelF6, PolyTerms, pq, n)")
            (("" (replace -1)
              (("" (expand "hutch" :assert? none)
                (("" (skoletin -)
                  (("" (name "pl" "poly_system_list(k, pi, n)")
                    (("" (replace -1)
                      ((""
                        (name "pt" "LAMBDA (i):
               LAMBDA (j):
                 IF i <= k AND j <= n(i)
                   THEN nth[int](nth[list[int]](pl, i), j)
                 ELSE 0
                 ENDIF")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (lemma "hutch_int_def")
                              (("1" (inst?)
                                (("1" (replaces -4)
                                  (("1" (replaces -1)
                                    (("1" (expand "SystemSatRat?")
                                      (("1"
                                        (expand "SystemSat?")
                                        (("1"
                                          (case
                                           "FORALL (x:real): (LAMBDA (i: upto(NumTerms)):
              rel5(RelF6(i))
                  (polynomial(pt(PolyTerms(i)), n(PolyTerms(i)))(x), 0)) = (LAMBDA (i: upto(NumTerms)):
           rel5(RelF6(i))
               (polynomial(pq(PolyTerms(i)), n(PolyTerms(i)))(x), 0))")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (insteep +)
                                                (("1"
                                                  (insteep -)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep*)
                                              (("2"
                                                (insteep)
                                                (("2"
                                                  (insteep)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skeep*)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (name "ii" "PolyTerms(x!1)")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (case
                                                       "sign_ext(polynomial(pt(ii), n(ii))(x)) = sign_ext(polynomial(pq(ii), n(ii))(x))")
                                                      (("1"
                                                        (hide-all-but (-1 1))
                                                        (("1"
                                                          (grind
                                                           :exclude
                                                           "polynomial")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "rat_poly_to_int(pq(ii), n(ii))")
                                                          (("2"
                                                            (skeep*)
                                                            (("2"
                                                              (case
                                                               "FORALL (zz:nat): zz<=n(ii) IMPLIES polynomial(pq(ii), zz)(x) = cp*polynomial(pt(ii), n(ii))(x)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n(ii)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "sign_ext")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "cp")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       1
                                                                                       "cp")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (case
                                                                                       "polynomial(pt(ii), n(ii))(x) = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-by
                                                                                         1
                                                                                         "cp")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak))
       (test_TCC1 0
        (test_TCC1-1 nil 3703863119 ("" (subtype-tcc) nil nil)
         ((/= const-decl "boolean" notequal nil)) nil
         (test subtype "hutch.ddeg"
               "{i: integers.int | booleans.OR(hutch.x /= 0, reals.>=(i, 0))}")))
       (test 0
             (test-3 nil 3703863473
              ("" (skoletin*)
               (("" (name "p0" "LAMBDA (i:nat): IF i=1 THEN 1 ELSE 0 ENDIF")
                 ((""
                   (name "p1"
                         "LAMBDA (i:nat): IF i=ddeg THEN -1 ELSIF i=0 THEN N ELSE 0 ENDIF")
                   ((""
                     (name "pk"
                           "LAMBDA (k:nat): (LAMBDA (i:nat): IF i=2*ddeg THEN 1 ELSIF i=ddeg THEN -2*k-1 ELSIF i=0 THEN k*(k+1) ELSE 0 ENDIF)")
                     (("" (name "NumTerms" "N+2")
                       ((""
                         (name "be"
                               "LAMBDA (bt:BoolTuple(NumTerms)): FORALL (k:upto(NumTerms)): bt(k)")
                         (("" (name "relf6" "LAMBDA (i:nat): 1")
                           (("" (lemma "hutch_def")
                             ((""
                               (inst - "TRUE" "NumTerms" "N+2" "be" "relf6"
                                "LAMBDA (i:upto(NumTerms)): i"
                                "LAMBDA (i:nat): IF i<=N THEN pk(i) ELSIF i=N+1 THEN p0 ELSIF i=N+2 THEN p1 ELSE (LAMBDA (jj:nat): 0) ENDIF"
                                "LAMBDA (i:nat): IF i<=N THEN 2*ddeg ELSIF i=N+1 THEN 1 ELSIF i=N+2 THEN ddeg ELSE 0 ENDIF")
                               (("1"
                                 (eval-expr
                                  "hutch(TRUE, NumTerms, N + 2, be, relf6,
                                    LAMBDA (i: upto(NumTerms)): i,
                                    LAMBDA (i: nat):
                                      IF i <= N THEN pk(i)
                                      ELSIF i = N + 1 THEN p0
                                      ELSIF i = N + 2 THEN p1
                                      ELSE (LAMBDA (jj: nat): 0)
                                      ENDIF,
                                    LAMBDA (i: nat):
                                      IF i <= N THEN 2 * ddeg
                                      ELSIF i = N + 1 THEN 1
                                      ELSIF i = N + 2 THEN ddeg
                                      ELSE 0
                                      ENDIF)")
                                 (("1" (replaces -1)
                                   (("1" (assert)
                                     (("1"
                                       (expand "SystemSatRat?")
                                       (("1"
                                         (skeep*)
                                         (("1"
                                           (inst + "x")
                                           (("1"
                                             (expand "be")
                                             (("1"
                                               (skeep*)
                                               (("1"
                                                 (lift-if)
                                                 (("1"
                                                   (split +)
                                                   (("1"
                                                     (flatten)
                                                     (("1"
                                                       (assert)
                                                       (("1"
                                                         (inst + "k")
                                                         (("1"
                                                           (assert)
                                                           (("1"
                                                             (hide -)
                                                             (("1"
                                                               (expand "pk")
                                                               (("1"
                                                                 (grind)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (flatten)
                                                     (("2"
                                                       (split +)
                                                       (("1"
                                                         (expand "p0" 1)
                                                         (("1"
                                                           (flatten)
                                                           (("1"
                                                             (assert)
                                                             (("1"
                                                               (expand
                                                                "rel5"
                                                                1)
                                                               (("1"
                                                                 (expand
                                                                  "polynomial"
                                                                  1)
                                                                 (("1"
                                                                   (expand
                                                                    "sigma"
                                                                    +)
                                                                   (("1"
                                                                     (expand
                                                                      "sigma"
                                                                      +)
                                                                     (("1"
                                                                       (expand
                                                                        "sigma"
                                                                        +)
                                                                       (("1"
                                                                         (expand
                                                                          "^"
                                                                          1)
                                                                         (("1"
                                                                           (expand
                                                                            "expt"
                                                                            1)
                                                                           (("1"
                                                                             (expand
                                                                              "expt"
                                                                              1)
                                                                             (("1"
                                                                               (propax)
                                                                               nil
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (flatten)
                                                         (("2"
                                                           (expand "rel5" +)
                                                           (("2"
                                                             (expand "p1" +)
                                                             (("2"
                                                               (deftactic
                                                                rexp
                                                                (repeat
                                                                 (expand
                                                                  "sigma"
                                                                  +)))
                                                               (("2"
                                                                 (replaces -9)
                                                                 (("2"
                                                                   (expand
                                                                    "polynomial"
                                                                    +)
                                                                   (("2"
                                                                     (rexp)
                                                                     (("2"
                                                                       (assert)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2" (skosimp*)
                                 (("2" (lift-if)
                                   (("2" (assert)
                                     (("2"
                                       (expand "pk" +)
                                       (("2"
                                         (expand "p0" +)
                                         (("2"
                                           (expand "p1" +)
                                           (("2" (propax) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                                ("4" (skosimp*) (("4" (assert) nil nil)) nil)
                                ("5" (assert) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((IF const-decl "[boolean, T, T -> T]" if_def nil)
               (int_times_even_is_even application-judgement "even_int"
                integers nil)
               (posint_times_posint_is_posint application-judgement "posint"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
                integers nil)
               (even_minus_odd_is_odd application-judgement "odd_int" integers
                nil)
               (upto nonempty-type-eq-decl nil naturalnumbers nil)
               (BoolTuple type-eq-decl nil hutch nil)
               (hutch_def formula-decl nil hutch nil)
               (hutch const-decl "bool" hutch nil)
               (FALSE const-decl "bool" booleans nil)
               (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
                integers nil)
               (minus_nzint_is_nzint application-judgement "nzint" integers
                nil)
               (minus_even_is_even application-judgement "even_int" integers
                nil)
               (be skolem-const-decl "[BoolTuple(NumTerms) -> boolean]" hutch
                   nil)
               (odd_plus_even_is_odd application-judgement "odd_int" integers
                nil)
               (posint_plus_nnint_is_posint application-judgement "posint"
                integers nil)
               (int_minus_int_is_int application-judgement "int" integers nil)
               (expt def-decl "real" exponentiation nil)
               (sigma def-decl "real" sigma reals)
               (polynomial const-decl "[real -> real]" polynomials reals)
               (rel5 const-decl "bool" preprocessing_univariate nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (odd_minus_even_is_odd application-judgement "odd_int" integers
                nil)
               (even_minus_even_is_even application-judgement "even_int"
                integers nil)
               (odd_minus_odd_is_even application-judgement "even_int"
                integers nil)
               (le_realorder name-judgement "RealOrder" real_orders reals)
               (real_le_is_total_order name-judgement "(total_order?[real])"
                real_props nil)
               (gt_realorder name-judgement "RealOrder" real_orders reals)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (lt_realorder name-judgement "RealOrder" real_orders reals)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_plus_real_is_real application-judgement "real" reals nil)
               (SystemSatRat? const-decl "bool" hutch nil)
               (BoolExpr type-eq-decl nil hutch nil)
               (subrange type-eq-decl nil integers nil)
               (rat nonempty-type-eq-decl nil rationals nil)
               (p1 skolem-const-decl "[nat -> int]" hutch nil)
               (p0 skolem-const-decl "[nat -> nonneg_int]" hutch nil)
               (ddeg skolem-const-decl "even_posnat" hutch nil)
               (pk skolem-const-decl "[nat -> [nat -> int]]" hutch nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (N skolem-const-decl "even_posnat" hutch nil)
               (relf6 skolem-const-decl "[nat -> odd_posnat]" hutch nil)
               (NumTerms skolem-const-decl "even_int" hutch nil)
               (even_plus_odd_is_odd application-judgement "odd_int" integers
                nil)
               (ge_realorder name-judgement "RealOrder" real_orders reals)
               (real_ge_is_total_order name-judgement "(total_order?[real])"
                real_props nil)
               (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
               (odd? const-decl "bool" integers nil)
               (even_int nonempty-type-eq-decl nil integers nil)
               (even_plus_even_is_even application-judgement "even_int"
                integers nil)
               (- const-decl "[numfield -> numfield]" number_fields nil)
               (minus_odd_is_odd application-judgement "odd_int" integers nil)
               (real_minus_real_is_real application-judgement "real" reals
                nil)
               (nnint_plus_posint_is_posint application-judgement "posint"
                integers nil)
               (+ const-decl "[numfield, numfield -> numfield]" number_fields
                  nil)
               (- const-decl "[numfield, numfield -> numfield]" number_fields
                  nil)
               (* const-decl "[numfield, numfield -> numfield]" number_fields
                  nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (bijective? const-decl "bool" functions nil)
               (id const-decl "(bijective?[T, T])" identity nil)
               (TRUE const-decl "bool" booleans nil)
               (<= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (^ const-decl "real" exponentiation nil)
               (< const-decl "bool" reals nil)
               (/= const-decl "boolean" notequal nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
               (even? const-decl "bool" integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]" integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals nil)
               (number_field nonempty-type-from-decl nil number_fields nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (real_times_real_is_real application-judgement "real" reals
                nil))
              nil)))


preprocessing_univariate: THEORY
BEGIN
IMPORTING Sturm@polylist,reals@polynomials,poly_systems,system_solvers,reals@sign

  listOfpLists : VAR [nat->[nat->real]] %changed from p : VAR [nat->[nat->int]]
  pList,pListAcc : VAR [nat->real] % changed from a: VAR [nat->int]
  d,i,j,q,numPolys,acc,rec: VAR nat  %numPolys was k
  RelF6: VAR [nat->subrange(0,5)] 
  dList : VAR [nat->nat] %was 

%%% various polynomial properties
polynomialDomMonomCoeffOne: LEMMA FORALL (a:real): FORALL (n:nat):
EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES x^(n+1) > a*x^n

polynomialDominationCoeff1: LEMMA FORALL (a:sequence[real]): FORALL (n:nat):
EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES x^(n+1) > polynomial(a, n)(x)

polynomialDomLC: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n+1) > 0 IMPLIES EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES a(n+1)*x^(n+1) > polynomial(a, n)(x)

polynomialDomLC2: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n+1) > 0 IMPLIES EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES a(n+1)*x^(n+1) > -1*polynomial(a, n)(x)

polynomialDomLC3: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n+1) > 0 IMPLIES EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES 0 < polynomial(a, n+1)(x)

polynomialDomLC2Neg: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n+1) < 0 IMPLIES EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES 0 > polynomial(a, n+1)(x)

%%% If leading coefficient is positive
polyLCPos: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n) > 0 IMPLIES EXISTS (p: nat): polynomial(a, n)(p) > 0

testcase: LEMMA EXISTS (p: real): 5*p^5-4000*p^4-3000>0

polyLCPosUniv: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n) > 0 IMPLIES NOT FORALL (p: nat): polynomial(a, n)(p) <= 0


%%% If leading coefficient is negative
polyLCNeg: LEMMA FORALL (a:sequence[real]): FORALL (n:nat): a(n) < 0 IMPLIES EXISTS (p: nat): polynomial(a, n)(p) < 0


%%% Working towards if degree is odd
evenPowerEquivalence: LEMMA FORALL (x: real): FORALL (k:nat): (-x)^(2*k) = x^(2*k)
oddPowerEquivalence: LEMMA FORALL (x: real): FORALL (k:nat): (-x)^(2*k+1) = -x^(2*k+1)

polyEvalAtExtReal: LEMMA EXISTS (x: real): x^2 > 0

polynomialDomMonomCoeffOneOdd: LEMMA FORALL (a:real): FORALL (k:nat):
EXISTS (m: int): FORALL (x:real): x <= m IMPLIES x^(2*k+1) <= a*x^(2*k)

polynomialDomMonomCoeffOneOddNeg: LEMMA FORALL (a:real): FORALL (k:nat): EXISTS (m: int): FORALL (x:real): x >= m IMPLIES -1*x^(2*k+1) <= a*x^(2*k)

polynomialDomMonomCoeffOneOddNegCoeff: LEMMA FORALL (a:real): FORALL (k:nat): FORALL (c:real): c < 0 IMPLIES EXISTS (m: int): FORALL (x:real): x >= m IMPLIES c*x^(2*k+1) <= a*x^(2*k)

sequenceRelHelper: LEMMA FORALL (a:sequence[real]): FORALL(k: real): FORALL (p: nat): FORALL (j: nat): FORALL (x:real): p > j IMPLIES polynomial(insert(k, p, a), j)(x) = polynomial(a, j)(x)

sequenceRelation: LEMMA FORALL (a: sequence[real]): FORALL(k:nat): EXISTS (b: sequence[real]): FORALL (x:real): polynomial(a, k)(x) = polynomial(b, k)(-x)

polynomialDomMonomNegEvenDeg: LEMMA FORALL (a: sequence[real]): FORALL(k:nat): EXISTS (m: int): FORALL (x:real): k>0 AND x<= m IMPLIES -x^(2*k) < polynomial(a, 2*k-1)(x)

polynomialDomMonomNegEvenDeg1: LEMMA FORALL (a: sequence[real]): FORALL(k:nat): EXISTS (m: int): FORALL (x:real): k>0 AND x>= m IMPLIES -x^(2*k) < polynomial(a, 2*k-1)(x)

polynomialOddDegLessThanZero: LEMMA FORALL (a:sequence[real]): FORALL (k:nat): a(2*k+1) > 0 IMPLIES EXISTS (m: int): FORALL (x:real): x <= m IMPLIES polynomial(a, 2*k+1)(x) < 0

polynomialOddDegGreaterThanZero: LEMMA FORALL (a:sequence[real]): FORALL (k:nat): a(2*k+1) < 0 IMPLIES EXISTS (m: int): FORALL (x:real): x >= m IMPLIES polynomial(a, 2*k+1)(x) < 0

polynomialOddDegGreaterThanZero1: LEMMA FORALL (a:sequence[real]): FORALL (k:nat): a(2*k+1) < 0 IMPLIES EXISTS (m: int): FORALL (x:real): x <= m IMPLIES polynomial(a, 2*k+1)(x) > 0

polyOddDegPos: LEMMA FORALL (a:sequence[real]): FORALL (k: nat): (NOT a(2*k + 1) = 0 IMPLIES EXISTS (x: real): polynomial(a, 2*k+1)(x) > 0)

polyOddDegNeg: LEMMA FORALL (a:sequence[real]): FORALL (k: nat): (NOT a(2*k + 1) = 0 IMPLIES EXISTS (x: real): polynomial(a, 2*k+1)(x) < 0)

polyOddDegZero: LEMMA FORALL (a:sequence[real]): FORALL (k: nat): (NOT a(2*k + 1) = 0 IMPLIES EXISTS (x: real): polynomial(a, 2*k+1)(x) = 0)

figuringOutModsBidir: LEMMA FORALL (n:nat): odd?(n) IFF EXISTS (k:nat): n = 2*k + 1

polyPlugInZero : LEMMA FORALL (a: sequence[real]): FORALL (d:nat): polynomial(a, d)(0) = a(0)

% **** Organizing all of the results into a preprocessing step  ****

% moved from poly_system_strategy
rel5(i:subrange(0,5))(r1,r2:real): bool =
	(IF i=0 THEN r1=r2 ELSIF i=1 THEN r1>r2
	ELSIF i=2 THEN r1<r2 ELSIF i=3 THEN r1/=r2 
	ELSIF i=4 THEN r1>=r2 ELSIF i=5 THEN r1<=r2 ELSE TRUE ENDIF)

% ********** For a single polynomial **********

preprocessingStep(pList, (d|pList(d)/=0), i:subrange(0,5)): bool =
    (IF i = 3 THEN TRUE
        ELSIF odd?(d) THEN TRUE
        ELSIF (pList(d) > 0 OR pList(0) > 0) AND (i = 1 OR i = 4) THEN TRUE
        ELSIF (pList(d) < 0 OR pList(0) < 0) AND (i = 2 OR i = 5) THEN TRUE
	ELSIF pList(0) = 0 AND i = 0 THEN TRUE
	ELSE FALSE ENDIF)

preprocessingLemma1: LEMMA pList(d)/=0 IMPLIES i = 3 IMPLIES  EXISTS (x:real): rel5(i)(polynomial(pList,d)(x),0)

preprocessingLemma2: LEMMA pList(d)/=0 IMPLIES FORALL (i:subrange(0,5)): odd?(d) IMPLIES  EXISTS (x:real): rel5(i)(polynomial(pList,d)(x),0)

preprocessingLemma3: LEMMA pList(d)/=0 IMPLIES FORALL (i:subrange(0,5)): ((pList(d) > 0 OR pList(0) > 0) AND (i = 1 OR i = 4)) IMPLIES  EXISTS (x:real): rel5(i)(polynomial(pList,d)(x),0)

preprocessingLemma4: LEMMA pList(d)/=0 IMPLIES FORALL (i:subrange(0,5)): ((pList(d) < 0 OR pList(0) < 0) AND (i = 2 OR i = 5)) IMPLIES  EXISTS (x:real): rel5(i)(polynomial(pList,d)(x),0)

preprocessingLemmaOddGeneralize:LEMMA FORALL (a:sequence[real]): FORALL (polyRel:subrange(0,5)): FORALL (k: nat): a(k) /= 0 IMPLIES  ((odd?(k) AND ((a(k) > 0 AND (polyRel = 2 OR polyRel = 3 OR polyRel = 5)) OR (a(k) < 0 AND (polyRel = 1 OR polyRel = 3 OR polyRel = 4)))) OR ((even?(k) AND k > 0) AND ((a(k) > 0 AND (polyRel = 1 OR polyRel = 4 OR polyRel = 3)) OR (a(k) < 0 AND (polyRel = 2 OR polyRel = 5 OR polyRel = 3))))) IMPLIES (EXISTS (m: int): FORALL (x:real): x <= m IMPLIES rel5(polyRel)(polynomial(a, k)(x),0))

preprocessingLemma5: LEMMA pList(d)/=0 IMPLIES FORALL (i:subrange(0,5)): (pList(0) = 0 AND i = 0) IMPLIES EXISTS (x:real): rel5(i)(polynomial(pList,d)(x),0)

preprocessingTheorem: LEMMA pList(d)/=0 IMPLIES FORALL (i:subrange(0,5)):
    preprocessingStep(pList, d, i) IMPLIES EXISTS (x:real): rel5(i)(polynomial(pList,d)(x),0)

% ********** For conjunctions of polynomials **********
preprocessingStepConj(numPolys,listOfpLists,(dList|FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0),RelF6): bool =
      (IF  (FORALL (q:upto(numPolys)): listOfpLists(q)(dList(q))/=0 AND dList(q)>0) IMPLIES  (FORALL (q:upto(numPolys)): (odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (
(even?(dList(q)) AND dList(q) > 0) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))))) THEN TRUE
	ELSIF (FORALL (q:upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) THEN TRUE
	ELSIF (FORALL (q:upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0)) THEN TRUE
	ELSE FALSE ENDIF)

polyLCPosConj: LEMMA FORALL (q:nat): (FORALL (j:upto(q)): listOfpLists(j)(dList(j))> 0 AND dList(j)>0) IMPLIES EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES (FORALL (j:upto(q)): polynomial(listOfpLists(j), dList(j))(x) > 0)

% If leading coefficient is negative
polyLCNegConj:  LEMMA FORALL (q:nat): (FORALL (j:upto(q)): listOfpLists(j)(dList(j))< 0 AND dList(j)>0) IMPLIES EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES (FORALL (j:upto(q)): polynomial(listOfpLists(j), dList(j))(x) < 0)

%these next three (commented) lemmas have been slightly generalized and combined into "preprocessingConjLemmaOdd"
%preprocessingConjLemma1: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES (FORALL (j:upto(numPolys)): odd?(dList(j)) AND listOfpLists(j)(dList(j)) > 0 AND (RelF6(j) = 2 OR RelF6(j) = 3 OR RelF6(j) = 5)) IMPLIES (EXISTS (m: int): FORALL(x:real): x <= m IMPLIES FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

%preprocessingConjLemma2NoInf: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES  (FORALL (q:upto(numPolys)): odd?(dList(q)) AND listOfpLists(q)(dList(q)) < 0 AND  (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)) IMPLIES (EXISTS (m: int): FORALL (x:real): x <= m IMPLIES FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

%preprocessingConjLemmaOdd:  LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES  (FORALL (j:upto(numPolys)): odd?(dList(j)) AND ((listOfpLists(j)(dList(j)) > 0 AND (RelF6(j) = 2 OR RelF6(j) = 3 OR RelF6(j) = 5)) OR (listOfpLists(j)(dList(j)) < 0 AND (RelF6(j) = 1 OR RelF6(j) = 3 OR RelF6(j) = 4)))) IMPLIES (EXISTS (m: int): FORALL (x:real): x <= m IMPLIES FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

preprocessingConjLemmaOddGeneralize:LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES  (FORALL (j:upto(numPolys)): (odd?(dList(j)) AND ((listOfpLists(j)(dList(j)) > 0 AND (RelF6(j) = 2 OR RelF6(j) = 3 OR RelF6(j) = 5)) OR (listOfpLists(j)(dList(j)) < 0 AND (RelF6(j) = 1 OR RelF6(j) = 3 OR RelF6(j) = 4)))) OR ((even?(dList(j)) AND dList(j) > 0) AND ((listOfpLists(j)(dList(j)) > 0 AND (RelF6(j) = 1 OR RelF6(j) = 4 OR RelF6(j) = 3)) OR (listOfpLists(j)(dList(j)) < 0 AND (RelF6(j) = 2 OR RelF6(j) = 5 OR RelF6(j) = 3))))) IMPLIES (EXISTS (m: int): FORALL (x:real): x <= m IMPLIES FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

% The next two (commented) lemmas were combined into "preprocessingConjLC"
%preprocessingConjLemma3: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES  (FORALL (q:upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) IMPLIES (EXISTS (x:real): FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

%preprocessingConjLemma4: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j)) > 0 AND (RelF6(j) = 1 OR RelF6(j) = 3 OR RelF6(j) = 4)) IMPLIES (EXISTS (x:real): FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

preprocessingConjLC: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES (FORALL (j:upto(numPolys)): (listOfpLists(j)(dList(j)) > 0 AND (RelF6(j) = 1 OR RelF6(j) = 4 OR RelF6(j) = 3)) OR (listOfpLists(j)(dList(j)) < 0 AND (RelF6(j) = 2 OR RelF6(j) = 5 OR RelF6(j) = 3))) IMPLIES (EXISTS (m: nat): FORALL (x:real): x >= m IMPLIES FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

preprocessingConjLemma5: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES  (FORALL (q:upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0)) IMPLIES (EXISTS (x:real): FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0))

preprocessingConjTheorem: LEMMA
    (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES
    (preprocessingStepConj(numPolys,listOfpLists,dList,RelF6) IMPLIES
    (EXISTS (x:real): FORALL (j:upto(numPolys)): rel5(RelF6(j))(polynomial(listOfpLists(j),dList(j))(x),0)))

%%% Adding in for when you have equalities
    % NEED to test this method and then prove things about it for the preprocessing
    sum_squares_rec(numPolys,listOfpLists,(dList|FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0),pListAcc,acc,(rec|rec <= numPolys + 1)): RECURSIVE [[nat -> real], nat] =
    IF rec > numPolys THEN (pListAcc, acc)
    ELSE sum_squares_rec(numPolys, listOfpLists, dList, LAMBDA(i:nat): (pListAcc(i) + polynomial_prod(listOfpLists(rec), dList(rec), listOfpLists(rec), dList(rec))(i)), max(acc,2*dList(rec)), rec + 1)
    ENDIF MEASURE (numPolys + 1) - rec

  sum_squares(numPolys,listOfpLists,(dList|FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0)): [[nat -> real], nat] =
    LET polyProd = polynomial_prod(listOfpLists(0), dList(0), listOfpLists(0), dList(0)) IN
    sum_squares_rec(numPolys, listOfpLists, dList, LAMBDA(i:nat): polyProd(i), 2*dList(0), 1)

%   sum_squares_sum_prop2: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES (EXISTS (q:nat): q <= numPolys AND sum_squares(numPolys,listOfpLists, dList)`2 = 2*dList(q))

%  sum_squares_sum_prop1: LEMMA FORALL (q:nat): (FORALL (j:upto(q)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES sum_squares(q, listOfpLists, dList)`1 = sum_squares(0, listOfpLists, dList)`1 + sum_squares(q-1, delete(0, listOfpLists), delete(0, dList))`1

%  sum_squares_poly_prop: LEMMA (FORALL (j:upto(numPolys)): listOfpLists(j)(dList(j))/=0 AND dList(j)>0) IMPLIES sum_squares(numPolys,listOfpLists, dList)`2 > 0 AND (sum_squares(numPolys,listOfpLists, dList)`1)(sum_squares(numPolys,listOfpLists, dList)`2) /= 0

  END preprocessing_univariate

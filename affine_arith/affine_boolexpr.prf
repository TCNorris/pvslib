(affine_boolexpr
 (beval_vs_BCONST_TCC1 0
  (beval_vs_BCONST_TCC1-1 nil 3640260933 ("" (subtype-tcc) nil nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)) nil
   (beval_vs_BCONST subtype
    "affine_boolexpr.ctxt WITH [`result := Maybe[booleans.boolean].Some(IntervalExpr_adt.opb(affine_boolexpr.bexpr))]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt))")))
 (beval_vs_BNOT_TCC1 0
  (beval_vs_BNOT_TCC1-1 nil 3640260933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (beval_vs_post const-decl "bool" affine_boolexpr nil))
   nil
   (beval_vs_BNOT subtype
    "affine_boolexpr.ctxt WITH [`result := IF Maybe[booleans.bool].some?(affine_boolexpr.ctxt`result) THEN Maybe[booleans.bool].Some((booleans.NOT)(Maybe[booleans.bool].val(affine_boolexpr.ctxt`result))) ELSE Maybe[booleans.bool].None ENDIF]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BAND_TCC1 0
  (beval_vs_BAND_TCC1-1 nil 3640336403
   ("" (skeep*)
    (("" (expand "beval_vs_post")
      (("" (assert)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (assert)
                (("1" (typepred "ctxt2")
                  (("1" (expand "beval_vs_post")
                    (("1" (typepred "ctxt1")
                      (("1" (expand "beval_vs_post")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (skeep)
                              (("1" (inst -1 "n")
                                (("1" (inst -3 "n") (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (typepred "ctxt1")
                  (("2" (expand "beval_vs_post")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (typepred "ctxt2")
                          (("2" (expand "beval_vs_post")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (Maybe type-decl nil Maybe structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (beval_vs_BAND subtype
    "affine_boolexpr.ctxt2 WITH [`result := IF booleans.AND(Maybe[booleans.bool].some?(affine_boolexpr.ctxt1`result), Maybe[booleans.bool].some?(affine_boolexpr.ctxt2`result)) THEN Maybe[booleans.bool].Some(booleans.AND(Maybe[booleans.bool].val(affine_boolexpr.ctxt1`result), Maybe[booleans.bool].val(affine_boolexpr.ctxt2`result))) ELSE Maybe[booleans.bool].None ENDIF]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BOR_TCC1 0
  (beval_vs_BOR_TCC1-1 nil 3640336403
   ("" (skeep* :preds? t)
    (("" (expand "beval_vs_post")
      (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil))
    nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (beval_vs_BOR subtype
    "affine_boolexpr.ctxt2 WITH [`result := IF booleans.AND(Maybe[booleans.bool].some?(affine_boolexpr.ctxt1`result), Maybe[booleans.bool].some?(affine_boolexpr.ctxt2`result)) THEN Maybe[booleans.bool].Some(booleans.OR(Maybe[booleans.bool].val(affine_boolexpr.ctxt1`result), Maybe[booleans.bool].val(affine_boolexpr.ctxt2`result))) ELSE Maybe[booleans.bool].None ENDIF]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BIMPLIES_TCC1 0
  (beval_vs_BIMPLIES_TCC1-1 nil 3640258683
   ("" (skeep* :preds? t)
    (("" (expand "beval_vs_post")
      (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil))
    nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (beval_vs_BIMPLIES subtype
    "affine_boolexpr.ctxt2 WITH [`result := IF booleans.AND(Maybe[booleans.bool].some?(affine_boolexpr.ctxt1`result), Maybe[booleans.bool].some?(affine_boolexpr.ctxt2`result)) THEN Maybe[booleans.bool].Some(booleans.IMPLIES(Maybe[booleans.bool].val(affine_boolexpr.ctxt1`result), Maybe[booleans.bool].val(affine_boolexpr.ctxt2`result))) ELSE Maybe[booleans.bool].None ENDIF]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BINCLUDES_TCC1 0
  (beval_vs_BINCLUDES_TCC1-1 nil 3640258683 ("" (subtype-tcc) nil nil)
   ((|##| const-decl "bool" interval interval_arith)
    (beval_vs_post const-decl "bool" affine_boolexpr nil))
   nil
   (beval_vs_BINCLUDES subtype
    "affine_boolexpr.ctxt WITH [`result := Maybe[booleans.bool].Some(interval.##(interval_expr.eval(IntervalExpr_adt.op(affine_boolexpr.bexpr), affine_boolexpr.ctxt`vs, affine_boolexpr.ctxt`n), IntervalExpr_adt.opi(affine_boolexpr.bexpr)))]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt))")))
 (beval_vs_BREL_TCC1 0
  (beval_vs_BREL_TCC1-1 nil 3640445453 ("" (subtype-tcc) nil nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)) nil
   (beval_vs_BREL subtype
    "affine_boolexpr.ctxt WITH [`result := Maybe[booleans.bool].Some(IntervalExpr_adt.rel(affine_boolexpr.bexpr)(interval_expr.eval(IntervalExpr_adt.op1(affine_boolexpr.bexpr), affine_boolexpr.ctxt`vs, affine_boolexpr.ctxt`n), interval_expr.eval(IntervalExpr_adt.op2(affine_boolexpr.bexpr), affine_boolexpr.ctxt`vs, affine_boolexpr.ctxt`n)))]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt))")))
 (beval_vs_BLETIN_RealExpr_ini_TCC1 0
  (beval_vs_BLETIN_RealExpr_ini_TCC1-1 nil 3638182539
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith))
   nil
   (beval_vs_BLETIN_RealExpr_ini subtype "affine_boolexpr.rexpr" "RealExpr")))
 (beval_vs_BLETIN_RealExpr_TCC1 0
  (beval_vs_BLETIN_RealExpr_TCC1-1 nil 3789916246 ("" (subtype-tcc) nil nil)
   nil nil
   (beval_vs_BLETIN_RealExpr subtype
    "IntervalExpr_adt.blet(affine_boolexpr.bexpr)"
    "(interval_expr.realexpr?)")))
 (beval_vs_BLETIN_RealExpr_TCC2 0
  (beval_vs_BLETIN_RealExpr_TCC1-1 nil 3640447145
   ("" (skeep* :preds? t)
    (("" (expand "beval_vs_post")
      (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil))
    nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (sq const-decl "nonneg_real" sq reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (eval def-decl "real" interval_expr interval_arith)
    (beval_vs_BLETIN_RealExpr_ini const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (beval_vs_BLETIN_RealExpr subtype "affine_boolexpr.ctxt"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BLETIN_BoolExpr_TCC1 0
  (beval_vs_BLETIN_BoolExpr_TCC1-1 nil 3789916246 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith))
   nil
   (beval_vs_BLETIN_BoolExpr subtype
    "IntervalExpr_adt.blet(affine_boolexpr.bexpr)" "BoolExpr")))
 (beval_vs_BLETIN_BoolExpr_TCC2 0
  (beval_vs_BLETIN_BoolExpr_TCC1-1 nil 3640447145 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil))
   nil
   (beval_vs_BLETIN_BoolExpr subtype
    "affine_boolexpr.ctxt0 WITH [`result := affine_boolexpr.ctxt2`result]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BITE_TCC1 0
  (beval_vs_BITE_TCC1-1 nil 3640445453
   ("" (skeep* :preds? t)
    (("" (expand "beval_vs_BITE_merge1")
      (("" (expand "beval_vs_BITE_merge2")
        (("" (expand "beval_vs_post")
          (("" (flatten)
            (("" (assert)
              (("" (skeep)
                (("" (inst -9 "n")
                  (("" (inst -6 "n")
                    (("" (inst -3 "n") (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((beval_vs_BITE_merge1 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (below type-eq-decl nil naturalnumbers nil)
    (beval_vs_BITE_merge2 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (beval_vs_BITE subtype
    "affine_boolexpr.ctxt3 WITH [result := affine_boolexpr.ctxt2`result]"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BITE_TCC2 0
  (beval_vs_BITE_TCC2-1 nil 3640445453
   ("" (skeep* :preds? t)
    (("" (expand "beval_vs_BITE_merge1")
      (("" (expand "beval_vs_BITE_merge2")
        (("" (expand "beval_vs_post")
          (("" (flatten)
            (("" (assert)
              (("" (skeep)
                (("" (inst -3 "n")
                  (("" (inst -6 "n")
                    (("" (inst -9 "n") (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((beval_vs_BITE_merge1 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (beval_vs_BITE_merge2 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (beval_vs_BITE subtype "affine_boolexpr.ctxt3"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (beval_vs_BITE_TCC3 0
  (beval_vs_BITE_TCC3-1 nil 3640445453 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (beval_vs_BITE_merge1 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (beval_vs_BITE_merge2 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil))
   nil
   (beval_vs_BITE subtype "affine_boolexpr.ctxt1"
    "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))")))
 (first_noise_idx_available_box_TCC1 0
  (first_noise_idx_available_box_TCC1-1 nil 3638705326
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (first_noise_idx_available_box subtype
    "(number_fields.+)((number_fields.+)(interval_bexpr.max_local_vars_count(affine_boolexpr.bexpr), affine_box.last_idx_in_box(affine_boolexpr.box)), 1)"
    "nat")))
 (mk_CDBB_TCC1 0
  (mk_CDBB_TCC1-1 nil 3638705326 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (mk_CDBB subtype
    "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.box), 1)"
    "integers.above(affine_box.last_idx_in_box(affine_boolexpr.box))")))
 (mk_CDBB_TCC2 0
  (mk_CDBB_TCC2-1 nil 3645894564 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (mk_CDBB subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some((# `result := affine_boolexpr.result, `box := affine_boolexpr.box, `nextid := affine_boolexpr.nextid, `cache := affine_boolexpr.cache, nxtlcl := (number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.box), 1) #))"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BCONST_TCC1 0
  (BEval_Box_BCONST_TCC1-1 nil 3638705326
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (inst 1 "null")
              (("" (assert)
                (("" (expand "append") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BCONST subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt_) WITH [`result := Maybe[booleans.boolean].Some(IntervalExpr_adt.opb(affine_boolexpr.bexpr))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BCONST_TCC2 0
  (BEval_Box_BCONST_TCC2-1 nil 3638705326 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BCONST subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BNOT_TCC1 0
  (BEval_Box_BNOT_TCC1-1 nil 3638705326 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BNOT subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[booleans.bool].Some((booleans.NOT)(Maybe[booleans.bool].val(affine_boolexpr.ctxt_`result)))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BNOT_TCC2 0
  (BEval_Box_BNOT_TCC2-1 nil 3640260933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BNOT subtype "affine_boolexpr.ctxt_"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BNOT_TCC3 0
  (BEval_Box_BNOT_TCC3-1 nil 3640260933 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BNOT subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (mk_result_TCC1 0
  (mk_result_TCC1-1 nil 3640177658 ("" (subtype-tcc) nil nil) nil nil
   (mk_result subtype "affine_boolexpr.c1"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BAND_TCC1 0
  (BEval_Box_BAND_TCC1-1 nil 3638705326 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BAND_TCC2 0
  (BEval_Box_BAND_TCC2-1 nil 3638705326 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (BEval_Box_BAND subtype "affine_boolexpr.ctxt1_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BAND_TCC3 0
  (BEval_Box_BAND_TCC3-1 nil 3640075840 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result"
    "(Maybe[booleans.bool].some?)")))
 (BEval_Box_BAND_TCC4 0
  (BEval_Box_BAND_TCC4-1 nil 3640336403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (BEval_Box_BAND subtype "affine_boolexpr.ctxt2_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BAND_TCC5 0
  (BEval_Box_BAND_TCC5-3 "" 3789916601 ("" (skeep*) nil nil) nil shostak
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC5-2 nil 3646478706
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (typepred "ctxt2_")
          (("" (typepred "ctxt1_")
            (("" (assert)
              (("" (expand "BEval_Box_post")
                (("" (case "some?(ctxt0_)")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skolem -3 "l0")
                          (("1" (replaces -3)
                            (("1" (skolem -5 "l1")
                              (("1" (inst 3 "append(l1,l0)")
                                (("1" (use "append_assoc[CacheData]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC5-1 nil 3640336403 ("" (subtype-tcc) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BAND_TCC6 0
  (BEval_Box_BAND_TCC6-3 "" 3758872810
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (expand "BEval_Box_post")
          (("" (flatten)
            (("" (typepred "ctxt1_")
              (("" (expand "BEval_Box_post")
                (("" (assert)
                  (("" (flatten)
                    (("" (case "some?(ctxt0_)")
                      (("1" (assert)
                        (("1" (skolem -4 "l0")
                          (("1" (skolem -7 "l1")
                            (("1" (replaces -3)
                              (("1" (inst 3 "append(l1,l0)")
                                (("1" (use "append_assoc[CacheData]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC6-2 nil 3646478750
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (expand "BEval_Box_post")
          (("" (flatten)
            (("" (typepred "ctxt1_")
              (("" (expand "BEval_Box_post")
                (("" (assert)
                  (("" (flatten)
                    (("" (case "some?(ctxt0_)")
                      (("1" (assert)
                        (("1" (skolem -4 "l0")
                          (("1" (skolem -7 "l1")
                            (("1" (replaces -3)
                              (("1" (inst 4 "append(l1,l0)")
                                (("1" (use "append_assoc[CacheData]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC6-1 nil 3640336403
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 1)
          (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (expand "BEval_Box_post")
                (("2" (flatten)
                  (("2" (typepred "ctxt1_")
                    (("2" (expand "BEval_Box_post")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skolem -3 "l0")
                              (("2" (replace -3 :hide? t)
                                (("2" (skolem -7 "l1")
                                  (("2" (inst 1 "append(l1,l0)")
                                    (("2" (use "append_assoc[CacheData]")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BAND_TCC7 0
  (BEval_Box_BAND_TCC7-1 "" 3758872883
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt1_")
          (("" (assert)
            (("" (expand "BEval_Box_post")
              (("" (flatten)
                (("" (assert)
                  (("" (skolem -3 "l0")
                    (("" (skolem -6 "l1")
                      (("" (replaces -3)
                        (("" (inst 4 "append(l1,l0)")
                          (("" (use "append_assoc[CacheData]")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC8-2 nil 3646478823
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (typepred "ctxt2_")
          (("" (typepred "ctxt1_")
            (("" (assert)
              (("" (expand "BEval_Box_post")
                (("" (flatten)
                  (("" (assert)
                    (("" (skolem -3 "l0")
                      (("" (skolem -6 "l1")
                        (("" (replaces -3)
                          (("" (inst 5 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC8-1 nil 3640336403
   ("" (skeep*)
    (("" (split 3)
      (("1" (flatten)
        (("1" (expand "mk_result")
          (("1" (lift-if -1)
            (("1" (assert)
              (("1" (split -1)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (hide -2)
                          (("1" (hide 1)
                            (("1" (assert)
                              (("1" (typepred "ctxt2_")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (typepred "ctxt1_") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "mk_result")
        (("2" (split 1)
          (("1" (flatten) nil nil)
           ("2" (flatten)
            (("2" (lift-if 2)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (typepred "ctxt2_")
                    (("1" (expand "BEval_Box_post")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (typepred "ctxt1_")
                              (("1" (expand "BEval_Box_post")
                                (("1" (assert)
                                  (("1" (flatten)
                                    (("1" (assert)
                                      (("1"
                                        (skolem -3 "l0")
                                        (("1"
                                          (skolem -7 "l1")
                                          (("1"
                                            (inst 1 "append(l1,l0)")
                                            (("1"
                                              (use "append_assoc[CacheData]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "ctxt1_")
                    (("2" (expand "BEval_Box_post")
                      (("2" (assert)
                        (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BAND_TCC8 0
  (BEval_Box_BAND_TCC7-2 nil 3646478800
   ("" (skeep*)
    (("" (typepred "ctxt2_")
      (("" (expand "BEval_Box_post")
        (("" (assert)
          (("" (flatten)
            (("" (typepred "ctxt1_")
              (("" (expand "BEval_Box_post")
                (("" (assert)
                  (("" (case "some?(ctxt0_)")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (skolem -3 "l0")
                            (("1" (skolem -6 "l1")
                              (("1" (inst 4 "append(l1,l0)")
                                (("1" (use "append_assoc[CacheData]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BAND subtype "affine_boolexpr.ctxt2_"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC7-1 nil 3640336403
   ("" (skeep*)
    (("" (expand "BEval_Box_post")
      (("" (flatten)
        (("" (assert)
          (("" (typepred "ctxt2_")
            (("" (expand "BEval_Box_post")
              (("" (flatten)
                (("" (typepred "ctxt1_")
                  (("" (expand "BEval_Box_post")
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (skolem -3 "l0")
                            (("" (skolem -8 "l1")
                              (("" (inst 2 "append(l1,l0)")
                                (("" (use "append_assoc[CacheData]")
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BAND subtype "affine_boolexpr.ctxt2_"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BAND_TCC9 0
  (BEval_Box_BAND_TCC9-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BAND_TCC10 0
  (BEval_Box_BAND_TCC10-2 "" 3758873074
   ("" (skeep*)
    (("" (assert)
      (("" (assert)
        (("" (typepred "ctxt2_")
          (("" (typepred "ctxt1_")
            (("" (assert)
              (("" (expand "BEval_Box_post")
                (("" (flatten)
                  (("" (assert)
                    (("" (skolem -3 "l0")
                      (("" (skolem -6 "l1")
                        (("" (replaces -3)
                          (("" (inst 5 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE)])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BAND_TCC10-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BAND subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE)])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BOR_TCC1 0
  (BEval_Box_BOR_TCC1-1 nil 3639939268 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BOR_TCC2 0
  (BEval_Box_BOR_TCC2-1 nil 3639939268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (BEval_Box_BOR subtype "affine_boolexpr.ctxt1_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BOR_TCC3 0
  (BEval_Box_BOR_TCC3-1 nil 3640075228 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result"
    "(Maybe[booleans.bool].some?)")))
 (BEval_Box_BOR_TCC4 0
  (BEval_Box_BOR_TCC4-2 "" 3789916608
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BOR subtype "affine_boolexpr.ctxt2_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)"))
  (BEval_Box_BOR_TCC4-1 nil 3640336403
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 1)
          (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (expand "BEval_Box_post")
                (("2" (flatten)
                  (("2" (typepred "ctxt1_")
                    (("2" (expand "BEval_Box_post")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skolem -3 "l0")
                              (("2" (replace -3 :hide? t)
                                (("2" (skolem -7 "l1")
                                  (("2" (inst 1 "append(l1,l0)")
                                    (("2" (use "append_assoc[CacheData]")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BOR subtype "affine_boolexpr.ctxt2_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BOR_TCC5 0
  (BEval_Box_BOR_TCC5-3 "" 3789916608 ("" (skeep*) nil nil) nil shostak
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC5-2 nil 3646478851
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 3)
          (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (expand "BEval_Box_post")
                (("2" (typepred "ctxt1_")
                  (("2" (expand "BEval_Box_post")
                    (("2" (assert)
                      (("2" (case "some?(ctxt0_)")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (skolem -3 "l0")
                                (("1" (replace -3 :hide? t)
                                  (("1" (skolem -5 "l1")
                                    (("1" (inst 1 "append(l1,l0)")
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC5-1 nil 3640336403 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BOR_TCC6 0
  (BEval_Box_BOR_TCC6-3 "" 3758873273
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "ctxt1_")
              (("" (expand "BEval_Box_post")
                (("" (flatten)
                  (("" (assert)
                    (("" (skolem -3 "l0")
                      (("" (replaces -3)
                        (("" (skolem -5 "l1")
                          (("" (inst + "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC6-2 nil 3646478874
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "ctxt1_")
              (("" (expand "BEval_Box_post")
                (("" (flatten)
                  (("" (assert)
                    (("" (skolem -3 "l0")
                      (("" (replaces -3)
                        (("" (skolem -5 "l1")
                          (("" (inst 4 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC6-1 nil 3640336403
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 2)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)) nil)
               ("2" (flatten)
                (("2" (typepred "ctxt1_") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (expand "BEval_Box_post")
                (("2" (typepred "ctxt1_")
                  (("2" (expand "BEval_Box_post")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (case "some?(ctxt2_)")
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (skolem -4 "l0")
                                    (("1" (replace -4 :hide? t)
                                      (("1"
                                        (skolem -7 "l1")
                                        (("1"
                                          (inst 1 "append(l1,l0)")
                                          (("1"
                                            (use "append_assoc[CacheData]")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BOR_TCC7 0
  (BEval_Box_BOR_TCC7-3 "" 3789916610
   ("" (skeep*)
    (("" (assert)
      (("" (split 4)
        (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)
         ("2" (expand "BEval_Box_post")
          (("2" (typepred "ctxt2_")
            (("2" (typepred "ctxt1_")
              (("2" (assert)
                (("2" (expand "BEval_Box_post")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (skolem -3 "l0")
                        (("2" (replaces -3)
                          (("2" (skolem -5 "l1")
                            (("2" (inst 1 "append(l1,l0)")
                              (("2" (use "append_assoc[CacheData]")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC7-2 nil 3646478896
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 4)
          (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (typepred "ctxt1_")
                (("2" (assert)
                  (("2" (expand "BEval_Box_post")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (skolem -3 "l0")
                          (("2" (replaces -3)
                            (("2" (skolem -5 "l1")
                              (("2" (inst 1 "append(l1,l0)")
                                (("2" (use "append_assoc[CacheData]")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC7-1 nil 3646478206 ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BOR_TCC8 0
  (BEval_Box_BOR_TCC8-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BOR_TCC9 0
  (BEval_Box_BOR_TCC9-2 "" 3758873329
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt1_")
          (("" (assert)
            (("" (expand "BEval_Box_post")
              (("" (flatten)
                (("" (assert)
                  (("" (skolem -3 "l0")
                    (("" (skolem -6 "l1")
                      (("" (replaces -3)
                        (("" (inst + "append(l1,l0)")
                          (("" (use "append_assoc[CacheData]")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE)])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BOR_TCC9-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BOR subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE)])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BIMPLIES_TCC1 0
  (BEval_Box_BIMPLIES_TCC1-1 nil 3639939268 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BIMPLIES_TCC2 0
  (BEval_Box_BIMPLIES_TCC2-1 nil 3639939268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (BEval_Box_BIMPLIES subtype "affine_boolexpr.ctxt1_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BIMPLIES_TCC3 0
  (BEval_Box_BIMPLIES_TCC3-1 nil 3640014834 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result"
    "(Maybe[booleans.bool].some?)")))
 (BEval_Box_BIMPLIES_TCC4 0
  (BEval_Box_BIMPLIES_TCC4-2 "" 3789916614
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BIMPLIES subtype "affine_boolexpr.ctxt2_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)"))
  (BEval_Box_BIMPLIES_TCC4-1 nil 3640177658
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 1)
          (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (expand "BEval_Box_post")
                (("2" (flatten)
                  (("2" (typepred "ctxt1_")
                    (("2" (expand "BEval_Box_post")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skolem -3 "l0")
                              (("2" (replace -3 :hide? t)
                                (("2" (skolem -7 "l1")
                                  (("2" (inst 1 "append(l1,l0)")
                                    (("2" (use "append_assoc[CacheData]")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BIMPLIES subtype "affine_boolexpr.ctxt2_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BIMPLIES_TCC5 0
  (BEval_Box_BIMPLIES_TCC5-3 "" 3789916615 ("" (skeep*) nil nil) nil shostak
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC5-2 nil 3646478925
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (typepred "ctxt2_")
          (("" (typepred "ctxt1_")
            (("" (assert)
              (("" (expand "BEval_Box_post")
                (("" (case "some?(ctxt0_)")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skolem -3 "l0")
                          (("1" (replaces -3)
                            (("1" (skolem -5 "l1")
                              (("1" (inst 3 "append(l1,l0)")
                                (("1" (use "append_assoc[CacheData]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC5-1 nil 3640177658 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BIMPLIES_TCC6 0
  (BEval_Box_BIMPLIES_TCC6-3 "" 3758873380
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt1_")
          (("" (assert)
            (("" (expand "BEval_Box_post")
              (("" (case "some?(ctxt0_)")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skolem -3 "l0")
                        (("1" (replace -3 :hide? t)
                          (("1" (skolem -5 "l1")
                            (("1" (inst + "append(l1,l0)")
                              (("1" (use "append_assoc[CacheData]")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC6-2 nil 3646478955
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt1_")
          (("" (assert)
            (("" (expand "BEval_Box_post")
              (("" (case "some?(ctxt0_)")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skolem -3 "l0")
                        (("1" (replace -3 :hide? t)
                          (("1" (skolem -5 "l1")
                            (("1" (inst 4 "append(l1,l0)")
                              (("1" (use "append_assoc[CacheData]")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC6-1 nil 3640177658
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (split 3)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (typepred "ctxt2_") (("1" (assert) nil nil)) nil)) nil)
               ("2" (flatten)
                (("2" (typepred "ctxt1_") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (expand "BEval_Box_post")
            (("2" (typepred "ctxt2_")
              (("2" (expand "BEval_Box_post")
                (("2" (typepred "ctxt1_")
                  (("2" (expand "BEval_Box_post")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (case "some?(ctxt2_)")
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (skolem -4 "l0")
                                    (("1" (replace -4 :hide? t)
                                      (("1"
                                        (skolem -7 "l1")
                                        (("1"
                                          (inst 1 "append(l1,l0)")
                                          (("1"
                                            (use "append_assoc[CacheData]")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BIMPLIES_TCC7 0
  (BEval_Box_BIMPLIES_TCC7-3 "" 3758873427
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt1_")
          (("" (assert)
            (("" (expand "BEval_Box_post")
              (("" (case "some?(ctxt0_)")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skolem -3 "l0")
                        (("1" (replace -3 :hide? t)
                          (("1" (skolem -5 "l1")
                            (("1" (inst + "append(l1,l0)")
                              (("1" (use "append_assoc[CacheData]")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC7-2 nil 3646478978
   ("" (skeep*)
    (("" (expand "mk_result")
      (("" (assert)
        (("" (typepred "ctxt2_")
          (("" (typepred "ctxt1_")
            (("" (assert)
              (("" (expand "BEval_Box_post")
                (("" (case "some?(ctxt0_)")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skolem -3 "l0")
                          (("1" (replace -3 :hide? t)
                            (("1" (skolem -5 "l1")
                              (("1" (inst 5 "append(l1,l0)")
                                (("1" (use "append_assoc[CacheData]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC7-1 nil 3646478206 ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BIMPLIES_TCC8 0
  (BEval_Box_BIMPLIES_TCC8-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BIMPLIES_TCC9 0
  (BEval_Box_BIMPLIES_TCC9-2 "" 3758873485
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt1_")
          (("" (assert)
            (("" (expand "BEval_Box_post")
              (("" (flatten)
                (("" (assert)
                  (("" (skolem -3 "l0")
                    (("" (skolem -6 "l1")
                      (("" (replaces -3)
                        (("" (inst + "append(l1,l0)")
                          (("" (use "append_assoc[CacheData]")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE)])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BIMPLIES_TCC9-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BIMPLIES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE)])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BINCLUDES_TCC1 0
  (BEval_Box_BINCLUDES_TCC1-1 nil 3638540476
   ("" (skeep*) (("" (typepred "evalop") (("" (assert) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2"
    "(list_adt[CacheData].cons?)")))
 (BEval_Box_BINCLUDES_TCC2 0
  (BEval_Box_BINCLUDES_TCC2-1 nil 3638540476
   ("" (skeep*) (("" (typepred "evalop") (("" (assert) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}")))
 (BEval_Box_BINCLUDES_TCC3 0
  (BEval_Box_BINCLUDES_TCC3-1 nil 3638540476 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Proper? const-decl "bool" interval interval_arith)
    (<< const-decl "bool" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1)(c_)}")))
 (BEval_Box_BINCLUDES_TCC4 0
  (BEval_Box_BINCLUDES_TCC4-1 nil 3638705326
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop")
              (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BINCLUDES_TCC5 0
  (BEval_Box_BINCLUDES_TCC5-2 nil 3640258822
   ("" (skeep*) (("" (typepred "evalop") (("" (assert) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}"))
  (BEval_Box_BINCLUDES_TCC5-1 nil 3640258683 ("" (subtype-tcc) nil nil) nil
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}")))
 (BEval_Box_BINCLUDES_TCC6 0
  (BEval_Box_BINCLUDES_TCC6-1 nil 3640258683 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Proper? const-decl "bool" interval interval_arith)
    (<< const-decl "bool" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1)(c_)}")))
 (BEval_Box_BINCLUDES_TCC7 0
  (BEval_Box_BINCLUDES_TCC7-2 nil 3640258973
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop")
              (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))
  (BEval_Box_BINCLUDES_TCC7-1 nil 3640258683 ("" (subtype-tcc) nil nil) nil
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BINCLUDES_TCC8 0
  (BEval_Box_BINCLUDES_TCC8-2 nil 3646479006
   ("" (skeep*) (("" (typepred "evalop") (("" (assert) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}"))
  (BEval_Box_BINCLUDES_TCC8-1 nil 3640258683 ("" (subtype-tcc) nil nil)
   ((Proper? const-decl "bool" interval interval_arith)
    (<< const-decl "bool" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}")))
 (BEval_Box_BINCLUDES_TCC9 0
  (BEval_Box_BINCLUDES_TCC9-1 nil 3640258683 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Proper? const-decl "bool" interval interval_arith)
    (<< const-decl "bool" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1)(c_)}")))
 (BEval_Box_BINCLUDES_TCC10 0
  (BEval_Box_BINCLUDES_TCC10-2 nil 3646479044
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop")
              (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[booleans.bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))
  (BEval_Box_BINCLUDES_TCC10-1 nil 3640258683 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[booleans.bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BINCLUDES_TCC11 0
  (BEval_Box_BINCLUDES_TCC11-1 nil 3640258683 ("" (subtype-tcc) nil nil)
   ((Proper? const-decl "bool" interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BINCLUDES_TCC12 0
  (BEval_Box_BINCLUDES_TCC12-1 nil 3646478206 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BINCLUDES_TCC13 0
  (BEval_Box_BINCLUDES_TCC13-1 nil 3646478206 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BINCLUDES subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC1 0
  (BEval_Box_BREL_TCC1-1 nil 3638540476
   ("" (skeep* :preds? t) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`1"
    "{nextfreeidx: naturalnumbers.nat | reals.>(nextfreeidx, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC2 0
  (BEval_Box_BREL_TCC2-1 nil 3638540476 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`2"
    "{cache: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`1)(cache)}")))
 (BEval_Box_BREL_TCC3 0
  (BEval_Box_BREL_TCC3-2 nil 3638540949
   ("" (skeep* :preds? t) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BREL_TCC3-1 nil 3638540476 ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`2"
    "(list_adt[CacheData].cons?)")))
 (BEval_Box_BREL_TCC4 0
  (BEval_Box_BREL_TCC4-1 nil 3638540476 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_idx const-decl "nat" affine nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "(list_adt[CacheData].cons?)")))
 (BEval_Box_BREL_TCC5 0
  (BEval_Box_BREL_TCC5-1 nil 3638540476
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (assert)
        (("" (flatten) (("" (typepred "evalop1") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC6 0
  (BEval_Box_BREL_TCC6-1 nil 3638540476 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ub_aff const-decl "real" affine nil)
    (lb_aff const-decl "real" affine nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")))
 (BEval_Box_BREL_TCC7 0
  (BEval_Box_BREL_TCC7-1 nil 3638705326
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "evalop2")
        (("" (assert)
          (("" (flatten)
            (("" (typepred "evalop1")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (typepred "first_added_idx")
                      (("" (expand "first_noise_idx_available_box")
                        (("" (assert)
                          (("" (typepred "ctxt_")
                            (("" (assert)
                              (("" (expand "BEval_Box_post")
                                (("" (skolem -4 "l0")
                                  (("" (replace -4 :hide? t)
                                    (("" (skolem -7 "l1")
                                      ((""
                                        (inst 3 "append(l1,l0)")
                                        ((""
                                          (use "append_assoc[CacheData]")
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (append_assoc formula-decl nil list_props nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC8 0
  (BEval_Box_BREL_TCC8-1 nil 3640169165
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (assert)
        (("" (flatten) (("" (typepred "evalop1") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC9 0
  (BEval_Box_BREL_TCC9-1 nil 3640169165 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (lb_aff const-decl "real" affine nil)
    (ub_aff const-decl "real" affine nil)
    (neg_rel const-decl "bool" real_orders reals)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")))
 (BEval_Box_BREL_TCC10 0
  (BEval_Box_BREL_TCC10-1 nil 3640253510
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop2")
              (("" (typepred "evalop1")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (skolem -2 "l0")
                        (("" (skolem -6 "l1")
                          (("" (inst 4 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC11 0
  (BEval_Box_BREL_TCC11-2 nil 3646479195
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (assert)
        (("" (flatten) (("" (typepred "evalop1") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))
  (BEval_Box_BREL_TCC11-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (lb_aff const-decl "real" affine nil)
    (ub_aff const-decl "real" affine nil)
    (neg_rel const-decl "bool" real_orders reals)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC12 0
  (BEval_Box_BREL_TCC12-2 "" 3789916671
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (typepred "evalop1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))
  (BEval_Box_BREL_TCC12-1 nil 3640254849
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (typepred "evalop1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (neg_rel_order application-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")))
 (BEval_Box_BREL_TCC13 0
  (BEval_Box_BREL_TCC13-2 nil 3646479219
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "evalop2")
        (("" (typepred "evalop1")
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (typepred "ctxt_")
                  (("" (assert)
                    (("" (expand "BEval_Box_post")
                      (("" (skolem -3 "l0")
                        (("" (replaces -3)
                          (("" (skolem -6 "l1")
                            (("" (inst 5 "append(l1,l0)")
                              (("" (use "append_assoc[CacheData]")
                                (("" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (append_assoc formula-decl nil list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))
  (BEval_Box_BREL_TCC13-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (lb_aff const-decl "real" affine nil)
    (ub_aff const-decl "real" affine nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC14 0
  (BEval_Box_BREL_TCC14-2 "" 3789916674
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (typepred "evalop1")
            (("" (typepred "evalop2")
              (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))
  (BEval_Box_BREL_TCC14-1 nil 3640254849
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop1")
              (("" (typepred "evalop2")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (skolem -2 "l1")
                        (("" (skolem -6 "l0")
                          (("" (inst 4 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC15 0
  (BEval_Box_BREL_TCC15-2 "" 3789916676
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (typepred "evalop1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))
  (BEval_Box_BREL_TCC15-1 nil 3640254849
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (typepred "evalop1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")))
 (BEval_Box_BREL_TCC16 0
  (BEval_Box_BREL_TCC16-2 nil 3646479256
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop1")
              (("" (typepred "evalop2")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (skolem -2 "l1")
                        (("" (skolem -6 "l0")
                          (("" (inst 4 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))
  (BEval_Box_BREL_TCC16-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ub_aff const-decl "real" affine nil)
    (lb_aff const-decl "real" affine nil)
    (neg_rel const-decl "bool" real_orders reals)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC17 0
  (BEval_Box_BREL_TCC17-3 "" 3789916679
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (typepred "evalop1")
            (("" (typepred "evalop2")
              (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))
  (BEval_Box_BREL_TCC17-2 nil 3640255769
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop1")
              (("" (typepred "evalop2")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (skolem -2 "l1")
                        (("" (skolem -6 "l0")
                          (("" (inst 5 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))
  (BEval_Box_BREL_TCC17-1 nil 3640254849 ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC18 0
  (BEval_Box_BREL_TCC18-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ub_aff const-decl "real" affine nil)
    (lb_aff const-decl "real" affine nil)
    (neg_rel const-decl "bool" real_orders reals)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")))
 (BEval_Box_BREL_TCC19 0
  (BEval_Box_BREL_TCC19-2 nil 3646479285
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop1")
              (("" (typepred "evalop2")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (skolem -2 "l1")
                        (("" (skolem -6 "l0")
                          (("" (inst 5 "append(l1,l0)")
                            (("" (use "append_assoc[CacheData]")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))
  (BEval_Box_BREL_TCC19-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC20 0
  (BEval_Box_BREL_TCC20-2 nil 3646479324
   ("" (skeep*)
    (("" (typepred "evalop2")
      (("" (typepred "evalop1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))
  (BEval_Box_BREL_TCC20-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")))
 (BEval_Box_BREL_TCC21 0
  (BEval_Box_BREL_TCC21-1 nil 3640254849 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ub_aff const-decl "real" affine nil)
    (lb_aff const-decl "real" affine nil)
    (neg_rel const-decl "bool" real_orders reals)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")))
 (BEval_Box_BREL_TCC22 0
  (BEval_Box_BREL_TCC22-2 nil 3646479350
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt_")
        (("" (assert)
          (("" (expand "BEval_Box_post")
            (("" (typepred "evalop2")
              (("" (typepred "evalop1")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (skolem -2 "l0")
                        (("" (replaces -2)
                          (("" (skolem -5 "l1")
                            (("" (inst 6 "append(l1,l0)")
                              (("" (use "append_assoc[CacheData]")
                                (("" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (op2 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (append def-decl "list[T]" list_props nil)
    (op1 shared-adt-accessor-decl "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))
  (BEval_Box_BREL_TCC22-1 nil 3646478206 ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[booleans.bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC23 0
  (BEval_Box_BREL_TCC23-1 nil 3646478206 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC24 0
  (BEval_Box_BREL_TCC24-1 nil 3646478206 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BREL_TCC25 0
  (BEval_Box_BREL_TCC25-1 nil 3646478206 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BREL subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC1 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC1-2 "" 3743906647
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`nextid")
            (("" (expand "last_idx_in_box")
              (("" (use "length_append[Interval]")
                (("" (replaces -1)
                  (("" (expand "length" 2 2)
                    (("" (assert) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list structures)
    (length def-decl "nat" list_props nil)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1)"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))}"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC1-1 nil 3638540476
   ("" (subtype-tcc) nil nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list structures)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1)"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))}")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC2 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC2-5 "" 3789916705
   ("" (skeep*) (("" (typepred "eval_blet") (("" (assert) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)"
    "nat"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC2-4 nil 3646479536
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`nextid")
            (("" (expand "last_idx_in_box")
              (("" (use "length_append[Interval]")
                (("" (replaces -1)
                  (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)"
    "nat"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC2-3 nil 3639940093
   ("" (skeep*) (("" (typepred "eval_blet") (("" (assert) nil nil)) nil)) nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)"
    "nat"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC2-2 nil 3638541033
   ("" (subtype-tcc) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (next_idx const-decl "nat" affine nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)"
    "nat"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC2-1 nil 3638540476
   ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)"
    "nat")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC3 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-7 "" 3789916706
   ("" (skeep*) (("" (typepred "eval_blet") (("" (assert) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-6 "" 3640532143
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`nextid")
            (("" (expand "last_idx_in_box")
              (("" (use "length_append[Interval]")
                (("" (replaces -1)
                  (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   shostak
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-5 nil 3640449664
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`nextid")
            (("" (expand "last_idx_in_box")
              (("" (use "length_append[Interval]")
                (("" (replaces -1)
                  (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-4 nil 3639940123
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`cache")
            (("" (split 2)
              (("1" (use "correct_cache?_alt_def")
                (("1" (replaces -1)
                  (("1" (skeep -4)
                    (("1" (typepred "val(eval_blet)`2")
                      (("1" (replace -5 :hide? t)
                        (("1" (use "correct_cache?_alt_def")
                          (("1" (replace -1 :hide? t)
                            (("1" (lemma "every_implies[CacheData]")
                              (("1"
                                (inst -1 "CacheData_correct?(ctxt_1`box)"
                                 "CacheData_correct?(append[Interval]
                                                           (ctxt_1`box,
                                                            cons[ProperInterval]
                                                            (eval_by_intervals
                                                             (car[CacheData]
                                                              (append(l, ctxt_1`cache))`2),
                                                             null[ProperInterval])))"
                                 "append(l, ctxt_1`cache)")
                                (("1" (assert)
                                  (("1" (hide 2)
                                    (("1" (use "CacheData_correct?_inclusion")
                                      nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "idxs_bounded")
                (("2" (skeep) (("2" (inst? -6) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-3 nil 3639926306
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`nextid")
            (("" (expand "last_idx_in_box")
              (("" (use "length_append[Interval]")
                (("" (replaces -1)
                  (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (length_null formula-decl nil more_list_props structures)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (realexpr? const-decl "bool" interval_expr interval_arith))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-2 nil 3638541176
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`cache")
            (("" (split 2)
              (("1" (use "correct_cache?_alt_def")
                (("1" (replaces -1)
                  (("1" (skeep -4)
                    (("1" (typepred "val(eval_blet)`2")
                      (("1" (replace -5 :hide? t)
                        (("1" (use "correct_cache?_alt_def")
                          (("1" (replace -1 :hide? t)
                            (("1" (lemma "every_implies[CacheData]")
                              (("1"
                                (inst -1 "CacheData_correct?(ctxt_1`box)"
                                 "CacheData_correct?(append[Interval]
                                                   (ctxt_1`box,
                                                    cons[ProperInterval]
                                                    (eval_by_intervals
                                                     (car[CacheData]
                                                      (append(l, ctxt_1`cache))`2),
                                                     null[ProperInterval])))"
                                 "append(l, ctxt_1`cache)")
                                (("1" (assert)
                                  (("1" (hide 2)
                                    (("1" (use "CacheData_correct?_inclusion")
                                      nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "idxs_bounded")
                (("2" (skeep) (("2" (inst? -6) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC3-1 nil 3638540476
   ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2"
    "(list_adt[CacheData].cons?)")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC4 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC4-4 nil 3640449634
   ("" (skeep*)
    (("" (split 1)
      (("1" (expand "correct_cache?")
        (("1" (split 1)
          (("1" (expand "CacheData_correct?")
            (("1" (expand "powvar?") (("1" (propax) nil nil)) nil)) nil)
           ("2" (use "correct_cache?_alt_def")
            (("2" (replaces -1)
              (("2" (typepred "val(eval_blet)`2")
                (("2" (typepred "eval_blet")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (skeep -2)
                        (("2" (replace -2 :hide? t)
                          (("2" (use "correct_cache?_alt_def")
                            (("2" (replace -1 :hide? t)
                              (("2" (lemma "every_implies[CacheData]")
                                (("2"
                                  (inst -1 "CacheData_correct?(ctxt_1`box)"
                                   "CacheData_correct?(append[Interval]
         (ctxt_1`box,
          cons[ProperInterval]
          (eval_by_intervals
           (car[CacheData]
            (append(l, ctxt_1`cache))`2),
           null[ProperInterval])))" "append(l, ctxt_1`cache)")
                                  (("2" (assert)
                                    (("2" (hide 3)
                                      (("2"
                                        (use "CacheData_correct?_inclusion")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "idxs_bounded")
        (("2" (skeep :preds? t)
          (("2" (expand "length" -1)
            (("2" (case "i=0")
              (("1" (replace -1 :hide? t)
                (("1" (expand "nth" 1)
                  (("1" (typepred "eval_blet")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "idxs_bounded" -4)
                          (("1" (inst -4 "0")
                            (("1" (expand "nth" -4) (("1" (assert) nil nil))
                              nil)
                             ("2" (assert) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "eval_blet")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (expand "idxs_bounded" -4)
                      (("2" (inst -4 "i-1")
                        (("2" (expand "nth" 3) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powvar? const-decl "bool" affine_expr nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (every_implies formula-decl nil more_list_props structures)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (append def-decl "list[T]" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (nth def-decl "T" list_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (eval_blet skolem-const-decl
     "{result: Maybe[[nat, (correct_cache?(ctxt_1`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = rexpr)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, ctxt_1`cache))
     AND (val(result)`1 >= ctxt_1`nextid)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" affine_boolexpr nil)
    (rexpr skolem-const-decl "(realexpr?)" affine_boolexpr nil)
    (ctxt_1 skolem-const-decl "[# box: Box,
   nextid: {n_: nat | n_ > last_idx_in_box(box)},
   cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
   nxtlcl: above(last_idx_in_box(box)),
   result: Maybe[bool] #]" affine_boolexpr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC4-3 nil 3639940149
   ("" (skeep*)
    (("" (assert)
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC4-2 nil 3639926275
   ("" (skeep*)
    (("" (typepred "eval_blet")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "ctxt_1`cache")
            (("" (split 2)
              (("1" (use "correct_cache?_alt_def")
                (("1" (replaces -1)
                  (("1" (skeep -4)
                    (("1" (typepred "val(eval_blet)`2")
                      (("1" (replace -5 :hide? t)
                        (("1" (use "correct_cache?_alt_def")
                          (("1" (replace -1 :hide? t)
                            (("1" (lemma "every_implies[CacheData]")
                              (("1"
                                (inst -1 "CacheData_correct?(ctxt_1`box)"
                                 "CacheData_correct?(append[Interval]
                                                       (ctxt_1`box,
                                                        cons[ProperInterval]
                                                        (eval_by_intervals
                                                         (car[CacheData]
                                                          (append(l, ctxt_1`cache))`2),
                                                         null[ProperInterval])))"
                                 "append(l, ctxt_1`cache)")
                                (("1" (assert)
                                  (("1" (hide 2)
                                    (("1" (use "CacheData_correct?_inclusion")
                                      nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "idxs_bounded")
                (("2" (skeep) (("2" (inst? -6) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (realexpr? const-decl "bool" interval_expr interval_arith))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC4-1 nil 3638705326
   ("" (skeep*)
    (("" (assert)
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC5 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC5-2 nil 3646479955
   ("" (skeep*)
    (("" (expand "last_idx_in_box")
      (("" (use "length_append[Interval]")
        (("" (assert)
          (("" (replaces -1)
            (("" (typepred "ctxt_1`nxtlcl")
              (("" (assert)
                (("" (expand "last_idx_in_box") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (append def-decl "list[T]" list_props nil)
    (length_append formula-decl nil list_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)"
    "integers.above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC5-1 nil 3638705326
   ("" (skeep*)
    (("" (split 1)
      (("1" (expand "correct_cache?")
        (("1" (split 1)
          (("1" (expand "CacheData_correct?")
            (("1" (expand "powvar?") (("1" (propax) nil nil)) nil)) nil)
           ("2" (use "correct_cache?_alt_def")
            (("2" (replaces -1)
              (("2" (typepred "val(eval_blet)`2")
                (("2" (typepred "eval_blet")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (skeep -2)
                        (("2" (replace -2 :hide? t)
                          (("2" (use "correct_cache?_alt_def")
                            (("2" (replace -1 :hide? t)
                              (("2" (lemma "every_implies[CacheData]")
                                (("2"
                                  (inst -1 "CacheData_correct?(ctxt_1`box)"
                                   "CacheData_correct?(append[Interval]
   (ctxt_1`box,
    cons[ProperInterval]
    (eval_by_intervals
     (car[CacheData]
      (append(l, ctxt_1`cache))`2),
     null[ProperInterval])))" "append(l, ctxt_1`cache)")
                                  (("2" (assert)
                                    (("2" (hide 3)
                                      (("2"
                                        (use "CacheData_correct?_inclusion")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "idxs_bounded")
        (("2" (skeep :preds? t)
          (("2" (expand "length" -1)
            (("2" (case "i=0")
              (("1" (replace -1 :hide? t)
                (("1" (expand "nth" 1)
                  (("1" (typepred "eval_blet")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "idxs_bounded" -4)
                          (("1" (inst -4 "0")
                            (("1" (expand "nth" -4) (("1" (assert) nil nil))
                              nil)
                             ("2" (assert) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "eval_blet")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (expand "idxs_bounded" -4)
                      (("2" (inst -4 "i-1")
                        (("2" (expand "nth" 3) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powvar? const-decl "bool" affine_expr nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (every_implies formula-decl nil more_list_props structures)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "(number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)"
    "integers.above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC6 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC6-2 "" 3789916712
   ("" (skeep*)
    (("" (expand "last_idx_in_box")
      (("" (use "length_append[Interval]") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (append def-decl "list[T]" list_props nil)
    (length_append formula-decl nil list_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [box := list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)), nextid := (number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1), cache := list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)])"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC6-1 nil 3640260933
   ("" (skeep*)
    (("" (expand "last_idx_in_box")
      (("" (use "length_append[Interval]")
        (("" (assert)
          (("" (replaces -1)
            (("" (typepred "ctxt_1`nxtlcl")
              (("" (assert)
                (("" (expand "last_idx_in_box") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (Interval type-eq-decl nil interval interval_arith))
   nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [box := list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)), nextid := (number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1), cache := list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)])"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC7 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC7-2 "" 3789916713
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))
  (BEval_Box_BLETIN_RealExpr_ini_TCC7-1 nil 3645894564
   ("" (skeep*)
    (("" (hide -6)
      (("" (assert)
        (("" (expand "last_idx_in_box")
          (("" (use "length_append[Interval]") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BLETIN_RealExpr_ini_TCC8 0
  (BEval_Box_BLETIN_RealExpr_ini_TCC8-1 nil 3645894564
   ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BLETIN_RealExpr_ini subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BLETIN_RealExpr_TCC1 0
  (BEval_Box_BLETIN_RealExpr_TCC1-1 nil 3640248905
   ("" (skeep*)
    (("" (expand "BEval_Box_post")
      (("" (typepred "ctxt_")
        (("" (flatten)
          (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
            (("" (lift-if -2)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (expand "BEval_Box_post")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (name-replace "ev"
                                 " Eval_wCache(blet(bexpr))(val(ctxt0_)`box, val(ctxt0_)`nextid, val(ctxt0_)`cache)")
                                (("1" (typepred "ev")
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -2 "l0")
                                          (("1"
                                            (replace -2 -7 :hide? t)
                                            (("1"
                                              (skolem -6 "l1")
                                              (("1"
                                                (inst
                                                 2
                                                 "append(l1,cons[CacheData] ((VARIDX(1 + last_idx_in_box(val(ctxt0_)`box)), car(append(l0, val(ctxt0_)`cache))`2,
                    car(append(l0, val(ctxt0_)`cache))`3),
                   l0))")
                                                (("1"
                                                  (use
                                                   "append_assoc[CacheData]")
                                                  (("1"
                                                    (replace -1 2 :hide? t)
                                                    (("1"
                                                      (expand "append" 2 2)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "BEval_Box_post")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "BEval_Box_post") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BLETIN_RealExpr_ini const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BLETIN_RealExpr subtype "affine_boolexpr.ctxt_"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BLETIN_BoolExpr_merge1_TCC1 0
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC1-2 "" 3743909346
   ("" (skeep*)
    (("" (typepred "ctxt1_1`nextid")
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]")
          (("" (replace -1 :hide? t) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Box type-eq-decl nil box interval_arith) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "(number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1)"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :))))}"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC1-1 nil 3638540476
   ("" (subtype-tcc) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (length_singleton formula-decl nil more_list_props structures)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "(number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1)"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :))))}")))
 (BEval_Box_BLETIN_BoolExpr_merge1_TCC2 0
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC2-3 "" 3743910364
   ("" (skeep*)
    (("" (typepred "ctxt1_1`cache")
      (("" (split 1)
        (("1" (lemma "correct_cache?_alt_def")
          (("1" (inst? -1 :where -2)
            (("1" (replace -1 :hide? t)
              (("1" (lemma "correct_cache?_alt_def")
                (("1" (inst? -1 :where 1)
                  (("1" (replace -1 :hide? t)
                    (("1" (lemma "every_implies[CacheData]")
                      (("1" (inst? -1 :where 1)
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (propax) nil nil)
                               ("2" (use "CacheData_correct?_inclusion") nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "idxs_bounded")
          (("2" (skeep) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (every_implies formula-decl nil more_list_props structures)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype "affine_boolexpr.ctxt1_`cache"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, affine_boolexpr.ctxt1_`nextid))(c_)}"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC2-2 nil 3638541244
   ("" (skeep*)
    (("" (typepred "ctxt1_1`nextid")
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]")
          (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (every_implies formula-decl nil more_list_props structures)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype "affine_boolexpr.ctxt1_`cache"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, affine_boolexpr.ctxt1_`nextid))(c_)}"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC2-1 nil 3638540476
   ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype "affine_boolexpr.ctxt1_`cache"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, affine_boolexpr.ctxt1_`nextid))(c_)}")))
 (BEval_Box_BLETIN_BoolExpr_merge1_TCC3 0
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC3-3 "" 3743912124
   ("" (skeep*)
    (("" (assert)
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]")
          (("" (assert)
            (("" (replaces -1)
              (("" (assert)
                (("" (typepred "ctxt1_1`nxtlcl")
                  (("" (expand "last_idx_in_box") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (length_append formula-decl nil list_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "(number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)"
    "integers.above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :))))"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC3-2 nil 3638541349
   ("" (skeep*)
    (("" (typepred "ctxt1_1`cache")
      (("" (split 1)
        (("1" (use "correct_cache?_alt_def")
          (("1" (replace -1 :hide? t)
            (("1" (lemma "correct_cache?_alt_def")
              (("1" (inst? -1 :where 1)
                (("1" (replace -1 :hide? t)
                  (("1" (lemma "every_implies[CacheData]")
                    (("1" (inst? -1 :where 1)
                      (("1" (inst? -1 :where -2)
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (use "CacheData_correct?_inclusion")
                              (("2" (flatten) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "idxs_bounded")
          (("2" (skeep) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "(number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)"
    "integers.above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :))))"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC3-1 nil 3638540476
   ("" (subtype-tcc) nil nil) nil nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "(number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)"
    "integers.above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :))))")))
 (BEval_Box_BLETIN_BoolExpr_merge1_TCC4 0
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC4-2 "" 3789916718
   ("" (skeep*)
    (("" (assert)
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]")
          (("" (assert) (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (length_append formula-decl nil list_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (list type-decl nil list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt1_ WITH [`box := list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :)), nextid := (number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)])"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC4-1 nil 3638705326
   ("" (skeep*)
    (("" (assert)
      (("" (expand "last_idx_in_box")
        (("" (use "length_append[Interval]")
          (("1" (assert)
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (typepred "ctxt1_1`nxtlcl")
                  (("1" (expand "last_idx_in_box") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.ctxt1_ WITH [`box := list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[booleans.bool].none?(affine_boolexpr.ctxt2_`result) THEN [|(number_fields.-)(1), 1|] ELSIF Maybe[booleans.bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|(number_fields.-)(1), number_fields./((number_fields.-)(1), 2)|] ENDIF :)), nextid := (number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)])"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BLETIN_BoolExpr_merge1_TCC5 0
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC5-2 "" 3789916719
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))
  (BEval_Box_BLETIN_BoolExpr_merge1_TCC5-1 nil 3638705326
   ("" (skeep*)
    (("" (assert)
      (("" (hide -6)
        (("" (expand "last_idx_in_box")
          (("" (use "length_append[Interval]")
            (("1" (assert) (("1" (replaces -1) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BLETIN_BoolExpr_merge1 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BLETIN_BoolExpr_TCC1 0
  (BEval_Box_BLETIN_BoolExpr_TCC1-2 "" 3789916719
   ("" (skeep*)
    (("" (typepred "ctxt2_")
      (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1")
        (("" (lift-if -2)
          (("" (split -2)
            (("1" (flatten) nil nil)
             ("2" (flatten)
              (("2" (expand "BEval_Box_post") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_Box_BLETIN_BoolExpr_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BLETIN_BoolExpr subtype "affine_boolexpr.ctxt0_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)"))
  (BEval_Box_BLETIN_BoolExpr_TCC1-1 nil 3640251183
   ("" (skeep*)
    (("" (typepred "ctxt2_")
      (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1")
        (("" (lift-if -2)
          (("" (split -2)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (flatten)
                  (("1" (expand "BEval_Box_post")
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (expand "BEval_Box_post")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (flatten) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "BEval_Box_post")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "BEval_Box_post") (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith))
   nil
   (BEval_Box_BLETIN_BoolExpr subtype "affine_boolexpr.ctxt0_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BLETIN_BoolExpr_TCC2 0
  (BEval_Box_BLETIN_BoolExpr_TCC2-1 nil 3640509638
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (expand "BEval_Box_post")
          (("" (flatten)
            (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1")
              (("" (lift-if -2)
                (("" (assert)
                  (("" (split -2)
                    (("1" (flatten)
                      (("1" (typepred "ctxt0_")
                        (("1" (assert)
                          (("1" (inst 1 "null")
                            (("1" (assert)
                              (("1" (expand "append") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BLETIN_BoolExpr_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BLETIN_BoolExpr subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt0_) WITH [`result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BLETIN_BoolExpr_TCC3 0
  (BEval_Box_BLETIN_BoolExpr_TCC3-1 nil 3640509638 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BLETIN_BoolExpr subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BITE_merge2_TCC1 0
  (BEval_Box_BITE_merge2_TCC1-1 nil 3646657037 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BITE_merge2 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BITE_merge2_TCC2 0
  (BEval_Box_BITE_merge2_TCC2-1 nil 3646657037 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (BEval_Box_BITE_merge2 subtype "affine_boolexpr.ctxt1_"
    "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].some?)")))
 (BEval_Box_BITE_merge2_TCC3 0
  (BEval_Box_BITE_merge2_TCC3-1 nil 3646657037 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box_BITE_merge2 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result])"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BITE_merge2_TCC4 0
  (BEval_Box_BITE_merge2_TCC4-1 nil 3646657037 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)) nil
   (BEval_Box_BITE_merge2 subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "affine_boolexpr.CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")))
 (BEval_Box_BITE_TCC1 0
  (BEval_Box_BITE_TCC1-2 nil 3646480003
   ("" (skeep*)
    (("" (expand "BEval_Box_post")
      (("" (typepred "ctxt1_")
        (("" (expand "BEval_Box_post")
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (typepred "ctxt2_")
                  (("" (assert)
                    (("" (expand "BEval_Box_post")
                      (("" (flatten)
                        (("" (typepred "ctxt3_")
                          (("" (expand "BEval_Box_post")
                            (("" (assert)
                              (("" (flatten)
                                (("" (assert)
                                  (("" (expand "BEval_Box_BITE_merge1")
                                    (("" (assert)
                                      ((""
                                        (expand "BEval_Box_BITE_merge2")
                                        ((""
                                          (assert)
                                          ((""
                                            (skolem -3 "l0")
                                            ((""
                                              (skolem -7 "l1")
                                              ((""
                                                (skolem -11 "l3")
                                                ((""
                                                  (replaces -3)
                                                  ((""
                                                    (replaces -6)
                                                    ((""
                                                      (replaces -9)
                                                      ((""
                                                        (inst
                                                         1
                                                         "append(l0,append(l1,l3))")
                                                        ((""
                                                          (use
                                                           "append_assoc[CacheData]")
                                                          ((""
                                                            (replaces -1)
                                                            ((""
                                                              (use
                                                               "append_assoc[CacheData]")
                                                              ((""
                                                                (replaces -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge2 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC1-1 nil 3639767132 ("" (subtype-tcc) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BITE_TCC2 0
  (BEval_Box_BITE_TCC2-2 nil 3646480026
   ("" (skeep*)
    (("" (expand "BEval_Box_post")
      (("" (flatten)
        (("" (typepred "ctxt3_")
          (("" (expand "BEval_Box_post")
            (("" (assert)
              (("" (expand "BEval_Box_BITE_merge2")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (typepred "ctxt1_")
                        (("" (expand "BEval_Box_post")
                          (("" (flatten)
                            (("" (assert)
                              (("" (typepred "ctxt2_")
                                (("" (expand "BEval_Box_post")
                                  (("" (flatten)
                                    (("" (assert)
                                      ((""
                                        (expand "BEval_Box_BITE_merge1")
                                        ((""
                                          (assert)
                                          ((""
                                            (skolem -7 "l0")
                                            ((""
                                              (skolem -3 "l1")
                                              ((""
                                                (skolem -10 "l2")
                                                ((""
                                                  (replaces -10)
                                                  ((""
                                                    (replaces -3)
                                                    ((""
                                                      (replaces -6)
                                                      ((""
                                                        (inst
                                                         2
                                                         "append(l2,append(l1,l0))")
                                                        ((""
                                                          (use
                                                           "append_assoc[CacheData]")
                                                          ((""
                                                            (replaces -1)
                                                            ((""
                                                              (use
                                                               "append_assoc[CacheData]")
                                                              ((""
                                                                (replaces -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BITE_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge2 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BEval_Box_BITE subtype "affine_boolexpr.ctxt3_"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC2-1 nil 3640181970
   ("" (skeep*)
    (("" (typepred "ctxt2_")
      (("" (expand "BEval_Box_BITE_merge1")
        (("" (typepred "ctxt1_")
          (("" (expand "BEval_Box_post")
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (skolem -3 "l0")
                          (("" (replace -3 -7 :hide? t)
                            (("" (skolem -6 "l1")
                              (("" (inst 1 "append(l1,l0)")
                                (("" (use "append_assoc[CacheData]")
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BITE subtype "affine_boolexpr.ctxt3_"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BITE_TCC3 0
  (BEval_Box_BITE_TCC3-3 "" 3789916726
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC3-2 nil 3646480054
   ("" (skeep*)
    (("" (assert)
      (("" (expand "mk_result")
        (("" (typepred "ctxt3_")
          (("" (expand "BEval_Box_post")
            (("" (expand "BEval_Box_BITE_merge2")
              (("" (typepred "ctxt2_")
                (("" (expand "BEval_Box_post")
                  (("" (expand "BEval_Box_BITE_merge1")
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (typepred "ctxt1_")
                            (("" (assert)
                              (("" (expand "BEval_Box_post")
                                (("" (flatten)
                                  (("" (assert)
                                    (("" (skolem -3 "l0")
                                      ((""
                                        (replaces -3)
                                        ((""
                                          (skolem -5 "l1")
                                          ((""
                                            (replaces -5)
                                            ((""
                                              (skolem -7 "l2")
                                              ((""
                                                (replaces -7)
                                                ((""
                                                  (inst
                                                   2
                                                   "append(l2,append(l1,l0))")
                                                  ((""
                                                    (use
                                                     "append_assoc[CacheData]")
                                                    ((""
                                                      (replaces -1)
                                                      ((""
                                                        (use
                                                         "append_assoc[CacheData]")
                                                        ((""
                                                          (replaces -1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC3-1 nil 3640181970
   ("" (skeep*)
    (("" (typepred "ctxt2_")
      (("" (typepred "ctxt3_")
        (("" (expand "BEval_Box_BITE_merge1")
          (("" (expand "BEval_Box_BITE_merge2")
            (("" (typepred "ctxt1_")
              (("" (expand "BEval_Box_post")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (assert)
                        (("" (flatten)
                          (("" (assert)
                            (("" (skolem -3 "l0")
                              (("" (replace -3 -7 :hide? t)
                                (("" (skolem -6 "l1")
                                  (("" (inst 2 "append(l1,l0)")
                                    (("" (use "append_assoc[CacheData]")
                                      (("" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BITE_TCC4 0
  (BEval_Box_BITE_TCC4-4 "" 3789916727
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt3_")
          (("" (expand "BEval_Box_BITE_merge1")
            (("" (expand "BEval_Box_BITE_merge2")
              (("" (typepred "ctxt1_")
                (("" (expand "BEval_Box_post")
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (skolem -3 "l0")
                          (("" (replaces -3)
                            (("" (skolem -8 "l1")
                              (("" (skolem -5 "l2")
                                (("" (replaces -8)
                                  (("" (inst + "append(l2,append(l1,l0))")
                                    (("" (use "append_assoc[CacheData]")
                                      ((""
                                        (replaces -1)
                                        ((""
                                          (use "append_assoc[CacheData]")
                                          ((""
                                            (replaces -1)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge2 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC4-3 "" 3758873568
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt3_")
          (("" (expand "BEval_Box_BITE_merge1")
            (("" (expand "BEval_Box_BITE_merge2")
              (("" (typepred "ctxt1_")
                (("" (expand "BEval_Box_post")
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (skolem -3 "l0")
                          (("" (replaces -3)
                            (("" (skolem -8 "l1")
                              (("" (skolem -5 "l2")
                                (("" (replaces -8)
                                  (("" (replaces -5)
                                    (("" (inst + "append(l2,append(l1,l0))")
                                      ((""
                                        (use "append_assoc[CacheData]")
                                        ((""
                                          (replaces -1)
                                          ((""
                                            (use "append_assoc[CacheData]")
                                            ((""
                                              (replaces -1)
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith))
   shostak
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC4-2 nil 3646480075
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt3_")
          (("" (expand "BEval_Box_BITE_merge1")
            (("" (expand "BEval_Box_BITE_merge2")
              (("" (typepred "ctxt1_")
                (("" (expand "BEval_Box_post")
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (skolem -3 "l0")
                          (("" (replaces -3)
                            (("" (skolem -8 "l1")
                              (("" (skolem -5 "l2")
                                (("" (replaces -8)
                                  (("" (replaces -5)
                                    (("" (inst 3 "append(l2,append(l1,l0))")
                                      ((""
                                        (use "append_assoc[CacheData]")
                                        ((""
                                          (replaces -1)
                                          ((""
                                            (use "append_assoc[CacheData]")
                                            (("" (replaces -1) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC4-1 nil 3640182777 ("" (subtype-tcc) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[booleans.bool].Some(Maybe[booleans.bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BITE_TCC5 0
  (BEval_Box_BITE_TCC5-2 "" 3758873846
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "ctxt2_")
        (("" (typepred "ctxt3_")
          (("" (expand "BEval_Box_BITE_merge1")
            (("" (expand "BEval_Box_BITE_merge2")
              (("" (typepred "ctxt1_")
                (("" (expand "BEval_Box_post")
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (skolem -3 "l0")
                          (("" (replaces -3)
                            (("" (skolem -8 "l1")
                              (("" (skolem -5 "l2")
                                (("" (replaces -8)
                                  (("" (replaces -5)
                                    (("" (inst + "append(l2,append(l1,l0))")
                                      ((""
                                        (use "append_assoc[CacheData]")
                                        ((""
                                          (replaces -1)
                                          ((""
                                            (use "append_assoc[CacheData]")
                                            (("" (replaces -1) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge2 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (BEval_Box_BITE_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))
  (BEval_Box_BITE_TCC5-1 nil 3640182777 ("" (subtype-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[booleans.bool].None])"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_BITE_TCC6 0
  (BEval_Box_BITE_TCC6-1 nil 3758870044 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil))
   nil
   (BEval_Box_BITE subtype
    "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(affine_boolexpr.box)), result: Maybe[booleans.bool].Maybe #]].None"
    "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")))
 (BEval_Box_TCC1 0
  (BEval_Box_TCC1-1 nil 3638540476 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil))
   nil
   (BEval_Box subtype "affine_boolexpr.initial_box"
    "{b_: box.Box | reals.<(affine_box.last_idx_in_box(b_), affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box))}")))
 (BEval_Box_TCC2 0
  (BEval_Box_TCC2-1 nil 3638540476 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BEval_Box subtype "affine_boolexpr.first_added_idx"
    "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.initial_box))}")))
 (BEval_Box_TCC3 0
  (BEval_Box_TCC3-1 nil 3638540476 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list structures)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil
   (BEval_Box subtype "list_adt[CacheData].null"
    "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.initial_box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.first_added_idx)(c_)}")))
 (p_inclusion_pre_TCC1 0
  (p_inclusion_pre_TCC1-1 nil 3638640465 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil) (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (p_inclusion_pre subtype "affine_boolexpr.first_added_idx"
    "integers.upfrom((number_fields.+)(1, affine_box.last_idx_in_box(affine_boolexpr.box)))")))
 (BEval_Box_BAND_preservation_TCC1 0
  (BEval_Box_BAND_preservation_TCC1-1 nil 3640075840
   ("" (subtype-tcc) nil nil)
   ((beval_vs_post const-decl "bool" affine_boolexpr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil))
   nil
   (BEval_Box_BAND_preservation subtype
    "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)"
    "integers.upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))")))
 (BEval_Box_BAND_preservation 0
  (BEval_Box_BAND_preservation-2 nil 3646480623
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label target 1)
          (("" (hide target)
            (("" (expand "BEval_Box_BAND" -7)
              (("" (lift-if -7)
                (("" (assert)
                  (("" (split -7)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (reveal target)
                        (("2" (expand "BEval_Box_BAND")
                          (("2" (assert)
                            (("2" (expand "beval_vs_BAND")
                              (("2" (expand "beval_vs_post")
                                (("2" (flatten)
                                  (("2" (assert)
                                    (("2" (expand "p_inclusion_pre" -10)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lift-if -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   2)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1)
                                                    (("2"
                                                      (apply-extensionality 2)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BAND const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (beval_vs_BAND const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (FALSE const-decl "bool" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (/= const-decl "boolean" notequal nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (BEval_Box_BAND_preservation-1 nil 3640075872
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label target 1)
          (("" (hide target)
            (("" (expand "BEval_Box_BAND" -7)
              (("" (lift-if -7)
                (("" (assert)
                  (("" (split -7)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (reveal target)
                            (("1" (expand "BEval_Box_BAND")
                              (("1" (assert)
                                (("1" (replace -3)
                                  (("1" (expand "beval_vs_BAND")
                                    (("1" (expand "beval_vs_post")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "p_inclusion_pre" -13)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply-extensionality)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "BEval_Box_post")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "p_inclusion_pre"
                                                               -11)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (reveal target)
                              (("2" (expand "BEval_Box_BAND")
                                (("2" (assert)
                                  (("2" (replace -2)
                                    (("2" (expand "beval_vs_BAND")
                                      (("2"
                                        (expand "beval_vs_post")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "p_inclusion_pre" -12)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "p_inclusion_pre"
                                                         -8)
                                                        (("2"
                                                          (expand
                                                           "BEval_Box_post")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal target)
                      (("2" (expand "BEval_Box_BAND")
                        (("2" (assert)
                          (("2" (replace 2)
                            (("2" (assert)
                              (("2" (expand "beval_vs_BAND")
                                (("2" (expand "beval_vs_post")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "p_inclusion_pre" -11)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply-extensionality 1)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "BEval_Box_post")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "p_inclusion_pre"
                                                                     -11)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replace -7)
                                              (("2"
                                                (replace -8)
                                                (("2"
                                                  (expand
                                                   "p_inclusion_pre"
                                                   -5)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (apply-extensionality
                                                         2)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "BEval_Box_post")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Env type-eq-decl nil affine_box nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil))
 (BEval_Box_BOR_preservation 0
  (BEval_Box_BOR_preservation-3 nil 3646480657
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label target 1)
          (("" (hide target)
            (("" (expand "BEval_Box_BOR" -7)
              (("" (lift-if -7)
                (("" (assert)
                  (("" (split -7)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (reveal target)
                        (("2" (expand "BEval_Box_BOR")
                          (("2" (assert)
                            (("2" (expand "beval_vs_post")
                              (("2" (flatten)
                                (("2" (assert)
                                  (("2" (expand "p_inclusion_pre" -10)
                                    (("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "beval_vs_BOR")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lift-if -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace -2)
                                                              (("1"
                                                                (apply-extensionality
                                                                 1)
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (expand
                                                                     "BEval_Box_post")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "BEval_Box_post")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BOR const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (beval_vs_BOR const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (/= const-decl "boolean" notequal nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (g_ctxt1 skolem-const-decl
     "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))"
     affine_boolexpr nil)
    (box skolem-const-decl "Box" affine_boolexpr nil)
    (bexpr skolem-const-decl "BoolExpr" affine_boolexpr nil)
    (f_ctxt1 skolem-const-decl "ContextData_beval_vs" affine_boolexpr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil) (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (BEval_Box_BOR_preservation-2 nil 3640526619
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label target 1)
          (("" (hide target)
            (("" (expand "BEval_Box_BOR" -7)
              (("" (lift-if -7)
                (("" (assert)
                  (("" (split -7)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (reveal target)
                            (("1" (expand "BEval_Box_BOR")
                              (("1" (assert)
                                (("1" (replace -3)
                                  (("1" (expand "beval_vs_post")
                                    (("1" (replace -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "p_inclusion_pre" -13)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "beval_vs_BOR")
                                                  (("1"
                                                    (apply-extensionality)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand
                                                         "BEval_Box_post")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "p_inclusion_pre"
                                                                 -10)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (reveal target)
                          (("2" (expand "BEval_Box_BOR")
                            (("2" (assert)
                              (("2" (lift-if 1)
                                (("2" (split 1)
                                  (("1" (flatten)
                                    (("1" (expand "beval_vs_BOR")
                                      (("1"
                                        (expand p_inclusion_pre -8)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "beval_vs_post")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply-extensionality)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               p_inclusion_pre
                                                               -7)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "some?(val(g_ctxt2)`result)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "BEval_Box_post")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "BEval_Box_post")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand p_inclusion_pre -4)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "beval_vs_BOR")
                                            (("2"
                                              (expand "BEval_Box_post")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "beval_vs_post")
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (BEval_Box_BOR_preservation-1 nil 3640075291
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label "target" 1)
          (("" (hide target)
            (("" (expand "p_inclusion_pre" -3)
              (("" (case "some?(g_ctxt1)")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (case "some?(g_ctxt2)")
                      (("1" (expand "p_inclusion_pre" -15)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -23)
                              (("1" (reveal target)
                                (("1" (expand "beval_vs_BOR" 1)
                                  (("1" (expand "BEval_Box_BOR" 1)
                                    (("1" (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (apply-extensionality)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (replace -2)
                                                            (("1"
                                                              (replace -25)
                                                              (("1"
                                                                (case
                                                                 "some?(val(g_ctxt1)`result)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (apply-extensionality)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "BEval_Box_BOR") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "BEval_Box_BOR") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith))
   nil))
 (BEval_Box_BIMPLIES_preservation 0
  (BEval_Box_BIMPLIES_preservation-2 nil 3646480736
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label target 1)
          (("" (hide target)
            (("" (expand "BEval_Box_BIMPLIES" -7)
              (("" (lift-if -7)
                (("" (assert)
                  (("" (split -7)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (reveal target)
                        (("2" (expand "BEval_Box_BIMPLIES")
                          (("2" (assert)
                            (("2" (expand "beval_vs_post")
                              (("2" (flatten)
                                (("2" (expand "p_inclusion_pre" -10)
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (expand "beval_vs_BIMPLIES")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lift-if -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -2)
                                                            (("1"
                                                              (apply-extensionality)
                                                              (("1"
                                                                (hide 2)
                                                                (("1"
                                                                  (expand
                                                                   "BEval_Box_post")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (apply-extensionality 2)
                                                      (("2"
                                                        (hide 3)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BIMPLIES const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil) (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (beval_vs_BIMPLIES const-decl "(beval_vs_post(bexpr, ctxt0))"
     affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (BEval_Box_BIMPLIES_preservation-1 nil 3640021322
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" 1)
      (("" (flatten)
        (("" (label target 1)
          (("" (hide target)
            (("" (expand "BEval_Box_BIMPLIES" -7)
              (("" (lift-if -7)
                (("" (assert)
                  (("" (split -7)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (reveal target)
                            (("1" (expand "BEval_Box_BIMPLIES")
                              (("1" (assert)
                                (("1" (replace -3)
                                  (("1" (expand "beval_vs_post")
                                    (("1" (replace -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "p_inclusion_pre" -13)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "beval_vs_BIMPLIES")
                                                  (("1"
                                                    (apply-extensionality)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand
                                                         "BEval_Box_post")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "p_inclusion_pre"
                                                                 -11)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (reveal target)
                          (("2" (expand "BEval_Box_BIMPLIES")
                            (("2" (assert)
                              (("2" (lift-if 1)
                                (("2" (split 1)
                                  (("1" (flatten)
                                    (("1" (expand "beval_vs_BIMPLIES")
                                      (("1"
                                        (expand p_inclusion_pre -7)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "beval_vs_post")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply-extensionality)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               p_inclusion_pre
                                                               -7)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "some?(val(g_ctxt2)`result)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "BEval_Box_post")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "BEval_Box_post")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand p_inclusion_pre -3)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "beval_vs_BIMPLIES")
                                            (("2"
                                              (expand "BEval_Box_post")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "beval_vs_post")
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   shostak))
 (BINCLUDES_pre_preservation_TCC1 0
  (BINCLUDES_pre_preservation_TCC1-1 nil 3639235142
   ("" (skeep*)
    (("" (typepred "g_ctxt0")
      (("" (typepred "first_added_idx") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (BINCLUDES_pre_preservation subtype "affine_boolexpr.g_ctxt0"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BINCLUDES_pre_preservation_TCC2 0
  (BINCLUDES_pre_preservation_TCC2-2 "" 3789916748
   ("" (skeep*)
    (("" (typepred "g_ctxt0")
      (("" (typepred "first_added_idx") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BINCLUDES_pre_preservation subtype
    "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)"
    "integers.upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))"))
  (BINCLUDES_pre_preservation_TCC2-1 nil 3639235142
   ("" (skeep*)
    (("" (expand "BEval_Box_BINCLUDES" 1)
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (typepred "g_ctxt0")
              (("1" (typepred "first_added_idx") (("1" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BINCLUDES_pre_preservation subtype
    "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)"
    "integers.upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))")))
 (BINCLUDES_pre_preservation_TCC3 0
  (BINCLUDES_pre_preservation_TCC3-2 "" 3789916749
   ("" (skeep*)
    (("" (expand "BEval_Box_BINCLUDES" -2)
      (("" (lift-if -2)
        (("" (assert)
          (("" (split -2)
            (("1" (flatten)
              (("1" (split -2)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (expand "BEval_Box_BINCLUDES")
                      (("1" (assert)
                        (("1" (typepred "g_ctxt0")
                          (("1" (typepred "first_added_idx")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_Box_BINCLUDES const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))"
     affine_boolexpr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (BINCLUDES_pre_preservation subtype
    "affine_boolexpr.BEval_Box_BINCLUDES(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))(IntervalExpr_adt.BINCLUDES(affine_boolexpr.op, affine_boolexpr.opi), affine_boolexpr.g_ctxt0)"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))
  (BINCLUDES_pre_preservation_TCC3-1 nil 3639404311
   ("" (skeep*)
    (("" (expand "BEval_Box_BINCLUDES" -2)
      (("" (lift-if -2)
        (("" (assert)
          (("" (split -2)
            (("1" (flatten)
              (("1" (split -2)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (expand "BEval_Box_BINCLUDES")
                          (("1" (assert)
                            (("1" (typepred "g_ctxt0")
                              (("1" (typepred "first_added_idx")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -1)
                            (("1" (expand "BEval_Box_BINCLUDES")
                              (("1" (assert)
                                (("1" (replace -1)
                                  (("1" (typepred "g_ctxt0")
                                    (("1" (typepred "first_added_idx")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (BINCLUDES_pre_preservation subtype
    "affine_boolexpr.BEval_Box_BINCLUDES(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))(IntervalExpr_adt.BINCLUDES(affine_boolexpr.op, affine_boolexpr.opi), affine_boolexpr.g_ctxt0)"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BINCLUDES_pre_preservation 0
  (BINCLUDES_pre_preservation-2 nil 3646480785
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" -1)
      (("" (expand "p_inclusion_pre" 1)
        (("" (flatten)
          (("" (case "some?(g_ctxt0)")
            (("1" (assert)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (expand "BEval_Box_BINCLUDES" -10)
                    (("1" (lift-if -10)
                      (("1" (assert)
                        (("1" (split -10)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1" (assert)
                                (("1" (reveal 1)
                                  (("1" (expand "BEval_Box_BINCLUDES" 1)
                                    (("1" (expand "beval_vs_BINCLUDES" 1)
                                      (("1"
                                        (use "RE2AC_EvalwCache_eq")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (typepred
                                             "RE2AC(op,
                                                                          val(g_ctxt0)`box,
                                                                          f_ctxt0`vs,
                                                                          val(g_ctxt0)`nextid,
                                                                          val(g_ctxt0)`cache)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 2)
                                                    (("1"
                                                      (expand
                                                       "compatible_pairs?")
                                                      (("1" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "iacniig_RE2AC_preservation")
                                                      (("2" (assert) nil nil))
                                                      nil)
                                                     ("3"
                                                      (use
                                                       "nicniig_RE2AC_preservation")
                                                      (("3" (assert) nil nil))
                                                      nil)
                                                     ("4"
                                                      (use
                                                       "vrcib_RE2AC_preservation")
                                                      (("4" (assert) nil nil))
                                                      nil)
                                                     ("5"
                                                      (flatten)
                                                      (("5"
                                                        (lift-if -1)
                                                        (("5"
                                                          (assert)
                                                          (("5"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand "##")
                                                                (("1"
                                                                  (apply-extensionality)
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (skolem
                                                                       -4
                                                                       "N")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?")
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -5)
                                                                              (("1"
                                                                                (inst
                                                                                 -5
                                                                                 "f_ctxt0`n")
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval_ACExpr_Env")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -6)
                                                                                      (("1"
                                                                                        (use
                                                                                         "ean_in_ebi")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           -6
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "##")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (skolem
                                                                       -4
                                                                       "N")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?")
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "0")
                                                                            (("1"
                                                                              (inst
                                                                               -5
                                                                               "f_ctxt0`n")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -5)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -6)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_ACExpr_Env")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (apply-extensionality)
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6
                                                                                               :dir
                                                                                               RL)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "ean_in_ebi")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "##")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "BEval_Box_BINCLUDES" -2) (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (beval_vs_BINCLUDES const-decl "(beval_vs_post(bexpr, ctxt))"
     affine_boolexpr nil)
    (FALSE const-decl "bool" booleans nil)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nth def-decl "T" list_props nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (<< const-decl "bool" interval interval_arith)
    (ean_in_ebi formula-decl nil affine nil)
    (below type-eq-decl nil naturalnumbers nil)
    (f_ctxt0 skolem-const-decl "ContextData_beval_vs" affine_boolexpr nil)
    (op skolem-const-decl "RealExpr" affine_boolexpr nil)
    (g_ctxt0 skolem-const-decl
     "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))"
     affine_boolexpr nil)
    (box skolem-const-decl "Box" affine_boolexpr nil)
    (bexpr skolem-const-decl "BoolExpr" affine_boolexpr nil)
    (length def-decl "nat" list_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (|##| const-decl "bool" interval interval_arith)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil) (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (BEval_Box_BINCLUDES const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))"
     affine_boolexpr nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (BINCLUDES_pre_preservation-1 nil 3639235143
   ("" (skeep*)
    (("" (expand "p_inclusion_pre" -1)
      (("" (expand "p_inclusion_pre" 1)
        (("" (flatten)
          (("" (case "some?(g_ctxt0)")
            (("1" (assert)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (expand "BEval_Box_BINCLUDES" -10)
                    (("1" (lift-if -10)
                      (("1" (assert)
                        (("1" (split -10)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1" (flatten)
                                (("1" (split -2)
                                  (("1" (assert)
                                    (("1" (reveal 1)
                                      (("1"
                                        (expand "BEval_Box_BINCLUDES" 1)
                                        (("1"
                                          (expand "beval_vs_BINCLUDES" 1)
                                          (("1"
                                            (use "RE2AC_EvalwCache_eq")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (typepred
                                                 "RE2AC(op,
                                                                  val(g_ctxt0)`box,
                                                                  f_ctxt0`vs,
                                                                  val(g_ctxt0)`nextid,
                                                                  val(g_ctxt0)`cache)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (expand
                                                           "compatible_pairs?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "iacniig_RE2AC_preservation")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (use
                                                           "nicniig_RE2AC_preservation")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (use
                                                           "vrcib_RE2AC_preservation")
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (apply-extensionality)
                                                          (("5"
                                                            (hide 2)
                                                            (("5"
                                                              (skolem -3 "N")
                                                              (("5"
                                                                (flatten)
                                                                (("5"
                                                                  (expand
                                                                   "compatible_pairs_on?")
                                                                  (("5"
                                                                    (inst
                                                                     -4
                                                                     0)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -4)
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "f_ctxt0`n")
                                                                        (("1"
                                                                          (expand
                                                                           "eval_ACExpr_Env")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               -5)
                                                                              (("1"
                                                                                (use
                                                                                 "ean_in_ebi")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -5
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Member_trans")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "eval_by_intervals(car(val(RE2AC(op,
                                                                val(g_ctxt0)`box,
                                                                f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid,
                                                                val(g_ctxt0)`cache))`2)`2)"
                                                                                         "opi"
                                                                                         "eval(op, f_ctxt0`vs, f_ctxt0`n)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (split -1)
                                      (("1"
                                        (reveal 1)
                                        (("1"
                                          (expand "BEval_Box_BINCLUDES" 1)
                                          (("1"
                                            (expand "beval_vs_BINCLUDES" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (use "RE2AC_EvalwCache_eq")
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (typepred
                                                       "RE2AC(op,
                                                                  val(g_ctxt0)`box,
                                                                  f_ctxt0`vs,
                                                                  val(g_ctxt0)`nextid,
                                                                  val(g_ctxt0)`cache)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs?")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "iacniig_RE2AC_preservation")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (use
                                                                 "nicniig_RE2AC_preservation")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (use
                                                                 "vrcib_RE2AC_preservation")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skolem
                                                                 -3
                                                                 "N")
                                                                (("5"
                                                                  (flatten)
                                                                  (("5"
                                                                    (expand
                                                                     "compatible_pairs_on?")
                                                                    (("5"
                                                                      (inst
                                                                       -4
                                                                       0)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -4)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "f_ctxt0`n")
                                                                          (("1"
                                                                            (expand
                                                                             "eval_ACExpr_Env")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 -5)
                                                                                (("1"
                                                                                  (use
                                                                                   "ean_in_ebi")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -5
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (apply-extensionality)
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "BEval_Box_BINCLUDES" -2) (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Maybe_Some_extensionality formula-decl nil Maybe structures)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (|##| const-decl "bool" interval interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (Member_trans formula-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ean_in_ebi formula-decl nil affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (null_ol? const-decl "bool" ordered_list structures)
    (Add const-decl "Interval" interval interval_arith)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (last_idx const-decl "int" indexed_list structures)
    (next_idx const-decl "nat" affine nil)
    (<< const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (BREL_pre_preservation 0
  (BREL_pre_preservation-4 "" 3646480857
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BREL" -2)
          (("" (lift-if -2)
            (("" (assert)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (expand "beval_vs_BREL")
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1" (expand "BEval_Box_BREL" 1 1)
                                (("1" (assert)
                                  (("1" (expand "BEval_Box_BREL" 1 1)
                                    (("1" (assert)
                                      (("1"
                                        (expand "BEval_Box_BREL" 1 1)
                                        (("1"
                                          (expand "BEval_Box_BREL" 1 1)
                                          (("1"
                                            (expand "BEval_Box_BREL" 1 1)
                                            (("1"
                                              (expand "BEval_Box_BREL" 1 1)
                                              (("1"
                                                (expand "BEval_Box_BREL" 1 1)
                                                (("1"
                                                  (expand
                                                   "BEval_Box_BREL"
                                                   1
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "BEval_Box_BREL"
                                                     1)
                                                    (("1"
                                                      (lemma
                                                       "RE2AC_EvalwCache_eq")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "val(g_ctxt0)`box"
                                                         "op1"
                                                         "f_ctxt0`vs"
                                                         "val(g_ctxt0)`nextid"
                                                         "val(g_ctxt0)`cache")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (lemma
                                                             "RE2AC_EvalwCache_eq")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "val(g_ctxt0)`box"
                                                               "op2"
                                                               "f_ctxt0`vs"
                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                val(g_ctxt0)`cache))`1"
                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                val(g_ctxt0)`cache))`2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (typepred
                                                                   "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                            val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                            val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (typepred
                                                                         "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (split
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "compatible_pairs?")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  -20
                                                                                  -13
                                                                                  -14))
                                                                                (("3"
                                                                                  (lemma
                                                                                   "iacniig_RE2AC_preservation")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "val(g_ctxt0)`box"
                                                                                       "f_ctxt0`vs"
                                                                                       "op1"
                                                                                       "first_added_idx"
                                                                                       "val(g_ctxt0)`nextid"
                                                                                       "val(g_ctxt0)`cache")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (lemma
                                                                                           "iacniig_RE2AC_preservation")
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "val(g_ctxt0)`box"
                                                                                             "f_ctxt0`vs"
                                                                                             "op2"
                                                                                             "first_added_idx"
                                                                                             "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                             "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (reveal
                                                                                               -6
                                                                                               -19)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (lemma
                                                                                 "nicniig_RE2AC_preservation")
                                                                                (("4"
                                                                                  (inst
                                                                                   -1
                                                                                   "val(g_ctxt0)`box"
                                                                                   "f_ctxt0`vs"
                                                                                   "op1"
                                                                                   "first_added_idx"
                                                                                   "val(g_ctxt0)`nextid"
                                                                                   "val(g_ctxt0)`cache")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (lemma
                                                                                       "nicniig_RE2AC_preservation")
                                                                                      (("4"
                                                                                        (inst
                                                                                         -1
                                                                                         "val(g_ctxt0)`box"
                                                                                         "f_ctxt0`vs"
                                                                                         "op2"
                                                                                         "first_added_idx"
                                                                                         "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                         "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (lemma
                                                                                 "vrcib_RE2AC_preservation")
                                                                                (("5"
                                                                                  (inst
                                                                                   -1
                                                                                   "val(g_ctxt0)`box"
                                                                                   "f_ctxt0`vs"
                                                                                   "op1"
                                                                                   "val(g_ctxt0)`nextid"
                                                                                   "val(g_ctxt0)`cache")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (lemma
                                                                                       "vrcib_RE2AC_preservation")
                                                                                      (("5"
                                                                                        (inst
                                                                                         -1
                                                                                         "val(g_ctxt0)`box"
                                                                                         "f_ctxt0`vs"
                                                                                         "op2"
                                                                                         "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                         "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                        (("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (name-replace
                                                                                 "re2ac1"
                                                                                 "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                              val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                                (("6"
                                                                                  (name-replace
                                                                                   "re2ac2"
                                                                                   "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                              val(re2ac1)`2)")
                                                                                  (("6"
                                                                                    (hide
                                                                                     2)
                                                                                    (("6"
                                                                                      (skolem
                                                                                       -8
                                                                                       "N2")
                                                                                      (("6"
                                                                                        (flatten
                                                                                         -8)
                                                                                        (("6"
                                                                                          (expand
                                                                                           "compatible_pairs_on?"
                                                                                           -9)
                                                                                          (("6"
                                                                                            (expand
                                                                                             "eval_ACExpr_Env"
                                                                                             -9)
                                                                                            (("6"
                                                                                              (inst
                                                                                               -9
                                                                                               0)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "f_ctxt0`n")
                                                                                                (("1"
                                                                                                  (flatten
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -6
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -8
                                                                                                         :dir
                                                                                                         RL
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (skolem
                                                                                                           -3
                                                                                                           "N1")
                                                                                                          (("1"
                                                                                                            (flatten
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "compatible_pairs_on?"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -4
                                                                                                                 0)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -4
                                                                                                                   "f_ctxt0`n")
                                                                                                                  (("1"
                                                                                                                    (flatten
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "eval_ACExpr_Env"
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -3
                                                                                                                             :dir
                                                                                                                             RL
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "ean_in_ebi")
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "ean_in_ebi"
                                                                                                                                 ("N"
                                                                                                                                  "N2"))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "##")
                                                                                                                                  (("1"
                                                                                                                                    (flatten
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "ub_aff")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "lb_aff")
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "rel")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "realorder?")
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (name-replace
                                                                                                                                                   "A"
                                                                                                                                                   "eval_ac_noise(car(val(re2ac1)`2)`2, N1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (name-replace
                                                                                                                                                     "B"
                                                                                                                                                     "ub(eval_by_intervals(car(val(re2ac1)`2)`2))")
                                                                                                                                                    (("1"
                                                                                                                                                      (name-replace
                                                                                                                                                       "C"
                                                                                                                                                       "lb(eval_by_intervals(car(val(re2ac2)`2)`2))")
                                                                                                                                                      (("1"
                                                                                                                                                        (name-replace
                                                                                                                                                         "D"
                                                                                                                                                         "eval_ac_noise(car(val(re2ac2)`2)`2, N2)")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if
                                                                                                                                                               -5)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -5)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "neg_rel")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (lift-if
                                                                                                                                                         -5)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (split
                                                                                                                                                             -5)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "neg_rel")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  (("3"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("3"
                                                                                                                                                      (lift-if
                                                                                                                                                       -5)
                                                                                                                                                      (("3"
                                                                                                                                                        (assert)
                                                                                                                                                        (("3"
                                                                                                                                                          (split
                                                                                                                                                           -5)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "neg_rel")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("4"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("4"
                                                                                                                                                  (assert)
                                                                                                                                                  (("4"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("4"
                                                                                                                                                      (lift-if
                                                                                                                                                       -5)
                                                                                                                                                      (("4"
                                                                                                                                                        (assert)
                                                                                                                                                        (("4"
                                                                                                                                                          (split
                                                                                                                                                           -5)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "neg_rel")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "length")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "compatible_pairs?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BREL const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))"
     affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (op1 skolem-const-decl "RealExpr" affine_boolexpr nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil) (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (f_ctxt0 skolem-const-decl "ContextData_beval_vs" affine_boolexpr nil)
    (g_ctxt0 skolem-const-decl
     "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))"
     affine_boolexpr nil)
    (box skolem-const-decl "Box" affine_boolexpr nil)
    (bexpr skolem-const-decl "BoolExpr" affine_boolexpr nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first_added_idx skolem-const-decl
     "upfrom(first_noise_idx_available_box(bexpr, box))" affine_boolexpr nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (length def-decl "nat" list_props nil)
    (op2 skolem-const-decl "RealExpr" affine_boolexpr nil)
    (re2ac1 skolem-const-decl
     "{result: Maybe[[nat, (correct_cache?(val(g_ctxt0)`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = op1)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, val(g_ctxt0)`cache))
     AND (EXISTS (N: Noise):
            vars_in_box_compatible?(N)(val(g_ctxt0)`box)(f_ctxt0`vs) AND
             compatible_pairs_on?(val(g_ctxt0)`box, f_ctxt0`vs)(N)
                                 (val(result)`2))
     AND (val(result)`1 >= val(g_ctxt0)`nextid)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" affine_boolexpr nil)
    (re2ac2 skolem-const-decl
     "{result: Maybe[[nat, (correct_cache?(val(g_ctxt0)`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = op2)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, val(re2ac1)`2))
     AND (EXISTS (N: Noise):
            vars_in_box_compatible?(N)(val(g_ctxt0)`box)(f_ctxt0`vs) AND
             compatible_pairs_on?(val(g_ctxt0)`box, f_ctxt0`vs)(N)
                                 (val(result)`2))
     AND (val(result)`1 >= val(re2ac1)`1)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" affine_boolexpr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (ean_in_ebi formula-decl nil affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (ub_aff const-decl "real" affine nil)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (eval_ac_noise const-decl "real" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (neg_rel const-decl "bool" real_orders reals)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (null_ol? const-decl "bool" ordered_list structures)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lb_aff const-decl "real" affine nil) (nth def-decl "T" list_props nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil box interval_arith)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (beval_vs_BREL const-decl "(beval_vs_post(bexpr, ctxt))" affine_boolexpr
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (BREL_pre_preservation-3 "" 3640522853
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BREL" -2)
          (("" (lift-if -2)
            (("" (assert)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (expand "beval_vs_BREL")
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1" (flatten)
                                (("1" (split -2)
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (expand "BEval_Box_BREL" 1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "BEval_Box_BREL" 1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "BEval_Box_BREL" 1 1)
                                                (("1"
                                                  (expand
                                                   "BEval_Box_BREL"
                                                   1
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "BEval_Box_BREL"
                                                     1
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "BEval_Box_BREL"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "BEval_Box_BREL"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "BEval_Box_BREL"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "BEval_Box_BREL"
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "RE2AC_EvalwCache_eq")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "val(g_ctxt0)`box"
                                                                 "op1"
                                                                 "f_ctxt0`vs"
                                                                 "val(g_ctxt0)`nextid"
                                                                 "val(g_ctxt0)`cache")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (lemma
                                                                     "RE2AC_EvalwCache_eq")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "val(g_ctxt0)`box"
                                                                       "op2"
                                                                       "f_ctxt0`vs"
                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`1"
                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`2")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (typepred
                                                                           "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                  val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                  val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "compatible_pairs?")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          -20
                                                                                          -13
                                                                                          -14))
                                                                                        (("3"
                                                                                          (lemma
                                                                                           "iacniig_RE2AC_preservation")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "val(g_ctxt0)`box"
                                                                                               "f_ctxt0`vs"
                                                                                               "op1"
                                                                                               "first_added_idx"
                                                                                               "val(g_ctxt0)`nextid"
                                                                                               "val(g_ctxt0)`cache")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "iacniig_RE2AC_preservation")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "val(g_ctxt0)`box"
                                                                                                     "f_ctxt0`vs"
                                                                                                     "op2"
                                                                                                     "first_added_idx"
                                                                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       -6
                                                                                                       -19)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (lemma
                                                                                         "nicniig_RE2AC_preservation")
                                                                                        (("4"
                                                                                          (inst
                                                                                           -1
                                                                                           "val(g_ctxt0)`box"
                                                                                           "f_ctxt0`vs"
                                                                                           "op1"
                                                                                           "first_added_idx"
                                                                                           "val(g_ctxt0)`nextid"
                                                                                           "val(g_ctxt0)`cache")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "nicniig_RE2AC_preservation")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "val(g_ctxt0)`box"
                                                                                                 "f_ctxt0`vs"
                                                                                                 "op2"
                                                                                                 "first_added_idx"
                                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (lemma
                                                                                         "vrcib_RE2AC_preservation")
                                                                                        (("5"
                                                                                          (inst
                                                                                           -1
                                                                                           "val(g_ctxt0)`box"
                                                                                           "f_ctxt0`vs"
                                                                                           "op1"
                                                                                           "val(g_ctxt0)`nextid"
                                                                                           "val(g_ctxt0)`cache")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            (("5"
                                                                                              (lemma
                                                                                               "vrcib_RE2AC_preservation")
                                                                                              (("5"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "val(g_ctxt0)`box"
                                                                                                 "f_ctxt0`vs"
                                                                                                 "op2"
                                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                (("5"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (name-replace
                                                                                         "re2ac1"
                                                                                         "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                                        (("6"
                                                                                          (name-replace
                                                                                           "re2ac2"
                                                                                           "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                  val(re2ac1)`2)")
                                                                                          (("6"
                                                                                            (apply-extensionality)
                                                                                            (("6"
                                                                                              (hide
                                                                                               2)
                                                                                              (("6"
                                                                                                (skolem
                                                                                                 -8
                                                                                                 "N2")
                                                                                                (("6"
                                                                                                  (flatten
                                                                                                   -8)
                                                                                                  (("6"
                                                                                                    (expand
                                                                                                     "compatible_pairs_on?"
                                                                                                     -9)
                                                                                                    (("6"
                                                                                                      (expand
                                                                                                       "eval_ACExpr_Env"
                                                                                                       -9)
                                                                                                      (("6"
                                                                                                        (inst
                                                                                                         -9
                                                                                                         0)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -9
                                                                                                           "f_ctxt0`n")
                                                                                                          (("1"
                                                                                                            (flatten
                                                                                                             -9)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               -9)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -6
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -8
                                                                                                                   :dir
                                                                                                                   RL
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (skolem
                                                                                                                     -3
                                                                                                                     "N1")
                                                                                                                    (("1"
                                                                                                                      (flatten
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "compatible_pairs_on?"
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           0)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "f_ctxt0`n")
                                                                                                                            (("1"
                                                                                                                              (flatten
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "eval_ACExpr_Env"
                                                                                                                                   -4)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     :hide?
                                                                                                                                     t)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -3
                                                                                                                                       :dir
                                                                                                                                       RL
                                                                                                                                       :hide?
                                                                                                                                       t)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "ean_in_ebi")
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "ean_in_ebi"
                                                                                                                                           ("N"
                                                                                                                                            "N2"))
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "##")
                                                                                                                                            (("1"
                                                                                                                                              (flatten
                                                                                                                                               (-1
                                                                                                                                                -2))
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "ub_aff")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "lb_aff")
                                                                                                                                                  (("1"
                                                                                                                                                    (typepred
                                                                                                                                                     "rel")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "realorder?")
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (name-replace
                                                                                                                                                             "A"
                                                                                                                                                             "eval_ac_noise(car(val(re2ac1)`2)`2, N1)")
                                                                                                                                                            (("1"
                                                                                                                                                              (name-replace
                                                                                                                                                               "B"
                                                                                                                                                               "ub(eval_by_intervals(car(val(re2ac1)`2)`2))")
                                                                                                                                                              (("1"
                                                                                                                                                                (name-replace
                                                                                                                                                                 "C"
                                                                                                                                                                 "lb(eval_by_intervals(car(val(re2ac2)`2)`2))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (name-replace
                                                                                                                                                                   "D"
                                                                                                                                                                   "eval_ac_noise(car(val(re2ac2)`2)`2, N2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "length")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "compatible_pairs?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (split -1)
                                      (("1"
                                        (expand "BEval_Box_BREL" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "RE2AC_EvalwCache_eq")
                                            (("1"
                                              (inst
                                               -1
                                               "val(g_ctxt0)`box"
                                               "op1"
                                               "f_ctxt0`vs"
                                               "val(g_ctxt0)`nextid"
                                               "val(g_ctxt0)`cache")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (lemma
                                                   "RE2AC_EvalwCache_eq")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "val(g_ctxt0)`box"
                                                     "op2"
                                                     "f_ctxt0`vs"
                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`1"
                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`2")
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (typepred
                                                         "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (typepred
                                                               "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (split 4)
                                                                    (("1"
                                                                      (expand
                                                                       "compatible_pairs?")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "iacniig_RE2AC_preservation")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "val(g_ctxt0)`box"
                                                                           "f_ctxt0`vs"
                                                                           "op1"
                                                                           "first_added_idx"
                                                                           "val(g_ctxt0)`nextid"
                                                                           "val(g_ctxt0)`cache")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (lemma
                                                                               "iacniig_RE2AC_preservation")
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 "val(g_ctxt0)`box"
                                                                                 "f_ctxt0`vs"
                                                                                 "op2"
                                                                                 "first_added_idx"
                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (lemma
                                                                       "nicniig_RE2AC_preservation")
                                                                      (("4"
                                                                        (inst
                                                                         -1
                                                                         "val(g_ctxt0)`box"
                                                                         "f_ctxt0`vs"
                                                                         "op1"
                                                                         "first_added_idx"
                                                                         "val(g_ctxt0)`nextid"
                                                                         "val(g_ctxt0)`cache")
                                                                        (("4"
                                                                          (assert)
                                                                          (("4"
                                                                            (lemma
                                                                             "nicniig_RE2AC_preservation")
                                                                            (("4"
                                                                              (inst
                                                                               -1
                                                                               "val(g_ctxt0)`box"
                                                                               "f_ctxt0`vs"
                                                                               "op2"
                                                                               "first_added_idx"
                                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (lemma
                                                                       "vrcib_RE2AC_preservation")
                                                                      (("5"
                                                                        (inst
                                                                         -1
                                                                         "val(g_ctxt0)`box"
                                                                         "f_ctxt0`vs"
                                                                         "op1"
                                                                         "val(g_ctxt0)`nextid"
                                                                         "val(g_ctxt0)`cache")
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (lemma
                                                                             "vrcib_RE2AC_preservation")
                                                                            (("5"
                                                                              (inst
                                                                               -1
                                                                               "val(g_ctxt0)`box"
                                                                               "f_ctxt0`vs"
                                                                               "op2"
                                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (name-replace
                                                                       "re2ac1"
                                                                       "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                      (("6"
                                                                        (name-replace
                                                                         "re2ac2"
                                                                         "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                                  val(re2ac1)`2)")
                                                                        (("6"
                                                                          (apply-extensionality)
                                                                          (("6"
                                                                            (hide
                                                                             1)
                                                                            (("6"
                                                                              (skolem
                                                                               -9
                                                                               "N2")
                                                                              (("6"
                                                                                (flatten
                                                                                 -9)
                                                                                (("6"
                                                                                  (expand
                                                                                   "compatible_pairs_on?"
                                                                                   -10)
                                                                                  (("6"
                                                                                    (expand
                                                                                     "eval_ACExpr_Env"
                                                                                     -10)
                                                                                    (("6"
                                                                                      (inst
                                                                                       -10
                                                                                       0)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -10
                                                                                         "f_ctxt0`n")
                                                                                        (("1"
                                                                                          (flatten
                                                                                           -10)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -10)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7
                                                                                               :hide?
                                                                                               t)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -9
                                                                                                 :dir
                                                                                                 RL
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -4
                                                                                                   "N1")
                                                                                                  (("1"
                                                                                                    (flatten
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "compatible_pairs_on?"
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -5
                                                                                                         0)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "f_ctxt0`n")
                                                                                                          (("1"
                                                                                                            (flatten
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "eval_ACExpr_Env"
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -4
                                                                                                                     :dir
                                                                                                                     RL
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "ean_in_ebi")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "ean_in_ebi"
                                                                                                                         ("N"
                                                                                                                          "N2"))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "##")
                                                                                                                          (("1"
                                                                                                                            (flatten
                                                                                                                             (-1
                                                                                                                              -2))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ub_aff")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "lb_aff")
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "rel")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "realorder?")
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "neg_rel")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "neg_rel")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("4"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "length")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "compatible_pairs?")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (split -1)
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (expand "BEval_Box_BREL" 2)
                                        (("1"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("1"
                                            (inst
                                             -1
                                             "val(g_ctxt0)`box"
                                             "op1"
                                             "f_ctxt0`vs"
                                             "val(g_ctxt0)`nextid"
                                             "val(g_ctxt0)`cache")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lemma "RE2AC_EvalwCache_eq")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "val(g_ctxt0)`box"
                                                   "op2"
                                                   "f_ctxt0`vs"
                                                   "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`1"
                                                   "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`2")
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (typepred
                                                       "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split 4)
                                                                  (("1"
                                                                    (expand
                                                                     "compatible_pairs?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "iacniig_RE2AC_preservation")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "val(g_ctxt0)`box"
                                                                         "f_ctxt0`vs"
                                                                         "op1"
                                                                         "first_added_idx"
                                                                         "val(g_ctxt0)`nextid"
                                                                         "val(g_ctxt0)`cache")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (lemma
                                                                             "iacniig_RE2AC_preservation")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "val(g_ctxt0)`box"
                                                                               "f_ctxt0`vs"
                                                                               "op2"
                                                                               "first_added_idx"
                                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (lemma
                                                                     "nicniig_RE2AC_preservation")
                                                                    (("4"
                                                                      (inst
                                                                       -1
                                                                       "val(g_ctxt0)`box"
                                                                       "f_ctxt0`vs"
                                                                       "op1"
                                                                       "first_added_idx"
                                                                       "val(g_ctxt0)`nextid"
                                                                       "val(g_ctxt0)`cache")
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (lemma
                                                                           "nicniig_RE2AC_preservation")
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             "val(g_ctxt0)`box"
                                                                             "f_ctxt0`vs"
                                                                             "op2"
                                                                             "first_added_idx"
                                                                             "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                             "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (lemma
                                                                     "vrcib_RE2AC_preservation")
                                                                    (("5"
                                                                      (inst
                                                                       -1
                                                                       "val(g_ctxt0)`box"
                                                                       "f_ctxt0`vs"
                                                                       "op1"
                                                                       "val(g_ctxt0)`nextid"
                                                                       "val(g_ctxt0)`cache")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (lemma
                                                                           "vrcib_RE2AC_preservation")
                                                                          (("5"
                                                                            (inst
                                                                             -1
                                                                             "val(g_ctxt0)`box"
                                                                             "f_ctxt0`vs"
                                                                             "op2"
                                                                             "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                             "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                            (("5"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("6"
                                                                    (name-replace
                                                                     "re2ac1"
                                                                     "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                    (("6"
                                                                      (name-replace
                                                                       "re2ac2"
                                                                       "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                                  val(re2ac1)`2)")
                                                                      (("6"
                                                                        (apply-extensionality)
                                                                        (("6"
                                                                          (hide
                                                                           2)
                                                                          (("6"
                                                                            (skolem
                                                                             -8
                                                                             "N2")
                                                                            (("6"
                                                                              (flatten
                                                                               -8)
                                                                              (("6"
                                                                                (expand
                                                                                 "compatible_pairs_on?"
                                                                                 -9)
                                                                                (("6"
                                                                                  (expand
                                                                                   "eval_ACExpr_Env"
                                                                                   -9)
                                                                                  (("6"
                                                                                    (inst
                                                                                     -9
                                                                                     0)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -9
                                                                                       "f_ctxt0`n")
                                                                                      (("1"
                                                                                        (flatten
                                                                                         -9)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -9)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               :dir
                                                                                               RL
                                                                                               :hide?
                                                                                               t)
                                                                                              (("1"
                                                                                                (skolem
                                                                                                 -3
                                                                                                 "N1")
                                                                                                (("1"
                                                                                                  (flatten
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "compatible_pairs_on?"
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       0)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "f_ctxt0`n")
                                                                                                        (("1"
                                                                                                          (flatten
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "eval_ACExpr_Env"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3
                                                                                                                   :dir
                                                                                                                   RL
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "ean_in_ebi")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "ean_in_ebi"
                                                                                                                       ("N"
                                                                                                                        "N2"))
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "##")
                                                                                                                        (("1"
                                                                                                                          (flatten
                                                                                                                           (-1
                                                                                                                            -2))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ub_aff")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "lb_aff")
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "rel")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "realorder?")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("4"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "length")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "compatible_pairs?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "BEval_Box_BREL" 3)
                                            (("1"
                                              (lemma "RE2AC_EvalwCache_eq")
                                              (("1"
                                                (inst
                                                 -1
                                                 "val(g_ctxt0)`box"
                                                 "op1"
                                                 "f_ctxt0`vs"
                                                 "val(g_ctxt0)`nextid"
                                                 "val(g_ctxt0)`cache")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (lemma
                                                     "RE2AC_EvalwCache_eq")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "val(g_ctxt0)`box"
                                                       "op2"
                                                       "f_ctxt0`vs"
                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`1"
                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`2")
                                                      (("1"
                                                        (replace -1 :hide? t)
                                                        (("1"
                                                          (typepred
                                                           "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split
                                                                       5)
                                                                      (("1"
                                                                        (expand
                                                                         "compatible_pairs?")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "iacniig_RE2AC_preservation")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "val(g_ctxt0)`box"
                                                                             "f_ctxt0`vs"
                                                                             "op1"
                                                                             "first_added_idx"
                                                                             "val(g_ctxt0)`nextid"
                                                                             "val(g_ctxt0)`cache")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (lemma
                                                                                 "iacniig_RE2AC_preservation")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "val(g_ctxt0)`box"
                                                                                   "f_ctxt0`vs"
                                                                                   "op2"
                                                                                   "first_added_idx"
                                                                                   "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                   "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (lemma
                                                                         "nicniig_RE2AC_preservation")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "val(g_ctxt0)`box"
                                                                           "f_ctxt0`vs"
                                                                           "op1"
                                                                           "first_added_idx"
                                                                           "val(g_ctxt0)`nextid"
                                                                           "val(g_ctxt0)`cache")
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (lemma
                                                                               "nicniig_RE2AC_preservation")
                                                                              (("4"
                                                                                (inst
                                                                                 -1
                                                                                 "val(g_ctxt0)`box"
                                                                                 "f_ctxt0`vs"
                                                                                 "op2"
                                                                                 "first_added_idx"
                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (lemma
                                                                         "vrcib_RE2AC_preservation")
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "val(g_ctxt0)`box"
                                                                           "f_ctxt0`vs"
                                                                           "op1"
                                                                           "val(g_ctxt0)`nextid"
                                                                           "val(g_ctxt0)`cache")
                                                                          (("5"
                                                                            (assert)
                                                                            (("5"
                                                                              (lemma
                                                                               "vrcib_RE2AC_preservation")
                                                                              (("5"
                                                                                (inst
                                                                                 -1
                                                                                 "val(g_ctxt0)`box"
                                                                                 "f_ctxt0`vs"
                                                                                 "op2"
                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (name-replace
                                                                         "re2ac1"
                                                                         "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                        (("6"
                                                                          (name-replace
                                                                           "re2ac2"
                                                                           "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                                  val(re2ac1)`2)")
                                                                          (("6"
                                                                            (apply-extensionality)
                                                                            (("6"
                                                                              (hide
                                                                               1)
                                                                              (("6"
                                                                                (skolem
                                                                                 -9
                                                                                 "N2")
                                                                                (("6"
                                                                                  (flatten
                                                                                   -9)
                                                                                  (("6"
                                                                                    (expand
                                                                                     "compatible_pairs_on?"
                                                                                     -10)
                                                                                    (("6"
                                                                                      (expand
                                                                                       "eval_ACExpr_Env"
                                                                                       -10)
                                                                                      (("6"
                                                                                        (inst
                                                                                         -10
                                                                                         0)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -10
                                                                                           "f_ctxt0`n")
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -10)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -10)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -7
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -9
                                                                                                   :dir
                                                                                                   RL
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -4
                                                                                                     "N1")
                                                                                                    (("1"
                                                                                                      (flatten
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "compatible_pairs_on?"
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           0)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -5
                                                                                                             "f_ctxt0`n")
                                                                                                            (("1"
                                                                                                              (flatten
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "eval_ACExpr_Env"
                                                                                                                   -5)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -4
                                                                                                                       :dir
                                                                                                                       RL
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "ean_in_ebi")
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "ean_in_ebi"
                                                                                                                           ("N"
                                                                                                                            "N2"))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "##")
                                                                                                                            (("1"
                                                                                                                              (flatten
                                                                                                                               (-1
                                                                                                                                -2))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "ub_aff")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "lb_aff")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "rel")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "realorder?")
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "neg_rel")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "neg_rel")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "neg_rel")
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("4"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("4"
                                                                                                                                            (expand
                                                                                                                                             "neg_rel")
                                                                                                                                            (("4"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "length")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "compatible_pairs?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (lb_aff const-decl "real" affine nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval_ac_noise const-decl "real" affine nil)
    (ub_aff const-decl "real" affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (ean_in_ebi formula-decl nil affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (neg_rel const-decl "bool" real_orders reals))
   shostak)
  (BREL_pre_preservation-2 "" 3639393079
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BREL" -2)
          (("" (lift-if -2)
            (("" (assert)
              (("" (split -2)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (expand "beval_vs_BREL")
                      (("1" (expand "BEval_Box_BREL" 1 1)
                        (("1" (lift-if 1)
                          (("1" (assert)
                            (("1" (expand "BEval_Box_BREL" 1 1)
                              (("1" (lift-if 1)
                                (("1" (assert)
                                  (("1" (expand "BEval_Box_BREL" 1 1)
                                    (("1" (lift-if 1)
                                      (("1"
                                        (expand "BEval_Box_BREL" 1 1)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (lemma
                                                         "RE2AC_EvalwCache_eq")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "val(g_ctxt0)`box"
                                                           "op1"
                                                           "f_ctxt0`vs"
                                                           "val(g_ctxt0)`nextid"
                                                           "val(g_ctxt0)`cache")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (lemma
                                                               "RE2AC_EvalwCache_eq")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "val(g_ctxt0)`box"
                                                                 "op2"
                                                                 "f_ctxt0`vs"
                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                val(g_ctxt0)`cache))`1"
                                                                 "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                val(g_ctxt0)`cache))`2")
                                                                (("1"
                                                                  (reveal 1)
                                                                  (("1"
                                                                    (reveal
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "BEval_Box_BREL"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (typepred
                                                                               "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                        val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                        val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (split
                                                                                           3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "compatible_pairs?")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              -18
                                                                                              -11
                                                                                              -12))
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "iacniig_RE2AC_preservation")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "val(g_ctxt0)`box"
                                                                                                   "f_ctxt0`vs"
                                                                                                   "op1"
                                                                                                   "first_added_idx"
                                                                                                   "val(g_ctxt0)`nextid"
                                                                                                   "val(g_ctxt0)`cache")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "iacniig_RE2AC_preservation")
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "val(g_ctxt0)`box"
                                                                                                         "f_ctxt0`vs"
                                                                                                         "op2"
                                                                                                         "first_added_idx"
                                                                                                         "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                         "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -6
                                                                                                           -11)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              -19
                                                                                              -11
                                                                                              -12
                                                                                              -4
                                                                                              -9))
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "nicniig_RE2AC_preservation")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "val(g_ctxt0)`box"
                                                                                                 "f_ctxt0`vs"
                                                                                                 "op1"
                                                                                                 "first_added_idx"
                                                                                                 "val(g_ctxt0)`nextid"
                                                                                                 "val(g_ctxt0)`cache")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (lemma
                                                                                                     "nicniig_RE2AC_preservation")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "val(g_ctxt0)`box"
                                                                                                       "f_ctxt0`vs"
                                                                                                       "op2"
                                                                                                       "first_added_idx"
                                                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              -20
                                                                                              -11
                                                                                              -12
                                                                                              -4
                                                                                              -9))
                                                                                            (("5"
                                                                                              (lemma
                                                                                               "vrcib_RE2AC_preservation")
                                                                                              (("5"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "val(g_ctxt0)`box"
                                                                                                 "f_ctxt0`vs"
                                                                                                 "op1"
                                                                                                 "val(g_ctxt0)`nextid"
                                                                                                 "val(g_ctxt0)`cache")
                                                                                                (("5"
                                                                                                  (assert)
                                                                                                  (("5"
                                                                                                    (lemma
                                                                                                     "vrcib_RE2AC_preservation")
                                                                                                    (("5"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "val(g_ctxt0)`box"
                                                                                                       "f_ctxt0`vs"
                                                                                                       "op2"
                                                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                      (("5"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("6"
                                                                                            (name-replace
                                                                                             "re2ac1"
                                                                                             "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                      val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                                            (("6"
                                                                                              (name-replace
                                                                                               "re2ac2"
                                                                                               "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                      val(re2ac1)`2)")
                                                                                              (("6"
                                                                                                (skolem
                                                                                                 -8
                                                                                                 "N2")
                                                                                                (("6"
                                                                                                  (flatten
                                                                                                   -8)
                                                                                                  (("6"
                                                                                                    (expand
                                                                                                     "compatible_pairs_on?"
                                                                                                     -9)
                                                                                                    (("6"
                                                                                                      (expand
                                                                                                       "eval_ACExpr_Env"
                                                                                                       -9)
                                                                                                      (("6"
                                                                                                        (inst
                                                                                                         -9
                                                                                                         0)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -9
                                                                                                           "f_ctxt0`n")
                                                                                                          (("1"
                                                                                                            (flatten
                                                                                                             -9)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               -9)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -6
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -8
                                                                                                                   :dir
                                                                                                                   RL
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (skolem
                                                                                                                     -3
                                                                                                                     "N1")
                                                                                                                    (("1"
                                                                                                                      (flatten
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "compatible_pairs_on?"
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           0)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "f_ctxt0`n")
                                                                                                                            (("1"
                                                                                                                              (flatten
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "eval_ACExpr_Env"
                                                                                                                                   -4)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     :hide?
                                                                                                                                     t)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -3
                                                                                                                                       :dir
                                                                                                                                       RL
                                                                                                                                       :hide?
                                                                                                                                       t)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "ean_in_ebi")
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "ean_in_ebi"
                                                                                                                                           ("N"
                                                                                                                                            "N2"))
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "##")
                                                                                                                                            (("1"
                                                                                                                                              (flatten
                                                                                                                                               (-1
                                                                                                                                                -2))
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "ub_aff")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "lb_aff")
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if
                                                                                                                                                       -5)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -5)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (typepred
                                                                                                                                                                 "rel")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "realorder?")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (flatten
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "rel")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "realorder?")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("4"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("4"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (split
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "rel")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "realorder?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("4"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("4"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "rel")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "realorder?")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("4"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("4"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (1
                                                                                                            4))
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "compatible_pairs?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "RE2AC_EvalwCache_eq")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "val(g_ctxt0)`box"
                                                         "op1"
                                                         "f_ctxt0`vs"
                                                         "val(g_ctxt0)`nextid"
                                                         "val(g_ctxt0)`cache")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (lemma
                                                             "RE2AC_EvalwCache_eq")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "val(g_ctxt0)`box"
                                                               "op2"
                                                               "f_ctxt0`vs"
                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`1"
                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`2")
                                                              (("1"
                                                                (expand
                                                                 "BEval_Box_BREL"
                                                                 2)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (name-replace
                                                                       "re2ac1"
                                                                       "RE2AC
                                             (op1,
                                              val(g_ctxt0)`box,
                                              f_ctxt0`vs,
                                              val(g_ctxt0)`nextid,
                                              val(g_ctxt0)`cache)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "re2ac2"
                                                                         "RE2AC
                                             (op2,
                                              val(g_ctxt0)`box,
                                              f_ctxt0`vs,
                                              val(re2ac1)`1,
                                              val(re2ac1)`2)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "compatible_pairs?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "BEval_Box_BREL" 2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Env type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (lb_aff const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (last_idx const-decl "int" indexed_list structures)
    (next_idx const-decl "nat" affine nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (powvar? const-decl "bool" affine_expr nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (neg_rel const-decl "bool" real_orders reals)
    (neg_rel_order application-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ub_aff const-decl "real" affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (ean_in_ebi formula-decl nil affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil))
   shostak)
  (BREL_pre_preservation-1 nil 3639245066
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BREL" -2)
          (("" (lift-if -2)
            (("" (assert)
              (("" (split -2)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (expand "beval_vs_BREL")
                      (("1" (expand "BEval_Box_BREL" 1 1)
                        (("1" (lift-if 1)
                          (("1" (assert)
                            (("1" (expand "BEval_Box_BREL" 1 1)
                              (("1" (lift-if 1)
                                (("1" (assert)
                                  (("1" (expand "BEval_Box_BREL" 1 1)
                                    (("1" (lift-if 1)
                                      (("1"
                                        (expand "BEval_Box_BREL" 1 1)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (lemma
                                                       "RE2AC_EvalwCache_eq")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "val(g_ctxt0)`box"
                                                         "op1"
                                                         "f_ctxt0`vs"
                                                         "val(g_ctxt0)`nextid"
                                                         "val(g_ctxt0)`cache")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (lemma
                                                             "RE2AC_EvalwCache_eq")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "val(g_ctxt0)`box"
                                                               "op2"
                                                               "f_ctxt0`vs"
                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                        val(g_ctxt0)`cache))`1"
                                                               "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                        val(g_ctxt0)`cache))`2")
                                                              (("1"
                                                                (reveal 1)
                                                                (("1"
                                                                  (reveal -1)
                                                                  (("1"
                                                                    (expand
                                                                     "BEval_Box_BREL"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (typepred
                                                                             "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                              val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                              val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (split
                                                                                         3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "compatible_pairs?")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            -18
                                                                                            -11
                                                                                            -12))
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "iacniig_RE2AC_preservation")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "val(g_ctxt0)`box"
                                                                                                 "f_ctxt0`vs"
                                                                                                 "op1"
                                                                                                 "first_added_idx"
                                                                                                 "val(g_ctxt0)`nextid"
                                                                                                 "val(g_ctxt0)`cache")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (lemma
                                                                                                     "iacniig_RE2AC_preservation")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "val(g_ctxt0)`box"
                                                                                                       "f_ctxt0`vs"
                                                                                                       "op2"
                                                                                                       "first_added_idx"
                                                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                       "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         -6
                                                                                                         -11)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            -19
                                                                                            -11
                                                                                            -12
                                                                                            -4
                                                                                            -9))
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "nicniig_RE2AC_preservation")
                                                                                            (("4"
                                                                                              (inst
                                                                                               -1
                                                                                               "val(g_ctxt0)`box"
                                                                                               "f_ctxt0`vs"
                                                                                               "op1"
                                                                                               "first_added_idx"
                                                                                               "val(g_ctxt0)`nextid"
                                                                                               "val(g_ctxt0)`cache")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                (("4"
                                                                                                  (lemma
                                                                                                   "nicniig_RE2AC_preservation")
                                                                                                  (("4"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "val(g_ctxt0)`box"
                                                                                                     "f_ctxt0`vs"
                                                                                                     "op2"
                                                                                                     "first_added_idx"
                                                                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            -20
                                                                                            -11
                                                                                            -12
                                                                                            -4
                                                                                            -9))
                                                                                          (("5"
                                                                                            (lemma
                                                                                             "vrcib_RE2AC_preservation")
                                                                                            (("5"
                                                                                              (inst
                                                                                               -1
                                                                                               "val(g_ctxt0)`box"
                                                                                               "f_ctxt0`vs"
                                                                                               "op1"
                                                                                               "val(g_ctxt0)`nextid"
                                                                                               "val(g_ctxt0)`cache")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                (("5"
                                                                                                  (lemma
                                                                                                   "vrcib_RE2AC_preservation")
                                                                                                  (("5"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "val(g_ctxt0)`box"
                                                                                                     "f_ctxt0`vs"
                                                                                                     "op2"
                                                                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1"
                                                                                                     "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2")
                                                                                                    (("5"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "compatible_pairs?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "BEval_Box_BREL" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "BEval_Box_BREL" 2 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "BEval_Box_BREL"
                                                     2)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   shostak))
 (BLETIN_RealExpr_ini_pre_preservation_TCC1 0
  (BLETIN_RealExpr_ini_pre_preservation_TCC1-1 nil 3638637695
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (BLETIN_RealExpr_ini_pre_preservation subtype "affine_boolexpr.blet"
    "(interval_expr.realexpr?)")))
 (BLETIN_RealExpr_ini_pre_preservation 0
  (BLETIN_RealExpr_ini_pre_preservation-6 "" 3789916837
   ("" (skeep*)
    (("" (expand "beval_vs_BLETIN_RealExpr_ini")
      (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "p_inclusion_pre")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (expand "vars_in_box?")
                              (("1" (skolem 1 "i")
                                (("1" (case "i < length(val(gct0)`box)")
                                  (("1" (use "nth_append[Interval]")
                                    (("1" (assert)
                                      (("1"
                                        (replaces -1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "i = length(val(gct0)`box)")
                                    (("1" (hide 1)
                                      (("1"
                                        (case
                                         "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (name-replace
                                               "evalw"
                                               "(Eval_wCache(blet)
                                                                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                              (("1"
                                                (case
                                                 "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                                                                                       length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "evalw")
                                                    (("1"
                                                      (use
                                                       "containment_interval")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "containment")
                                                            (("1"
                                                              (lemma
                                                               "EvalwCache_inclusion_")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "eval_ACExpr_Env")
                                                                  (("1"
                                                                    (inst?
                                                                     -1
                                                                     :where
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "i")
                                      (("2"
                                        (use "length_append[Interval]")
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (expand "length" -1 2)
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "length_append[Interval]")
                              (("2" (assert) nil nil)) nil)
                             ("3" (lemma "cp_box_vs_cache_expansion")
                              (("3"
                                (inst -1 "val(gct0)`box" "fct0`vs"
                                 "first_added_idx"
                                 "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`1"
                                 "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2"
                                 "0"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1"
                                 "fct0`n"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3")
                                (("1" (assert)
                                  (("1" (expand "nth" -1)
                                    (("1" (split -1)
                                      (("1"
                                        (expand "eval_ACExpr_Env")
                                        (("1"
                                          (expand "last_idx_in_box")
                                          (("1"
                                            (typepred
                                             "Eval_wCache(blet)
                                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                                            val(gct0)`cache)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("2"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred
                                                 "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skeep -3)
                                                      (("2"
                                                        (inst 2 "N")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "compatible_pairs_on?"
                                                             -4)
                                                            (("2"
                                                              (inst -4 "0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "fct0`n")
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("3"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (use
                                                 "iacniig_RE2AC_preservation")
                                                (("3"
                                                  (assert)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("4"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("4"
                                              (replaces -1)
                                              (("4"
                                                (use
                                                 "vrcib_RE2AC_preservation")
                                                (("4"
                                                  (assert)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("5"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("5"
                                              (replaces -1)
                                              (("5"
                                                (use
                                                 "nicniig_RE2AC_preservation")
                                                (("5"
                                                  (assert)
                                                  (("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "length" 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide 2)
                                  (("3"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("3" (assert) nil nil)) nil))
                                  nil)
                                 ("4" (hide 2)
                                  (("4"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("4" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("4"
                              (typepred
                               "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                              (("4" (assert) nil nil)) nil)
                             ("5"
                              (case "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`2,
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`3),
                                                                                  val(Eval_wCache(blet)
                                                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                                                  val(gct0)`cache))`2),
                                                                             val(gct0)`box,
                                                                             first_added_idx)")
                              (("1" (use "iacniig_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (lemma "RE2AC_EvalwCache_eq")
                                  (("2"
                                    (inst -1 "val(gct0)`box" "blet" "fct0`vs"
                                     "val(gct0)`nextid" "val(gct0)`cache")
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand
                                         "idxs_ac_cache_not_in_idx_gap"
                                         1)
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case "i=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (use
                                                   "iacniig_RE2AC_preservation")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "idxs_ac_cache_not_in_idx_gap"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "0")
                                                          (("1"
                                                            (expand "nth" -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "iacniig_RE2AC_preservation")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "idxs_ac_cache_not_in_idx_gap"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i-1")
                                                        (("2"
                                                          (typepred "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6"
                              (case "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`2,
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`3),
                                                                                 val(Eval_wCache(blet)
                                                                                                (val(gct0)`box, val(gct0)`nextid,
                                                                                                 val(gct0)`cache))`2),
                                                                           val(gct0)`box,
                                                                            first_added_idx)")
                              (("1" (use "nicniig_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (lemma "RE2AC_EvalwCache_eq")
                                  (("2"
                                    (inst -1 "val(gct0)`box" "blet" "fct0`vs"
                                     "val(gct0)`nextid" "val(gct0)`cache")
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand
                                         "new_idxs_cache_not_in_idx_gap"
                                         1)
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case "i=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (use
                                                   "nicniig_RE2AC_preservation")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "new_idxs_cache_not_in_idx_gap"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "0")
                                                          (("1"
                                                            (expand "nth" -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth" 2 1)
                                              (("2"
                                                (expand "nth" 2 3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "nicniig_RE2AC_preservation")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "new_idxs_cache_not_in_idx_gap"
                                                         -1)
                                                        (("2"
                                                          (inst -1 "i-1")
                                                          (("2"
                                                            (typepred "i")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (expand "varidxs_re_cache_in_box" 1)
                              (("7" (skeep)
                                (("7" (use "length_append[Interval]")
                                  (("7" (replaces -1)
                                    (("7" (expand "length" 1 2)
                                      (("7"
                                        (expand "length" 1 2)
                                        (("7"
                                          (case "i=0")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "nth" 1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand "last_idx_in_box")
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth" 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "RE2AC_EvalwCache_eq")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "val(gct0)`box"
                                                   "blet"
                                                   "fct0`vs"
                                                   "val(gct0)`nextid"
                                                   "val(gct0)`cache")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (use
                                                       "vrcib_RE2AC_preservation")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "varidxs_re_cache_in_box"
                                                             -1)
                                                            (("2"
                                                              (inst -1 "i-1")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "subexpr")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       -3)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((beval_vs_BLETIN_RealExpr_ini const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (i skolem-const-decl
       "below(length(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                   car(val(Eval_wCache(blet)
                                      (val(gct0)`box,
                                       val(gct0)`nextid,
                                       val(gct0)`cache))`2)`2,
                   car(val(Eval_wCache(blet)
                                      (val(gct0)`box,
                                       val(gct0)`nextid,
                                       val(gct0)`cache))`2)`3),
                  val(Eval_wCache(blet)
                                 (val(gct0)`box, val(gct0)`nextid,
                                  val(gct0)`cache))`2)))" affine_boolexpr nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (i skolem-const-decl
       "below(length(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`2,
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`3),
                  val(RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                            val(gct0)`cache))`2)))" affine_boolexpr nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (i skolem-const-decl
       "below(length(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`2,
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`3),
                  val(RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                            val(gct0)`cache))`2)))" affine_boolexpr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cp_box_vs_cache_expansion formula-decl nil affine_expr_Eval_fnd_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (fct0 skolem-const-decl "ContextData_beval_vs" affine_boolexpr nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (initial_bexpr skolem-const-decl "BoolExpr" affine_boolexpr nil)
    (initial_box skolem-const-decl "Box" affine_boolexpr nil)
    (first_added_idx skolem-const-decl
     "upfrom(first_noise_idx_available_box(initial_bexpr, initial_box))"
     affine_boolexpr nil)
    (gct0 skolem-const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (blet skolem-const-decl "RealExpr" affine_boolexpr nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (below type-eq-decl nil naturalnumbers nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil) (Box type-eq-decl nil box interval_arith)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil) (<= const-decl "bool" reals nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (/= const-decl "boolean" notequal nil)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (Add const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (containment_interval formula-decl nil affine nil)
    (EvalwCache_inclusion_ formula-decl nil affine_expr_Eval nil)
    (containment const-decl "bool" affine nil)
    (evalw skolem-const-decl
     "{result: Maybe[[nat, (correct_cache?(val(gct0)`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = blet)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, val(gct0)`cache))
     AND (val(result)`1 >= val(gct0)`nextid)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" affine_boolexpr nil)
    (below type-eq-decl nil nat_types nil)
    (eval def-decl "real" interval_expr interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (BEval_Box_BLETIN_RealExpr_ini const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (BLETIN_RealExpr_ini_pre_preservation-5 "" 3646565348
   ("" (skeep*)
    (("" (expand "beval_vs_BLETIN_RealExpr_ini")
      (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "p_inclusion_pre")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (expand "vars_in_box?")
                              (("1" (skolem 1 "i")
                                (("1" (case "i < length(val(gct0)`box)")
                                  (("1" (replaces -1)
                                    (("1" (use "nth_append[Interval]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "i = length(val(gct0)`box)")
                                    (("1" (hide 1)
                                      (("1"
                                        (case
                                         "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (name-replace
                                               "evalw"
                                               "(Eval_wCache(blet)
                                                                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                              (("1"
                                                (case
                                                 "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                                                                                       length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "evalw")
                                                    (("1"
                                                      (use
                                                       "containment_interval")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "containment")
                                                            (("1"
                                                              (lemma
                                                               "EvalwCache_inclusion_")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "eval_ACExpr_Env")
                                                                  (("1"
                                                                    (inst?
                                                                     -1
                                                                     :where
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "i")
                                      (("2"
                                        (use "length_append[Interval]")
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (expand "length" -1 2)
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "length_append[Interval]")
                              (("2" (assert) nil nil)) nil)
                             ("3" (lemma "cp_box_vs_cache_expansion")
                              (("3"
                                (inst -1 "val(gct0)`box" "fct0`vs"
                                 "first_added_idx"
                                 "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`1"
                                 "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2"
                                 "0"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1"
                                 "fct0`n"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3")
                                (("1" (assert)
                                  (("1" (expand "nth" -1)
                                    (("1" (split -1)
                                      (("1"
                                        (expand "eval_ACExpr_Env")
                                        (("1"
                                          (expand "last_idx_in_box")
                                          (("1"
                                            (typepred
                                             "Eval_wCache(blet)
                                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                                            val(gct0)`cache)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("2"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred
                                                 "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skeep -3)
                                                      (("2"
                                                        (inst 2 "N")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "compatible_pairs_on?"
                                                             -4)
                                                            (("2"
                                                              (inst -4 "0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "fct0`n")
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("3"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (use
                                                 "iacniig_RE2AC_preservation")
                                                (("3"
                                                  (assert)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("4"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("4"
                                              (replaces -1)
                                              (("4"
                                                (use
                                                 "vrcib_RE2AC_preservation")
                                                (("4"
                                                  (assert)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5"
                                          (lemma "RE2AC_EvalwCache_eq")
                                          (("5"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "blet"
                                             "fct0`vs"
                                             "val(gct0)`nextid"
                                             "val(gct0)`cache")
                                            (("5"
                                              (replaces -1)
                                              (("5"
                                                (use
                                                 "nicniig_RE2AC_preservation")
                                                (("5"
                                                  (assert)
                                                  (("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "length" 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide 2)
                                  (("3"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("3" (assert) nil nil)) nil))
                                  nil)
                                 ("4" (hide 2)
                                  (("4"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("4" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("4"
                              (typepred
                               "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                              (("4" (assert) nil nil)) nil)
                             ("5"
                              (case "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`2,
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`3),
                                                                                  val(Eval_wCache(blet)
                                                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                                                  val(gct0)`cache))`2),
                                                                             val(gct0)`box,
                                                                             first_added_idx)")
                              (("1" (use "iacniig_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (lemma "RE2AC_EvalwCache_eq")
                                  (("2"
                                    (inst -1 "val(gct0)`box" "blet" "fct0`vs"
                                     "val(gct0)`nextid" "val(gct0)`cache")
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand
                                         "idxs_ac_cache_not_in_idx_gap"
                                         1)
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case "i=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (use
                                                   "iacniig_RE2AC_preservation")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "idxs_ac_cache_not_in_idx_gap"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "0")
                                                          (("1"
                                                            (expand "nth" -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "iacniig_RE2AC_preservation")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "idxs_ac_cache_not_in_idx_gap"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i-1")
                                                        (("2"
                                                          (typepred "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6"
                              (case "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`2,
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`3),
                                                                                 val(Eval_wCache(blet)
                                                                                                (val(gct0)`box, val(gct0)`nextid,
                                                                                                 val(gct0)`cache))`2),
                                                                           val(gct0)`box,
                                                                            first_added_idx)")
                              (("1" (use "nicniig_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (lemma "RE2AC_EvalwCache_eq")
                                  (("2"
                                    (inst -1 "val(gct0)`box" "blet" "fct0`vs"
                                     "val(gct0)`nextid" "val(gct0)`cache")
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand
                                         "new_idxs_cache_not_in_idx_gap"
                                         1)
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case "i=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (use
                                                   "nicniig_RE2AC_preservation")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "new_idxs_cache_not_in_idx_gap"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "0")
                                                          (("1"
                                                            (expand "nth" -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth" 2 1)
                                              (("2"
                                                (expand "nth" 2 3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "nicniig_RE2AC_preservation")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "new_idxs_cache_not_in_idx_gap"
                                                         -1)
                                                        (("2"
                                                          (inst -1 "i-1")
                                                          (("2"
                                                            (typepred "i")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (expand "varidxs_re_cache_in_box" 1)
                              (("7" (skeep)
                                (("7" (use "length_append[Interval]")
                                  (("1" (replaces -1)
                                    (("1" (expand "length" 1 2)
                                      (("1"
                                        (expand "length" 1 2)
                                        (("1"
                                          (case "i=0")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "nth" 1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand "last_idx_in_box")
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth" 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "RE2AC_EvalwCache_eq")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "val(gct0)`box"
                                                   "blet"
                                                   "fct0`vs"
                                                   "val(gct0)`nextid"
                                                   "val(gct0)`cache")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (use
                                                       "vrcib_RE2AC_preservation")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "varidxs_re_cache_in_box"
                                                             -1)
                                                            (("2"
                                                              (inst -1 "i-1")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "subexpr")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       -3)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (cp_box_vs_cache_expansion formula-decl nil affine_expr_Eval_fnd_props
     nil)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (nth_append formula-decl nil more_list_props structures)
    (Add const-decl "Interval" interval interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (containment_interval formula-decl nil affine nil)
    (EvalwCache_inclusion_ formula-decl nil affine_expr_Eval nil)
    (containment const-decl "bool" affine nil)
    (eval def-decl "real" interval_expr interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (Env type-eq-decl nil affine_box nil))
   nil)
  (BLETIN_RealExpr_ini_pre_preservation-4 "" 3646565327
   ("" (skeep*)
    (("" (expand "beval_vs_BLETIN_RealExpr_ini")
      (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "p_inclusion_pre")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (expand "vars_in_box?")
                              (("1" (skolem 1 "i")
                                (("1" (case "i < length(val(gct0)`box)")
                                  (("1" (replaces -1)
                                    (("1" (use "nth_append[Interval]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "i = length(val(gct0)`box)")
                                    (("1" (hide 1)
                                      (("1"
                                        (case
                                         "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (name-replace
                                               "evalw"
                                               "(Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                              (("1"
                                                (case
                                                 "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                                                 length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "evalw")
                                                    (("1"
                                                      (use
                                                       "containment_interval")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "containment")
                                                            (("1"
                                                              (lemma
                                                               "EvalwCache_inclusion_")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "eval_ACExpr_Env")
                                                                  (("1"
                                                                    (inst?
                                                                     -1
                                                                     :where
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "i")
                                      (("2"
                                        (use "length_append[Interval]")
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (expand "length" -1 2)
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "length_append[Interval]")
                              (("2" (assert) nil nil)) nil)
                             ("3" (lemma "cp_box_vs_cache_expansion")
                              (("3"
                                (inst -1 "val(gct0)`box" "fct0`vs"
                                 "first_added_idx" "val(gct0)`nextid"
                                 "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`2"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1"
                                 "fct0`n"
                                 "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3")
                                (("1" (assert)
                                  (("1" (split -1)
                                    (("1" (expand "eval_ACExpr_Env")
                                      (("1"
                                        (expand "last_idx_in_box")
                                        (("1"
                                          (typepred
                                           "Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid,
                                                                    val(gct0)`cache)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma "RE2AC_EvalwCache_eq")
                                        (("2"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "blet"
                                           "fct0`vs"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache")
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (typepred
                                               "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (skeep -3)
                                                    (("2"
                                                      (inst 2 "N")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "compatible_pairs_on?"
                                                           -4)
                                                          (("2"
                                                            (inst -4 "0")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -4)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "fct0`n")
                                                                (("1"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide 2)
                                      (("3"
                                        (lemma "RE2AC_EvalwCache_eq")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "blet"
                                           "fct0`vs"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache")
                                          (("3"
                                            (replaces -1)
                                            (("3"
                                              (use
                                               "iacniig_RE2AC_preservation")
                                              (("3"
                                                (assert)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (hide 2)
                                      (("4"
                                        (lemma "RE2AC_EvalwCache_eq")
                                        (("4"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "blet"
                                           "fct0`vs"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache")
                                          (("4"
                                            (replaces -1)
                                            (("4"
                                              (use "vrcib_RE2AC_preservation")
                                              (("4"
                                                (assert)
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5" (hide 2)
                                      (("5"
                                        (lemma "RE2AC_EvalwCache_eq")
                                        (("5"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "blet"
                                           "fct0`vs"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache")
                                          (("5"
                                            (replaces -1)
                                            (("5"
                                              (use
                                               "nicniig_RE2AC_preservation")
                                              (("5"
                                                (assert)
                                                (("5" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "idxs_bounded")
                                          (("2"
                                            (name-replace
                                             "nwcache"
                                             "val[[nat, (correct_cache?(val(gct0)`box))]]
                             (Eval_wCache(blet)
                                         (val
                                              [[# box: Box,
                                                  nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                  cache:
                                                    {c_: (correct_cache?(box)) |
                                                             idxs_bounded(nextid)(c_)},
                                                  nxtlcl: above(last_idx_in_box(box)),
                                                  result: Maybe[bool] #]]
                                              (gct0)`box,
                                          val
                                              [[# box: Box,
                                                  nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                  cache:
                                                    {c_: (correct_cache?(box)) |
                                                             idxs_bounded(nextid)(c_)},
                                                  nxtlcl: above(last_idx_in_box(box)),
                                                  result: Maybe[bool] #]]
                                              (gct0)`nextid,
                                          val
                                              [[# box: Box,
                                                  nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                  cache:
                                                    {c_: (correct_cache?(box)) |
                                                             idxs_bounded(nextid)(c_)},
                                                  nxtlcl: above(last_idx_in_box(box)),
                                                  result: Maybe[bool] #]]
                                              (gct0)`cache))`2")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -4 "i")
                                                (("2"
                                                  (assert)
                                                  (("2" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4"
                              (typepred
                               "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                              (("4" (assert) nil nil)) nil)
                             ("5"
                              (case "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                         car(val(Eval_wCache(blet)
                                                                            (val(gct0)`box, val(gct0)`nextid,
                                                                             val(gct0)`cache))`2)`2,
                                                         car(val(Eval_wCache(blet)
                                                                            (val(gct0)`box, val(gct0)`nextid,
                                                                             val(gct0)`cache))`2)`3),
                                                        val(Eval_wCache(blet)
                                                                       (val(gct0)`box, val(gct0)`nextid,
                                                                        val(gct0)`cache))`2),
                                                   val(gct0)`box,
                                                   first_added_idx)")
                              (("1" (use "iacniig_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (lemma "RE2AC_EvalwCache_eq")
                                  (("2"
                                    (inst -1 "val(gct0)`box" "blet" "fct0`vs"
                                     "val(gct0)`nextid" "val(gct0)`cache")
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand
                                         "idxs_ac_cache_not_in_idx_gap"
                                         1)
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case "i=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (use
                                                   "iacniig_RE2AC_preservation")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "idxs_ac_cache_not_in_idx_gap"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "0")
                                                          (("1"
                                                            (expand "nth" -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "iacniig_RE2AC_preservation")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "idxs_ac_cache_not_in_idx_gap"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i-1")
                                                        (("2"
                                                          (typepred "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6"
                              (case "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                        car(val(Eval_wCache(blet)
                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                            val(gct0)`cache))`2)`2,
                                                        car(val(Eval_wCache(blet)
                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                            val(gct0)`cache))`2)`3),
                                                       val(Eval_wCache(blet)
                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                       val(gct0)`cache))`2),
                                                 val(gct0)`box,
                                                  first_added_idx)")
                              (("1" (use "nicniig_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (postpone) nil nil))
                              nil)
                             ("7"
                              (case "varidxs_re_cache_in_box(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                car(val(Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid,
                                                                    val(gct0)`cache))`2)`2,
                                                car(val(Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid,
                                                                    val(gct0)`cache))`2)`3),
                                               val(Eval_wCache(blet)
                                                              (val(gct0)`box, val(gct0)`nextid,
                                                               val(gct0)`cache))`2),
                                          val(gct0)`box)")
                              (("1" (use "vrcib_box_growing_preservation")
                                (("1" (assert) nil nil)) nil)
                               ("2" (postpone) nil nil))
                              nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (BLETIN_RealExpr_ini_pre_preservation-3 "" 3646564213
   ("" (skeep*)
    (("" (expand "beval_vs_BLETIN_RealExpr_ini")
      (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "p_inclusion_pre")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (with-labels
                             (case "varidxs_re_cache_in_box(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`2,
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`3),
                                   val(Eval_wCache(blet)
                                                  (val(gct0)`box, val(gct0)`nextid,
                                                   val(gct0)`cache))`2),
                              val(gct0)`box)")
                             "vrcib_extended_cache")
                            (("1" (hide "vrcib_extended_cache")
                              (("1"
                                (with-labels
                                 (case "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`2,
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`3),
                                         val(Eval_wCache(blet)
                                                        (val(gct0)`box, val(gct0)`nextid,
                                                         val(gct0)`cache))`2),
                                   val(gct0)`box,
                                    first_added_idx)")
                                 "nicniig_extended_cache")
                                (("1" (hide "nicniig_extended_cache")
                                  (("1"
                                    (with-labels
                                     (case "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`2,
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`3),
                                        val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2),
                                   val(gct0)`box,
                                   first_added_idx)")
                                     "iacniig_extended_cache")
                                    (("1" (hide "iacniig_extended_cache")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "vars_in_box?")
                                          (("1"
                                            (skolem 1 "i")
                                            (("1"
                                              (case
                                               "i < length(val(gct0)`box)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (use "nth_append[Interval]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "i = length(val(gct0)`box)")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (case
                                                     "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (name-replace
                                                           "evalw"
                                                           "(Eval_wCache(blet)
                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                                          (("1"
                                                            (case
                                                             "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                        length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (expand
                                                                 "evalw")
                                                                (("1"
                                                                  (use
                                                                   "containment_interval")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (expand
                                                                         "containment")
                                                                        (("1"
                                                                          (lemma
                                                                           "EvalwCache_inclusion_")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "eval_ACExpr_Env")
                                                                              (("1"
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "more_list_props[Interval].nth_append")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("2"
                                                      (replace -1 :hide? t)
                                                      (("2"
                                                        (expand "length" -1 2)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "length_append[Interval]")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (lemma "cp_box_vs_cache_expansion")
                                          (("3"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "fct0`vs"
                                             "first_added_idx"
                                             "first_added_idx+1"
                                             "val(Eval_wCache(blet)
                                                                          (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2"
                                             "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`2"
                                             "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1"
                                             "fct0`n"
                                             "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (expand "eval_ACExpr_Env")
                                                  (("1"
                                                    (expand "last_idx_in_box")
                                                    (("1"
                                                      (typepred
                                                       "Eval_wCache(blet)
                                                 (val(gct0)`box, val(gct0)`nextid,
                                                  val(gct0)`cache)")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "RE2AC_EvalwCache_eq")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "val(gct0)`box"
                                                       "blet"
                                                       "fct0`vs"
                                                       "val(gct0)`nextid"
                                                       "val(gct0)`cache")
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (typepred
                                                           "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (skeep -3)
                                                                (("2"
                                                                  (inst 2 "N")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "compatible_pairs_on?"
                                                                       -4)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "fct0`n")
                                                                            (("1"
                                                                              (flatten)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "RE2AC_EvalwCache_eq")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "val(gct0)`box"
                                                       "blet"
                                                       "fct0`vs"
                                                       "val(gct0)`nextid"
                                                       "val(gct0)`cache")
                                                      (("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (use
                                                           "iacniig_RE2AC_preservation")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 2)
                                                  (("4"
                                                    (lemma
                                                     "RE2AC_EvalwCache_eq")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "val(gct0)`box"
                                                       "blet"
                                                       "fct0`vs"
                                                       "val(gct0)`nextid"
                                                       "val(gct0)`cache")
                                                      (("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (use
                                                           "vrcib_RE2AC_preservation")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide 2)
                                                  (("5"
                                                    (lemma
                                                     "RE2AC_EvalwCache_eq")
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "val(gct0)`box"
                                                       "blet"
                                                       "fct0`vs"
                                                       "val(gct0)`nextid"
                                                       "val(gct0)`cache")
                                                      (("5"
                                                        (replaces -1)
                                                        (("5"
                                                          (use
                                                           "nicniig_RE2AC_preservation")
                                                          (("5"
                                                            (assert)
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                                (("2"
                                                  (assert)
                                                  (("2" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred
                                           "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                          (("4" (assert) nil nil))
                                          nil)
                                         ("5"
                                          (reveal "iacniig_extended_cache")
                                          (("5"
                                            (use
                                             "iacniig_box_growing_preservation")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (reveal "nicniig_extended_cache")
                                          (("6"
                                            (use
                                             "nicniig_box_growing_preservation")
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (reveal "vrcib_extended_cache")
                                          (("7"
                                            (use
                                             "vrcib_box_growing_preservation")
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("8" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma "RE2AC_EvalwCache_eq")
                                        (("2"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "blet"
                                           "fct0`vs"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache")
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand
                                               "idxs_ac_cache_not_in_idx_gap"
                                               1)
                                              (("2"
                                                (skeep 1)
                                                (("2"
                                                  (case "i=0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "nth" 1)
                                                      (("1"
                                                        (use
                                                         "iacniig_RE2AC_preservation")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "idxs_ac_cache_not_in_idx_gap"
                                                               -1)
                                                              (("1"
                                                                (inst -1 "0")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "nth" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "iacniig_RE2AC_preservation")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "idxs_ac_cache_not_in_idx_gap"
                                                             -1)
                                                            (("2"
                                                              (inst -1 "i-1")
                                                              (("2"
                                                                (typepred "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide 2)
                                      (("3"
                                        (typepred
                                         "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (postpone) nil nil)) nil)
                                 ("3" (hide 2)
                                  (("3"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (postpone) nil nil)) nil)
                             ("3"
                              (typepred
                               "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (BLETIN_RealExpr_ini_pre_preservation-2 "" 3646497667
   ("" (skeep*)
    (("" (expand "beval_vs_BLETIN_RealExpr_ini")
      (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "p_inclusion_pre")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (with-labels
                             (case "varidxs_re_cache_in_box(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`2,
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`3),
                                   val(Eval_wCache(blet)
                                                  (val(gct0)`box, val(gct0)`nextid,
                                                   val(gct0)`cache))`2),
                              val(gct0)`box)")
                             "vrcib_extended_cache")
                            (("1" (hide "vrcib_extended_cache")
                              (("1"
                                (with-labels
                                 (case "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`2,
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`3),
                                         val(Eval_wCache(blet)
                                                        (val(gct0)`box, val(gct0)`nextid,
                                                         val(gct0)`cache))`2),
                                   val(gct0)`box,
                                    first_added_idx)")
                                 "nicniig_extended_cache")
                                (("1" (hide "nicniig_extended_cache")
                                  (("1"
                                    (with-labels
                                     (case "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`2,
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`3),
                                        val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2),
                                   val(gct0)`box,
                                   first_added_idx)")
                                     "iacniig_extended_cache")
                                    (("1" (hide "iacniig_extended_cache")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "vars_in_box?")
                                          (("1"
                                            (skolem 1 "i")
                                            (("1"
                                              (case
                                               "i < length(val(gct0)`box)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (use "nth_append[Interval]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "i = length(val(gct0)`box)")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (case
                                                     "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (name-replace
                                                           "evalw"
                                                           "(Eval_wCache(blet)
                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                                          (("1"
                                                            (case
                                                             "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                        length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (expand
                                                                 "evalw")
                                                                (("1"
                                                                  (use
                                                                   "containment_interval")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (expand
                                                                         "containment")
                                                                        (("1"
                                                                          (lemma
                                                                           "EvalwCache_inclusion_")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "eval_ACExpr_Env")
                                                                              (("1"
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "more_list_props[Interval].nth_append")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("2"
                                                      (replace -1 :hide? t)
                                                      (("2"
                                                        (expand "length" -1 2)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "length_append[Interval]")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (lemma "cp_box_vs_expansion")
                                          (("3"
                                            (inst
                                             -1
                                             "val(gct0)`box"
                                             "fct0`vs"
                                             "first_added_idx"
                                             "first_added_idx+1"
                                             "cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                              car(val(Eval_wCache(blet)
                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                  val(gct0)`cache))`2)`2,
                                              car(val(Eval_wCache(blet)
                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                  val(gct0)`cache))`2)`3),
                                             val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)"
                                             "eval_by_intervals(car(val(Eval_wCache(blet)
                                                                                       (val(gct0)`box,
                                                                                        val(gct0)`nextid,
                                                                                        val(gct0)`cache))`2)`2)"
                                             "eval(blet, fct0`vs, fct0`n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (reveal
                                                     "iacniig_extended_cache")
                                                    (("1" (propax) nil nil))
                                                    nil)
                                                   ("2"
                                                    (reveal
                                                     "vrcib_extended_cache")
                                                    (("2" (propax) nil nil))
                                                    nil)
                                                   ("3"
                                                    (reveal
                                                     "nicniig_extended_cache")
                                                    (("3" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (name-replace
                                                 "I"
                                                 "eval_by_intervals(car[CacheData]
                                      (val[[nat, (correct_cache?(val(gct0)`box))]]
                                           (Eval_wCache(blet)
                                                       (val
                                                            [[# box: Box,
                                                                nextid:
                                                                {n_: nat | n_ > last_idx_in_box(box)},
                                                                cache:
                                                                {c_: (correct_cache?(box)) |
                                                                 idxs_bounded(nextid)(c_)},
                                                                nxtlcl: above(last_idx_in_box(box)),
                                                                result: Maybe[bool] #]]
                                                            (gct0)`box,
                                                        val
                                                            [[# box: Box,
                                                                nextid:
                                                                {n_: nat | n_ > last_idx_in_box(box)},
                                                                cache:
                                                                {c_: (correct_cache?(box)) |
                                                                 idxs_bounded(nextid)(c_)},
                                                                nxtlcl: above(last_idx_in_box(box)),
                                                                result: Maybe[bool] #]]
                                                            (gct0)`nextid,
                                                        val
                                                            [[# box: Box,
                                                                nextid:
                                                                {n_: nat | n_ > last_idx_in_box(box)},
                                                                cache:
                                                                {c_: (correct_cache?(box)) |
                                                                 idxs_bounded(nextid)(c_)},
                                                                nxtlcl: above(last_idx_in_box(box)),
                                                                result: Maybe[bool] #]]
                                                            (gct0)`cache))`2)`2)")
                                                (("1"
                                                  (name-replace
                                                   "x"
                                                   "eval(blet, fct0`vs, fct0`n)")
                                                  (("1"
                                                    (case "x ## I")
                                                    (("1"
                                                      (use
                                                       "  containment_var")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep -1)
                                                          (("1"
                                                            (inst 1 "e")
                                                            (("1"
                                                              (use
                                                               "eval_var_ac")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand "x")
                                                        (("2"
                                                          (expand "I")
                                                          (("2"
                                                            (use
                                                             "containment_interval")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (expand
                                                                   "containment")
                                                                  (("2"
                                                                    (lemma
                                                                     "RE2AC_EvalwCache_eq")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "val(gct0)`box"
                                                                       "blet"
                                                                       "fct0`vs"
                                                                       "val(gct0)`nextid"
                                                                       "val(gct0)`cache")
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (typepred
                                                                           "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                                      val(gct0)`cache)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (skeep
                                                                                 -3)
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "N")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "compatible_pairs_on?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -4
                                                                                         "fct0`n")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "eval_ACExpr_Env")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "length")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (typepred
                                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (split 1)
                                                  (("1" (postpone) nil nil)
                                                   ("2"
                                                    (lemma
                                                     "RE2AC_EvalwCache_eq")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "val(gct0)`box"
                                                       "blet"
                                                       "fct0`vs"
                                                       "val(gct0)`nextid"
                                                       "val(gct0)`cache")
                                                      (("2"
                                                        (replace -1 :hide? t)
                                                        (("2"
                                                          (typepred
                                                           "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                                      val(gct0)`cache)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "compatible_pairs?"
                                                                 2)
                                                                (("2"
                                                                  (skeep -3)
                                                                  (("2"
                                                                    (inst
                                                                     2
                                                                     "N")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "compatible_pairs_on?"
                                                                         2)
                                                                        (("2"
                                                                          (skeep
                                                                           2)
                                                                          (("2"
                                                                            (case
                                                                             "i=0")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "powvar?"
                                                                                     2)
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "nth"
                                                                               3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "compatible_pairs_on?"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -4
                                                                                     "i-1")
                                                                                    (("2"
                                                                                      (hide
                                                                                       4)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred
                                           "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                          (("4" (assert) nil nil))
                                          nil)
                                         ("5"
                                          (reveal "iacniig_extended_cache")
                                          (("5"
                                            (use
                                             "iacniig_box_growing_preservation")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (reveal "nicniig_extended_cache")
                                          (("6"
                                            (use
                                             "nicniig_box_growing_preservation")
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (reveal "vrcib_extended_cache")
                                          (("7"
                                            (use
                                             "vrcib_box_growing_preservation")
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("8" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma "RE2AC_EvalwCache_eq")
                                        (("2"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "blet"
                                           "fct0`vs"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache")
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand
                                               "idxs_ac_cache_not_in_idx_gap"
                                               1)
                                              (("2"
                                                (skeep 1)
                                                (("2"
                                                  (case "i=0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "nth" 1)
                                                      (("1"
                                                        (use
                                                         "iacniig_RE2AC_preservation")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "idxs_ac_cache_not_in_idx_gap"
                                                               -1)
                                                              (("1"
                                                                (inst -1 "0")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "nth" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "iacniig_RE2AC_preservation")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "idxs_ac_cache_not_in_idx_gap"
                                                             -1)
                                                            (("2"
                                                              (inst -1 "i-1")
                                                              (("2"
                                                                (typepred "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide 2)
                                      (("3"
                                        (typepred
                                         "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (postpone) nil nil)) nil)
                                 ("3" (hide 2)
                                  (("3"
                                    (typepred
                                     "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (postpone) nil nil)) nil)
                             ("3"
                              (typepred
                               "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (more_list_props "" 3644770737
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_RealExpr_ini" -2)
          (("" (lift-if -2)
            (("" (assert)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (expand "BEval_Box_BLETIN_RealExpr_ini")
                            (("1" (expand "beval_vs_BLETIN_RealExpr_ini")
                              (("1"
                                (name-replace "evalw" "(Eval_wCache(blet)
                                         (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                (("1" (split 1)
                                  (("1" (expand "vars_in_box?")
                                    (("1" (skolem 1 "i")
                                      (("1"
                                        (case "i < length(val(gct0)`box)")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (use "nth_append[Interval]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i = length(val(gct0)`box)")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case
                                               "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                     length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "evalw")
                                                        (("1"
                                                          (use
                                                           "containment_interval")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (expand
                                                                 "containment")
                                                                (("1"
                                                                  (lemma
                                                                   "EvalwCache_inclusion_")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_ACExpr_Env")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "more_list_props[Interval].nth_append")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand "nth")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (use "length_append[Interval]")
                                              (("2"
                                                (replace -1 :hide? t)
                                                (("2"
                                                  (expand "length" -1 2)
                                                  (("2"
                                                    (expand "length" -1 2)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replaces -5)
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (use "length_append[Interval]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "evalw")
                                    (("3" (lemma "RE2AC_EvalwCache_eq")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (lemma "RE2AC_box_vs_expansion")
                                            (("3"
                                              (inst
                                               -1
                                               "val(gct0)`box"
                                               "fct0`vs"
                                               "blet"
                                               "val(gct0)`nextid"
                                               "val(gct0)`cache"
                                               "eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2)"
                                               "eval(blet, fct0`vs, length(val(gct0)`box))"
                                               "first_added_idx")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -7 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (typepred
                                                           "(RE2AC(blet,
                                                append(val(gct0)`box,
                                                       (: eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2) :)),
                                                fct0`vs
                                                  WITH [(length(val(gct0)`box))
                                                          := eval(blet, fct0`vs, length(val(gct0)`box))],
                                                val(gct0)`nextid, val(gct0)`cache))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs?"
                                                                 2)
                                                                (("1"
                                                                  (skeep -3)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "N")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "I"
                                                 "(eval_by_intervals(car[CacheData]
                                                      (val
                                                           [[nat,
                                                             (correct_cache?(val(gct0)`box))]]
                                                           (RE2AC
                                                            (blet,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`box,
                                                             fct0`vs,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`nextid,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`cache))`2)`2))")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (name-replace
                                                     "x"
                                                     "eval(blet, fct0`vs,
                                  length[Interval]
                                      (val
                                           [[# box: Box,
                                               nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                               cache:
                                                 {c_: (correct_cache?(box)) |
                                                          idxs_bounded(nextid)(c_)},
                                               result: Maybe[bool] #]]
                                           (gct0)`box))")
                                                    (("2"
                                                      (case "x ## I")
                                                      (("1"
                                                        (use
                                                         "  containment_var")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (inst 1 "e")
                                                              (("1"
                                                                (use
                                                                 "eval_var_ac")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -2
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "x")
                                                          (("2"
                                                            (expand "I")
                                                            (("2"
                                                              (use
                                                               "containment_interval")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (expand
                                                                     "containment")
                                                                    (("2"
                                                                      (typepred
                                                                       "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                          val(gct0)`cache)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (skeep
                                                                             -3)
                                                                            (("2"
                                                                              (inst
                                                                               2
                                                                               "N")
                                                                              (("2"
                                                                                (expand
                                                                                 "compatible_pairs_on?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -4
                                                                                     "fct0`n")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "eval_ACExpr_Env")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -4)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (typepred "evalw")
                                    (("4" (assert) nil nil)) nil)
                                   ("5" (expand "evalw")
                                    (("5" (lemma "RE2AC_EvalwCache_eq")
                                      (("5"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("5"
                                          (replaces -1)
                                          (("5"
                                            (use "iacniig_RE2AC_preservation")
                                            (("5"
                                              (assert)
                                              (("5"
                                                (assert)
                                                (("5"
                                                  (use
                                                   "iacniig_box_growing_preservation")
                                                  (("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6" (expand "evalw")
                                    (("6" (lemma "RE2AC_EvalwCache_eq")
                                      (("6"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("6"
                                          (replaces -1)
                                          (("6"
                                            (use "nicniig_RE2AC_preservation")
                                            (("6"
                                              (assert)
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (use
                                                   "nicniig_box_growing_preservation")
                                                  (("6" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7" (expand "evalw")
                                    (("7" (lemma "RE2AC_EvalwCache_eq")
                                      (("7"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("7"
                                          (replaces -1)
                                          (("7"
                                            (use "vrcib_RE2AC_preservation")
                                            (("7"
                                              (assert)
                                              (("7"
                                                (assert)
                                                (("7"
                                                  (use
                                                   "vrcib_box_growing_preservation")
                                                  (("7" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("8" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Env type-eq-decl nil affine_box nil)
    (Env type-eq-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (containment_interval formula-decl nil affine nil)
    (EvalwCache_inclusion_ formula-decl nil affine_expr_Eval nil)
    (containment const-decl "bool" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (length_singleton formula-decl nil more_list_props structures)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (nth_append formula-decl nil more_list_props structures)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (add_N const-decl "Noise" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list structures)
    (eval_var_ac formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (RE2AC_box_vs_expansion formula-decl nil affine_expr_Eval_fnd nil)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_box_growing_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   shostak)
  (BLETIN_RealExpr_ini_pre_preservation-1 nil 3638637724
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_RealExpr_ini" -2)
          (("" (lift-if -2)
            (("" (assert)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (expand "BEval_Box_BLETIN_RealExpr_ini")
                            (("1" (expand "beval_vs_BLETIN_RealExpr_ini")
                              (("1"
                                (name-replace "evalw" "(Eval_wCache(blet)
                                         (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))")
                                (("1" (split 1)
                                  (("1" (expand "vars_in_box?")
                                    (("1" (skolem 1 "i")
                                      (("1"
                                        (case "i < length(val(gct0)`box)")
                                        (("1"
                                          (use "nth_append2[Interval]")
                                          (("1"
                                            (replaces -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i = length(val(gct0)`box)")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case
                                               "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                     length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "evalw")
                                                        (("1"
                                                          (use
                                                           "containment_interval")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (expand
                                                                 "containment")
                                                                (("1"
                                                                  (lemma
                                                                   "EvalwCache_inclusion_")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_ACExpr_Env")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "nth_append[Interval]")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "length_append[Interval]")
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (use "length_append[Interval]")
                                              (("2"
                                                (replace -1 :hide? t)
                                                (("2"
                                                  (expand "length" -1 2)
                                                  (("2"
                                                    (expand "length" -1 2)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replaces -5)
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (use "length_append[Interval]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "evalw")
                                    (("3" (lemma "RE2AC_EvalwCache_eq")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (lemma "RE2AC_box_vs_expansion")
                                            (("3"
                                              (inst
                                               -1
                                               "val(gct0)`box"
                                               "fct0`vs"
                                               "blet"
                                               "val(gct0)`nextid"
                                               "val(gct0)`cache"
                                               "eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2)"
                                               "eval(blet, fct0`vs, length(val(gct0)`box))"
                                               "first_added_idx")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -7 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (typepred
                                                           "(RE2AC(blet,
                                                append(val(gct0)`box,
                                                       (: eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2) :)),
                                                fct0`vs
                                                  WITH [(length(val(gct0)`box))
                                                          := eval(blet, fct0`vs, length(val(gct0)`box))],
                                                val(gct0)`nextid, val(gct0)`cache))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs?"
                                                                 2)
                                                                (("1"
                                                                  (skeep -3)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "N")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "I"
                                                 "(eval_by_intervals(car[CacheData]
                                                      (val
                                                           [[nat,
                                                             (correct_cache?(val(gct0)`box))]]
                                                           (RE2AC
                                                            (blet,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`box,
                                                             fct0`vs,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`nextid,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`cache))`2)`2))")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (name-replace
                                                     "x"
                                                     "eval(blet, fct0`vs,
                                  length[Interval]
                                      (val
                                           [[# box: Box,
                                               nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                               cache:
                                                 {c_: (correct_cache?(box)) |
                                                          idxs_bounded(nextid)(c_)},
                                               result: Maybe[bool] #]]
                                           (gct0)`box))")
                                                    (("2"
                                                      (case "x ## I")
                                                      (("1"
                                                        (use
                                                         "  containment_var")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (inst 1 "e")
                                                              (("1"
                                                                (use
                                                                 "eval_var_ac")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -2
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "x")
                                                          (("2"
                                                            (expand "I")
                                                            (("2"
                                                              (use
                                                               "containment_interval")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (expand
                                                                     "containment")
                                                                    (("2"
                                                                      (typepred
                                                                       "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                          val(gct0)`cache)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (skeep
                                                                             -3)
                                                                            (("2"
                                                                              (inst
                                                                               2
                                                                               "N")
                                                                              (("2"
                                                                                (expand
                                                                                 "compatible_pairs_on?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -4
                                                                                     "fct0`n")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "eval_ACExpr_Env")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -4)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (typepred "evalw")
                                    (("4" (assert) nil nil)) nil)
                                   ("5" (expand "evalw")
                                    (("5" (lemma "RE2AC_EvalwCache_eq")
                                      (("5"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("5"
                                          (replaces -1)
                                          (("5"
                                            (use "iacniig_RE2AC_preservation")
                                            (("5"
                                              (assert)
                                              (("5"
                                                (assert)
                                                (("5"
                                                  (use
                                                   "iacniig_box_growing_preservation")
                                                  (("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6" (expand "evalw")
                                    (("6" (lemma "RE2AC_EvalwCache_eq")
                                      (("6"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("6"
                                          (replaces -1)
                                          (("6"
                                            (use "nicniig_RE2AC_preservation")
                                            (("6"
                                              (assert)
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (use
                                                   "nicniig_box_growing_preservation")
                                                  (("6" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7" (expand "evalw")
                                    (("7" (lemma "RE2AC_EvalwCache_eq")
                                      (("7"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "blet"
                                         "fct0`vs"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache")
                                        (("7"
                                          (replaces -1)
                                          (("7"
                                            (use "vrcib_RE2AC_preservation")
                                            (("7"
                                              (assert)
                                              (("7"
                                                (assert)
                                                (("7"
                                                  (use
                                                   "vrcib_box_growing_preservation")
                                                  (("7" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("8" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Eval_wCache def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (vrcib_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (vrcib_box_growing_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (iacniig_RE2AC_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (RE2AC_box_vs_expansion formula-decl nil affine_expr_Eval_fnd nil)
    (containment_var formula-decl nil affine nil)
    (eval_var_ac formula-decl nil affine nil)
    (car_ol const-decl "T" ordered_list structures)
    (extend_N const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (add_N const-decl "Noise" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (RE2AC def-decl "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" affine_expr_Eval_fnd nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (RE2AC_EvalwCache_eq formula-decl nil affine_expr_Eval nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (Add const-decl "Interval" interval interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (containment const-decl "bool" affine nil)
    (EvalwCache_inclusion_ formula-decl nil affine_expr_Eval nil)
    (containment_interval formula-decl nil affine nil)
    (eval def-decl "real" interval_expr interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (Env type-eq-decl nil affine_box nil))
   nil))
 (BLETIN_RealExpr_pre_preservation_TCC1 0
  (BLETIN_RealExpr_pre_preservation_TCC1-1 nil 3789916246
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (realexpr? const-decl "bool" interval_expr interval_arith))
   nil
   (BLETIN_RealExpr_pre_preservation subtype "affine_boolexpr.blet"
    "(interval_expr.realexpr?)")))
 (BLETIN_RealExpr_pre_preservation_TCC2 0
  (BLETIN_RealExpr_pre_preservation_TCC1-1 nil 3639308540
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (beval_vs_BLETIN_RealExpr_ini const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BLETIN_RealExpr_ini const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (BLETIN_RealExpr_pre_preservation subtype
    "IntervalExpr_adt.BLETIN(affine_boolexpr.blet, affine_boolexpr.bin)"
    "{b_: (IntervalExpr_adt.bletin?) | interval_expr.realexpr?(IntervalExpr_adt.blet(b_))}")))
 (BLETIN_RealExpr_pre_preservation 0
  (BLETIN_RealExpr_pre_preservation-1 nil 3639327139
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_RealExpr" -3)
          (("" (assert)
            (("" (flatten)
              (("" (typepred g_ctxtbin)
                (("" (expand "BEval_Box_post")
                  (("" (expand "BEval_Box_BLETIN_RealExpr_ini")
                    (("" (flatten)
                      (("" (assert)
                        (("" (lift-if -2)
                          (("" (assert)
                            (("" (split -2)
                              (("1" (flatten)
                                (("1" (split -2)
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (expand
                                         "BEval_Box_BLETIN_RealExpr"
                                         1
                                         1)
                                        (("1"
                                          (expand
                                           "BEval_Box_BLETIN_RealExpr"
                                           1
                                           1)
                                          (("1"
                                            (expand
                                             "beval_vs_BLETIN_RealExpr")
                                            (("1"
                                              (expand
                                               "BEval_Box_BLETIN_RealExpr"
                                               1
                                               1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "BEval_Box_BLETIN_RealExpr"
                                                   1
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "BEval_Box_BLETIN_RealExpr"
                                                     1
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "BEval_Box_BLETIN_RealExpr"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "BEval_Box_BLETIN_RealExpr"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "BEval_Box_BLETIN_RealExpr"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "BEval_Box_BLETIN_RealExpr"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "BEval_Box_BLETIN_RealExpr"
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "BEval_Box_BLETIN_RealExpr"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "BEval_Box_BLETIN_RealExpr"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "BEval_Box_BLETIN_RealExpr"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BLETIN_RealExpr const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (beval_vs_BLETIN_RealExpr const-decl "(beval_vs_post(bexpr, ctxt0))"
     affine_boolexpr nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (BEval_Box_BLETIN_RealExpr_ini const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (BLETIN_BoolExpr_pre_preservation_TCC1 0
  (BLETIN_BoolExpr_pre_preservation_TCC1-1 nil 3639308932
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BLETIN_BoolExpr_pre_preservation subtype "affine_boolexpr.g_ctxt0"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BLETIN_BoolExpr_pre_preservation_TCC2 0
  (BLETIN_BoolExpr_pre_preservation_TCC2-1 nil 3639322923
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (BLETIN_BoolExpr_pre_preservation subtype "affine_boolexpr.g_ctxt1"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BLETIN_BoolExpr_pre_preservation_TCC3 0
  (BLETIN_BoolExpr_pre_preservation_TCC3-1 nil 3639322923
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (BLETIN_BoolExpr_pre_preservation subtype "affine_boolexpr.g_ctxt2"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BLETIN_BoolExpr_pre_preservation_TCC4 0
  (BLETIN_BoolExpr_pre_preservation_TCC4-1 nil 3639322923
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (BLETIN_BoolExpr_pre_preservation subtype
    "IntervalExpr_adt.BLETIN(affine_boolexpr.blet, affine_boolexpr.bin)"
    "{b_: (IntervalExpr_adt.bletin?) | interval_expr.boolexpr?(IntervalExpr_adt.blet(b_))}")))
 (BLETIN_BoolExpr_pre_preservation 0
  (BLETIN_BoolExpr_pre_preservation-2 "" 3789916850
   (""
    (with-labels (skeep*)
     (("p_inc_pre 0" "post 0" "p_inc_pre 1" "post 1" "p_inc_pre 2"
       "p_inc_pre res")))
    (("" (expand "p_inclusion_pre")
      (("" (with-labels (flatten "p_inc_pre res") ((BEval2 target)))
        (("" (expand "BEval_Box_BLETIN_BoolExpr" BEval2)
          (("" (lift-if BEval2)
            (("" (assert)
              (("" (with-labels (split BEval2) some2)
                (("" (hide target)
                  (("" (expand "BEval_Box_post" "post 1")
                    (("" (assert)
                      ((""
                        (with-labels (flatten "post 1")
                         ((somM1 cacheM1 nextidM1)))
                        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" somM1)
                          (("" (lift-if somM1)
                            (("" (assert somM1)
                              (("" (split somM1)
                                (("1"
                                  (with-labels (flatten somM1)
                                   ((some0 some1 lastid0)))
                                  (("1" (assert)
                                    (("1"
                                      (with-labels
                                       (flatten "p_inc_pre 0")
                                       ((vars0
                                         n0
                                         comp0
                                         "nextid>=fistid 0"
                                         iaccniig0
                                         nicniig0
                                         vrcib0
                                         res0)))
                                      (("1"
                                        (with-labels
                                         (flatten "p_inc_pre 1")
                                         ((vars1
                                           n1
                                           comp1
                                           "nextid>=fistid 1"
                                           iaccniig1
                                           nicniig1
                                           vrcib1
                                           res1)))
                                        (("1"
                                          (with-labels
                                           (flatten "p_inc_pre 2")
                                           ((vars2
                                             n2
                                             comp2
                                             "nextid>=fistid 2"
                                             iaccniig2
                                             nicniig2
                                             vrcib2
                                             res2)))
                                          (("1"
                                            (reveal target)
                                            (("1"
                                              (expand
                                               "beval_vs_BLETIN_BoolExpr")
                                              (("1"
                                                (expand
                                                 "BEval_Box_BLETIN_BoolExpr"
                                                 "target"
                                                 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "BEval_Box_BLETIN_BoolExpr"
                                                     "target"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "BEval_Box_BLETIN_BoolExpr"
                                                       "target"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "BEval_Box_BLETIN_BoolExpr"
                                                         "target"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "BEval_Box_BLETIN_BoolExpr"
                                                           "target"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "BEval_Box_BLETIN_BoolExpr"
                                                             "target"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "BEval_Box_BLETIN_BoolExpr"
                                                               "target"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "BEval_Box_BLETIN_BoolExpr"
                                                                 "target"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "BEval_Box_BLETIN_BoolExpr"
                                                                   "target"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "BEval_Box_BLETIN_BoolExpr"
                                                                     "target"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "BEval_Box_BLETIN_BoolExpr"
                                                                       "target"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "BEval_Box_BLETIN_BoolExpr"
                                                                         "target"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "BEval_Box_BLETIN_BoolExpr"
                                                                           "target"
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BLETIN_BoolExpr const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BLETIN_BoolExpr_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (beval_vs_BLETIN_BoolExpr const-decl "(beval_vs_post(bexpr, ctxt0))"
     affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (BLETIN_BoolExpr_pre_preservation-1 nil 3639327452
   (""
    (with-labels (skeep*)
     (("p_inc_pre 0" "post 0" "p_inc_pre 1" "post 1" "p_inc_pre 2"
       "p_inc_pre res")))
    (("" (expand "p_inclusion_pre")
      (("" (with-labels (flatten "p_inc_pre res") ((BEval2 target)))
        (("" (expand "BEval_Box_BLETIN_BoolExpr" BEval2)
          (("" (lift-if BEval2)
            (("" (assert)
              (("" (with-labels (split BEval2) some2)
                (("" (hide target)
                  (("" (expand "BEval_Box_post" "post 1")
                    (("" (assert)
                      ((""
                        (with-labels (flatten "post 1")
                         ((somM1 cacheM1 nextidM1)))
                        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" somM1)
                          (("" (lift-if somM1)
                            (("" (assert somM1)
                              (("" (split somM1)
                                (("1"
                                  (with-labels (flatten somM1)
                                   ((some0 some1 lastid0)))
                                  (("1" (assert)
                                    (("1"
                                      (with-labels
                                       (flatten "p_inc_pre 0")
                                       ((vars0
                                         n0
                                         comp0
                                         "nextid>=fistid 0"
                                         iaccniig0
                                         nicniig0
                                         vrcib0
                                         res0)))
                                      (("1"
                                        (with-labels
                                         (flatten "p_inc_pre 1")
                                         ((vars1
                                           n1
                                           comp1
                                           "nextid>=fistid 1"
                                           iaccniig1
                                           nicniig1
                                           vrcib1
                                           res1)))
                                        (("1"
                                          (with-labels
                                           (flatten "p_inc_pre 2")
                                           ((vars2
                                             n2
                                             comp2
                                             "nextid>=fistid 2"
                                             iaccniig2
                                             nicniig2
                                             vrcib2
                                             res2)))
                                          (("1"
                                            (reveal target)
                                            (("1"
                                              (expand
                                               "beval_vs_BLETIN_BoolExpr")
                                              (("1"
                                                (expand
                                                 "BEval_Box_BLETIN_BoolExpr"
                                                 "target"
                                                 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "BEval_Box_BLETIN_BoolExpr"
                                                     "target"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "BEval_Box_BLETIN_BoolExpr"
                                                       "target"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "BEval_Box_BLETIN_BoolExpr"
                                                         "target"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "BEval_Box_BLETIN_BoolExpr"
                                                           "target"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "BEval_Box_BLETIN_BoolExpr"
                                                             "target"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "BEval_Box_BLETIN_BoolExpr"
                                                               "target"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "BEval_Box_BLETIN_BoolExpr"
                                                                 "target"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "BEval_Box_BLETIN_BoolExpr"
                                                                   "target"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "BEval_Box_BLETIN_BoolExpr"
                                                                     "target"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "BEval_Box_BLETIN_BoolExpr"
                                                                       "target"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "BEval_Box_BLETIN_BoolExpr"
                                                                         "target"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "BEval_Box_BLETIN_BoolExpr"
                                                                             "target"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   shostak))
 (BLETIN_BoolExpr_merge1_pre_preservation_TCC1 0
  (BLETIN_BoolExpr_merge1_pre_preservation_TCC1-1 nil 3639322923
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil
   (BLETIN_BoolExpr_merge1_pre_preservation subtype "affine_boolexpr.gct0"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BLETIN_BoolExpr_merge1_pre_preservation_TCC2 0
  (BLETIN_BoolExpr_merge1_pre_preservation_TCC2-1 nil 3639322923
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (BLETIN_BoolExpr_merge1_pre_preservation subtype "affine_boolexpr.gct1"
    "affine_boolexpr.CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")))
 (BLETIN_BoolExpr_merge1_pre_preservation 0
  (BLETIN_BoolExpr_merge1_pre_preservation-5 "" 3789916859
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" -3)
          (("" (lift-if -3)
            (("" (assert)
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "beval_vs_BLETIN_BoolExpr_merge1")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 1)
                                (("1" (assert)
                                  (("1" (split 1)
                                    (("1" (expand "vars_in_box?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i<length(val(gct0)`box)")
                                          (("1"
                                            (use
                                             "more_list_props[Interval].nth_append")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "vars_in_box?" -7)
                                                  (("1"
                                                    (inst -7 "i")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i=length(val(gct0)`box)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use
                                                 "more_list_props[Interval].nth_append")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 2)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred i)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "length_append[Interval]")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand "length" -1 2)
                                                      (("2"
                                                        (expand "length" -1 2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (use "length_append[Interval]")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "length" 1 2)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (lemma "cp_box_vs_expansion")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "fct0`vs"
                                         "first_added_idx"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache"
                                         "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF"
                                         "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -8)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "none?[boolean]
                                                             (val
                                                                  [[# box: Box,
                                                                      nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                      cache:
                                                                        {c_: (correct_cache?(box)) |
                                                                                 idxs_bounded(nextid)(c_)},
                                                                      result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                                                  (gct1)`result)")
                                            (("1"
                                              (assert)
                                              (("1" (inst?) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (use "iacniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (use "nicniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (use "vrcib_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("7" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 2)
                                (("2" (case "some?(fct1`result)")
                                  (("1" (assert)
                                    (("1" (split 2)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -6)
                                                    (("1"
                                                      (inst -6 "i")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (expand
                                                                           "##")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand "length" -1 2)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (expand "length" 1 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -7)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean](val
                       [[# box: Box,
                           nextid: {n_: nat | n_ > last_idx_in_box(box)},
                           cache:
                             {c_: (correct_cache?(box)) |
                                      idxs_bounded(nextid)(c_)},
                           result: Maybe[bool] , nxtlcl : above(last_idx_in_box(box))  #]]
                       (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1" (inst 1 "-1") nil nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 -1)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (split 3)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -5)
                                                    (("1"
                                                      (inst -5 "i")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "##")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "##")
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand "length" -1 2)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (expand "length" 1 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                                (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                    (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1" (inst 1 "-1") nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BLETIN_BoolExpr_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (vrcib_box_growing_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (cp_box_vs_expansion formula-decl nil affine_expr_Eval_fnd nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (<= const-decl "bool" reals nil) (Epsilon type-eq-decl nil affine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bexpr skolem-const-decl "BoolExpr" affine_boolexpr nil)
    (box skolem-const-decl "Box" affine_boolexpr nil)
    (gct1 skolem-const-decl
     "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))"
     affine_boolexpr nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_in_box? const-decl "bool" box interval_arith)
    (below type-eq-decl nil naturalnumbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (above nonempty-type-eq-decl nil integers nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil) (Box type-eq-decl nil box interval_arith)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (|##| const-decl "bool" interval interval_arith)
    (nth def-decl "T" list_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (BLETIN_BoolExpr_merge1_pre_preservation-4 "" 3646481613
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" -3)
          (("" (lift-if -3)
            (("" (assert)
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "beval_vs_BLETIN_BoolExpr_merge1")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 1)
                                (("1" (assert)
                                  (("1" (split 1)
                                    (("1" (expand "vars_in_box?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i<length(val(gct0)`box)")
                                          (("1"
                                            (use
                                             "more_list_props[Interval].nth_append")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "vars_in_box?" -7)
                                                  (("1"
                                                    (inst -7 "i")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i=length(val(gct0)`box)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use
                                                 "more_list_props[Interval].nth_append")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 2)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred i)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "length_append[Interval]")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "length" -1 2)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (use "length_append[Interval]")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (lemma "cp_box_vs_expansion")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "fct0`vs"
                                         "first_added_idx"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache"
                                         "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF"
                                         "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -8)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "none?[boolean]
                                                             (val
                                                                  [[# box: Box,
                                                                      nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                      cache:
                                                                        {c_: (correct_cache?(box)) |
                                                                                 idxs_bounded(nextid)(c_)},
                                                                      result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                                                  (gct1)`result)")
                                            (("1"
                                              (assert)
                                              (("1" (inst?) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (use "iacniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (use "nicniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (use "vrcib_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("7" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 2)
                                (("2" (case "some?(fct1`result)")
                                  (("1" (assert)
                                    (("1" (split 2)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -6)
                                                    (("1"
                                                      (inst -6 "i")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (expand
                                                                           "##")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -7)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean](val
                       [[# box: Box,
                           nextid: {n_: nat | n_ > last_idx_in_box(box)},
                           cache:
                             {c_: (correct_cache?(box)) |
                                      idxs_bounded(nextid)(c_)},
                           result: Maybe[bool] , nxtlcl : above(last_idx_in_box(box))  #]]
                       (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 -1)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (split 3)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -5)
                                                    (("1"
                                                      (inst -5 "i")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "##")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "##")
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                                (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                    (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (vrcib_box_growing_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (cp_box_vs_expansion formula-decl nil affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (Epsilon type-eq-decl nil affine nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (vars_in_box? const-decl "bool" box interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil)
  (BLETIN_BoolExpr_merge1_pre_preservation-3 "" 3646481584
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" -3)
          (("" (lift-if -3)
            (("" (assert)
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "beval_vs_BLETIN_BoolExpr_merge1")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 1)
                                (("1" (assert)
                                  (("1" (split 1)
                                    (("1" (expand "vars_in_box?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i<length(val(gct0)`box)")
                                          (("1"
                                            (use
                                             "more_list_props[Interval].nth_append")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "vars_in_box?" -7)
                                                  (("1"
                                                    (inst -7 "i")
                                                    nil)))))))
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil)))))
                                           ("2"
                                            (case "i=length(val(gct0)`box)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use
                                                 "more_list_props[Interval].nth_append")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 2)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but 1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))))
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (flatten)
                                                  (("2" (assert) nil)))))))
                                             ("2"
                                              (typepred i)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "length_append[Interval]")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "length" -1 2)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))
                                     ("2" (use "length_append[Interval]")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1" (propax) nil)))))))
                                       ("2" (flatten) (("2" (assert) nil)))))
                                     ("3" (lemma "cp_box_vs_expansion")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "fct0`vs"
                                         "first_added_idx"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache"
                                         "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF"
                                         "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -8)
                                            (("1" (propax) nil)))))
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "none?[boolean]
                                              (val
                                                   [[# box: Box,
                                                       nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                       cache:
                                                         {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                       result: Maybe[bool] #]]
                                                   (gct1)`result)")
                                            (("1"
                                              (assert)
                                              (("1" (inst?) nil)))
                                             ("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))
                                         ("3"
                                          (flatten)
                                          (("3" (assert) nil)))))))
                                     ("4"
                                      (use "iacniig_box_growing_preservation")
                                      (("1" (assert) nil)
                                       ("2" (flatten) (("2" (assert) nil)))))
                                     ("5"
                                      (use "nicniig_box_growing_preservation")
                                      (("1" (assert) nil)
                                       ("2" (flatten) (("2" (assert) nil)))))
                                     ("6"
                                      (use "vrcib_box_growing_preservation")
                                      (("1" (assert) nil)
                                       ("2" (flatten) (("2" (assert) nil)))))
                                     ("7" (propax) nil)))))))))
                             ("2" (flatten)
                              (("2"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 2)
                                (("2" (case "some?(fct1`result)")
                                  (("1" (assert)
                                    (("1" (split 2)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -6)
                                                    (("1"
                                                      (inst -6 "i")
                                                      nil)))))))
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil)))))
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil)))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (expand
                                                                           "##")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))))))))))))))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil)))))))
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil)))))))
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -7)
                                              (("1" (propax) nil)))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                                                                 (val
                                                                      [[# box: Box,
                                                                          nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                          cache:
                                                                            {c_: (correct_cache?(box)) |
                                                                                     idxs_bounded(nextid)(c_)},
                                                                          result: Maybe[bool] #]]
                                                                      (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil)))))
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 -1)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil)))))))
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("7" (propax) nil)))))
                                   ("2" (assert)
                                    (("2" (split 3)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -5)
                                                    (("1"
                                                      (inst -5 "i")
                                                      nil)))))))
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil)))))
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "##")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "##")
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil)))))))
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil)))))))
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1" (propax) nil)))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                                                                 (val
                                                                      [[# box: Box,
                                                                          nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                          cache:
                                                                            {c_: (correct_cache?(box)) |
                                                                                     idxs_bounded(nextid)(c_)},
                                                                          result: Maybe[bool] #]]
                                                                      (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil)))))
                                               ("2" (assert) nil)))))
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil)))))))
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("7"
                                        (propax)
                                        nil)))))))))))))))))))))))
                 ("2" (propax) nil))))))))))))))
    nil)
   nil nil)
  (more_list_props "" 3644770082
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" -3)
          (("" (lift-if -3)
            (("" (assert)
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "beval_vs_BLETIN_BoolExpr_merge1")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 1)
                                (("1" (assert)
                                  (("1" (split 1)
                                    (("1" (expand "vars_in_box?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i<length(val(gct0)`box)")
                                          (("1"
                                            (use
                                             "more_list_props[Interval].nth_append")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "vars_in_box?" -7)
                                                  (("1"
                                                    (inst -7 "i")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i=length(val(gct0)`box)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use
                                                 "more_list_props[Interval].nth_append")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 2)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred i)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "length_append[Interval]")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "length" -1 2)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (use "length_append[Interval]")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (lemma "cp_box_vs_expansion")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "fct0`vs"
                                         "first_added_idx"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache"
                                         "IF none?(val(gct1)`result)
                                            THEN [|-1, 1|]
                                            ELSIF val(val(gct1)`result)
                                            THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF"
                                         "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -8)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "none?[boolean]
                               (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool] #]]
                                    (gct1)`result)")
                                            (("1"
                                              (assert)
                                              (("1" (inst?) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (use "iacniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (use "nicniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (use "vrcib_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("7" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 2)
                                (("2" (case "some?(fct1`result)")
                                  (("1" (assert)
                                    (("1" (split 2)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -6)
                                                    (("1"
                                                      (inst -6 "i")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (expand
                                                                           "##")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                      THEN [|-1, 1|]
                                                      ELSIF val(val(gct1)`result)
                                                      THEN [|1/2, 1|]
                                                      ELSE [|-1, -1 / 2|]
                                                      ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -7)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                                                (val
                                                     [[# box: Box,
                                                         nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                         cache:
                                                           {c_: (correct_cache?(box)) |
                                                                    idxs_bounded(nextid)(c_)},
                                                         result: Maybe[bool] #]]
                                                     (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 -1)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (split 3)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use
                                               "more_list_props[Interval].nth_append")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "vars_in_box?" -5)
                                                    (("1"
                                                      (inst -5 "i")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "##")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "##")
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                                      THEN [|-1, 1|]
                                                      ELSIF val(val(gct1)`result)
                                                      THEN [|1/2, 1|]
                                                      ELSE [|-1, -1 / 2|]
                                                      ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                                                (val
                                                     [[# box: Box,
                                                         nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                         cache:
                                                           {c_: (correct_cache?(box)) |
                                                                    idxs_bounded(nextid)(c_)},
                                                         result: Maybe[bool] #]]
                                                     (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (vrcib_box_growing_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (cp_box_vs_expansion formula-decl nil affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (Epsilon type-eq-decl nil affine nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (vars_in_box? const-decl "bool" box interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (BLETIN_BoolExpr_merge1_pre_preservation-2 "" 3639335741
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" -3)
          (("" (lift-if -3)
            (("" (assert)
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "beval_vs_BLETIN_BoolExpr_merge1")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 1)
                                (("1" (assert)
                                  (("1" (split 1)
                                    (("1" (expand "vars_in_box?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "i<length(val(gct0)`box)")
                                          (("1"
                                            (use "nth_append2[Interval]")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (expand "vars_in_box?" -7)
                                                (("1"
                                                  (inst -7 "i")
                                                  (("1"
                                                    (replace -8 :hide? t)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "i=length(val(gct0)`box)")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use "nth_append[Interval]")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 2)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "length_append[Interval]")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "length" 1 3)
                                                      (("1"
                                                        (expand "length" 1 3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred i)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "length_append[Interval]")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "length" -1 2)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (use "length_append[Interval]")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (lemma "cp_box_vs_expansion")
                                      (("3"
                                        (inst
                                         -1
                                         "val(gct0)`box"
                                         "fct0`vs"
                                         "first_added_idx"
                                         "val(gct0)`nextid"
                                         "val(gct0)`cache"
                                         "IF none?(val(gct1)`result)
                                    THEN [|-1, 1|]
                                    ELSIF val(val(gct1)`result)
                                    THEN [|1/2, 1|]
                                    ELSE [|-1, -1 / 2|]
                                    ENDIF"
                                         "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -8)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "none?[boolean]
                (val
                     [[# box: Box,
                         nextid: {n_: nat | n_ > last_idx_in_box(box)},
                         cache:
                           {c_: (correct_cache?(box)) |
                                    idxs_bounded(nextid)(c_)},
                         result: Maybe[bool] #]]
                     (gct1)`result)")
                                            (("1"
                                              (assert)
                                              (("1" (inst?) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (use "iacniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (use "nicniig_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (use "vrcib_box_growing_preservation")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("7" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 2)
                                (("2" (case "some?(fct1`result)")
                                  (("1" (assert)
                                    (("1" (split 2)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use "nth_append2[Interval]")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "vars_in_box?" -6)
                                                  (("1"
                                                    (inst -6 "i")
                                                    (("1"
                                                      (replace -7 :hide? t)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use "nth_append[Interval]")
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" 1 3)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           1
                                                           3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                            THEN [|-1, 1|]
                                            ELSIF val(val(gct1)`result)
                                            THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -7)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                               (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool] #]]
                                    (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 -1)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (split 3)
                                      (("1"
                                        (expand "vars_in_box?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i<length(val(gct0)`box)")
                                            (("1"
                                              (use "nth_append2[Interval]")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "vars_in_box?" -5)
                                                  (("1"
                                                    (inst -5 "i")
                                                    (("1"
                                                      (replace -6 :hide? t)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "i=length(val(gct0)`box)")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use "nth_append[Interval]")
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" 1 3)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           1
                                                           3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred i)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "length_append[Interval]")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand "length" -1 2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "length" 1 2)
                                            (("1"
                                              (expand "length" 1 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "cp_box_vs_expansion")
                                        (("3"
                                          (inst
                                           -1
                                           "val(gct0)`box"
                                           "fct0`vs"
                                           "first_added_idx"
                                           "val(gct0)`nextid"
                                           "val(gct0)`cache"
                                           "IF none?(val(gct1)`result)
                                            THEN [|-1, 1|]
                                            ELSIF val(val(gct1)`result)
                                            THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF"
                                           "-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "none?[boolean]
                               (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool] #]]
                                    (gct1)`result)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "-1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use
                                         "iacniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (use
                                         "nicniig_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (use "vrcib_box_growing_preservation")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("7" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (vrcib_box_growing_preservation formula-decl nil affine_expr_Eval_fnd nil)
    (nicniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (iacniig_box_growing_preservation formula-decl nil affine_expr_Eval_fnd
     nil)
    (cp_box_vs_expansion formula-decl nil affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (Epsilon type-eq-decl nil affine nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (vars_in_box? const-decl "bool" box interval_arith)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (BLETIN_BoolExpr_merge1_pre_preservation-1 nil 3639328365
   ("" (skeep*)
    (("" (expand "p_inclusion_pre")
      (("" (flatten)
        (("" (expand "BEval_Box_BLETIN_BoolExpr_merge1" -3)
          (("" (lift-if -3)
            (("" (assert)
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "beval_vs_BLETIN_BoolExpr_merge1")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "BEval_Box_BLETIN_BoolExpr_merge1" 1)
                                (("1" (postpone) nil nil)) nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (BITE_preservation_TCC1 0
  (BITE_preservation_TCC1-1 nil 3640431482 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil))
   nil
   (BITE_preservation subtype
    "(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))"
    "integers.upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))")))
 (BITE_preservation 0
  (BITE_preservation-3 "" 3789916862
   ("" (skeep*)
    (("" (expand "BEval_Box_BITE")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "beval_vs_BITE")
                      (("1" (expand "beval_vs_post")
                        (("1" (assert)
                          (("1" (expand "p_inclusion_pre" -6)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (expand "p_inclusion_pre")
                                  (("1" (flatten) (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "p_inclusion_pre" -5)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (expand "BEval_Box_post" -20)
                            (("2" (flatten)
                              (("2" (assert)
                                (("2" (expand "beval_vs_BITE")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (expand "beval_vs_BITE")
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1" (flatten)
                                (("1" (expand "p_inclusion_pre")
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "beval_vs_post")
                                          (("1"
                                            (expand "beval_vs_BITE_merge2")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "beval_vs_BITE_merge1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (expand "p_inclusion_pre")
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replaces -4)
                                          (("2"
                                            (apply-extensionality 2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2" (expand "beval_vs_post")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "p_inclusion_pre")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "beval_vs_BITE")
                              (("2" (expand "beval_vs_post")
                                (("2" (flatten) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "p_inclusion_pre") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_Box_BITE const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (beval_vs_BITE const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures)
    (beval_vs_BITE_merge1 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (beval_vs_BITE_merge2 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (BITE_preservation-2 nil 3646480973
   ("" (skeep*)
    (("" (expand "BEval_Box_BITE")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "beval_vs_BITE")
                      (("1" (expand "beval_vs_post")
                        (("1" (assert)
                          (("1" (expand "p_inclusion_pre" -6)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (expand "p_inclusion_pre")
                                  (("1" (flatten) (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "p_inclusion_pre" -5)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (expand "BEval_Box_post" -20)
                            (("2" (flatten)
                              (("2" (assert)
                                (("2" (expand "beval_vs_BITE")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (expand "beval_vs_BITE")
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1" (flatten)
                                (("1" (expand "p_inclusion_pre")
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "beval_vs_post")
                                          (("1"
                                            (expand "beval_vs_BITE_merge2")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replaces -38)
                                                (("1"
                                                  (expand
                                                   "beval_vs_BITE_merge1")
                                                  (("1"
                                                    (replaces -35)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -23)
                                                        (("1"
                                                          (apply-extensionality)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (expand "p_inclusion_pre")
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replaces -4)
                                          (("2"
                                            (replaces -29)
                                            (("2"
                                              (apply-extensionality 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2" (expand "beval_vs_post")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "p_inclusion_pre")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "beval_vs_BITE")
                              (("2" (expand "beval_vs_post")
                                (("2" (flatten) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "p_inclusion_pre") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (Env type-eq-decl nil affine_box nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures))
   nil)
  (BITE_preservation-1 nil 3640431483
   ("" (skeep*)
    (("" (expand "BEval_Box_BITE")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (expand "beval_vs_BITE")
                  (("1" (expand "beval_vs_post")
                    (("1" (assert)
                      (("1" (expand "p_inclusion_pre" -3)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "BEval_Box_post")
                              (("1" (flatten)
                                (("1" (assert) (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "p_inclusion_pre" -2)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "BEval_Box_post" -13)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "beval_vs_BITE")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (expand "beval_vs_BITE")
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (expand "p_inclusion_pre" 1)
                              (("1" (expand "beval_vs_BITE_merge2")
                                (("1" (expand "BEval_Box_BITE_merge2")
                                  (("1" (expand "BEval_Box_BITE_merge1")
                                    (("1" (expand "BEval_Box_post")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "p_inclusion_pre")
                              (("2" (assert)
                                (("2" (flatten)
                                  (("2" (assert)
                                    (("2" (expand "BEval_Box_post")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -4 2 :hide? t)
                                              (("2"
                                                (apply-extensionality 2)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "BEval_Box_BITE_merge2")
                          (("2" (expand "p_inclusion_pre" 2)
                            (("2" (expand "p_inclusion_pre" -6)
                              (("2" (expand "BEval_Box_post" -12)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "p_inclusion_pre") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (Env type-eq-decl nil affine_box nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Maybe_Some_extensionality formula-decl nil Maybe structures))
   shostak))
 (beval___TCC1 0
  (beval___TCC1-2 "" 3640448228
   ("" (skeep)
    ((""
      (typepred
       "beval_vs((# `result := None[bool], `vs := vs, `n := n #))(bexpr)")
      (("" (expand "beval_vs_post") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((beval_vs const-decl "(beval_vs_post(bexpr, ctxt))" affine_boolexpr nil)
    (BaseType type-eq-decl nil affine nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (Env type-eq-decl nil affine_box nil)
    (Maybe type-decl nil Maybe structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (beval__ subtype
    "affine_boolexpr.beval_vs((# `result := Maybe[booleans.bool].None, `vs := affine_boolexpr.vs, `n := affine_boolexpr.n #))(affine_boolexpr.bexpr)`result"
    "(Maybe[booleans.bool].some?)"))
  (beval___TCC1-1 nil 3639912895
   ("" (skeep*)
    (("" (expand "beval_vs")
      ((""
        (typepred "boolexpr_lfcs
               [ContextData_beval_vs, beval_vs_post, beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND,
                beval_vs_BOR, beval_vs_BIMPLIES, beval_vs_BREL, beval_vs_BINCLUDES,
                beval_vs_BITE_merge1, beval_vs_BITE_merge2, beval_vs_BITE,
                beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F
               (bexpr)((# `result := None[bool], `vs := vs, `n := n #))")
        (("" (expand "beval_vs_post") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (BaseType type-eq-decl nil affine nil)
    (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil))
   nil
   (beval__ subtype
    "affine_boolexpr.beval_vs((# `result := Maybe[booleans.bool].None, `vs := affine_boolexpr.vs, `n := affine_boolexpr.n #))(affine_boolexpr.bexpr)`result"
    "(Maybe[booleans.bool].some?)")))
 (BEval__TCC1 0
  (BEval__TCC1-1 nil 3638882655 ("" (subtype-tcc) nil nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil))
   nil
   (BEval_ subtype
    "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)"
    "integers.upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))")))
 (BEval_inclusion____ 0
  (BEval_inclusion____-5 "" 3743866780
   ("" (skeep*)
    (("" (assert)
      (("" (flatten)
        (("" (expand "BEval_")
          (("" (lift-if -1)
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "BEval_Box")
                    (("1" (expand "beval__")
                      (("1"
                        (lemma "boolexpr_lfcmrs[ContextData_beval_vs
                          	         , beval_vs_post
                      					      , beval_vs_BCONST,
                                                                    beval_vs_BNOT, beval_vs_BAND,
                 						   beval_vs_BOR, beval_vs_BIMPLIES,
                 						   beval_vs_BREL, beval_vs_BINCLUDES,
                                       		  beval_vs_BITE_merge1,
                                       		  beval_vs_BITE_merge2,
                                       		  beval_vs_BITE,
                                                                    beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                                    beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                                CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_post(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BCONST(bexpr, box,
                                                                                first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BNOT(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BAND(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BOR(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BIMPLIES(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BREL(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BINCLUDES(bexpr, box,
                                                                                   first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                   BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                   BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                   BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                                               BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                             box,
                                                                                             first_noise_idx_available_box
                                                                                             (bexpr, box)),
                                                               BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                         box,
                                                                                         first_noise_idx_available_box
                                                                                         (bexpr, box)),
                                                               BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                                box,
                                                                                                first_noise_idx_available_box
                                                                                                (bexpr, box)),
                                                               BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                         box,
                                                                                         first_noise_idx_available_box
                                                                                         (bexpr, box))
                                                					
                                                                   , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                              (bexpr,
                                                                                                               box)))].preservation_property")
                        (("1" (inst -1 "bexpr" "_" "_")
                          (("1"
                            (inst -1
                             "(# `result := None[bool], `vs := vs, `n := length(box) #)::ContextData_beval_vs"
                             "_")
                            (("1"
                              (inst -1
                               "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                                           (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])")
                              (("1" (expand "p_inclusion_pre")
                                (("1" (assert)
                                  (("1" (split -1)
                                    (("1" (hide -2 -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "beval_vs")
                                          (("1"
                                            (name-replace
                                             "f1"
                                             "boolexpr_lfcs
                                               [ContextData_beval_vs, beval_vs_post,
                                                beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                                                beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE_merge1,
                                                beval_vs_BITE_merge2, beval_vs_BITE, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F")
                                            (("1"
                                              (name-replace
                                               "f2"
                                               "boolexpr_lfcs
                                                  [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                                                 first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                                                    first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F")
                                              (("1"
                                                (name-replace
                                                 "a"
                                                 "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result")
                                                (("1"
                                                  (name-replace
                                                   "b"
                                                   "val(f2(bexpr)
                                                                                                                          (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                                                  (None[bool], box,
                                                                                                                                   first_noise_idx_available_box(bexpr, box),
                                                                                                                                   null[CacheData])))`result")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "mk_CDBB")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "compatible_pairs?")
                                              (("1"
                                                (typepred "vs")
                                                (("1"
                                                  (use "vib_vibnoise")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "vars_in_box_noise?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skolem -2 "N")
                                                          (("1"
                                                            (inst 1 "N")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs_on?")
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("1"
                                                                    (typepred
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "idxs_ac_cache_not_in_idx_gap")
                                              (("2"
                                                (skeep :preds? t)
                                                (("2"
                                                  (assert)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "new_idxs_cache_not_in_idx_gap")
                                              (("3"
                                                (skeep :preds? t)
                                                (("3"
                                                  (assert)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "varidxs_re_cache_in_box")
                                              (("4"
                                                (skeep :preds? t)
                                                (("4"
                                                  (assert)
                                                  (("4" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep*)
                            (("2" (use "BEval_Box_BIMPLIES_preservation")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skeep*)
                            (("3" (use "BEval_Box_BOR_preservation")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1)
                          (("4" (skeep*)
                            (("4" (expand "BEval_Box_BITE_merge2")
                              (("4" (expand "beval_vs_BITE_merge2")
                                (("4" (lift-if 1)
                                  (("4" (split 1)
                                    (("1" (flatten) (("1" (grind) nil nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "p_inclusion_pre")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide-all-but 1)
                          (("5" (skeep*)
                            (("5" (expand "beval_vs_BITE_merge1")
                              (("5" (expand "BEval_Box_BITE_merge1")
                                (("5" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("6" (hide-all-but 1)
                          (("6" (skeep*)
                            (("6" (use "BITE_preservation")
                              (("6" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("7" (hide-all-but 1)
                          (("7" (skeep*)
                            (("7" (assert)
                              (("7"
                                (use "BLETIN_BoolExpr_merge1_pre_preservation")
                                (("7" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("8" (hide-all-but 1)
                          (("8" (skeep*)
                            (("8" (use "BLETIN_BoolExpr_pre_preservation")
                              (("8" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("9" (hide-all-but 1)
                          (("9" (skeep*)
                            (("9" (use "BLETIN_RealExpr_ini_pre_preservation")
                              (("9" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("10" (hide-all-but 1)
                          (("10" (skeep*)
                            (("10" (use "BLETIN_RealExpr_pre_preservation")
                              (("10" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("11" (hide-all-but 1)
                          (("11" (skeep*)
                            (("11" (use "BREL_pre_preservation")
                              (("11" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("12" (hide-all-but 1)
                          (("12" (skeep*)
                            (("12" (use "BINCLUDES_pre_preservation")
                              (("12" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("13" (hide-all-but 1)
                          (("13" (skeep*)
                            (("13" (use "BEval_Box_BAND_preservation")
                              (("13" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("14" (hide-all-but 1)
                          (("14" (skeep*)
                            (("14" (expand "p_inclusion_pre")
                              (("14" (flatten)
                                (("14" (expand "BEval_Box_BNOT" -4)
                                  (("14" (lift-if -4)
                                    (("14" (assert)
                                      (("14"
                                        (split -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "beval_vs_BNOT")
                                              (("1"
                                                (expand "beval_vs_post")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "BEval_Box_BNOT")
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("15" (hide-all-but 1)
                          (("15" (skeep*)
                            (("15" (expand "p_inclusion_pre")
                              (("15" (flatten)
                                (("15" (expand "BEval_Box_BCONST")
                                  (("15" (lift-if -2)
                                    (("15" (assert)
                                      (("15"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "beval_vs_BCONST")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BEval_ const-decl "Maybe[Maybe[bool]]" affine_boolexpr nil)
    (beval__ const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BAND_preservation formula-decl nil affine_boolexpr nil)
    (BINCLUDES_pre_preservation formula-decl nil affine_boolexpr nil)
    (BREL_pre_preservation formula-decl nil affine_boolexpr nil)
    (BLETIN_RealExpr_pre_preservation formula-decl nil affine_boolexpr nil)
    (BLETIN_RealExpr_ini_pre_preservation formula-decl nil affine_boolexpr
     nil)
    (BLETIN_BoolExpr_pre_preservation formula-decl nil affine_boolexpr nil)
    (BLETIN_BoolExpr_merge1_pre_preservation formula-decl nil affine_boolexpr
     nil)
    (BITE_preservation formula-decl nil affine_boolexpr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (idxs_ac const-decl "list[nat]" affine nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (BEval_Box_BOR_preservation formula-decl nil affine_boolexpr nil)
    (BEval_Box_BIMPLIES_preservation formula-decl nil affine_boolexpr nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mk_CDBB const-decl "CDBB(initial_bexpr, initial_box, first_added_idx)"
     affine_boolexpr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (vib_vibnoise formula-decl nil affine_box nil)
    (vars_in_box_noise? const-decl "bool" affine_box nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (below type-eq-decl nil naturalnumbers nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (<= const-decl "bool" reals nil) (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (beval_vs const-decl "(beval_vs_post(bexpr, ctxt))" affine_boolexpr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (length def-decl "nat" list_props nil)
    (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     IntervalExpr_adt interval_arith)
    (BOR adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bor?)]"
     IntervalExpr_adt interval_arith)
    (BITE adt-constructor-decl "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]"
     IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     IntervalExpr_adt interval_arith)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]"
     IntervalExpr_adt interval_arith)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (BCONST adt-constructor-decl "[bool -> (bconst?)]" IntervalExpr_adt
     interval_arith)
    (preservation_property formula-decl nil boolexpr_lfcmrs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (ContextData_beval_vs type-eq-decl nil affine_boolexpr nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (beval_vs_post const-decl "bool" affine_boolexpr nil)
    (beval_vs_BCONST const-decl "(beval_vs_post(bexpr, ctxt))" affine_boolexpr
     nil)
    (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (beval_vs_BNOT const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (beval_vs_BAND const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (beval_vs_BOR const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (beval_vs_BIMPLIES const-decl "(beval_vs_post(bexpr, ctxt0))"
     affine_boolexpr nil)
    (beval_vs_BREL const-decl "(beval_vs_post(bexpr, ctxt))" affine_boolexpr
     nil)
    (beval_vs_BINCLUDES const-decl "(beval_vs_post(bexpr, ctxt))"
     affine_boolexpr nil)
    (beval_vs_BITE_merge1 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (beval_vs_BITE_merge2 const-decl "ContextData_beval_vs" affine_boolexpr
     nil)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (beval_vs_BITE const-decl "(beval_vs_post(bexpr, ctxt0))" affine_boolexpr
     nil)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (beval_vs_BLETIN_RealExpr_ini const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (beval_vs_BLETIN_RealExpr const-decl "(beval_vs_post(bexpr, ctxt0))"
     affine_boolexpr nil)
    (beval_vs_BLETIN_BoolExpr_merge1 const-decl "ContextData_beval_vs"
     affine_boolexpr nil)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (beval_vs_BLETIN_BoolExpr const-decl "(beval_vs_post(bexpr, ctxt0))"
     affine_boolexpr nil)
    (Box type-eq-decl nil box interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (ContextData_BEval_Box type-eq-decl nil affine_boolexpr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (first_noise_idx_available_box const-decl "nat" affine_boolexpr nil)
    (CDBB type-eq-decl nil affine_boolexpr nil)
    (BEval_Box_post const-decl "bool" affine_boolexpr nil)
    (BEval_Box_BCONST const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))"
     affine_boolexpr nil)
    (BEval_Box_BNOT const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BAND const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BOR const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BIMPLIES const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BREL const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))"
     affine_boolexpr nil)
    (BEval_Box_BINCLUDES const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))"
     affine_boolexpr nil)
    (BEval_Box_BITE_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (BEval_Box_BITE_merge2 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (BEval_Box_BITE const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BLETIN_RealExpr_ini const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (BEval_Box_BLETIN_RealExpr const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (BEval_Box_BLETIN_BoolExpr_merge1 const-decl
     "CDBB(initial_bexpr, initial_box, first_added_idx)" affine_boolexpr nil)
    (BEval_Box_BLETIN_BoolExpr const-decl
     "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))"
     affine_boolexpr nil)
    (p_inclusion_pre const-decl "bool" affine_boolexpr nil)
    (BEval_Box const-decl "CDBB(initial_bexpr, initial_box, first_added_idx)"
     affine_boolexpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (BEval_inclusion____-4 "" 3640361572
   ("" (skeep*)
    (("" (assert)
      (("" (flatten)
        (("" (expand "BEval_")
          (("" (lift-if -1)
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "BEval_Box")
                    (("1" (expand "beval__")
                      (("1"
                        (lemma "boolexpr_lfcmrs[ContextData_beval_vs
                      	         , beval_vs_post
                  					      , beval_vs_BCONST,
                                                                beval_vs_BNOT, beval_vs_BAND,
             						   beval_vs_BOR, beval_vs_BIMPLIES,
             						   beval_vs_BREL, beval_vs_BINCLUDES,
                                   		  beval_vs_BITE_merge1,
                                   		  beval_vs_BITE_merge2,
                                   		  beval_vs_BITE,
                                                                beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                            CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_post(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BCONST(bexpr, box,
                                                                            first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BNOT(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BAND(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BOR(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BIMPLIES(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BREL(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BINCLUDES(bexpr, box,
                                                                               first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                               BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                               BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                               BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                                                           BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                         box,
                                                                                         first_noise_idx_available_box
                                                                                         (bexpr, box)),
                                                           BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box)),
                                                           BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                            box,
                                                                                            first_noise_idx_available_box
                                                                                            (bexpr, box)),
                                                           BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box))
                                            					
                                                               , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                          (bexpr,
                                                                                                           box)))].preservation_property")
                        (("1" (inst -1 "bexpr" "_" "_")
                          (("1"
                            (inst -1
                             "(# `result := None[bool], `vs := vs, `n := length(box) #)::ContextData_beval_vs"
                             "_")
                            (("1"
                              (inst -1
                               "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                                     (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])")
                              (("1" (expand "p_inclusion_pre")
                                (("1" (assert)
                                  (("1" (split -1)
                                    (("1" (hide -2 -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "beval_vs")
                                          (("1"
                                            (name-replace
                                             "f1"
                                             "boolexpr_lfcs
                                       [ContextData_beval_vs, beval_vs_post,
                                        beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                                        beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE_merge1,
                                        beval_vs_BITE_merge2, beval_vs_BITE, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                        beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F")
                                            (("1"
                                              (name-replace
                                               "f2"
                                               "boolexpr_lfcs
                                          [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                                         first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                                            first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F")
                                              (("1"
                                                (name-replace
                                                 "a"
                                                 "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result")
                                                (("1"
                                                  (name-replace
                                                   "b"
                                                   "val(f2(bexpr)
                                                                                                                  (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                                          (None[bool], box,
                                                                                                                           first_noise_idx_available_box(bexpr, box),
                                                                                                                           null[CacheData])))`result")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "mk_CDBB")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "compatible_pairs?")
                                              (("1"
                                                (typepred "vs")
                                                (("1"
                                                  (use "vib_vibnoise")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "vars_in_box_noise?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skolem -2 "N")
                                                          (("1"
                                                            (inst 1 "N")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs_on?")
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("1"
                                                                    (typepred
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "idxs_ac_cache_not_in_idx_gap")
                                              (("2"
                                                (skeep :preds? t)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "new_idxs_cache_not_in_idx_gap")
                                              (("3"
                                                (skeep :preds? t)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "varidxs_re_cache_in_box")
                                              (("4"
                                                (skeep :preds? t)
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep*)
                            (("2" (use "BEval_Box_BIMPLIES_preservation")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skeep*)
                            (("3" (use "BEval_Box_BOR_preservation")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1)
                          (("4" (skeep*)
                            (("4" (expand "BEval_Box_BITE_merge2")
                              (("4" (expand "beval_vs_BITE_merge2")
                                (("4" (lift-if 1)
                                  (("4" (split 1)
                                    (("1" (flatten) (("1" (grind) nil nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "p_inclusion_pre")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide-all-but 1)
                          (("5" (skeep*)
                            (("5" (expand "beval_vs_BITE_merge1")
                              (("5" (expand "BEval_Box_BITE_merge1")
                                (("5" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("6" (hide-all-but 1)
                          (("6" (skeep*)
                            (("6" (use "BITE_preservation")
                              (("6" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("7" (hide-all-but 1)
                          (("7" (skeep*)
                            (("7" (assert)
                              (("7"
                                (use "BLETIN_BoolExpr_merge1_pre_preservation")
                                (("7" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("8" (hide-all-but 1)
                          (("8" (skeep*)
                            (("8" (use "BLETIN_BoolExpr_pre_preservation")
                              (("8" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("9" (hide-all-but 1)
                          (("9" (skeep*)
                            (("9" (use "BLETIN_RealExpr_ini_pre_preservation")
                              (("9" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("10" (hide-all-but 1)
                          (("10" (skeep*)
                            (("10" (use "BLETIN_RealExpr_pre_preservation")
                              (("10" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("11" (hide-all-but 1)
                          (("11" (skeep*)
                            (("11" (use "BREL_pre_preservation")
                              (("11" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("12" (hide-all-but 1)
                          (("12" (skeep*)
                            (("12" (use "BINCLUDES_pre_preservation")
                              (("12" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("13" (hide-all-but 1)
                          (("13" (skeep*)
                            (("13" (use "BEval_Box_BAND_preservation")
                              (("13" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("14" (hide-all-but 1)
                          (("14" (skeep*)
                            (("14" (expand "p_inclusion_pre")
                              (("14" (flatten)
                                (("14" (expand "BEval_Box_BNOT" -4)
                                  (("14" (lift-if -4)
                                    (("14" (assert)
                                      (("14"
                                        (split -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "beval_vs_BNOT")
                                              (("1"
                                                (expand "beval_vs_post")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "BEval_Box_BNOT")
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("15" (hide-all-but 1)
                          (("15" (skeep*)
                            (("15" (expand "p_inclusion_pre")
                              (("15" (flatten)
                                (("15" (expand "BEval_Box_BCONST")
                                  (("15" (lift-if -2)
                                    (("15" (assert)
                                      (("15"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "beval_vs_BCONST")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (idxs_ac const-decl "list[nat]" affine nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (vib_vibnoise formula-decl nil affine_box nil)
    (vars_in_box_noise? const-decl "bool" affine_box nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     IntervalExpr_adt interval_arith)
    (BOR adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bor?)]"
     IntervalExpr_adt interval_arith)
    (BITE adt-constructor-decl "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]"
     IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     IntervalExpr_adt interval_arith)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]"
     IntervalExpr_adt interval_arith)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (BCONST adt-constructor-decl "[bool -> (bconst?)]" IntervalExpr_adt
     interval_arith)
    (preservation_property formula-decl nil boolexpr_lfcmrs nil)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bop1 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bop2 shared-adt-accessor-decl
     "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]"
     IntervalExpr_adt interval_arith)
    (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures))
   shostak)
  (BEval_inclusion____-3 nil 3640359321
   ("" (skeep*)
    (("" (assert)
      (("" (flatten)
        (("" (expand "BEval_")
          (("" (lift-if -1)
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "BEval_Box")
                    (("1" (expand "beval__")
                      (("1"
                        (lemma "boolexpr_lfcmrs[ContextData_beval_vs
                  	         , LAMBDA(bexpr,ctxt0)(ctxt): some?(ctxt`result)
              					      , beval_vs_BCONST,
                                                            beval_vs_BNOT, beval_vs_BAND,
         						   beval_vs_BOR, beval_vs_BIMPLIES,
         						   beval_vs_BREL, beval_vs_BINCLUDES,
                               		  beval_vs_BITE_merge1,
                               		  beval_vs_BITE_merge2,
                               		  beval_vs_BITE,
                                                            beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                            beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                        CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_post(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BCONST(bexpr, box,
                                                                        first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BNOT(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BAND(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BOR(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BIMPLIES(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BREL(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BINCLUDES(bexpr, box,
                                                                           first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                           BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                           BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                           BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                                                       BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box)),
                                                       BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                        box,
                                                                                        first_noise_idx_available_box
                                                                                        (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box))
                                        					
                                                           , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                      (bexpr,
                                                                                                       box)))].preservation_property")
                        (("1" (inst -1 "bexpr" "_" "_")
                          (("1"
                            (inst -1
                             "(# `result := None, `vs := vs, `n := length(box) #)::ContextData_beval_vs"
                             "_")
                            (("1"
                              (inst -1
                               "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                               (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])")
                              (("1" (expand "p_inclusion_pre")
                                (("1" (assert)
                                  (("1" (split -1)
                                    (("1" (hide -2 -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "beval_vs")
                                          (("1"
                                            (name-replace
                                             "f1"
                                             "boolexpr_lfcs
                               [ContextData_beval_vs, LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): some?(ctxt`result),
                                beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                                beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE_merge1,
                                beval_vs_BITE_merge2, beval_vs_BITE, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F")
                                            (("1"
                                              (name-replace
                                               "f2"
                                               "boolexpr_lfcs
                                  [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                                 first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                                    first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F")
                                              (("1"
                                                (name-replace
                                                 "a"
                                                 "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result")
                                                (("1"
                                                  (name-replace
                                                   "b"
                                                   "val(f2(bexpr)
                                                                                                        (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                                (None[bool], box,
                                                                                                                 first_noise_idx_available_box(bexpr, box),
                                                                                                                 null[CacheData])))`result")
                                                  (("1" (assert) nil)))))
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep*)
                                                  (("2"
                                                    (use
                                                     "BEval_Box_BLETIN_RealExpr_post")
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))
                                     ("2" (hide 2)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "mk_CDBB")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "compatible_pairs?")
                                              (("1"
                                                (typepred "vs")
                                                (("1"
                                                  (use "vib_vibnoise")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "vars_in_box_noise?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skolem -2 "N")
                                                          (("1"
                                                            (inst 1 "N")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs_on?")
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("1"
                                                                    (typepred
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))))))))))))))))))))
                                             ("2"
                                              (expand
                                               "idxs_ac_cache_not_in_idx_gap")
                                              (("2"
                                                (skeep :preds? t)
                                                (("2" (assert) nil)))))
                                             ("3"
                                              (expand
                                               "new_idxs_cache_not_in_idx_gap")
                                              (("3"
                                                (skeep :preds? t)
                                                (("3" (assert) nil)))))
                                             ("4"
                                              (expand
                                               "varidxs_re_cache_in_box")
                                              (("4"
                                                (skeep :preds? t)
                                                (("4"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))
                         ("2" (hide-all-but 1)
                          (("2" (skeep*)
                            (("2" (use "BEval_Box_BIMPLIES_preservation")
                              (("2" (assert) nil)))))))
                         ("3" (hide-all-but 1)
                          (("3" (skeep*)
                            (("3" (use "BEval_Box_BOR_preservation")
                              (("3" (assert) nil)))))))
                         ("4" (hide-all-but 1)
                          (("4" (skeep*)
                            (("4" (use "BEval_Box_BIMPLIES_post")
                              (("4" (assert) nil)))))))
                         ("5" (hide-all-but 1)
                          (("5" (skeep*)
                            (("5" (use "BEval_Box_BOR_post")
                              (("5" (assert) nil)))))))
                         ("6" (hide-all-but 1) (("6" (grind) nil)))
                         ("7" (hide-all-but 1) (("7" (grind) nil)))
                         ("8" (hide-all-but 1)
                          (("8" (skeep*)
                            (("8" (expand "BEval_Box_BITE_merge2")
                              (("8" (expand "beval_vs_BITE_merge2")
                                (("8" (propax) nil)))))))))
                         ("9" (hide-all-but 1)
                          (("9" (skeep*)
                            (("9" (expand "beval_vs_BITE_merge1")
                              (("9" (expand "BEval_Box_BITE_merge1")
                                (("9" (propax) nil)))))))))
                         ("10" (hide-all-but 1)
                          (("10" (skeep*)
                            (("10" (expand "BEval_Box_BITE")
                              (("10" (lift-if 1)
                                (("10" (split 1)
                                  (("1" (flatten)
                                    (("1" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "beval_vs_BITE")
                                          (("1"
                                            (expand "p_inclusion_pre" -4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil)))))))))))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "p_inclusion_pre" -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "beval_vs_BITE")
                                                  (("2"
                                                    (propax)
                                                    nil)))))))))))))))))
                                   ("2" (flatten)
                                    (("2" (expand "p_inclusion_pre")
                                      (("2" (propax) nil)))))))))))))))
                         ("11" (hide-all-but 1)
                          (("11" (skeep*)
                            (("11" (assert)
                              (("11" (use "BEval_Box_BITE_post")
                                (("11" (assert) nil)))))))))
                         ("12" (hide-all-but 1) (("12" (grind) nil)))
                         ("13" (hide-all-but 1)
                          (("13" (skeep*)
                            (("13"
                              (use "BLETIN_BoolExpr_merge1_pre_preservation")
                              (("13" (assert) nil)))))))
                         ("14" (hide-all-but 1)
                          (("14" (skeep*)
                            (("14" (use "BLETIN_BoolExpr_pre_preservation")
                              (("14" (assert) nil)))))))
                         ("15" (hide-all-but 1)
                          (("15" (skeep*)
                            (("15" (use "BEval_Box_BLETIN_BoolExpr_post")
                              (("15" (assert) nil)))))))
                         ("16" (hide-all-but 1) (("16" (grind) nil)))
                         ("17" (hide-all-but 1)
                          (("17" (skeep*)
                            (("17"
                              (use "BLETIN_RealExpr_ini_pre_preservation")
                              (("17" (assert) nil)))))))
                         ("18" (hide-all-but 1)
                          (("18" (skeep*)
                            (("18" (use "BLETIN_RealExpr_pre_preservation")
                              (("18" (assert) nil)))))))
                         ("19" (hide-all-but 1)
                          (("19" (skeep*)
                            (("19" (use "BEval_Box_BLETIN_RealExpr_post")
                              (("19" (assert) nil)))))))
                         ("20" (hide-all-but 1) (("20" (grind) nil)))
                         ("21" (hide-all-but 1)
                          (("21" (skeep*)
                            (("21" (use "BREL_pre_preservation")
                              (("21" (assert) nil)))))))
                         ("22" (hide-all-but 1)
                          (("22" (skeep*)
                            (("22" (use "BEval_Box_BREL_post") nil)))))
                         ("23" (hide-all-but 1) (("23" (grind) nil)))
                         ("24" (hide-all-but 1)
                          (("24" (skeep*)
                            (("24" (use "BINCLUDES_pre_preservation")
                              (("24" (assert) nil)))))))
                         ("25" (hide-all-but 1)
                          (("25" (skeep*)
                            (("25" (use "BEval_Box_BINCLUDES_post") nil)))))
                         ("26" (hide-all-but 1) (("26" (grind) nil)))
                         ("27" (hide-all-but 1)
                          (("27" (skeep*)
                            (("27" (use "BEval_Box_BAND_preservation")
                              (("27" (assert) nil)))))))
                         ("28" (hide-all-but 1)
                          (("28" (skeep*)
                            (("28" (expand "p_inclusion_pre" -1)
                              (("28" (case "some?(g_ctxt0)")
                                (("1" (assert)
                                  (("1" (flatten)
                                    (("1" (expand "p_inclusion_pre" 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "BEval_Box_BNOT" 1)
                                          (("1"
                                            (expand "beval_vs_BNOT" 1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil)))))))))))))))
                                 ("2" (expand "p_inclusion_pre" 2)
                                  (("2" (flatten)
                                    (("2" (hide-all-but (-3 1))
                                      (("2" (grind) nil)))))))))))))))
                         ("29" (hide-all-but 1)
                          (("29" (skeep*)
                            (("29" (expand "p_inclusion_pre" 1)
                              (("29" (flatten)
                                (("29" (expand "p_inclusion_pre" -1)
                                  (("29" (case "some?(g_ctxt0)")
                                    (("1" (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "BEval_Box_BCONST" 1)
                                          (("1"
                                            (expand "beval_vs_BCONST" 1)
                                            (("1" (assert) nil)))))))))
                                     ("2" (hide-all-but (-2 1))
                                      (("2" (grind) nil)))))))))))))))
                         ("30" (hide-all-but 1)
                          (("30" (skeep*)
                            (("30" (use "BEval_Box_BAND_post")
                              (("30" (assert) nil)))))))
                         ("31" (hide-all-but 1)
                          (("31" (skeep*)
                            (("31" (use "BEval_Box_BNOT_post")
                              (("31" (assert) nil)))))))
                         ("32" (hide-all-but 1)
                          (("32" (skeep*)
                            (("32" (use "BEval_Box_BCONST_post") nil)))))
                         ("33" (hide-all-but 1) (("33" (grind) nil)))
                         ("34" (hide-all-but 1) (("34" (grind) nil)))
                         ("35" (hide-all-but 1) (("35" (grind) nil)))))))))))
                 ("2" (propax) nil))))))))))))))
    nil)
   nil nil)
  (BEval_inclusion____-2 nil 3639914392
   ("" (skeep*)
    (("" (assert)
      (("" (flatten)
        (("" (expand "BEval_")
          (("" (lift-if -1)
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "BEval_Box")
                    (("1" (expand "beval__")
                      (("1"
                        (lemma "boolexpr_lfcmrs[ContextData_beval_vs
              	         , LAMBDA(bexpr,ctxt0)(ctxt): some?(ctxt`result)
          					      , beval_vs_BCONST,
                                                        beval_vs_BNOT, beval_vs_BAND,
     						   beval_vs_BOR, beval_vs_BIMPLIES,
     						   beval_vs_BREL, beval_vs_BINCLUDES,
                           		  beval_vs_BITE,
                           		  beval_vs_BITE_merge1,
                           		  beval_vs_BITE_merge2,
                                                        beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                        beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                    CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_post(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BCONST(bexpr, box,
                                                                    first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BNOT(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BAND(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BOR(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BIMPLIES(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BREL(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BINCLUDES(bexpr, box,
                                                                       first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                       BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                       BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                       BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                                                   BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box)),
                                                   BEval_Box_BLETIN_RealExpr(bexpr,
                                                                             box,
                                                                             first_noise_idx_available_box
                                                                             (bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                    box,
                                                                                    first_noise_idx_available_box
                                                                                    (bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                             box,
                                                                             first_noise_idx_available_box
                                                                             (bexpr, box))
                                    					
                                                       , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                  (bexpr,
                                                                                                   box)))].preservation_property")
                        (("1" (inst -1 "bexpr" "_" "_")
                          (("1"
                            (inst -1
                             "(# `result := None, `vs := vs, `n := length(box) #)::ContextData_beval_vs"
                             "_")
                            (("1"
                              (inst -1
                               "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                         (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])")
                              (("1" (expand "p_inclusion_pre")
                                (("1" (assert)
                                  (("1" (split -1)
                                    (("1" (hide -2 -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "beval_vs")
                                          (("1"
                                            (name-replace
                                             "f1"
                                             "boolexpr_lfcs
                       [ContextData_beval_vs, LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): some?(ctxt`result),
                        beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                        beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE, beval_vs_BITE_merge1,
                        beval_vs_BITE_merge2, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                        beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F")
                                            (("1"
                                              (name-replace
                                               "f2"
                                               "boolexpr_lfcs
                          [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                         first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                            first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F")
                                              (("1"
                                                (name-replace
                                                 "a"
                                                 "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result")
                                                (("1"
                                                  (name-replace
                                                   "b"
                                                   "val(f2(bexpr)
                                                                                              (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                      (None[bool], box,
                                                                                                       first_noise_idx_available_box(bexpr, box),
                                                                                                       null[CacheData])))`result")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep*)
                                                  (("2"
                                                    (use
                                                     "BEval_Box_BLETIN_RealExpr_post")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "mk_CDBB")
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "compatible_pairs?")
                                              (("1"
                                                (typepred "vs")
                                                (("1"
                                                  (use "vib_vibnoise")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "vars_in_box_noise?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skolem -2 "N")
                                                          (("1"
                                                            (inst 1 "N")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "compatible_pairs_on?")
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("1"
                                                                    (typepred
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "idxs_ac_cache_not_in_idx_gap")
                                              (("2"
                                                (skeep :preds? t)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "new_idxs_cache_not_in_idx_gap")
                                              (("3"
                                                (skeep :preds? t)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "varidxs_re_cache_in_box")
                                              (("4"
                                                (skeep :preds? t)
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep*)
                            (("2" (use "BEval_Box_BIMPLIES_preservation")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skeep*)
                            (("3" (use "BEval_Box_BOR_preservation")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1)
                          (("4" (skeep*)
                            (("4" (use "BEval_Box_BIMPLIES_post")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("5" (hide-all-but 1)
                          (("5" (skeep*)
                            (("5" (use "BEval_Box_BOR_post")
                              (("5" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("6" (hide-all-but 1) (("6" (grind) nil nil)) nil)
                         ("7" (hide-all-but 1) (("7" (grind) nil nil)) nil)
                         ("8" (hide-all-but 1)
                          (("8" (skeep*)
                            (("8" (expand "BEval_Box_BITE_merge2")
                              (("8" (expand "beval_vs_BITE_merge2")
                                (("8" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("9" (hide-all-but 1)
                          (("9" (skeep*)
                            (("9" (expand "beval_vs_BITE_merge1")
                              (("9" (expand "BEval_Box_BITE_merge1")
                                (("9" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("10" (hide-all-but 1)
                          (("10" (skeep*)
                            (("10" (expand "BEval_Box_BITE")
                              (("10" (lift-if 1)
                                (("10" (split 1)
                                  (("1" (flatten)
                                    (("1" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "beval_vs_BITE")
                                          (("1"
                                            (expand "p_inclusion_pre" -4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "p_inclusion_pre" -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "beval_vs_BITE")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "p_inclusion_pre")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("11" (hide-all-but 1)
                          (("11" (skeep*)
                            (("11" (assert)
                              (("11" (use "BEval_Box_BITE_post")
                                (("11" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("12" (hide-all-but 1) (("12" (grind) nil nil)) nil)
                         ("13" (hide-all-but 1)
                          (("13" (skeep*)
                            (("13"
                              (use "BLETIN_BoolExpr_merge1_pre_preservation")
                              (("13" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("14" (hide-all-but 1)
                          (("14" (skeep*)
                            (("14" (use "BLETIN_BoolExpr_pre_preservation")
                              (("14" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("15" (hide-all-but 1)
                          (("15" (skeep*)
                            (("15" (use "BEval_Box_BLETIN_BoolExpr_post")
                              (("15" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("16" (hide-all-but 1) (("16" (grind) nil nil)) nil)
                         ("17" (hide-all-but 1)
                          (("17" (skeep*)
                            (("17"
                              (use "BLETIN_RealExpr_ini_pre_preservation")
                              (("17" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("18" (hide-all-but 1)
                          (("18" (skeep*)
                            (("18" (use "BLETIN_RealExpr_pre_preservation")
                              (("18" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("19" (hide-all-but 1)
                          (("19" (skeep*)
                            (("19" (use "BEval_Box_BLETIN_RealExpr_post")
                              (("19" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("20" (hide-all-but 1) (("20" (grind) nil nil)) nil)
                         ("21" (hide-all-but 1)
                          (("21" (skeep*)
                            (("21" (use "BREL_pre_preservation")
                              (("21" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("22" (hide-all-but 1)
                          (("22" (skeep*)
                            (("22" (use "BEval_Box_BREL_post") nil nil)) nil))
                          nil)
                         ("23" (hide-all-but 1) (("23" (grind) nil nil)) nil)
                         ("24" (hide-all-but 1)
                          (("24" (skeep*)
                            (("24" (use "BINCLUDES_pre_preservation")
                              (("24" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("25" (hide-all-but 1)
                          (("25" (skeep*)
                            (("25" (use "BEval_Box_BINCLUDES_post") nil nil))
                            nil))
                          nil)
                         ("26" (hide-all-but 1) (("26" (grind) nil nil)) nil)
                         ("27" (hide-all-but 1)
                          (("27" (skeep*)
                            (("27" (use "BEval_Box_BAND_preservation")
                              (("27" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("28" (hide-all-but 1)
                          (("28" (skeep*)
                            (("28" (expand "p_inclusion_pre" -1)
                              (("28" (case "some?(g_ctxt0)")
                                (("1" (assert)
                                  (("1" (flatten)
                                    (("1" (expand "p_inclusion_pre" 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "BEval_Box_BNOT" 1)
                                          (("1"
                                            (expand "beval_vs_BNOT" 1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "p_inclusion_pre" 2)
                                  (("2" (flatten)
                                    (("2" (hide-all-but (-3 1))
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("29" (hide-all-but 1)
                          (("29" (skeep*)
                            (("29" (expand "p_inclusion_pre" 1)
                              (("29" (flatten)
                                (("29" (expand "p_inclusion_pre" -1)
                                  (("29" (case "some?(g_ctxt0)")
                                    (("1" (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "BEval_Box_BCONST" 1)
                                          (("1"
                                            (expand "beval_vs_BCONST" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (-2 1))
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("30" (hide-all-but 1)
                          (("30" (skeep*)
                            (("30" (use "BEval_Box_BAND_post")
                              (("30" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("31" (hide-all-but 1)
                          (("31" (skeep*)
                            (("31" (use "BEval_Box_BNOT_post")
                              (("31" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("32" (hide-all-but 1)
                          (("32" (skeep*)
                            (("32" (use "BEval_Box_BCONST_post") nil nil))
                            nil))
                          nil)
                         ("33" (hide-all-but 1) (("33" (grind) nil nil)) nil)
                         ("34" (hide-all-but 1) (("34" (grind) nil nil)) nil)
                         ("35" (hide-all-but 1) (("35" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (vib_vibnoise formula-decl nil affine_box nil)
    (vars_in_box_noise? const-decl "bool" affine_box nil)
    (length_null formula-decl nil more_list_props structures)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (BIMPLIES adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bimplies?)]"
     IntervalExpr_adt interval_arith)
    (BOR adt-constructor-decl "[[BoolExpr, BoolExpr] -> (bor?)]"
     IntervalExpr_adt interval_arith)
    (BITE adt-constructor-decl "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]"
     IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     IntervalExpr_adt interval_arith)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]"
     IntervalExpr_adt interval_arith)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (BCONST adt-constructor-decl "[bool -> (bconst?)]" IntervalExpr_adt
     interval_arith)
    (Maybe type-decl nil Maybe structures)
    (Env type-eq-decl nil affine_box nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures))
   nil)
  (BEval_inclusion____-1 nil 3639913269
   ("" (skeep*)
    (("" (assert)
      (("" (flatten)
        (("" (expand "BEval_")
          (("" (lift-if -1)
            (("" (assert)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "BEval_Box")
                      (("1" (expand "beval__")
                        (("1"
                          (lemma "boolexpr_lfcmrs[ContextData_beval_vs,
                                          LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): TRUE, beval_vs_BCONST,
                                          beval_vs_BNOT, beval_vs_BAND, beval_vs_BREL, beval_vs_BINCLUDES,
             		  beval_vs_BITE,
             		  beval_vs_BITE_merge1,
             		  beval_vs_BITE_merge2,
                                          beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                          beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                      CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_post(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BCONST(bexpr, box,
                                                      first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BNOT(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BAND(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BREL(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BINCLUDES(bexpr, box,
                                                         first_noise_idx_available_box(bexpr,
                                                                                       box)),
         BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                       box)),
         BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                       box)),
         BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                       box)),
                                     BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                   box,
                                                                   first_noise_idx_available_box
                                                                   (bexpr, box)),
                                     BEval_Box_BLETIN_RealExpr(bexpr,
                                                               box,
                                                               first_noise_idx_available_box
                                                               (bexpr, box)),
                                     BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                      box,
                                                                      first_noise_idx_available_box
                                                                      (bexpr, box)),
                                     BEval_Box_BLETIN_BoolExpr(bexpr,
                                                               box,
                                                               first_noise_idx_available_box
                                                               (bexpr, box))
                      					
                                         , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                    (bexpr,
                                                                                     box)))].preservation_property")
                          (("1" (inst -1 "bexpr" "_" "_")
                            (("1"
                              (inst -1
                               "(# `result := None, `vs := vs, `n := length(box) #)::ContextData_beval_vs"
                               "_")
                              (("1"
                                (inst -1
                                 "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                       (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])")
                                (("1" (expand "p_inclusion_pre")
                                  (("1" (assert)
                                    (("1" (split -1)
                                      (("1"
                                        (hide -2 -3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "beval_vs")
                                            (("1"
                                              (name-replace
                                               "f1"
                                               "boolexpr_lfcs
                                                            [ContextData_beval_vs,
                                                             LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): TRUE, beval_vs_BCONST,
                                                             beval_vs_BNOT, beval_vs_BAND, beval_vs_BREL, beval_vs_BINCLUDES,
                          		 beval_vs_BITE,
                 			 beval_vs_BITE_merge1,
                 			 beval_vs_BITE_merge2,
                                                             beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                             beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F")
                                              (("1"
                                                (name-replace
                                                 "f2"
                                                 "boolexpr_lfcs
                                                      [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_post(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BCONST(bexpr, box,
                                                                        first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BNOT(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BAND(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BREL(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BINCLUDES(bexpr, box,
                                                                           first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                          		  BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                  box)),
                          		  BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                  box)),
                          		  BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                  box)),
                                                       BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box)),
                                                       BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                        box,
                                                                                        first_noise_idx_available_box
                                                                                        (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box))].F")
                                                (("1"
                                                  (name-replace
                                                   "a"
                                                   "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result")
                                                  (("1"
                                                    (name-replace
                                                     "b"
                                                     "val(f2(bexpr)
                                                              (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                      (None[bool], box,
                                                                       first_noise_idx_available_box(bexpr, box),
                                                                       null[CacheData])))`result")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep*)
                                                    (("2"
                                                      (use
                                                       "BEval_Box_BLETIN_RealExpr_post")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "mk_CDBB")
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (expand "compatible_pairs?")
                                                (("1"
                                                  (typepred "vs")
                                                  (("1"
                                                    (use "vib_vibnoise")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "vars_in_box_noise?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skolem -2 "N")
                                                            (("1"
                                                              (inst 1 "N")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "compatible_pairs_on?")
                                                                  (("1"
                                                                    (skolem
                                                                     1
                                                                     "i")
                                                                    (("1"
                                                                      (typepred
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "idxs_ac_cache_not_in_idx_gap")
                                                (("2"
                                                  (skeep :preds? t)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "new_idxs_cache_not_in_idx_gap")
                                                (("3"
                                                  (skeep :preds? t)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (expand
                                                 "varidxs_re_cache_in_box")
                                                (("4"
                                                  (skeep :preds? t)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skeep*)
                              (("2" (expand "BEval_Box_BITE_merge2")
                                (("2" (expand "beval_vs_BITE_merge2")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (skeep*)
                              (("3" (expand "beval_vs_BITE_merge1")
                                (("3" (expand "BEval_Box_BITE_merge1")
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (skeep*)
                              (("4" (expand "BEval_Box_BITE")
                                (("4" (lift-if 1)
                                  (("4" (split 1)
                                    (("1" (flatten)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "beval_vs_BITE")
                                            (("1"
                                              (expand "p_inclusion_pre" -4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "p_inclusion_pre" -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "beval_vs_BITE")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (expand "p_inclusion_pre")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide-all-but 1)
                            (("5" (skeep*)
                              (("5" (use "BEval_Box_TCC11")
                                (("5" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("6" (hide-all-but 1)
                            (("6" (skeep*)
                              (("6"
                                (use "BLETIN_BoolExpr_merge1_pre_preservation")
                                (("6" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("7" (hide-all-but 1)
                            (("7" (skeep*)
                              (("7" (use "BLETIN_BoolExpr_pre_preservation")
                                (("7" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("8" (hide-all-but 1)
                            (("8" (skeep*)
                              (("8" (use "BEval_Box_BLETIN_BoolExpr_post")
                                (("8" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("9" (hide-all-but 1)
                            (("9" (skeep*)
                              (("9"
                                (use "BLETIN_RealExpr_ini_pre_preservation")
                                (("9" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("10" (hide-all-but 1)
                            (("10" (skeep*)
                              (("10" (use "BLETIN_RealExpr_pre_preservation")
                                (("10" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("11" (hide-all-but 1)
                            (("11" (skeep*)
                              (("11" (use "BEval_Box_BLETIN_RealExpr_post")
                                (("11" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("12" (hide-all-but 1)
                            (("12" (skeep*)
                              (("12" (use "BREL_pre_preservation")
                                (("12" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("13" (hide-all-but 1)
                            (("13" (skeep*)
                              (("13" (use "BEval_Box_BREL_post") nil nil))
                              nil))
                            nil)
                           ("14" (hide-all-but 1)
                            (("14" (skeep*)
                              (("14" (use "BINCLUDES_pre_preservation")
                                (("14" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("15" (hide-all-but 1)
                            (("15" (skeep*)
                              (("15" (use "BEval_Box_BINCLUDES_post") nil
                                nil))
                              nil))
                            nil)
                           ("16" (hide-all-but 1)
                            (("16" (skeep*)
                              (("16" (expand "p_inclusion_pre" 1)
                                (("16" (flatten)
                                  (("16" (expand "p_inclusion_pre" -1)
                                    (("16" (case "some?(g_ctxt1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "p_inclusion_pre" -11)
                                            (("1"
                                              (case "some?(g_ctxt2)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "BEval_Box_BAND"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "beval_vs_BAND"
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lift-if -22)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split -22)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 -13))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -5))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("17" (hide-all-but 1)
                            (("17" (skeep*)
                              (("17" (expand "p_inclusion_pre" -1)
                                (("17" (case "some?(g_ctxt0)")
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (expand "p_inclusion_pre" 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "BEval_Box_BNOT" 1)
                                            (("1"
                                              (expand "beval_vs_BNOT" 1)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "p_inclusion_pre" 2)
                                    (("2" (flatten)
                                      (("2"
                                        (hide-all-but (-3 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("18" (hide-all-but 1)
                            (("18" (skeep*)
                              (("18" (expand "p_inclusion_pre" 1)
                                (("18" (flatten)
                                  (("18" (expand "p_inclusion_pre" -1)
                                    (("18" (case "some?(g_ctxt0)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "BEval_Box_BCONST" 1)
                                            (("1"
                                              (expand "beval_vs_BCONST" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-2 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("19" (hide-all-but 1)
                            (("19" (skeep*)
                              (("19" (use "BEval_Box_BAND_post")
                                (("19" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("20" (hide-all-but 1)
                            (("20" (skeep*)
                              (("20" (use "BEval_Box_BNOT_post")
                                (("20" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("21" (hide-all-but 1)
                            (("21" (skeep*)
                              (("21" (use "BEval_Box_BCONST_post") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (boolexpr? const-decl "bool" interval_expr interval_arith)
    (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt
     interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Env type-eq-decl nil affine_box nil)
    (Maybe type-decl nil Maybe structures)
    (BCONST adt-constructor-decl "[bool -> (bconst?)]" IntervalExpr_adt
     interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl "[[RealExpr, Interval] -> (bincludes?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BLETIN adt-constructor-decl "[[IntervalExpr, BoolExpr] -> (bletin?)]"
     IntervalExpr_adt interval_arith)
    (BITE adt-constructor-decl "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]"
     IntervalExpr_adt interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (length_null formula-decl nil more_list_props structures)
    (vars_in_box_noise? const-decl "bool" affine_box nil)
    (vib_vibnoise formula-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith))
   nil))
 (BEval_inclusion_Proper____ 0
  (BEval_inclusion_Proper____-1 nil 3639913788
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (iff)
          (("" (lemma "BEval_inclusion____")
            (("" (inst -1 "pox" _ "bexpr")
              (("" (split)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (inst? -)
                      (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (inst -1 "midvars(pox)")
                      (("2" (inst -2 "midvars(pox)") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (midvars const-decl "(vars_in_box?(pox))" box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (BEval_inclusion____ formula-decl nil affine_boolexpr nil))
   nil)))


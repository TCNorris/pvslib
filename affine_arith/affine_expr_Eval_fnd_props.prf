(affine_expr_Eval_fnd_props
 (cp_box_vs_expansion__TCC1 0
  (cp_box_vs_expansion__TCC1-1 nil 3646560460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith) (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (above nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (cp_box_vs_expansion_ subtype "affine_expr_Eval_fnd_props.nextfreeidx"
    "nat")))
 (cp_box_vs_expansion__TCC2 0
  (cp_box_vs_expansion__TCC2-1 nil 3646560460 ("" (subtype-tcc) nil nil)
   ((null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith) (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (<= const-decl "bool" reals nil) (Epsilon type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil) (next_idx const-decl "nat" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval_ac_noise const-decl "real" affine nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (cp_box_vs_expansion_ subtype "affine_expr_Eval_fnd_props.added_idx"
    "integers.upfrom((number_fields.+)(1, affine_box.last_idx_in_box(affine_expr_Eval_fnd_props.box)))")))
 (cp_box_vs_expansion__TCC3 0
  (cp_box_vs_expansion__TCC3-2 nil 3646582424
   ("" (skeep*)
    (("" (typepred "cache")
      (("" (use "correct_cache?_alt_def")
        (("" (replace -1 :hide? t)
          (("" (use "correct_cache?_alt_def")
            (("" (replace -1 :hide? t)
              (("" (lemma "every_implies[CacheData]")
                (("" (inst? -1 :where 1)
                  (("" (inst? -1 :where -2)
                    (("" (assert)
                      (("" (use "CacheData_correct?_inclusion") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((above nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (every_implies formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil))
   nil
   (cp_box_vs_expansion_ subtype "affine_expr_Eval_fnd_props.cache"
    "(affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_expr_Eval_fnd_props.box, (: affine_expr_Eval_fnd_props.I :))))"))
  (cp_box_vs_expansion__TCC3-1 nil 3646560460 ("" (subtype-tcc) nil nil) nil
   nil
   (cp_box_vs_expansion_ subtype "affine_expr_Eval_fnd_props.cache"
    "(affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_expr_Eval_fnd_props.box, (: affine_expr_Eval_fnd_props.I :))))")))
 (cp_box_vs_expansion_ 0
  (cp_box_vs_expansion_-1 nil 3646568610
   ("" (skeep*)
    (("" (label "iacniig" -3)
      (("" (hide "iacniig")
        (("" (label "vrcib" -3)
          (("" (hide vrcib)
            (("" (label nicniig -3)
              (("" (hide nicniig)
                (("" (typepred "x")
                  (("" (skolem -1 "e")
                    (("" (name "e_" "IF SingInterval?(I) THEN 0 ELSE e ENDIF")
                      (("" (inst 1 "e_")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (expand "vars_in_box_compatible?" 1)
                              (("1" (skolem 1 "i")
                                (("1" (typepred "i")
                                  (("1" (case "i<length(box)")
                                    (("1"
                                      (case
                                       "nth(append(box, (: I :)), i) = nth(box, i)")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (use "eval_upd_no_idxs_ac")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use "gnbi_upd_2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1"
                                                      (expand
                                                       "vars_in_box_compatible?"
                                                       -5)
                                                      (("1"
                                                        (inst -5 "i")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -3
                                                   :dir
                                                   RL
                                                   :hide?
                                                   t)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "idxs_ac_var_ac")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -3 :dir RL :hide? t)
                                            (("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -1))
                                        (("2"
                                          (use
                                           "more_list_props[Interval].nth_append")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil)
                                     ("2" (case "i=length(box)")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (hide -1 1)
                                          (("1"
                                            (case
                                             "nth(append(box, (: I :)), length(box)) = nth((: I :), length(box) - length(box))")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" 1)
                                                  (("1"
                                                    (use "eval_var_ac")
                                                    (("1"
                                                      (replace -1 :hide? t)
                                                      (("1"
                                                        (use "gnbi_upd")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           RL
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "more_list_props[Interval].nth_append")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (use "length_append[Interval]")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "length_append[Interval]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?" 1)
                              (("2" (skolem 1 "i")
                                (("2" (skolem 1 "n")
                                  (("2" (expand "compatible_pairs_on?" -4)
                                    (("2" (inst -4 "i")
                                      (("2"
                                        (inst -4 "n")
                                        (("1"
                                          (expand "eval_ACExpr_Env")
                                          (("1"
                                            (use "eval_vs_idempotence")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -1 :hide? t :dir RL)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "eval_upd_no_idxs_ac")
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1 :hide? t)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case
                                                               "varidx_powvar(nth(cache, i)`1) < length(box)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth_ac")
                                                                  (("1"
                                                                    (case
                                                                     "nth(append(box, (: I :)), varidx_powvar(nth(cache, i)`1)) =
                              nth(box, varidx_powvar(nth(cache, i)`1))")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (expand
                                                                         "pow_var_compatible?"
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "pow_var_compatible?"
                                                                             -9)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skolem
                                                                                 1
                                                                                 "i_")
                                                                                (("1"
                                                                                  (inst
                                                                                   -9
                                                                                   "i_")
                                                                                  (("1"
                                                                                    (use
                                                                                     "gnbi_upd_2")
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (use
                                                                                           "gnbi_upd_2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_ac"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "cons_ol")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (reveal
                                                                                         nicniig)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "new_idxs_cache_not_in_idx_gap")
                                                                                          (("2"
                                                                                            (inst
                                                                                             nicniig
                                                                                             i)
                                                                                            (("2"
                                                                                              (inst
                                                                                               nicniig
                                                                                               i_)
                                                                                              (("2"
                                                                                                (split
                                                                                                 nicniig)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "added_idx")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "last_idx_in_box")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "i_")
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "cache_powvar_correct")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "CacheData_correct?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (name-replace
                                                                       "k"
                                                                       "varidx_powvar(nth(cache, i)`1)")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (use
                                                                           "more_list_props[Interval].nth_append")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal vrcib)
                                                                (("2"
                                                                  (expand
                                                                   "varidxs_re_cache_in_box")
                                                                  (("2"
                                                                    (expand
                                                                     "varidx_powvar")
                                                                    (("2"
                                                                      (inst
                                                                       vrcib
                                                                       i)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (reveal iacniig)
                                                        (("2"
                                                          (expand
                                                           "idxs_ac_cache_not_in_idx_gap")
                                                          (("2"
                                                            (inst iacniig i)
                                                            (("2"
                                                              (inst?
                                                               iacniig
                                                               :where
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "added_idx")
                                                                  (("2"
                                                                    (expand
                                                                     "last_idx_in_box")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-1 1))
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal vrcib)
                                                (("2"
                                                  (expand
                                                   "varidxs_re_cache_in_box")
                                                  (("2"
                                                    (inst vrcib i)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "n")
                                              (("2"
                                                (use
                                                 "length_append[Interval]")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "n")
                                          (("2"
                                            (use "length_append[Interval]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval interval_arith)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (SingInterval? const-decl "bool" affine nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (restrict const-decl "R" restrict nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (opn adt-accessor-decl "[(pow?) -> nat]" IntervalExpr_adt interval_arith)
    (nzBaseType type-eq-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cache_powvar_correct formula-decl nil affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (added_idx skolem-const-decl "above(1 + last_idx_in_box(box))"
     affine_expr_Eval_fnd_props nil)
    (nextfreeidx skolem-const-decl "upfrom(added_idx)"
     affine_expr_Eval_fnd_props nil)
    (cache skolem-const-decl
     "{cache: (correct_cache?(box)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd_props nil)
    (i skolem-const-decl "below(length(cache))" affine_expr_Eval_fnd_props
       nil)
    (eval def-decl "real" interval_expr interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (op shared-adt-accessor-decl "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" IntervalExpr_adt interval_arith)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (Env type-eq-decl nil box interval_arith)
    (eval_vs_idempotence formula-decl nil interval_expr interval_arith)
    (n skolem-const-decl "upfrom(length(append(box, (: I :))))"
     affine_expr_Eval_fnd_props nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (Box type-eq-decl nil box interval_arith)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_append formula-decl nil list_props nil)
    (gnbi_upd formula-decl nil affine nil)
    (upd_noise def-decl "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_var_ac formula-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (Noise type-eq-decl nil affine nil) (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (i skolem-const-decl "below(length(append(box, (: I :))))"
       affine_expr_Eval_fnd_props nil)
    (I skolem-const-decl "Interval" affine_expr_Eval_fnd_props nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd_props nil)
    (idxs_ac_var_ac formula-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (eval_ac_noise const-decl "real" affine nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (e_ skolem-const-decl "real" affine_expr_Eval_fnd_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil))
   shostak))
 (cp_box_vs_cache_expansion_TCC1 0
  (cp_box_vs_cache_expansion_TCC1-1 nil 3646560460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith) (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (above nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (restrict const-decl "R" restrict nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil))
   nil
   (cp_box_vs_cache_expansion assuming
    "structures@ordered_list[nat, restrict[[real, real], [nat, nat], booleans.bool].restrict(reals.<)].ordered_list"
    "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)")))
 (cp_box_vs_cache_expansion_TCC2 0
  (cp_box_vs_cache_expansion_TCC2-1 nil 3646560460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith) (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil) (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list structures)
    (ordered_list type-eq-decl nil ordered_list structures)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil) (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (Noise type-eq-decl nil affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (/= const-decl "boolean" notequal nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (powvar? const-decl "bool" affine_expr nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length_singleton formula-decl nil more_list_props structures)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (cp_box_vs_cache_expansion subtype "affine_expr_Eval_fnd_props.added_idx"
    "integers.upfrom((number_fields.+)(1, affine_box.last_idx_in_box(affine_expr_Eval_fnd_props.box)))")))
 (cp_box_vs_cache_expansion_TCC3 0
  (cp_box_vs_cache_expansion_TCC3-1 nil 3646560460
   ("" (skeep*)
    (("" (typepred "cache")
      (("" (use "correct_cache?_alt_def")
        (("" (replace -1 :hide? t)
          (("" (use "correct_cache?_alt_def")
            (("" (replace -1 :hide? t)
              (("" (expand "every" 1)
                (("" (split 1)
                  (("1" (expand "CacheData_correct?")
                    (("1" (expand "powvar?") (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (lemma "every_implies[CacheData]")
                    (("2" (inst? -1 :where 1)
                      (("2" (inst? -1 :where -2)
                        (("2" (assert)
                          (("2" (use "CacheData_correct?_inclusion") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((above nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (powvar? const-decl "bool" affine_expr nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct?_inclusion formula-decl nil affine_expr_Eval_fnd nil)
    (every_implies formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (length def-decl "nat" list_props nil)
    (correct_cache?_alt_def formula-decl nil affine_expr_Eval_fnd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_is_ErrorTerms name-judgement "ErrorTerms" affine nil))
   nil
   (cp_box_vs_cache_expansion subtype
    "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX(list_props[Interval].length(affine_expr_Eval_fnd_props.box)), affine_expr_Eval_fnd_props.ac, affine_expr_Eval_fnd_props.nw_idxs), affine_expr_Eval_fnd_props.cache)"
    "(affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_expr_Eval_fnd_props.box, (: affine_expr_Eval_fnd_props.I :))))")))
 (cp_box_vs_cache_expansion 0
  (cp_box_vs_cache_expansion-1 nil 3646560498
   ("" (assert)
    (("" (skeep*)
      (("" (name-replace "ac" "nth(cache, ac_idx)`2")
        (("" (expand "compatible_pairs?")
          (("" (use "cp_box_vs_expansion_")
            (("1" (assert)
              (("1" (skeep -1)
                (("1" (inst 1 "upd_noise(N, length(box), e)")
                  (("1" (assert)
                    (("1" (expand "compatible_pairs_on?" 1)
                      (("1" (skeep 1)
                        (("1" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (skeep 1)
                              (("1" (expand "nth" 1)
                                (("1" (expand "powvar?" 1)
                                  (("1" (expand "eval_ACExpr_Env")
                                    (("1" (expand "eval" 1 1)
                                      (("1"
                                        (use "eval_upd_no_idxs_ac")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "idxs_ac_cache_not_in_idx_gap")
                                            (("1"
                                              (expand "ac")
                                              (("1"
                                                (inst -7 "ac_idx")
                                                (("1"
                                                  (inst -7 "length(box)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "added_idx")
                                                      (("1"
                                                        (expand
                                                         "last_idx_in_box")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2" (expand "compatible_pairs_on?" -2)
                                (("2" (inst -2 "i-1")
                                  (("2" (typepred "i")
                                    (("2" (expand "length" -1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (name-replace "I" "eval_by_intervals(ac)")
                (("2" (expand "eval_ACExpr_Env")
                  (("2" (name-replace "x" "eval(re, vs, n)")
                    (("2" (case "x ## I")
                      (("1" (use "  containment_var")
                        (("1" (assert)
                          (("1" (skeep -1)
                            (("1" (inst 1 "e")
                              (("1" (use "eval_var_ac")
                                (("1" (replace -1 -2 :hide? t)
                                  (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "x")
                          (("2" (expand "I")
                            (("2" (use "containment_interval")
                              (("2" (assert)
                                (("2" (hide 2)
                                  (("2" (expand "containment")
                                    (("2" (inst 1 "N") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_is_ErrorTerms name-judgement "ErrorTerms" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (|##| const-decl "bool" interval interval_arith)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (I skolem-const-decl "ProperInterval" affine_expr_Eval_fnd_props nil)
    (new_idxs_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (varidxs_re_cache_in_box const-decl "bool" affine_expr_Eval_fnd nil)
    (subterm adt-def-decl "boolean" IntervalExpr_adt interval_arith)
    (idxs_ac const-decl "list[nat]" affine nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (varidx_powvar const-decl "nat" affine_expr nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list structures)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty_noise const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (eval_var_ac formula-decl nil affine nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (containment_var formula-decl nil affine nil)
    (x skolem-const-decl "real" affine_expr_Eval_fnd_props nil)
    (containment_interval formula-decl nil affine nil)
    (containment const-decl "bool" affine nil)
    (Env type-eq-decl nil box interval_arith)
    (upd_noise def-decl "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt
     interval_arith)
    (powvar? const-decl "bool" affine_expr nil)
    (eval def-decl "real" interval_expr interval_arith)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (idxs_ac_cache_not_in_idx_gap const-decl "bool" affine_expr_Eval_fnd nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nw_idxs skolem-const-decl
     "ordered_list[nat, restrict[[real, real], [nat, nat], bool](<)]"
     affine_expr_Eval_fnd_props nil)
    (added_idx skolem-const-decl "above(1 + last_idx_in_box(box))"
     affine_expr_Eval_fnd_props nil)
    (nextfreeidx skolem-const-decl "upfrom(added_idx)"
     affine_expr_Eval_fnd_props nil)
    (cache skolem-const-decl
     "{cache: (correct_cache?(box)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd_props nil)
    (i skolem-const-decl
       "below(length(cons((VARIDX(length(box)), ac, nw_idxs), cache)))"
       affine_expr_Eval_fnd_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (eval_by_intervals const-decl "ProperInterval" affine nil)
    (ac skolem-const-decl "AffineCombination" affine_expr_Eval_fnd_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ACExpr_Env const-decl "BaseType" affine_expr nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd_props nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd_props nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd_props nil)
    (n skolem-const-decl "upfrom(length(box))" affine_expr_Eval_fnd_props nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list structures)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil) (<= const-decl "bool" reals nil)
    (Env type-eq-decl nil affine_box nil)
    (cp_box_vs_expansion_ formula-decl nil affine_expr_Eval_fnd_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list structures)
    (ordered_list? def-decl "bool" ordered_list structures)
    (< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil))
   shostak)))


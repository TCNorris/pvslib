(affine_expr
 (powvar?_TCC1 0
  (powvar?_TCC1-2 "" 3789918205 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith))
   shostak
   (powvar? subtype "affine_expr.expr"
    "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))
  (powvar?_TCC1-1 nil 3637317319 ("" (tcc))
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith))
   nil
   (powvar? subtype "affine_expr.expr"
    "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}")))
 (varidx_powvar_TCC1 0
  (varidx_powvar_TCC1-1 nil 3637427147 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (powvar? const-decl "bool" affine_expr nil))
   nil
   (varidx_powvar subtype "affine_expr.expr"
    "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}")))
 (varidx_powvar_TCC2 0
  (varidx_powvar_TCC2-1 nil 3637427147 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (powvar? const-decl "bool" affine_expr nil))
   nil
   (varidx_powvar subtype "IntervalExpr_adt.op(affine_expr.expr)"
    "(IntervalExpr_adt.varidx?)"))))


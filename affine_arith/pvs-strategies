(defparameter *aa-builtin* '(;; Special cases
			     ("*real*" "interval_expr.r2E")
			     ("*bool*" "interval_bexpr.b2B")
			     ("*var*" "interval_expr.X")
			     ("*neg*" "IntervalExpr_adt.NEG")
			     ("*bite*" "IntervalExpr_adt.BITE")
			     ("*letin*" "IntervalExpr_adt.LETIN")
			     ("*bletin*" "IntervalExpr_adt.BLETIN")
			     ("*excluded*" ("[||]"))
			     ;; Standard operations
			     ("+" "IntervalExpr_adt.ADD")
			     ("-" "IntervalExpr_adt.SUB")
			     ("*" "IntervalExpr_adt.MULT")
			     ("^" "IntervalExpr_adt.POW")
			     ("sq" "interval_expr.SQ2POW")
			     ("TRUE" "IntervalExpr_adt.BCONST(TRUE)")
			     ("FALSE" "IntervalExpr_adt.BCONST(FALSE)")
			     ("NOT" "IntervalExpr_adt.BNOT")
			     ("AND" "IntervalExpr_adt.BAND")
			     ("&" "BIntervalExpr_adt.AND")
                             ("OR" "IntervalExpr_adt.BOR")
			     ("IMPLIES" "IntervalExpr_adt.BIMPLIES")
			     ("=>" "IntervalExpr_adt.BIMPLIES")
			     (">" "interval_bexpr.REL(>)")
			     (">=" "interval_bexpr.REL(>=)")
			     ("<" "interval_bexpr.REL(<)")
			     ("<=" "interval_bexpr.REL(<=)")
			     ("=" "interval_bexpr.EQ")
			     ("##" "interval_bexpr.BINCLUDEX")))
  
(defparameter *affine-strategies* "
%  affine: Computes bounds to minimum and maximum values of real-valued expressions.
%  aa-numerical: Computes bounds to minimum and maximum values of real-valued expressions.
%  Supported operations: +,-,*,^")

;;-------------------------------------------------------------------------------
;;-- basic affine arithmetic strategy -------------------------------------------
;;-------------------------------------------------------------------------------

(unintern 'aa-info)
(defstruct aa-info
  idx ; Specific index in the Affine Form (introduced by this expression).
  aff ; Affine Form
  nvl ; Noise value
)

(unintern 'aa-core)
(defstruct aa-core
  vars      ; original list of variables
  work-info ; working info (hashtable of Affine Form, noise value, and noise index)
  c-noise-l ; current noise as a list of aa-info (stored in reverse order).
)

(defparameter *aa-core* nil)

(defun aa-core-var-noise (core var-str)
  (aa-info-nvl (gethash var-str (aa-core-work-info core))))

(defun c-noise-l-to-noise-expr (resulting-str info)
  (format nil "extend_N(~a::nat,~a::Epsilon,~a)" (aa-info-idx info) (aa-info-nvl info) resulting-str))

;; Builds an expression that denotes the current noise.
(defun aa-core-cur-noise (core)
    (reduce #'c-noise-l-to-noise-expr
	    (aa-core-c-noise-l core)
	    :initial-value "empty_noise"))

;; Returns the greatest partial deviation index used in the current affine form
;; build.
(defun aa-core-great-idx (core)
  (length (aa-core-c-noise-l core)))

(defun build-aa-core (vars)
  (let*((work-info (make-hash-table :test #'equal))
	(c-noise-l (loop for v in (reverse vars)
			 for varindex from (- (length vars) 1) downto 0
			 for noiseval = (freshname (format nil "epsilon_~a" v))
			 for varrange = (gethash v *extra-varranges*)
			 for aff-form = (format nil "var_ac([|~a,~a|],~a)"
						(xterval-lb varrange)
						(xterval-ub varrange)
						varindex)
			 for info     = (make-aa-info :idx varindex :aff aff-form :nvl noiseval)
			 do (setf (gethash v work-info) info)
			 collect info)))
    (make-aa-core :vars vars
		  :work-info work-info
		  :c-noise-l c-noise-l)))

(defun aa-core-get-aa-expr-var (core var-expr)
  (let*((expr-as-str (expr2str var-expr))
	(result      (gethash expr-as-str (aa-core-work-info core))))
    ;; The information about the variables should be already loaded in the
    ;; aa-core, if we can not get the information for the requested variable,
    ;; something wrong happened.
    (unless result
      (error "aa-core-get-aa-expr-var: information about the variable couldn't be found."))
    (aa-info-aff result)))

(defun aa-core-get-aa-expr-mul (core expr)
  (let*((expr-as-str (expr2str expr))
	(result      (gethash expr-as-str (aa-core-work-info core))))
    ;; If the information about this expression has been computed already, then
    ;; we will use it. If not, we will compute it and store it in the aa-core.
    (unless result
      (let*((aff-expr1 (aa-ac-from-expr-rec (args1 expr) core))
	    (aff-expr2 (aa-ac-from-expr-rec (args2 expr) core))
	    (mul-noise (format nil "mul_noise_value(~a,~a,~a)"
			       aff-expr1
			       aff-expr2
			       (aa-core-cur-noise core)))
	    (mul-index (aa-core-great-idx core))
	    (mul-aaexp (format nil "mult_ac_ac(~a,~a,~a)"
			     aff-expr1
			     aff-expr2
			     mul-index))
	    (info      (make-aa-info :idx mul-index :aff mul-aaexp :nvl mul-noise)))
	(setf (gethash expr-as-str (aa-core-work-info core)) info)
	(setf (aa-core-c-noise-l core) (cons info (aa-core-c-noise-l core)))
	(setf result info)))
    (aa-info-aff result)))

;; Constructs an affine combination that represents the expression expr.
(defun aa-ac-from-expr (expr vars)
  (setf *aa-core* (build-aa-core vars))
  (catch '*aa-error* (aa-ac-from-expr-rec expr *aa-core*)))

(defun aa-ac-from-expr-rec (expr core)
  (let ((val (when (or (is-number-type (type expr)) (is-bool-type (type expr)))
	       (typecheck (extra-add-evalexpr expr)))))
    (cond ;; constant
          ((and val (is-number-type  (type val)))
	   (format nil "const_ac(~a)" val))
	  ;; variable
	  ((is-variable-expr expr)
	   (aa-core-get-aa-expr-var core expr))
	  ;; additive inverse
	  ((and (unary-application? expr)
		(is-function-expr expr "-"))
	   (format nil "neg_ac(~a)" (aa-ac-from-expr-rec (args1 expr) core)))
	  ;; substraction
	  ((is-function-expr expr "-")
	   (format nil "sub_ac_ac(~a,~a)"
		   (aa-ac-from-expr-rec (args1 expr) core)
		   (aa-ac-from-expr-rec (args2 expr) core)))
	  ;; addition
	  ((is-function-expr expr "+")
	   ;; Now I have to check If the first parameter is a constant expression.
	   (if (get-vars-from-expr (args1 expr))
	       (format nil "add_ac_ac(~a,~a)"
		       (aa-ac-from-expr-rec (args1 expr) core)
		       (aa-ac-from-expr-rec (args2 expr) core))
	     (format nil "add_s_ac(~a,~a)"
		     (args1 expr)
		     (aa-ac-from-expr-rec (args2 expr) core))))
	  ;; multiplication
	  ((is-function-expr expr "*")
	   ;; Now I have to check If the first parameter is a constant expression.
	   (if (get-vars-from-expr (args1 expr))
	       (aa-core-get-aa-expr-mul core expr)
	     (format nil "mul_s_ac(~a,~a)"
		     (args1 expr)
		     (aa-ac-from-expr-rec (args2 expr) core))))
	  (t (throw '*aa-error* (list (format nil "Main operator in ~a not supported yet." expr)))))))

(defparameter *aa-rws*
' ("first__extend_N"
   "gnbi_extend_N_trivial"
   "gnbi_extend_N_unf"
   "containment_cnt"
   "var_ac_noise_unf3"
   "containment_sub"
   "containment_add"
   "containment_mul"
   "containment_mul_s"
   "containment_add_s"
   "containment_neg"))

(defparameter *affine-num-count* 0)

(defstep simple-affine (&optional (fnum 1) (default-range "[|0,1|]"))
  (with-fresh-labels
   ((af! fnum))
   (assert af!)
   (let ((formula (extra-get-formula fnum))
	 (target  (args2 formula))
	 (expr    (args1 formula))
	 (vars    (get-vars-from-expr expr))
	 (fms     (append
		   (mapcar #'(lambda (f) (extra-get-formula-from-fnum f))
			   (extra-get-fnums '-))
		   (mapcar #'(lambda (f) 
			       (make-negation
				(extra-get-formula-from-fnum f)))
			   (extra-get-fnums '+))))
	 (af-vars (extra-get-var-ranges fms vars))
	 (unvars  (ia-find-unbound-vars af-vars))
	 (af-expr (aa-ac-from-expr expr af-vars))
	 (f-noise (aa-core-cur-noise *aa-core*))
	 (msg     (when (listp af-expr) (car af-expr))))
     (if msg
	 (printf msg)
       (then
	(with-fresh-names
	 ((af_name_ af-expr))
	 (let ((castr  (format nil "containment(~a,~a)" expr af_name_))
	       (ebyint (format nil "eval_by_intervals(~a)" af_name_)))
	  (spread
	   (case castr)
	   ((then
	     (use "containment_interval")
	     (prop)
	     
	     (if (is-function-expr formula "##")
		 (then
		  (use "Member_trans" ("x" expr  "X" ebyint  "Y" target))
		  (assert)
		  (eval-formula 1))
		(then
		 (eval-expr ebyint)
		 (expand "##")
		 (assert))))
	    (then                       ; Second branch of (case "containment(
					; expr, af_name_)"). Here we know that
					; that the formula 1 is exactly that one.
	     (expand af_name_ :assert? none)
	     (let((vars-count (length vars))
		  (xxx        (setf *affine-num-count* 0)))
	       (then
		(for$ vars-count
		     (let((cur-var (nth *affine-num-count* vars))
			  (eps-var (aa-core-var-noise *aa-core* cur-var))
			  (idx-var *affine-num-count*)
			  (dummy (setf *affine-num-count* (+ *affine-num-count* 1))))
		       (then
			(use "containment_var" ("x" cur-var "n" idx-var))
			(spread (prop) ((skolem -1 eps-var) (then (expand "##")(assert)))))))
		(expand "containment" :assert? none)
		(with-fresh-names
		 ((noise    f-noise))
		 (inst 1 noise)
		 (expand noise :assert? none)
		 (let((rws *aa-rws*)) (apply (repeat* (rewrites rws :fnums 1))))
		 (eval-formula 1)))))))))
	(eval-formula 1)))))
  "do simple affine"
  "doing simple affine")

;--------------------------------------------------------------------------------
;-- Branch and bound strategies (based on generic strategy from interval@arith) -
;--------------------------------------------------------------------------------

(defparameter *aa-rewrite-decls* 
  '("real_expr?"
    "beval__"
    "beval_vs"
    "boolexpr_lfcs[ContextData_beval_vs,
                                      LAMBDA (bexpr:IntervalExpr_adt.BoolExpr, ctxt0:ContextData_beval_vs):
                                        LAMBDA (ctxt:ContextData_beval_vs): some?(ctxt`result),
                                     beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR,
                                     beval_vs_BIMPLIES, beval_vs_BREL, beval_vs_BINCLUDES,
                                     beval_vs_BITE, beval_vs_BITE_merge1, beval_vs_BITE_merge2,
                                     beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                     beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F"
    "beval_vs_BCONST"
    "beval_vs_BNOT"
    "beval_vs_BAND"
    "beval_vs_BOR"
    "beval_vs_BIMPLIES"
    "beval_vs_BREL"
    "beval_vs_BINCLUDES"
    "beval_vs_BITE"
    "beval_vs_BITE_merge1"
    "beval_vs_BITE_merge2"
    "beval_vs_BLETIN_RealExpr_ini"
    "beval_vs_BLETIN_RealExpr"
    "beval_vs_BLETIN_BoolExpr_merge1"
    "beval_vs_BLETIN_BoolExpr"))
  
;; numerical

(defstep aa-numerical (expr
		       &optional (precision 3) (maxdepth 10)
		       min? max?
		       vars 
		       subs
		       dirvar
		       verbose?
		       label
		       (equiv? t))
  (let ((subs (append subs *aa-builtin*))
	(rews *aa-rewrite-decls*))
    (gbandb_numerical__$
     ;; required-constant
     "affine_arith@strategies.AffineStrategies__"
     ;; pvsexpr-to-strobj
     ia-interval-expr
     ;; bandb-function-name
     "affine_bandb_numerical.numerical"
     ;; bandb soundness theorem name
     "affine_bandb_numerical.numerical_soundness"
     ;; rewrite-decls
     rews
     ;; beval-solver
     interval-eq__$
     expr precision maxdepth min? max? vars subs dirvar verbose?
     label equiv?))
  "[Affine] Computes lower and upper bounds of the minimum and
maximum values of EXPR using a branch and bound algorithm based on
affine arithmetic.  PRECISION is the number of decimals in the
output interval. PRECISION also indicates an accuracy of 10^-PRECISION
in every atomic computation. However, this accuracy is not guaranteed
in the final result. MAXDEPTH is a maximum recursion depth for the
branch and bound algorithm. For efficiency, the MIN? and MAX? options
can be used to restrict the precision of the computations to either
the lower or upper bound, respectively.

VARS is a list of the form (<v1> ... <vn>), where each <vi> is either a
variable name, e.g., \"x\", or a list consisting of a variable name and
an interval, e.g., (\"x\" \"[|-1/3,1/3|]\"). This list is used to specify
the variables in EXPR and to provide their ranges. If this list is not
provided, this information is extracted from the sequent.

DIRVAR is the name of a direction and variable selection method for
the branch an bound algorithm. Theory affine_bandb_numerical includes some
pre-defined methods. If none is provided, a choice is made base on the
problem.

If VERBOSE? is set to t, the strategy prints information about number of
splits, depth, etc. 

LABEL is used to label formulas containing additional information computed
by the branch and bound algorithm. These formulas are hidden, but they can
be brought to the sequent using the proof command REVEAL.

If EQUIV? is set to nil, the strategy doesn't try to prove that the
deep embedding of the original expression is correct. The proof of
this fact is trivial from a logical point of view, but requires
unfolding of several definitions which is time consuming in PVS."
  "Computing minmax values of expression ~a,~%via affine arithmetic")

; affine


(defstep affine (&optional (fnums 1) (precision 3) maxdepth sat?
			   vars 
			   ;; subs is not supported in this version
			   dirvar
			   verbose?
			   label
			   (equiv? t)
			   (tccs? t))
  
  (let ((subs *aa-builtin*)
	(rews *aa-rewrite-decls*))
    (gbandb_interval__$
     ;; required-constant
     "affine_arith@strategies.AffineStrategies__"
     ;; pvsexpr-to-strobj:
     ia-interval-expr
     ;; bandb-function-name:
     "affine_bandb_boolexpr.bandb_boolexpr"
     ;; bandb soundness theorem name
     "affine_bandb_boolexpr.bandb_boolexpr_soundness"
     ;; rewrite-decls
     rews
     ;; beval-solver
     interval-eq__$
     fnums precision maxdepth sat?
     vars 
     subs 
     dirvar
     verbose?
     label
     equiv?
     tccs?))
  "[Affine] Checks if formulas FNUMS, which may be simply
quantified, holds using a branch and bound algorithm based on affine
arithmetic.  The parameter PRECISION indicates an accuracy of
10^-PRECISION in every atomic computation. However, this accuracy is
not guaranteed in the final result. MAXDEPTH is a maximum recursion
depth for the branch and bound algorithm.

If SAT? is set to t, the strategy checks if formula FNUMS,
whether in the antecedent or in the consequent, is satisfiable
and, in the positive case, prints a provably correct witness.
If formula FNUMS is quantified, it is checked for validity.

VARS is a list of the form (<v1> ... <vn>), where each <vi> is either a
variable name, e.g., \"x\", or a list consisting of a variable name and
an interval, e.g., (\"x\" \"[|-1/3,1/3|]\"). This list is used to specify
the variables in EXPR and to provide their ranges. If this list is not
provided, this information is extracted from the sequent.

DIRVAR is the name of a direction and variable selection method for
the branch an bound algorithm. Theory interval_bandb includes some
pre-defined methods. If none is provided, a choice is made base on the
problem.

If VERBOSE? is set to t, the strategy prints information about number of
splits, depth, etc. 

LABEL is used to label formulas containing additional information computed
by the branch and bound algorithm. These formulas are hidden, but they can
be brought to the sequent using the proof command REVEAL.

If EQUIV? is set to nil, the strategy doesn't try to prove that the
deep embedding of the original expression is correct. The proof of
this fact is trivial from a logical point of view, but requires
unfolding of several definitions which is time consuming in PVS.

If TCCs? is set to nil, the strategy doesn't try to prove possible
TCCs generated during its execution."
  "Checking formula ~a using affine arithmetic")

(defstrat aa-interval (&optional (fnums 1) (precision 3) maxdepth sat?
				 vars 
				 ;; subs is not supported in this version
				 dirvar
				 verbose?
				 label
				 (equiv? t)
				 (tccs? t))
  (then
   (printf "The strategy name aa-interval is deprecated. Use affine instead.")
   (affine :fnums fnums :precision precision :maxdepth maxdepth :sat? sat?
	   :vars vars :dirvar dirvar :verbose? verbose? :label label :equiv? equiv? :tccs? tccs?))
  "[Affine] This strategy name is deprecated. Use affine instead.")

;--------------------------------------------------------------------------------
;-- Helper strategies -----------------------------------------------------------
;--------------------------------------------------------------------------------

(defstep expand_ol ()
  (expand* "null_ol?" "car_ol" "cdr_ol" "cons_ol" "empty_ErrorTerms" "empty_noise")
  "Expands trivial definitions from ordered_list theory."
  "Expanding definitions from oredered_list theory.")

;------------------------------------------------------------------------------;

;;
;; Simple helper strategy intended to deal with inequalities on nontrivial terms.
;;
(defun get-sub-expr-at-level (expr n)
  (if (eq n 0) (list expr)
    (when (application? expr)
      (if (tuple-expr? (argument expr))
	  (let ((result nil))
	    (loop for arg in (exprs(argument expr))
		  do (setq result (append result (get-sub-expr-at-level arg (-  n 1)))))
	    result)
	(get-sub-expr-at-level (argument expr) (- n 1))))))

(defhelper abstract-and-then (fnums level step)
  (let ((exprs (get-sub-expr-at-level (extra-get-expr `(! ,fnums)) level)))
    (with-fresh-names
     ((aat_ exprs :tccs))
     step))
  "" "")

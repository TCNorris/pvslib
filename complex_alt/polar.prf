(polar
 (abs_def 0
  (abs_def-1 nil 3455850889 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (abs const-decl "nnreal" polar nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (abs_def2 0
  (abs_def2-1 nil 3472820584
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (expand "sq_abs") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_abs const-decl "nnreal" complex_types nil))
   shostak))
 (abs_nzcomplex 0
  (abs_nzcomplex-1 nil 3455850866
   ("" (skosimp) (("" (expand "abs") (("" (assert) nil nil)) nil)) nil)
   ((abs const-decl "nnreal" polar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil))
   nil (abs_nzcomplex subtype "polar.abs(polar.n0z)" "posreal")))
 (abs_nz_iff_nz 0
  (abs_nz_iff_nz-1 nil 3455850929
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (rewrite "abs_def")
          (("1" (grind :rewrites "complex_ext") nil nil)) nil))
        nil)
       ("2" (flatten)
        (("2" (typepred "abs(z!1)")
          (("2" (expand ">=")
            (("2" (expand "<=")
              (("2" (split)
                (("1" (grind :rewrites "complex_ext") nil nil)
                 ("2" (rewrite "abs_def")
                  (("2" (hide 2)
                    (("2"
                      (lemma "sqrt_eq_0" ("nnx" "sq(Im(z!1)) + sq(Re(z!1))"))
                      (("2" (split)
                        (("1" (hide -2)
                          (("1" (rewrite "sq_plus_eq_0")
                            (("1" (grind :rewrites "complex_ext") nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (complex_ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "nnreal" polar nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (sqrt_eq_0 formula-decl nil sqrt reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_plus_eq_0 formula-decl nil sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_abs const-decl "nnreal" complex_types nil))
   shostak))
 (abs_is_0 0
  (abs_is_0-1 nil 3455851637
   ("" (skosimp)
    (("" (lemma "abs_nz_iff_nz" ("z" "z!1")) (("" (grind) nil nil)) nil)) nil)
   ((complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs_nz_iff_nz formula-decl nil polar nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (abs const-decl "nnreal" polar nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (abs_neg 0
  (abs_neg-1 nil 3455851750 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (abs const-decl "nnreal" polar nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (abs_mult 0
  (abs_mult-1 nil 3455851754
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (rewrite "abs_def")
        (("" (rewrite "abs_def")
          (("" (rewrite "sqrt_times" 1 :dir rl)
            (("" (rewrite "sqrt_eq") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_eq formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_times formula-decl nil sqrt reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak))
 (abs_inv 0
  (abs_inv-4 "" 3790337183
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (rewrite "abs_def")
        (("" (rewrite "sqrt_lem")
          (("1" (rewrite "sq_rew")
            (("1" (rewrite "sq_div")
              (("1" (rewrite "div_cancel3")
                (("1" (expand "sq_abs")
                  (("1" (rewrite "sq_div")
                    (("1" (rewrite "sq_div")
                      (("1" (rewrite "sq_times")
                        (("1" (assert)
                          (("1"
                            (name "DRL" "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                            (("1" (replace -1)
                              (("1" (grind-reals)
                                (("1" (name-replace "XX" "sq(Re(n0z!1))")
                                  (("1" (name-replace "YY" "sq(Im(n0z!1))")
                                    (("1" (expand "sq")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (flatten)
                          (("2" (rewrite "sq_plus_eq_0")
                            (("2" (use "nzcomplex_nz")
                              (("2" (flatten) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (flatten)
                        (("2" (rewrite "sq_plus_eq_0")
                          (("2" (use "nzcomplex_nz")
                            (("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (flatten)
                  (("2" (lemma "sqrt_eq_0")
                    (("2" (inst -1 "sq(Im(n0z!1)) + sq(Re(n0z!1))")
                      (("2" (split -1)
                        (("1" (hide -2)
                          (("1" (rewrite "sq_plus_eq_0")
                            (("1" (flatten)
                              (("1" (use "nzcomplex_nz")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (field) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (abs_inv-3 nil 3721315300
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (rewrite "abs_def")
        (("" (rewrite "sqrt_lem")
          (("1" (rewrite "sq_rew")
            (("1" (rewrite "sq_div")
              (("1" (rewrite "div_cancel3")
                (("1" (expand "sq_abs")
                  (("1" (rewrite "sq_div")
                    (("1" (rewrite "sq_div")
                      (("1" (rewrite "sq_times")
                        (("1" (rewrite "sq_times")
                          (("1" (assert)
                            (("1"
                              (name "DRL" "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                              (("1" (replace -1)
                                (("1" (grind-reals)
                                  (("1" (name-replace "XX" "sq(Re(n0z!1))")
                                    (("1" (name-replace "YY" "sq(Im(n0z!1))")
                                      (("1"
                                        (expand "sq")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (flatten)
                          (("2" (rewrite "sq_plus_eq_0")
                            (("2" (use "nzcomplex_nz")
                              (("2" (flatten) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (flatten)
                        (("2" (rewrite "sq_plus_eq_0")
                          (("2" (use "nzcomplex_nz")
                            (("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (flatten)
                  (("2" (lemma "sqrt_eq_0")
                    (("2" (inst -1 "sq(Im(n0z!1)) + sq(Re(n0z!1))")
                      (("2" (split -1)
                        (("1" (hide -2)
                          (("1" (rewrite "sq_plus_eq_0")
                            (("1" (flatten)
                              (("1" (use "nzcomplex_nz")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (field) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sqrt_lem formula-decl nil sqrt reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sq_div formula-decl nil sq reals) (sq_1 formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (times_div1 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil) (sq_times formula-decl nil sq reals)
    (nzcomplex_nz formula-decl nil complex_types nil)
    (sq_plus_eq_0 formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_rew formula-decl nil sq reals)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (fdx_2 skolem-const-decl
     "{nnz: nnreal | nnz * nnz = sq(Im(n0z!1)) + sq(Re(n0z!1))}" polar nil)
    (n0z!1 skolem-const-decl "nzcomplex" polar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil))
   nil)
  (abs_inv-2 nil 3721315251
   ("" (auto-rewrite "nzcomplex_ext")
    (("" (skosimp)
      (("" (rewrite "abs_def")
        (("" (rewrite "abs_def")
          (("" (rewrite "sqrt_lem")
            (("1" (rewrite "sq_rew")
              (("1" (rewrite "sq_div")
                (("1" (rewrite "div_cancel3")
                  (("1" (expand "sq_abs")
                    (("1" (typepred "n0z!1")
                      (("1" (rewrite "sq_div")
                        (("1" (rewrite "sq_div")
                          (("1" (rewrite "sq_times")
                            (("1" (rewrite "sq_times")
                              (("1" (assert)
                                (("1"
                                  (name "DRL"
                                        "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                                  (("1" (replace -1)
                                    (("1" (assert)
                                      (("1"
                                        (name-replace "XX" "sq(Re(n0z!1))")
                                        (("1"
                                          (name-replace "YY" "sq(Im(n0z!1))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "sq")
                                              (("1"
                                                (assert)
                                                nil)))))))))))))))))))))
                           ("2" (expand "/=")
                            (("2" (rewrite "sq_plus_eq_0")
                              (("2" (flatten) (("2" (assert) nil)))))))))
                         ("2" (expand "/=")
                          (("2" (hide 1)
                            (("2" (rewrite "sq_plus_eq_0")
                              (("2" (flatten)
                                (("2" (assert) nil)))))))))))))))))
                 ("2" (expand "/=")
                  (("2" (hide 1)
                    (("2"
                      (lemma "sqrt_eq_0"
                       ("nnx" "sq(Im(n0z!1)) + sq(Re(n0z!1))"))
                      (("2" (split)
                        (("1" (hide -2)
                          (("1" (rewrite "sq_plus_eq_0")
                            (("1" (flatten)
                              (("1" (typepred "n0z!1")
                                (("1" (split)
                                  (("1" (assert) nil)
                                   ("2" (assert) nil)))))))))))
                         ("2" (propax) nil)))))))))))))
             ("2" (hide 2)
              (("2"
                (lemma "posreal_div_posreal_is_posreal"
                 ("px" "1" "py" "sqrt(sq(Im(n0z!1)) + sq(Re(n0z!1)))"))
                (("1" (assert) nil)
                 ("2" (hide 2)
                  (("2" (rewrite "sqrt_pos")
                    (("2" (hide 2)
                      (("2" (typepred "n0z!1")
                        (("2" (split)
                          (("1" (assert)
                            (("1" (lemma "sq_nz_pos" ("nz" "Re(n0z!1)"))
                              (("1" (assert) nil)))))
                           ("2" (lemma "sq_nz_pos" ("nz" "Im(n0z!1)"))
                            (("1" (assert) nil)
                             ("2" (propax) nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (abs_inv-1 nil 3455851970
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (rewrite "abs_def")
        (("" (rewrite "sqrt_lem")
          (("1" (rewrite "sq_rew")
            (("1" (rewrite "sq_div")
              (("1" (rewrite "div_cancel3")
                (("1" (expand "sq_abs")
                  (("1" (typepred "n0z!1")
                    (("1" (rewrite "sq_div")
                      (("1" (rewrite "sq_div")
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_times")
                            (("1" (assert)
                              (("1"
                                (name "DRL"
                                      "sq(sq(Re(n0z!1)) + sq(Im(n0z!1)))")
                                (("1" (replace -1)
                                  (("1" (assert)
                                    (("1" (name-replace "XX" "sq(Re(n0z!1))")
                                      (("1"
                                        (name-replace "YY" "sq(Im(n0z!1))")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand "sq")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "/=")
                          (("2" (rewrite "sq_plus_eq_0")
                            (("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "/=")
                        (("2" (hide 1)
                          (("2" (rewrite "sq_plus_eq_0")
                            (("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "/=")
                (("2" (hide 1)
                  (("2"
                    (lemma "sqrt_eq_0"
                     ("nnx" "sq(Im(n0z!1)) + sq(Re(n0z!1))"))
                    (("2" (split)
                      (("1" (hide -2)
                        (("1" (rewrite "sq_plus_eq_0")
                          (("1" (flatten)
                            (("1" (typepred "n0z!1")
                              (("1" (split)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (lemma "posreal_div_posreal_is_posreal"
               ("px" "1" "py" "sqrt(sq(Im(n0z!1)) + sq(Re(n0z!1)))"))
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (rewrite "sqrt_pos")
                  (("2" (hide 2)
                    (("2" (typepred "n0z!1")
                      (("2" (split)
                        (("1" (assert)
                          (("1" (lemma "sq_nz_pos" ("nz" "Re(n0z!1)"))
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "sq_nz_pos" ("nz" "Im(n0z!1)"))
                          (("1" (assert) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (sqrt_lem formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq_div formula-decl nil sq reals) (sq_1 formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq_plus_eq_0 formula-decl nil sq reals)
    (sq_times formula-decl nil sq reals)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_rew formula-decl nil sq reals) (sqrt_pos judgement-tcc nil sqrt reals)
    (sq_nz_pos judgement-tcc nil sq reals))
   shostak))
 (abs_div 0
  (abs_div-1 nil 3455853159
   ("" (skosimp)
    (("" (lemma "abs_inv" ("n0z" "n0z!1"))
      (("" (lemma "abs_mult" ("z1" "z!1" "z2" "1/n0z!1"))
        (("" (replace -2)
          (("" (hide -2)
            (("" (replace -1 1 rl)
              (("" (hide -1)
                (("" (expand "abs")
                  (("" (rewrite "sqrt_eq")
                    (("" (expand "sq_abs")
                      (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs_inv formula-decl nil polar nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (abs const-decl "nnreal" polar nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "complex" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sqrt_eq formula-decl nil sqrt reals)
    (abs_mult formula-decl nil polar nil)
    (/ const-decl "complex" complex_types nil))
   shostak))
 (abs_triangle 0
  (abs_triangle-1 nil 3455853469
   ("" (skosimp)
    (("" (expand "abs")
      (("" (rewrite "sq_le" 1 :dir rl)
        (("" (assert)
          (("" (rewrite "sq_plus")
            (("" (rewrite "sqrt_times" 1 :dir rl)
              (("" (expand "sq_abs")
                (("" (assert)
                  (("" (rewrite "sq_plus")
                    (("" (rewrite "sq_plus")
                      (("" (assert)
                        ((""
                          (case "Im(z1!1) * Im(z2!1)+Re(z1!1) * Re(z2!1) <=sqrt(sq(Im(z1!1)) * sq(Im(z2!1)) + sq(Im(z1!1)) * sq(Re(z2!1)) +
               (sq(Im(z2!1)) * sq(Re(z1!1)) + sq(Re(z1!1)) * sq(Re(z2!1))))")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (rewrite "sq_times" 1 :dir rl)
                              (("2" (rewrite "sq_times" 1 :dir rl)
                                (("2" (rewrite "sq_times" 1 :dir rl)
                                  (("2" (rewrite "sq_times" 1 :dir rl)
                                    (("2" (rewrite "sq_le" 1 :dir rl)
                                      (("2"
                                        (rewrite "sq_plus")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "2*(Im(z1!1) * Im(z2!1) * Re(z1!1) * Re(z2!1)) <= sq(Im(z1!1) * Re(z2!1)) +
        sq(Im(z2!1) * Re(z1!1))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "sq_minus"
                                                 ("a"
                                                  "Im(z1!1) * Re(z2!1)"
                                                  "b"
                                                  "Im(z2!1) * Re(z1!1)"))
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "nnreal" polar nil) (sq_sqrt formula-decl nil sqrt reals)
    (sqrt_times formula-decl nil sqrt reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (<= const-decl "bool" reals nil) (sq const-decl "nonneg_real" sq reals)
    (sq_times formula-decl nil sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_minus formula-decl nil sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_plus formula-decl nil sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "complex" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex type-eq-decl nil complex_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_le formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak))
 (abs_triangle_minus 0
  (abs_triangle_minus-1 nil 3722708010
   ("" (skeep)
    (("" (lemma "abs_triangle")
      (("" (inst - "z2" "z1-z2") (("" (assert) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs_triangle formula-decl nil polar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "nnreal" polar nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (abs_abs 0
  (abs_abs-1 nil 3455851919
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (expand "abs" 1) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   shostak))
 (abs_i 0
  (abs_i-1 nil 3455851913 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sqrt_1 formula-decl nil sqrt reals) (abs const-decl "nnreal" polar nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (abs_nzcomplex application-judgement "posreal" polar nil))
   shostak))
 (abs_div2_TCC1 0
  (abs_div2_TCC1-1 nil 3722877977 ("" (subtype-tcc) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) nil
   (abs_div2 subtype "complex_types.complex_(polar.nzx, 0)" "nzcomplex")))
 (abs_div2 0
  (abs_div2-1 nil 3455991712
   ("" (skeep)
    (("" (rewrite "abs_def")
      (("" (rewrite "abs_def")
        (("" (rewrite "sq_eq" 1 :dir rl)
          (("" (assert)
            (("" (rewrite "sq_div")
              (("1" (rewrite "sq_div")
                (("1" (rewrite "sq_div")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_eq formula-decl nil sq reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_div formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_abs formula-decl nil sq reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq_sqrt formula-decl nil sqrt reals))
   shostak))
 (abs_div3 0
  (abs_div3-1 nil 3455991811
   ("" (skosimp)
    (("" (rewrite "abs_def")
      (("" (rewrite "abs_def")
        (("" (rewrite "sq_eq" 1 :dir rl)
          (("1" (assert)
            (("1" (rewrite "sq_div")
              (("1" (rewrite "sq_div")
                (("1" (typepred "sq_abs(n0z!1)")
                  (("1" (name "SQ" "sq_abs(n0z!1)")
                    (("1" (expand "sq_abs")
                      (("1" (replace -1)
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_times")
                            (("1" (lemma "sqrt_pos" ("px" "SQ"))
                              (("1" (rewrite "sq_div" 1)
                                (("1" (assert) (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "sq_abs(n0z!1)")
              (("2" (assert)
                (("2" (expand "sq_abs")
                  (("2"
                    (lemma "sqrt_pos" ("px" "sq(Im(n0z!1)) + sq(Re(n0z!1))"))
                    (("1"
                      (lemma "both_sides_div_pos_le1"
                       ("pz" "sqrt(sq(Im(n0z!1)) + sq(Re(n0z!1)))" "x" "0" "y"
                        "abs(x!1)"))
                      (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_def formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_eq formula-decl nil sq reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sq_div formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (sq_times formula-decl nil sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_abs formula-decl nil sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (arg_TCC1 0
  (arg_TCC1-1 nil 3455854430 ("" (subtype-tcc) nil nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (complex_ const-decl "complex" complex_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (arg subtype "0" "gt_npi_le_pi")))
 (arg_TCC2 0
  (arg_TCC2-1 nil 3455854430 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (complex_ const-decl "complex" complex_types nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (arg subtype "Im(polar.z)"
        "{z_1: reals.real | booleans.=>(Re(polar.z) = 0, z_1 /= 0)}")))
 (arg_TCC3 0
  (arg_TCC3-1 nil 3455854430
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "atan2_0_2pi" ("x" "Re(z!1)" "y" "Im(z!1)"))
        (("" (assert)
          (("" (case-replace "Re(z!1) < 0")
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (atan2_0_2pi formula-decl nil atan2 trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil))
   nil
   (arg subtype
        "(number_fields.-)(atan2.atan2(Re(polar.z), Im(polar.z)), number_fields.*(2, pi_def.pi))"
        "gt_npi_le_pi")))
 (arg_TCC4 0
  (arg_TCC4-1 nil 3455854430 ("" (grind :rewrites "complex_ext") nil nil)
   ((/= const-decl "boolean" notequal nil)
    (complex_ext formula-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   nil
   (arg subtype "Im(polar.z)"
        "{z_1: reals.real | booleans.=>(Re(polar.z) = 0, z_1 /= 0)}")))
 (arg_TCC5 0
  (arg_TCC5-1 nil 3721931863
   ("" (skeep)
    (("" (rewrite "complex_ext")
      (("" (lemma "atan2_0_2pi" ("x" "Re(z)" "y" "Im(z)"))
        (("" (assert)
          (("" (case-replace "Im(z)=0")
            (("1" (assert)
              (("1" (flatten)
                (("1" (case-replace "Re(z) >= 0")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (case-replace "Re(z) >= 0")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_ext formula-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (atan2_0_2pi formula-decl nil atan2 trig))
   nil (arg subtype "atan2.atan2(Re(polar.z), Im(polar.z))" "gt_npi_le_pi")))
 (arg_is_0_nz 0
  (arg_is_0_nz-2 nil 3721232107
   ("" (skosimp)
    (("" (expand "arg")
      (("" (lemma "atan2_0_2pi" ("x" "Re(n0z!1)" "y" "Im(n0z!1)"))
        (("" (case-replace "Im(n0z!1) =0")
          (("1" (assert)
            (("1" (use "nzcomplex_nz")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (case-replace "Re(n0z!1) >= 0")
                    (("1" (assert)
                      (("1" (expand "atan2")
                        (("1" (rewrite "atan_0") nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (flatten)
                        (("2" (hide -2)
                          (("2" (expand "atan2")
                            (("2" (rewrite "atan_0") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case-replace "Im(n0z!1) < 0")
              (("1" (flatten)
                (("1" (case-replace "Re(n0z!1) >= 0")
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (flatten)
                  (("2" (case-replace "Re(n0z!1) >= 0")
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "atan2")
                          (("1" (expand ">=" -1)
                            (("1" (expand "<=" -1)
                              (("1" (split)
                                (("1" (assert)
                                  (("1" (lemma "atan_strict_increasing")
                                    (("1" (expand "strict_increasing?")
                                      (("1"
                                        (inst - "0" "Im(n0z!1) / Re(n0z!1)")
                                        (("1"
                                          (lemma
                                           "posreal_div_posreal_is_posreal"
                                           ("px"
                                            "Im(n0z!1)"
                                            "py"
                                            "Re(n0z!1)"))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzcomplex_nz formula-decl nil complex_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_0 formula-decl nil atan trig) (atan2 const-decl "real" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (atan_strict_increasing formula-decl nil atan trig)
    (atan2_0_2pi formula-decl nil atan2 trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil)
  (arg_is_0_nz-1 nil 3455855531
   ("" (skosimp)
    (("" (expand "arg")
      (("" (expand "Re" 1 2)
        (("" (expand "Im" 1 2)
          (("" (lemma "atan2_0_2pi" ("x" "Re(n0z!1)" "y" "Im(n0z!1)"))
            (("" (case-replace "Im(n0z!1) =0")
              (("1" (assert)
                (("1" (typepred "n0z!1")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (case-replace "Re(n0z!1) >= 0")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "atan2")
                              (("1" (rewrite "atan_0")
                                (("1" (expand "Re")
                                  (("1" (expand "Im") (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (hide -2)
                              (("2" (expand "atan2")
                                (("2" (rewrite "atan_0")
                                  (("2" (assert)
                                    (("2" (expand "Im")
                                      (("2"
                                        (expand "Re")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (case-replace "Im(n0z!1) < 0")
                  (("1" (flatten)
                    (("1" (case-replace "Re(n0z!1) >= 0")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "Im")
                            (("1" (expand "Re") (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "Re")
                          (("2" (expand "Im")
                            (("2" (assert)
                              (("2" (flatten) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (case-replace "Re(n0z!1) >= 0")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "atan2")
                              (("1" (expand ">=" -1)
                                (("1" (expand "<=" -1)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "atan_strict_increasing")
                                        (("1"
                                          (expand "strict_increasing?")
                                          (("1"
                                            (inst
                                             -
                                             "0"
                                             "Im(n0z!1) / Re(n0z!1)")
                                            (("1"
                                              (lemma
                                               "posreal_div_posreal_is_posreal"
                                               ("px"
                                                "Im(n0z!1)"
                                                "py"
                                                "Re(n0z!1)"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite "atan_0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "Im")
                                                      (("1"
                                                        (expand "Re")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (expand "Re")
                                        (("2"
                                          (expand "Im")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "Re")
                            (("2" (expand "Im")
                              (("2" (assert)
                                (("2" (flatten) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (atan2 const-decl "real" atan2 trig) (atan_0 formula-decl nil atan trig)
    (eq_rew formula-decl nil complex_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (atan_strict_increasing formula-decl nil atan trig)
    (atan2_0_2pi formula-decl nil atan2 trig)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   shostak))
 (arg_is_0 0
  (arg_is_0-1 nil 3455856156
   ("" (skosimp)
    (("" (case-replace "z!1=complex_(0,0)")
      (("1" (expand "arg") (("1" (assert) nil nil)) nil)
       ("2" (rewrite "complex_ext")
        (("2" (lemma "arg_is_0_nz" ("n0z" "z!1"))
          (("1" (replace -1) (("1" (ground) nil nil)) nil)
           ("2" (flatten)
            (("2" (hide 2) (("2" (replaces -1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (arg_is_0_nz formula-decl nil polar nil)
    (/= const-decl "boolean" notequal nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex_ext formula-decl nil complex_types nil))
   shostak))
 (arg_is_pi2 0
  (arg_is_pi2-2 nil 3721232361
   ("" (skosimp)
    (("" (typepred "arg(z!1)")
      (("" (expand "arg")
        (("" (rewrite "complex_ext")
          (("" (case-replace "Re(z!1)=0")
            (("1" (case-replace "Im(z!1)>0")
              (("1" (assert)
                (("1" (expand "atan2") (("1" (propax) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (case-replace "Im(z!1)=0")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case-replace "Im(z!1) < 0")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (expand "atan2")
                    (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                      (("2" (assert)
                        (("2" (case-replace "Re(z!1) > 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arg const-decl "gt_npi_le_pi" polar nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (complex type-eq-decl nil complex_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex_ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (atan2 const-decl "real" atan2 trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil)
  (arg_is_pi2-1 nil 3455856760
   ("" (skosimp)
    (("" (typepred "arg(z!1)")
      (("" (expand "arg")
        (("" (case-replace "Re(z!1)=0")
          (("1" (case-replace "Im(z!1)>0")
            (("1" (assert)
              (("1" (expand "atan2") (("1" (propax) nil nil)) nil)) nil)
             ("2" (assert)
              (("2" (case-replace "Im(z!1)=0")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (expand "atan2") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case-replace "Im(z!1) < 0")
              (("1" (assert)
                (("1" (expand "atan2")
                  (("1" (assert)
                    (("1" (case-replace "Re(z!1)>0")
                      (("1" (assert)
                        (("1" (typepred "atan(Im(z!1) / Re(z!1))")
                          (("1" (expand "abs") (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                          (("2" (expand "abs") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "atan2")
                  (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                    (("2" (expand "abs")
                      (("2" (assert)
                        (("2" (case-replace "Re(z!1) > 0")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (case-replace "atan(Im(z!1) / Re(z!1)) < 0")
                              (("1" (assert) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos const-decl "real" sincos_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (eq_rew formula-decl nil complex_types nil)
    (atan2 const-decl "real" atan2 trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (arg_is_pi 0
  (arg_is_pi-2 nil 3721232384
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "complex_ext")
        (("" (case-replace "Im(z!1)=0")
          (("1" (assert)
            (("1" (case-replace "Re(z!1)=0")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (expand "atan2")
                  (("2" (assert)
                    (("2" (case-replace "Re(z!1) > 0")
                      (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "atan2")
              (("2" (case-replace "Re(z!1)=0")
                (("1" (assert)
                  (("1" (lift-if -2) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (assert)
                  (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                    (("2" (lift-if -4)
                      (("2" (assert)
                        (("2" (prop)
                          (("2" (lemma "atan_strict_increasing")
                            (("2" (expand "strict_increasing?")
                              (("2" (inst - "Im(z!1) / Re(z!1)" "0")
                                (("2" (rewrite "atan_0")
                                  (("2"
                                    (lemma "both_sides_div_neg_lt1"
                                     ("nz" "Re(z!1)" "y" "0" "x" "Im(z!1)"))
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (atan2 const-decl "real" atan2 trig) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (atan_0 formula-decl nil atan trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_div_neg_lt1 formula-decl nil real_props nil)
    (atan_strict_increasing formula-decl nil atan trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex_ext formula-decl nil complex_types nil))
   nil)
  (arg_is_pi-1 nil 3455857439
   ("" (skosimp)
    (("" (expand "arg")
      (("" (case-replace "Im(z!1)=0")
        (("1" (assert)
          (("1" (case-replace "Re(z!1)=0")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (expand "atan2")
                (("2" (assert)
                  (("2" (case-replace "Re(z!1) > 0")
                    (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "atan2")
            (("2" (case-replace "Re(z!1)=0")
              (("1" (assert) (("1" (lift-if -2) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                  (("2" (lift-if -4)
                    (("2" (assert)
                      (("2" (prop)
                        (("2" (lemma "atan_strict_increasing")
                          (("2" (expand "strict_increasing?")
                            (("2" (inst - "Im(z!1) / Re(z!1)" "0")
                              (("2" (rewrite "atan_0")
                                (("2"
                                  (lemma "both_sides_div_neg_lt1"
                                   ("nz" "Re(z!1)" "y" "0" "x" "Im(z!1)"))
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos const-decl "real" sincos_def trig)
    (atan_strict_increasing formula-decl nil atan trig)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (eq_rew formula-decl nil complex_types nil)
    (atan_0 formula-decl nil atan trig) (atan2 const-decl "real" atan2 trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig))
   shostak))
 (arg_is_mpi2 0
  (arg_is_mpi2-2 nil 3721232415
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "complex_ext")
        (("" (case-replace "Re(z!1)=0")
          (("1" (case-replace "Im(z!1)<0")
            (("1" (assert)
              (("1" (expand "atan2") (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert)
              (("2" (expand "atan2")
                (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "atan2")
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                    (("2" (name-replace "DRL" "atan(Im(z!1) / Re(z!1))")
                      (("2" (case-replace "DRL<0")
                        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan2 const-decl "real" atan2 trig)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex_ext formula-decl nil complex_types nil))
   nil)
  (arg_is_mpi2-1 nil 3455857932
   ("" (skosimp)
    (("" (expand "arg")
      (("" (case-replace "Re(z!1)=0")
        (("1" (case-replace "Im(z!1)<0")
          (("1" (assert) (("1" (expand "atan2") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (assert)
            (("2" (expand "atan2")
              (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "atan2")
            (("2" (lift-if)
              (("2" (assert)
                (("2" (typepred "atan(Im(z!1) / Re(z!1))")
                  (("2" (expand "abs")
                    (("2" (name-replace "DRL" "atan(Im(z!1) / Re(z!1))")
                      (("2" (case-replace "DRL<0")
                        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos const-decl "real" sincos_def trig)
    (atan2 const-decl "real" atan2 trig)
    (eq_rew formula-decl nil complex_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig))
   shostak))
 (arg_lt_0 0
  (arg_lt_0-2 nil 3721232440
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "complex_ext")
        (("" (case-replace "Im(z!1) < 0")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (case-replace "Im(z!1)=0")
                  (("1" (expand "atan2")
                    (("1" (case-replace "Re(z!1) = 0")
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (prop) (("1" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace 1 -1)
                    (("2" (expand "atan2")
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (case-replace "Re(z!1)>0")
                            (("1" (lemma "atan_strict_increasing")
                              (("1" (expand "strict_increasing?")
                                (("1" (inst - "0" "Im(z!1) / Re(z!1)")
                                  (("1" (rewrite "atan_0")
                                    (("1"
                                      (lemma
                                       "posreal_div_posreal_is_posreal"
                                       ("px" "Im(z!1)" "py" "Re(z!1)"))
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case-replace "Re(z!1)=0")
                              (("1" (assert) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (atan_0 formula-decl nil atan trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan2 const-decl "real" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (atan_strict_increasing formula-decl nil atan trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (> const-decl "bool" reals nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex_ext formula-decl nil complex_types nil))
   nil)
  (arg_lt_0-1 nil 3455858132
   ("" (skosimp)
    (("" (expand "arg")
      (("" (case-replace "Im(z!1) < 0")
        (("1" (assert)
          (("1" (lemma "atan2_ge_0_lt_2pi" ("x" "Re(z!1)" "y" "Im(z!1)"))
            (("1" (assert) nil nil)) nil))
          nil)
         ("2" (assert)
          (("2" (lift-if)
            (("2" (assert)
              (("2" (case-replace "Im(z!1)=0")
                (("1" (expand "atan2")
                  (("1" (case-replace "Re(z!1) = 0")
                    (("1" (assert)
                      (("1" (rewrite "atan_0")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1" (prop) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace 1 -1)
                  (("2" (expand "atan2")
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (case-replace "Re(z!1)>0")
                          (("1" (lemma "atan_strict_increasing")
                            (("1" (expand "strict_increasing?")
                              (("1" (inst - "0" "Im(z!1) / Re(z!1)")
                                (("1" (rewrite "atan_0")
                                  (("1"
                                    (lemma "posreal_div_posreal_is_posreal"
                                     ("px" "Im(z!1)" "py" "Re(z!1)"))
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "Re(z!1)=0")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (lemma "both_sides_div_neg_lt1"
                                 ("nz" "Re(z!1)" "y" "0" "x" "Im(z!1)"))
                                (("2" (assert)
                                  (("2" (lemma "atan_strict_increasing")
                                    (("2" (expand "strict_increasing?")
                                      (("2"
                                        (inst - "Im(z!1) / Re(z!1)" "0")
                                        (("2"
                                          (rewrite "atan_0")
                                          (("2"
                                            (split)
                                            (("1"
                                              (typepred
                                               "atan(Im(z!1) / Re(z!1))")
                                              (("1"
                                                (expand "abs")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (atan_strict_increasing formula-decl nil atan trig)
    (atan2 const-decl "real" atan2 trig) (atan_0 formula-decl nil atan trig)
    (eq_rew formula-decl nil complex_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig))
   shostak))
 (arg_p_lt_pi 0
  (arg_p_lt_pi-1 nil 3455862135
   ("" (skosimp)
    (("" (lemma "arg_lt_0" ("z" "z!1"))
      (("" (lemma "arg_is_0" ("z" "z!1"))
        (("" (lemma "arg_is_pi" ("z" "z!1"))
          (("" (lemma "trichotomy" ("x" "arg(z!1)"))
            (("" (split)
              (("1" (assert)
                (("1" (typepred "arg(z!1)")
                  (("1" (expand "<=" -2)
                    (("1" (split)
                      (("1" (assert) (("1" (assert) nil nil)) nil)
                       ("2" (assert)
                        (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (arg_lt_0 formula-decl nil polar nil)
    (arg_is_pi formula-decl nil polar nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (trichotomy formula-decl nil real_axioms nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (<= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (arg_is_0 formula-decl nil polar nil))
   shostak))
 (arg_gt_0 0
  (arg_gt_0-1 nil 3455860679
   ("" (skosimp)
    (("" (lemma "arg_lt_0" ("z" "z!1"))
      (("" (lemma "arg_is_0" ("z" "z!1"))
        (("" (lemma "trichotomy" ("x" "arg(z!1)"))
          (("" (split)
            (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (arg_lt_0 formula-decl nil polar nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (arg_is_0 formula-decl nil polar nil))
   shostak))
 (arg_div_abs_TCC1 0
  (arg_div_abs_TCC1-1 nil 3722877977
   ("" (subtype-tcc)
    (("" (rewrite "sqrt_eq_0")
      (("" (lemma "sqrt_eq_0")
        (("" (inst -1 "Im(n0x!1) * Im(n0x!1) + Re(n0x!1) * Re(n0x!1)")
          (("" (split)
            (("1" (grind-reals)
              (("1" (case "Im(n0x!1)=0 AND Re(n0x!1)=0")
                (("1" (decompose-equality) nil nil)
                 ("2" (lemma "sq_plus_eq_0")
                  (("2" (inst -1 "Im(n0x!1)" "Re(n0x!1)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (sqrt_eq_0 formula-decl nil sqrt reals)
    (sqrt_0 formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_plus_eq_0 formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (abs const-decl "nnreal" polar nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals))
   nil
   (arg_div_abs subtype "complex_types.complex_(polar.abs(polar.n0x), 0)"
    "nzcomplex")))
 (arg_div_abs 0
  (arg_div_abs-2 nil 3721232507
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "complex_ext")
        (("" (rewrite "abs_def")
          (("" (case-replace "Re(n0x!1)=0")
            (("1" (rewrite "sq_0")
              (("1" (assert)
                (("1" (use "nzcomplex_nz")
                  (("1" (assert)
                    (("1" (rewrite "sqrt_sq_abs") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "sq_nz_pos" ("nz" "Re(n0x!1)"))
                (("2"
                  (lemma "sqrt_pos" ("px" "sq(Im(n0x!1)) + sq(Re(n0x!1))"))
                  (("1" (name "DIV" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))")
                    (("1" (replace -1)
                      (("1" (case-replace "Im(n0x!1) < 0")
                        (("1"
                          (lemma "both_sides_div_pos_lt1"
                           ("pz" "DIV" "x" "Im(n0x!1)" "y" "0"))
                          (("1" (assert)
                            (("1"
                              (lemma "atan2_cancel_pos"
                               ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz" "1/DIV"))
                              (("1" (assert) (("1" (grind) nil nil)) nil)
                               ("2"
                                (lemma "posreal_div_posreal_is_posreal"
                                 ("px" "1" "py" "DIV"))
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (case-replace "Im(n0x!1)=0")
                            (("1" (assert)
                              (("1"
                                (lemma "atan2_cancel_pos"
                                 ("x" "Re(n0x!1)" "y" "0" "pz" "1/DIV"))
                                (("1" (assert) (("1" (grind) nil nil)) nil)
                                 ("2"
                                  (lemma "posreal_div_posreal_is_posreal"
                                   ("px" "1" "py" "DIV"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "1" "py" "DIV"))
                              (("2"
                                (lemma "both_sides_div_pos_lt1"
                                 ("pz" "DIV" "y" "Im(n0x!1)" "x" "0"))
                                (("2" (assert)
                                  (("2"
                                    (lemma "atan2_cancel_pos"
                                     ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz"
                                      "1/DIV"))
                                    (("2" (assert) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (abs_def formula-decl nil polar nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan_0 formula-decl nil atan trig)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (atan2_cancel_pos formula-decl nil atan2 trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (< const-decl "bool" reals nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sq_nz_pos judgement-tcc nil sq reals) (sq_0 formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzcomplex_nz formula-decl nil complex_types nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (atan2 const-decl "real" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (div_nzcomplex1 application-judgement "nzcomplex" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "nnreal" polar nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex_ext formula-decl nil complex_types nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eq_rew formula-decl nil complex_types nil))
   nil)
  (arg_div_abs-1 nil 3455860780
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "abs_def")
        (("" (case-replace "Re(n0x!1)=0")
          (("1" (rewrite "sq_0")
            (("1" (assert)
              (("1" (typepred "n0x!1")
                (("1" (assert)
                  (("1" (rewrite "sqrt_sq_abs") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "sq_nz_pos" ("nz" "Re(n0x!1)"))
              (("2" (lemma "sqrt_pos" ("px" "sq(Im(n0x!1)) + sq(Re(n0x!1))"))
                (("1" (name "DIV" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (case-replace "Im(n0x!1) < 0")
                        (("1"
                          (lemma "both_sides_div_pos_lt1"
                           ("pz" "DIV" "x" "Im(n0x!1)" "y" "0"))
                          (("1" (assert)
                            (("1"
                              (lemma "atan2_cancel_pos"
                               ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz" "1/DIV"))
                              (("1" (assert) nil nil)
                               ("2" (assert)
                                (("2"
                                  (lemma "posreal_div_posreal_is_posreal"
                                   ("px" "1" "py" "DIV"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case-replace "Im(n0x!1)=0")
                            (("1" (assert)
                              (("1"
                                (lemma "atan2_cancel_pos"
                                 ("x" "Re(n0x!1)" "y" "0" "pz" "1/DIV"))
                                (("1" (assert) nil nil)
                                 ("2" (assert)
                                  (("2"
                                    (lemma "posreal_div_posreal_is_posreal"
                                     ("px" "1" "py" "DIV"))
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "1" "py" "DIV"))
                              (("2"
                                (lemma "both_sides_div_pos_lt1"
                                 ("pz" "DIV" "y" "Im(n0x!1)" "x" "0"))
                                (("2" (assert)
                                  (("2"
                                    (lemma "atan2_cancel_pos"
                                     ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "pz"
                                      "1/DIV"))
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (div_nzcomplex3 application-judgement "nzcomplex" complex_types nil)
    (eq_rew formula-decl nil complex_types nil)
    (atan2 const-decl "real" atan2 trig)
    (sqrt_sq_abs formula-decl nil sqrt reals) (sq_0 formula-decl nil sq reals)
    (sq_nz_pos judgement-tcc nil sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (Re_div3 formula-decl nil complex_types nil)
    (Im_div3 formula-decl nil complex_types nil)
    (atan2_cancel_pos formula-decl nil atan2 trig)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   shostak))
 (Re_cos_abs1 0
  (Re_cos_abs1-3 "" 3790337194
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "abs_def")
        (("" (case-replace "Re(n0x!1) = 0")
          (("1" (rewrite "sq_0")
            (("1" (assert)
              (("1" (lemma "trichotomy" ("x" "Im(n0x!1)"))
                (("1" (split)
                  (("1" (expand "atan2") (("1" (assert) nil nil)) nil)
                   ("2" (replace -1)
                    (("2" (rewrite "sq_0")
                      (("2" (rewrite "sqrt_0") (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (rewrite "sqrt_sq_neg")
                    (("3" (case-replace "Im(n0x!1) = -1")
                      (("1" (assert)
                        (("1" (expand "atan2")
                          (("1" (assert)
                            (("1" (lemma "cos_neg" ("a" "pi/2"))
                              (("1" (rewrite "cos_pi2")
                                (("1" (replace -1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (lemma "sq_eq"
               ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
              (("2" (flatten)
                (("2" (split -2)
                  (("1" (rewrite "sq_sqrt" -1)
                    (("1" (hide -2 -3)
                      (("1" (rewrite "sq_1")
                        (("1"
                          (lemma "cos_atan2"
                           ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                          (("1" (assert)
                            (("1"
                              (lemma "cos_period"
                               ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                              (("1" (replace -1 2 rl)
                                (("1" (hide -1)
                                  (("1"
                                    (case-replace
                                     "1 + sq(Im(n0x!1) / Re(n0x!1)) = 1/sq(Re(n0x!1))")
                                    (("1" (hide -1)
                                      (("1"
                                        (case-replace "Re(n0x!1) > 0")
                                        (("1"
                                          (rewrite "sqrt_div" -2)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "/=")
                                            (("2"
                                              (rewrite "sq_eq_0")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (rewrite "sqrt_div" -1)
                                            (("1"
                                              (rewrite "div_div1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "/=")
                                              (("2"
                                                (rewrite "sq_eq_0")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1 3)
                                      (("2"
                                        (rewrite "sq_div" 1)
                                        (("2"
                                          (lemma
                                           "add_div"
                                           ("x"
                                            "1"
                                            "n0x"
                                            "1"
                                            "y"
                                            "sq(Im(n0x!1))"
                                            "n0y"
                                            "sq(Re(n0x!1))"))
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (rewrite "cross_mult")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert)
                                      (("3"
                                        (expand "/=")
                                        (("3" (rewrite "sq_eq_0") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Re_cos_abs1-2 nil 3721234609
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "complex_ext")
        (("" (rewrite "abs_def")
          (("" (case-replace "Re(n0x!1) = 0")
            (("1" (rewrite "sq_0")
              (("1" (assert)
                (("1" (lemma "trichotomy" ("x" "Im(n0x!1)"))
                  (("1" (split)
                    (("1" (expand "atan2") (("1" (assert) nil nil)) nil)
                     ("2" (replace -1)
                      (("2" (rewrite "sq_0")
                        (("2" (rewrite "sqrt_0") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (rewrite "sqrt_sq_neg")
                      (("3" (case-replace "Im(n0x!1) = -1")
                        (("1" (assert)
                          (("1" (expand "atan2")
                            (("1" (assert)
                              (("1" (lemma "cos_neg" ("a" "pi/2"))
                                (("1" (rewrite "cos_pi2")
                                  (("1" (replace -1) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (lemma "sq_eq"
                 ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
                (("2" (flatten)
                  (("2" (split -2)
                    (("1" (rewrite "sq_sqrt" -1)
                      (("1" (hide -2 -3)
                        (("1" (rewrite "sq_1")
                          (("1"
                            (lemma "cos_atan2"
                             ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                            (("1" (assert)
                              (("1"
                                (lemma "cos_period"
                                 ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                                (("1" (replace -1 2 rl)
                                  (("1" (hide -1)
                                    (("1"
                                      (case-replace
                                       "1 + sq(Im(n0x!1) / Re(n0x!1)) = 1/sq(Re(n0x!1))")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case-replace "Re(n0x!1) > 0")
                                          (("1"
                                            (rewrite "sqrt_div" -2)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "/=")
                                              (("2"
                                                (rewrite "sq_eq_0")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (rewrite "sqrt_div" -1)
                                              (("1"
                                                (rewrite "div_div1")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (expand "/=")
                                                (("2"
                                                  (rewrite "sq_eq_0")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 3)
                                        (("2"
                                          (rewrite "sq_div" 1)
                                          (("2"
                                            (lemma
                                             "add_div"
                                             ("x"
                                              "1"
                                              "n0x"
                                              "1"
                                              "y"
                                              "sq(Im(n0x!1))"
                                              "n0y"
                                              "sq(Re(n0x!1))"))
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (rewrite "cross_mult")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (expand "/=")
                                          (("3" (rewrite "sq_eq_0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan2 const-decl "real" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_neg formula-decl nil sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos_pi2 formula-decl nil sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (trichotomy formula-decl nil real_axioms nil)
    (sq_0 formula-decl nil sq reals) (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (sq_eq formula-decl nil sq reals)
    (cos_atan2 formula-decl nil atan2 trig)
    (cos_period formula-decl nil sincos trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (add_div formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (cross_mult formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (sq_div formula-decl nil sq reals)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_div1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqrt_div formula-decl nil sqrt reals)
    (sqrt_1 formula-decl nil sqrt reals) (sq_eq_0 formula-decl nil sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sq_1 formula-decl nil sq reals) (sq_sqrt formula-decl nil sqrt reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs_def formula-decl nil polar nil))
   nil)
  (Re_cos_abs1-1 nil 3455859132
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "abs_def")
        (("" (case-replace "Re(n0x!1) = 0")
          (("1" (rewrite "sq_0")
            (("1" (assert)
              (("1" (lemma "trichotomy" ("x" "Im(n0x!1)"))
                (("1" (split)
                  (("1" (expand "atan2")
                    (("1" (assert) (("1" (rewrite "cos_pi2") nil nil)) nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (rewrite "sq_0")
                      (("2" (rewrite "sqrt_0") (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (rewrite "sqrt_sq_neg")
                    (("3" (case-replace "Im(n0x!1) = -1")
                      (("1" (assert)
                        (("1" (expand "atan2")
                          (("1" (assert)
                            (("1" (lemma "cos_neg" ("a" "pi/2"))
                              (("1" (rewrite "cos_pi2")
                                (("1" (replace -1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (lemma "sq_eq"
               ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
              (("2" (flatten)
                (("2" (split -2)
                  (("1" (rewrite "sq_sqrt" -1)
                    (("1" (hide -2 -3)
                      (("1" (rewrite "sq_1")
                        (("1"
                          (lemma "cos_atan2"
                           ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                          (("1" (assert)
                            (("1"
                              (lemma "cos_period"
                               ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                              (("1" (replace -1 2 rl)
                                (("1" (hide -1)
                                  (("1"
                                    (case-replace
                                     "1 + sq(Im(n0x!1) / Re(n0x!1)) = 1/sq(Re(n0x!1))")
                                    (("1" (hide -1)
                                      (("1"
                                        (case-replace "Re(n0x!1) > 0")
                                        (("1"
                                          (rewrite "sqrt_div" -2)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "/=")
                                            (("2"
                                              (rewrite "sq_eq_0")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (rewrite "sqrt_div" -1)
                                            (("1"
                                              (rewrite "div_div1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "/=")
                                              (("2"
                                                (rewrite "sq_eq_0")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1 3)
                                      (("2"
                                        (rewrite "sq_div" 1)
                                        (("2"
                                          (lemma
                                           "add_div"
                                           ("x"
                                            "1"
                                            "n0x"
                                            "1"
                                            "y"
                                            "sq(Im(n0x!1))"
                                            "n0y"
                                            "sq(Re(n0x!1))"))
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (rewrite "cross_mult")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert)
                                      (("3"
                                        (expand "/=")
                                        (("3" (rewrite "sq_eq_0") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (eq_rew formula-decl nil complex_types nil)
    (sqrt_sq formula-decl nil sqrt reals) (atan2 const-decl "real" atan2 trig)
    (sqrt_0 formula-decl nil sqrt reals)
    (cos_neg formula-decl nil sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos_pi2 formula-decl nil sincos trig)
    (sqrt_sq_neg formula-decl nil sqrt reals) (sq_0 formula-decl nil sq reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq_eq formula-decl nil sq reals) (cos_atan2 formula-decl nil atan2 trig)
    (cos_period formula-decl nil sincos trig)
    (sq_div formula-decl nil sq reals) (sqrt_div formula-decl nil sqrt reals)
    (sqrt_1 formula-decl nil sqrt reals) (sq_eq_0 formula-decl nil sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sq_1 formula-decl nil sq reals) (sq_sqrt formula-decl nil sqrt reals)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   shostak))
 (Im_sin_abs1 0
  (Im_sin_abs1-2 nil 3721234635
   ("" (skosimp)
    (("" (expand "arg")
      (("" (use "nzcomplex_nz")
        (("" (case-replace "Im(n0x!1) = 0")
          (("1" (assert)
            (("1" (expand "atan2")
              (("1" (rewrite "atan_0")
                (("1" (flatten)
                  (("1" (rewrite "sin_0")
                    (("1" (rewrite "sin_pi")
                      (("1" (lift-if) (("1" (propax) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "sin_atan2" ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
              (("2" (assert)
                (("2" (rewrite "abs_def" -3)
                  (("2"
                    (lemma "sq_eq"
                     ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb" "1"))
                    (("2" (flatten -1)
                      (("2" (split -2)
                        (("1" (hide -2 -4)
                          (("1" (rewrite "sq_sqrt")
                            (("1" (rewrite "sq_1")
                              (("1"
                                (lemma "sin_period"
                                 ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j" "-1"))
                                (("1" (replace -1 2 rl)
                                  (("1" (hide -1)
                                    (("1" (case-replace "Re(n0x!1)=0")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1 -3)
                                            (("1"
                                              (case "Im(n0x!1)<0")
                                              (("1"
                                                (lemma
                                                 "sq_neg"
                                                 ("a" "Im(n0x!1)"))
                                                (("1"
                                                  (lemma
                                                   "sq_eq"
                                                   ("nna"
                                                    "-Im(n0x!1)"
                                                    "nnb"
                                                    "1"))
                                                  (("1"
                                                    (expand "sq" -1 2)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "sq_eq"
                                                   ("nna"
                                                    "Im(n0x!1)"
                                                    "nnb"
                                                    "1"))
                                                  (("2"
                                                    (expand "sq" -1 2)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "1 + sq(Im(n0x!1) / Re(n0x!1)) = sq(1/Re(n0x!1))")
                                          (("1"
                                            (rewrite "sqrt_sq_abs")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (lemma
                                                     "real_props.abs_div"
                                                     ("x"
                                                      "1"
                                                      "n0y"
                                                      "Re(n0x!1)"))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand "abs")
                                                          (("1"
                                                            (rewrite
                                                             "div_div1")
                                                            (("1"
                                                              (rewrite
                                                               "div_cancel3")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 4 -2)
                                            (("2"
                                              (lemma
                                               "add_div"
                                               ("x"
                                                "1"
                                                "n0x"
                                                "1"
                                                "y"
                                                "sq(Im(n0x!1))"
                                                "n0y"
                                                "sq(Re(n0x!1))"))
                                              (("1"
                                                (rewrite "sq_div" 1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (rewrite "sq_div" 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite "sq_eq_0")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (atan2 const-decl "real" atan2 trig) (sin_pi formula-decl nil sincos trig)
    (sin_0 formula-decl nil sincos_def trig)
    (atan_0 formula-decl nil atan trig)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_atan2 formula-decl nil atan2 trig)
    (abs_def formula-decl nil polar nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_1 formula-decl nil sq reals)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_0 formula-decl nil sq reals) (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_neg formula-decl nil sq reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (add_div formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (sq_div formula-decl nil sq reals) (sq_eq_0 formula-decl nil sq reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sin_period formula-decl nil sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sq_eq formula-decl nil sq reals)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (nzcomplex_nz formula-decl nil complex_types nil))
   nil)
  (Im_sin_abs1-1 nil 3455862298
   ("" (skosimp)
    (("" (expand "arg")
      (("" (typepred "n0x!1")
        (("" (rewrite "sin_0")
          (("" (case-replace "Im(n0x!1) = 0")
            (("1" (assert)
              (("1" (expand "atan2")
                (("1" (rewrite "atan_0")
                  (("1" (assert)
                    (("1" (rewrite "sin_0")
                      (("1" (rewrite "sin_pi")
                        (("1" (lift-if) (("1" (propax) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "sin_atan2" ("x" "Re(n0x!1)" "y" "Im(n0x!1)"))
                (("2" (assert)
                  (("2" (rewrite "abs_def" -3)
                    (("2"
                      (lemma "sq_eq"
                       ("nna" "sqrt(sq(Im(n0x!1)) + sq(Re(n0x!1)))" "nnb"
                        "1"))
                      (("2" (flatten -1)
                        (("2" (split -2)
                          (("1" (hide -2 -4)
                            (("1" (rewrite "sq_sqrt")
                              (("1" (rewrite "sq_1")
                                (("1"
                                  (lemma "sin_period"
                                   ("a" "atan2(Re(n0x!1), Im(n0x!1))" "j"
                                    "-1"))
                                  (("1" (replace -1 2 rl)
                                    (("1" (hide -1)
                                      (("1"
                                        (case-replace "Re(n0x!1)=0")
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1 -3)
                                              (("1"
                                                (case "Im(n0x!1)<0")
                                                (("1"
                                                  (lemma
                                                   "sq_neg"
                                                   ("a" "Im(n0x!1)"))
                                                  (("1"
                                                    (lemma
                                                     "sq_eq"
                                                     ("nna"
                                                      "-Im(n0x!1)"
                                                      "nnb"
                                                      "1"))
                                                    (("1"
                                                      (expand "sq" -1 2)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "sq_eq"
                                                     ("nna"
                                                      "Im(n0x!1)"
                                                      "nnb"
                                                      "1"))
                                                    (("2"
                                                      (expand "sq" -1 2)
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case-replace
                                             "1 + sq(Im(n0x!1) / Re(n0x!1)) = sq(1/Re(n0x!1))")
                                            (("1"
                                              (rewrite "sqrt_sq_abs")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (hide -1 -2)
                                                    (("1"
                                                      (lemma
                                                       "real_props.abs_div"
                                                       ("x"
                                                        "1"
                                                        "n0y"
                                                        "Re(n0x!1)"))
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (expand "abs")
                                                            (("1"
                                                              (rewrite
                                                               "div_div1")
                                                              (("1"
                                                                (rewrite
                                                                 "div_cancel3")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 4 -2)
                                              (("2"
                                                (lemma
                                                 "add_div"
                                                 ("x"
                                                  "1"
                                                  "n0x"
                                                  "1"
                                                  "y"
                                                  "sq(Im(n0x!1))"
                                                  "n0y"
                                                  "sq(Re(n0x!1))"))
                                                (("1"
                                                  (rewrite "sq_div" 1)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (rewrite "sq_div" 1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "/=")
                                                  (("2"
                                                    (rewrite "sq_eq_0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (sin_0 formula-decl nil sincos_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (sq_eq formula-decl nil sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sin_period formula-decl nil sincos trig)
    (sq_eq_0 formula-decl nil sq reals) (sq_div formula-decl nil sq reals)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_neg formula-decl nil sq reals) (sq_0 formula-decl nil sq reals)
    (sq_1 formula-decl nil sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sin_atan2 formula-decl nil atan2 trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (eq_rew formula-decl nil complex_types nil)
    (atan_0 formula-decl nil atan trig) (sin_pi formula-decl nil sincos trig)
    (atan2 const-decl "real" atan2 trig)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   shostak))
 (abs_cos_arg 0
  (abs_cos_arg-1 nil 3456133110
   ("" (skosimp)
    (("" (case "z!1=complex_(0,0)")
      (("1" (replaces -1) (("1" (grind) nil nil)) nil)
       ("2" (rewrite "complex_ext")
        (("2" (lemma "arg_div_abs" ("n0x" "z!1"))
          (("1" (lemma "Re_cos_abs1" ("n0x" "z!1 / abs(z!1)"))
            (("1" (replace -2 :dir rl)
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
             ("2" (lemma "abs_is_0")
              (("2" (inst -1 "z!1") (("2" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sqrt_0 formula-decl nil sqrt reals) (abs const-decl "nnreal" polar nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (arg_div_abs formula-decl nil polar nil)
    (/= const-decl "boolean" notequal nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (abs_is_0 formula-decl nil polar nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_square formula-decl nil sqrt reals)
    (atan2 const-decl "real" atan2 trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Re_div1 formula-decl nil complex_types nil)
    (abs_div formula-decl nil polar nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re_cos_abs1 formula-decl nil polar nil)
    (/ const-decl "complex" complex_types nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (complex_ext formula-decl nil complex_types nil))
   shostak))
 (abs_sin_arg 0
  (abs_sin_arg-1 nil 3456133318
   ("" (skosimp)
    (("" (case "z!1=real_(0)")
      (("1" (replaces -1) (("1" (grind) nil nil)) nil)
       ("2" (rewrite "complex_ext")
        (("2" (lemma "arg_div_abs" ("n0x" "z!1"))
          (("1" (lemma "Im_sin_abs1" ("n0x" "z!1/abs(z!1)"))
            (("1" (replace -2 -1 rl)
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
             ("2" (lemma "abs_is_0")
              (("2" (inst? -) (("2" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sqrt_0 formula-decl nil sqrt reals) (abs const-decl "nnreal" polar nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (arg_div_abs formula-decl nil polar nil)
    (/= const-decl "boolean" notequal nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (abs_is_0 formula-decl nil polar nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_square formula-decl nil sqrt reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan2 const-decl "real" atan2 trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Im_div1 formula-decl nil complex_types nil)
    (abs_div formula-decl nil polar nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Im_sin_abs1 formula-decl nil polar nil)
    (/ const-decl "complex" complex_types nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (complex_ext formula-decl nil complex_types nil))
   shostak))
 (arg_nnreal 0
  (arg_nnreal-1 nil 3455859070
   ("" (skosimp) (("" (rewrite "arg_is_0") (("" (assert) nil nil)) nil)) nil)
   ((arg_is_0 formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (arg_nreal 0
  (arg_nreal-1 nil 3455859044
   ("" (skosimp) (("" (rewrite "arg_is_pi") (("" (assert) nil nil)) nil)) nil)
   ((arg_is_pi formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (arg_i 0
  (arg_i-2 "" 3790337204 ("" (rewrite "arg_is_pi2") nil nil) nil shostak)
  (arg_i-1 nil 3455858988
   ("" (rewrite "arg_is_pi2")
    (("" (expand "complex_i")
      (("" (expand "Re") (("" (expand "Im") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((complex_i const-decl "nzcomplex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (arg_is_pi2 formula-decl nil polar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Re_i formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil))
   shostak))
 (arg_neg 0
  (arg_neg-2 nil 3721235245
   ("" (skosimp)
    (("" (expand "arg")
      (("" (rewrite "complex_ext")
        (("" (assert)
          (("" (lemma "trichotomy" ("x" "Re(n0x!1)"))
            (("" (split)
              (("1" (lemma "trichotomy" ("x" "Im(n0x!1)"))
                (("1" (split)
                  (("1" (assert)
                    (("1"
                      (lemma "atan2_cancel_neg"
                       ("x" "Re(n0x!1)" "y" "Im(n0x!1)" "nz" "-1"))
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1" (assert)
                                (("1" (prop)
                                  (("1" (lemma "atan_strict_increasing")
                                    (("1" (expand "strict_increasing?")
                                      (("1"
                                        (expand "atan2")
                                        (("1"
                                          (lemma
                                           "both_sides_div_pos_lt1"
                                           ("pz"
                                            "Re(n0x!1)"
                                            "y"
                                            "Im(n0x!1)"
                                            "x"
                                            "0"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -
                                               "0"
                                               "Im(n0x!1) / Re(n0x!1)")
                                              (("1"
                                                (rewrite "atan_0")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (replace -1)
                      (("2" (expand "atan2")
                        (("2" (rewrite "atan_0") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (expand "atan2")
                      (("3" (assert)
                        (("3" (lift-if)
                          (("3" (assert)
                            (("3" (prop)
                              (("3" (lemma "atan_strict_increasing")
                                (("3" (expand "strict_increasing?")
                                  (("3"
                                    (lemma "both_sides_div_pos_lt1"
                                     ("pz" "Re(n0x!1)" "x" "Im(n0x!1)" "y"
                                      "0"))
                                    (("3" (inst - "Im(n0x!1) / Re(n0x!1)" "0")
                                      (("3"
                                        (rewrite "atan_0")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (assert)
                  (("2" (use "nzcomplex_nz")
                    (("2" (assert)
                      (("2" (expand "atan2") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (lemma "trichotomy" ("x" "Im(n0x!1)"))
                  (("3" (split)
                    (("1" (assert)
                      (("1" (expand "atan2")
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (typepred "atan(Im(n0x!1) / Re(n0x!1))")
                              (("1"
                                (case-replace
                                 "atan(Im(n0x!1) / Re(n0x!1)) < 0")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (expand "atan2")
                        (("2" (rewrite "atan_0")
                          (("2" (assert)
                            (("2" (lift-if) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (expand "atan2")
                        (("3" (lift-if)
                          (("3" (assert)
                            (("3" (typepred "atan(Im(n0x!1) / Re(n0x!1))")
                              (("3"
                                (case-replace
                                 "atan(Im(n0x!1) / Re(n0x!1)) < 0")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (atan2_cancel_neg formula-decl nil atan2 trig)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (atan_0 formula-decl nil atan trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (atan2 const-decl "real" atan2 trig)
    (atan_strict_increasing formula-decl nil atan trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzcomplex_nz formula-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (trichotomy formula-decl nil real_axioms nil)
    (Im_rew formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (neg_nzcomplex application-judgement "nzcomplex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "complex" complex_types nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex_ext formula-decl nil complex_types nil))
   nil))
 (arg_conjugate 0
  (arg_conjugate-1 nil 3456035972
   ("" (skosimp)
    (("" (case-replace "arg(z!1) = 0")
      (("1" (rewrite "arg_is_0")
        (("1" (rewrite "arg_is_0")
          (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (case-replace "arg(z!1) = pi")
        (("1" (rewrite "arg_is_pi")
          (("1" (flatten)
            (("1" (rewrite "arg_is_pi") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (assert)
          (("2" (typepred "arg(z!1)")
            (("2" (case "arg(z!1)<0")
              (("1" (lemma "arg_lt_0" ("z" "z!1"))
                (("1" (assert)
                  (("1" (hide-all-but (-1 3))
                    (("1" (expand "arg")
                      (("1" (expand "atan2")
                        (("1" (rewrite "complex_ext")
                          (("1" (rewrite "complex_ext")
                            (("1" (assert)
                              (("1" (lemma "trichotomy" ("x" "Re(z!1)"))
                                (("1" (split)
                                  (("1" (assert)
                                    (("1"
                                      (lemma
                                       "atan_neg"
                                       ("x" "Im(z!1) / Re(z!1)"))
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert)
                                    (("3"
                                      (lemma
                                       "atan_neg"
                                       ("x" "Im(z!1) / Re(z!1)"))
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "arg_p_lt_pi" ("z" "z!1"))
                (("2" (assert)
                  (("2" (hide-all-but (-1 4))
                    (("2" (expand "arg")
                      (("2" (expand "atan2")
                        (("2" (rewrite "complex_ext")
                          (("2" (rewrite "complex_ext")
                            (("2" (assert)
                              (("2" (lemma "trichotomy" ("x" "Re(z!1)"))
                                (("2" (split)
                                  (("1" (assert)
                                    (("1"
                                      (lemma
                                       "atan_neg"
                                       ("x" "Im(z!1) / Re(z!1)"))
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (lemma "atan_neg"
                                     ("x" "Im(z!1) / Re(z!1)"))
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (<= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (conjugate const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Re_conjugate formula-decl nil complex_types nil)
    (Im_conjugate formula-decl nil complex_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (arg_is_0 formula-decl nil polar nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan_neg formula-decl nil atan trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (trichotomy formula-decl nil real_axioms nil)
    (atan2 const-decl "real" atan2 trig) (arg_lt_0 formula-decl nil polar nil)
    (arg_p_lt_pi formula-decl nil polar nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (arg_is_pi formula-decl nil polar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (arg_mult 0
  (arg_mult-2 nil 3721235610
   ("" (auto-rewrite "complex_ext")
    ((""
      (case "FORALL (n0x, n0y: nzcomplex):
                      arg(n0x * n0y) =arg(n0y * n0x)")
      (("1"
        (case "FORALL (n0x, n0y: nzcomplex):arg(n0x)=0 =>
                          arg(n0x * n0y) =
                           LET r = arg(n0x) + arg(n0y) IN
                             IF r > pi THEN r - 2 * pi
                             ELSIF r <= -pi THEN r + 2 * pi
                             ELSE r
                             ENDIF")
        (("1"
          (case "FORALL (n0x, n0y: nzcomplex):
                              arg(n0x) = pi =>
                               arg(n0x * n0y) =
                                LET r = arg(n0x) + arg(n0y) IN
                                  IF r > pi THEN r - 2 * pi
                                  ELSIF r <= -pi THEN r + 2 * pi
                                  ELSE r
                                  ENDIF")
          (("1"
            (case "FORALL (n0x, n0y: nzcomplex):
                                  0<arg(n0x) & arg(n0x)< pi =>
                                   arg(n0x * n0y) =
                                    LET r = arg(n0x) + arg(n0y) IN
                                      IF r > pi THEN r - 2 * pi
                                      ELSIF r <= -pi THEN r + 2 * pi
                                      ELSE r
                                      ENDIF")
            (("1" (skosimp)
              (("1" (lemma "trichotomy" ("x" "arg(n0x!1)"))
                (("1" (split)
                  (("1" (typepred "arg(n0x!1)")
                    (("1" (expand "<=" -2)
                      (("1" (split)
                        (("1" (inst -4 "n0x!1" "n0y!1")
                          (("1" (assert) (("1" (assert) nil nil)) nil)) nil)
                         ("2" (inst -5 "n0x!1" "n0y!1")
                          (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -4 "n0x!1" "n0y!1")
                    (("2" (assert) (("2" (assert) nil nil)) nil)) nil)
                   ("3" (typepred "arg(n0x!1)")
                    (("3" (hide -2)
                      (("3" (lemma "arg_neg" ("n0x" "n0x!1"))
                        (("3" (assert)
                          (("3" (inst -4 "-n0x!1" "n0y!1")
                            (("3" (replace -1)
                              (("3" (assert)
                                (("3" (lemma "arg_neg" ("n0x" "n0x!1*n0y!1"))
                                  (("3" (expand "*" -1 1)
                                    (("3" (expand "*" -5 1)
                                      (("3"
                                        (expand "-" -1 1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replace -1 -5)
                                            (("3"
                                              (hide -1)
                                              (("3"
                                                (lift-if -4)
                                                (("3"
                                                  (lift-if -4)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (lift-if 1)
                                                      (("3"
                                                        (case
                                                         "arg(n0x!1) + arg(n0y!1) <= -pi")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (replace 2 -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (case "FORALL (n0x, n0y: nzcomplex):
                                      0 < arg(n0x) & arg(n0x) < pi & -pi < arg(n0y) & arg(n0y)<0=>
                                       arg(n0x * n0y) =
                                        LET r = arg(n0x) + arg(n0y) IN
                                          IF r > pi THEN r - 2 * pi
                                          ELSIF r <= -pi THEN r + 2 * pi
                                          ELSE r
                                          ENDIF")
                (("1" (skosimp)
                  (("1" (lemma "trichotomy" ("x" "arg(n0y!1)"))
                    (("1" (split)
                      (("1" (typepred "arg(n0y!1)")
                        (("1" (expand "<=" -2)
                          (("1" (split)
                            (("1" (hide -2)
                              (("1" (lemma "arg_neg" ("n0x" "n0y!1"))
                                (("1" (assert)
                                  (("1" (inst -4 "n0x!1" "-n0y!1")
                                    (("1" (assert)
                                      (("1"
                                        (lemma
                                         "arg_neg"
                                         ("n0x" "n0x!1 * n0y!1"))
                                        (("1"
                                          (expand "-" -1 1)
                                          (("1"
                                            (expand "-" -5 1)
                                            (("1"
                                              (expand "*" -5 1)
                                              (("1"
                                                (expand "*" -1 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 -5)
                                                      (("1"
                                                        (replace -2 -5)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if -5)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if 1)
                                                                (("1"
                                                                  (case-replace
                                                                   "0 < arg(n0x!1 * n0y!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -9 "n0x!1" "n0y!1")
                              (("2" (inst -7 "n0y!1" "n0x!1")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -7 "n0x!1" "n0y!1")
                        (("2" (inst -6 "n0y!1" "n0x!1")
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (inst -2 "n0x!1" "n0y!1") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (assert)
                      (("2" (lemma "arg_lt_0" ("z" "n0y!1"))
                        (("2" (assert)
                          (("2" (lemma "arg_p_lt_pi" ("z" "n0x!1"))
                            (("2" (assert)
                              (("2" (hide -3 -4 -5 -6)
                                (("2" (expand "arg")
                                  (("2" (expand "atan2")
                                    (("2" (assert)
                                      (("2"
                                        (lemma
                                         "both_sides_times_pos_lt1"
                                         ("pz"
                                          "Im(n0x!1)"
                                          "x"
                                          "Im(n0y!1)"
                                          "y"
                                          "0"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case-replace "Re(n0x!1)=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "(Im(n0x!1) * Re(n0y!1) / (-1 * (Im(n0x!1) * Im(n0y!1))))=-(Re(n0y!1)/Im(n0y!1))")
                                                (("1"
                                                  (rewrite "atan_neg")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "trichotomy"
                                                       ("x" "Re(n0y!1)"))
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (lemma
                                                           "both_sides_div_neg_lt1"
                                                           ("nz"
                                                            "Im(n0y!1)"
                                                            "x"
                                                            "Re(n0y!1)"
                                                            "y"
                                                            "0"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "atan_inv_neg"
                                                               ("nx"
                                                                "Re(n0y!1) / Im(n0y!1)"))
                                                              (("1"
                                                                (rewrite
                                                                 "div_div1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (rewrite
                                                               "atan_0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "negreal_div_negreal_is_posreal"
                                                           ("nx"
                                                            "Re(n0y!1)"
                                                            "ny"
                                                            "Im(n0y!1)"))
                                                          (("1"
                                                            (lemma
                                                             "atan_inv"
                                                             ("px"
                                                              "Re(n0y!1) / Im(n0y!1)"))
                                                            (("1"
                                                              (rewrite
                                                               "div_div1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case-replace "Re(n0y!1)=0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case-replace
                                                     "(Re(n0x!1) * Im(n0y!1) / (-1 * (Im(n0x!1) * Im(n0y!1))))=-(Re(n0x!1)/Im(n0x!1))")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (rewrite "atan_neg")
                                                        (("1"
                                                          (lemma
                                                           "trichotomy"
                                                           ("x" "Re(n0x!1)"))
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (lemma
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "Re(n0x!1)"
                                                                "py"
                                                                "Im(n0x!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "atan_inv"
                                                                 ("px"
                                                                  "Re(n0x!1) / Im(n0x!1)"))
                                                                (("1"
                                                                  (rewrite
                                                                   "div_div1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "both_sides_div_pos_lt1"
                                                               ("pz"
                                                                "Im(n0x!1)"
                                                                "x"
                                                                "Re(n0x!1)"
                                                                "y"
                                                                "0"))
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (lemma
                                                                   "atan_inv_neg"
                                                                   ("nx"
                                                                    "Re(n0x!1) / Im(n0x!1)"))
                                                                  (("3"
                                                                    (rewrite
                                                                     "div_div1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "trichotomy"
                                                     ("x" "Re(n0x!1)"))
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("pz"
                                                          "Re(n0x!1)"
                                                          "x"
                                                          "Im(n0y!1)"
                                                          "y"
                                                          "0"))
                                                        (("1"
                                                          (rewrite
                                                           "zero_times1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "Im(n0x!1)"
                                                                "py"
                                                                "Re(n0x!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "trichotomy"
                                                                 ("x"
                                                                  "Re(n0y!1)"))
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (hide 1 2)
                                                                    (("1"
                                                                      (lemma
                                                                       "both_sides_div_pos_lt1"
                                                                       ("pz"
                                                                        "Re(n0y!1)"
                                                                        "x"
                                                                        "Im(n0y!1)"
                                                                        "y"
                                                                        "0"))
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_times_pos_lt1"
                                                                         ("pz"
                                                                          "Re(n0y!1)"
                                                                          "y"
                                                                          "Im(n0x!1)"
                                                                          "x"
                                                                          "0"))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "zero_times1")
                                                                            (("1"
                                                                              (lemma
                                                                               "posreal_times_posreal_is_posreal"
                                                                               ("px"
                                                                                "Re(n0x!1)"
                                                                                "py"
                                                                                "Re(n0y!1)"))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "atan_plus"
                                                                                   ("x"
                                                                                    "Im(n0x!1) / Re(n0x!1)"
                                                                                    "y"
                                                                                    "Im(n0y!1) / Re(n0y!1)"))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "Im(n0x!1) / Re(n0x!1)"
                                                                                        "x"
                                                                                        "Im(n0y!1) / Re(n0y!1)"
                                                                                        "y"
                                                                                        "0"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "add_div")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "div_times")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "div_distributes_minus"
                                                                                                 ("x"
                                                                                                  "Re(n0y!1) * Re(n0x!1)"
                                                                                                  "n0z"
                                                                                                  "Re(n0y!1) * Re(n0x!1)"
                                                                                                  "y"
                                                                                                  "Im(n0y!1) * Im(n0x!1)"))
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "div_simp")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "div_div1")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "div_cancel2")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "both_sides_div_neg_lt1"
                                                                     ("nz"
                                                                      "Re(n0y!1)"
                                                                      "y"
                                                                      "Im(n0y!1)"
                                                                      "x"
                                                                      "0"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_times_neg_lt1"
                                                                         ("nz"
                                                                          "Re(n0y!1)"
                                                                          "x"
                                                                          "Im(n0x!1)"
                                                                          "y"
                                                                          "0"))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "both_sides_times_neg_lt1"
                                                                             ("nz"
                                                                              "Re(n0y!1)"
                                                                              "x"
                                                                              "Re(n0x!1)"
                                                                              "y"
                                                                              "0"))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "zero_times1")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "atan_plus"
                                                                                     ("x"
                                                                                      "Im(n0x!1) / Re(n0x!1)"
                                                                                      "y"
                                                                                      "Im(n0y!1) / Re(n0y!1)"))
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "trich_lt"
                                                                                             ("x"
                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                              "y"
                                                                                              "Im(n0x!1) * Im(n0y!1)"))
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "div_times"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "div_mult_neg_lt1"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "div_distributes_minus"
                                                                                                             ("x"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "n0z"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "y"
                                                                                                              "Im(n0x!1) * Im(n0y!1)"))
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "div_simp")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "add_div")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "div_div1")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "div_cancel2")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "cross_mult"
                                                                                                       ("x"
                                                                                                        "Re(n0x!1)"
                                                                                                        "n0x"
                                                                                                        "Im(n0x!1)"
                                                                                                        "y"
                                                                                                        "Im(n0y!1)"
                                                                                                        "n0y"
                                                                                                        "Re(n0y!1)"))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "atan_inv"
                                                                                                           ("px"
                                                                                                            "Re(n0x!1) / Im(n0x!1)"))
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "div_div1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (rewrite
                                                                                                   "div_mult_neg_lt2"
                                                                                                   -3)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("3"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (lemma
                                                                                                           "div_distributes_minus"
                                                                                                           ("x"
                                                                                                            "Re(n0x!1) * Re(n0y!1)"
                                                                                                            "n0z"
                                                                                                            "Re(n0x!1) * Re(n0y!1)"
                                                                                                            "y"
                                                                                                            "Im(n0x!1) * Im(n0y!1)"))
                                                                                                          (("3"
                                                                                                            (rewrite
                                                                                                             "div_simp")
                                                                                                            (("3"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (rewrite
                                                                                                                 "add_div")
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   "div_div1")
                                                                                                                  (("3"
                                                                                                                    (rewrite
                                                                                                                     "div_cancel2")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (propax) nil nil)
                                                       ("3"
                                                        (lemma
                                                         "both_sides_div_neg_lt1"
                                                         ("x"
                                                          "Im(n0x!1)"
                                                          "y"
                                                          "0"
                                                          "nz"
                                                          "Re(n0x!1)"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_neg_lt1"
                                                             ("y"
                                                              "Im(n0y!1)"
                                                              "x"
                                                              "0"
                                                              "nz"
                                                              "Re(n0x!1)"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "zero_times1")
                                                                (("1"
                                                                  (lemma
                                                                   "trichotomy"
                                                                   ("x"
                                                                    "Re(n0y!1)"))
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (lemma
                                                                       "both_sides_div_pos_lt1"
                                                                       ("pz"
                                                                        "Re(n0y!1)"
                                                                        "x"
                                                                        "Im(n0y!1)"
                                                                        "y"
                                                                        "0"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "both_sides_times_pos_lt1"
                                                                           ("pz"
                                                                            "Re(n0y!1)"
                                                                            "y"
                                                                            "Im(n0x!1)"
                                                                            "x"
                                                                            "0"))
                                                                          (("1"
                                                                            (rewrite
                                                                             "zero_times1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "atan_plus"
                                                                                   ("x"
                                                                                    "Im(n0x!1) / Re(n0x!1)"
                                                                                    "y"
                                                                                    "Im(n0y!1) / Re(n0y!1)"))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "trich_lt"
                                                                                           ("x"
                                                                                            "Re(n0x!1) * Re(n0y!1)"
                                                                                            "y"
                                                                                            "Im(n0x!1) * Im(n0y!1)"))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "div_times"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "div_mult_neg_lt1"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "div_distributes_minus"
                                                                                                         ("x"
                                                                                                          "Re(n0x!1) * Re(n0y!1)"
                                                                                                          "n0z"
                                                                                                          "Re(n0x!1) * Re(n0y!1)"
                                                                                                          "y"
                                                                                                          "Im(n0x!1) * Im(n0y!1)"))
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "div_simp")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "add_div")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "div_div1")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "div_cancel2")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "cross_mult"
                                                                                                     ("x"
                                                                                                      "Re(n0x!1)"
                                                                                                      "n0x"
                                                                                                      "Im(n0x!1)"
                                                                                                      "y"
                                                                                                      "Im(n0y!1)"
                                                                                                      "n0y"
                                                                                                      "Re(n0y!1)"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "atan_inv_neg"
                                                                                                         ("nx"
                                                                                                          "Im(n0x!1) / Re(n0x!1)"))
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "div_div1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (lemma
                                                                                                 "both_sides_times_pos_lt1"
                                                                                                 ("pz"
                                                                                                  "Re(n0y!1)"
                                                                                                  "x"
                                                                                                  "Re(n0x!1)"
                                                                                                  "y"
                                                                                                  "0"))
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (rewrite
                                                                                                     "div_mult_neg_lt2"
                                                                                                     -4)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "div_distributes_minus"
                                                                                                             ("x"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "n0z"
                                                                                                              "Re(n0x!1) * Re(n0y!1)"
                                                                                                              "y"
                                                                                                              "Im(n0x!1) * Im(n0y!1)"))
                                                                                                            (("3"
                                                                                                              (rewrite
                                                                                                               "div_simp")
                                                                                                              (("3"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   "add_div")
                                                                                                                  (("3"
                                                                                                                    (rewrite
                                                                                                                     "div_div1")
                                                                                                                    (("3"
                                                                                                                      (rewrite
                                                                                                                       "div_cancel2")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "both_sides_div_neg_lt1"
                                                                       ("nz"
                                                                        "Re(n0y!1)"
                                                                        "y"
                                                                        "Im(n0y!1)"
                                                                        "x"
                                                                        "0"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "both_sides_times_neg_lt1"
                                                                           ("nz"
                                                                            "Re(n0y!1)"
                                                                            "x"
                                                                            "Im(n0x!1)"
                                                                            "y"
                                                                            "0"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "negreal_times_negreal_is_posreal"
                                                                               ("nx"
                                                                                "Re(n0x!1)"
                                                                                "ny"
                                                                                "Re(n0y!1)"))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "atan_plus"
                                                                                   ("x"
                                                                                    "Im(n0x!1) / Re(n0x!1)"
                                                                                    "y"
                                                                                    "Im(n0y!1) / Re(n0y!1)"))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "Im(n0y!1) / Re(n0y!1)"
                                                                                        "x"
                                                                                        "Im(n0x!1) / Re(n0x!1)"
                                                                                        "y"
                                                                                        "0"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "div_times")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "div_distributes_minus"
                                                                                               ("x"
                                                                                                "Re(n0x!1) * Re(n0y!1)"
                                                                                                "n0z"
                                                                                                "Re(n0x!1) * Re(n0y!1)"
                                                                                                "y"
                                                                                                "Im(n0x!1) * Im(n0y!1)"))
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "div_simp")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "add_div"
                                                                                                     ("x"
                                                                                                      "Im(n0x!1)"
                                                                                                      "n0x"
                                                                                                      "Re(n0x!1)"
                                                                                                      "y"
                                                                                                      "Im(n0y!1)"
                                                                                                      "n0y"
                                                                                                      "Re(n0y!1)"))
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "div_div1")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "div_cancel2")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (replace -1)
                (("2" (assert)
                  (("2" (typepred "arg(n0y!1)")
                    (("2" (assert)
                      (("2" (hide -1 -2)
                        (("2" (rewrite "arg_is_pi")
                          (("2" (flatten)
                            (("2" (hide -3)
                              (("2" (hide -3)
                                (("2" (expand "arg")
                                  (("2" (expand "atan2")
                                    (("2" (assert)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "trichotomy"
                                             ("x" "Re(n0y!1)"))
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "trichotomy"
                                                   ("x" "Im(n0y!1)"))
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("pz"
                                                          "Re(n0y!1)"
                                                          "x"
                                                          "Re(n0x!1)"
                                                          "y"
                                                          "0"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_pos_lt1"
                                                             ("pz"
                                                              "Im(n0y!1)"
                                                              "x"
                                                              "Re(n0x!1)"
                                                              "y"
                                                              "0"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "atan_strict_increasing")
                                                                    (("1"
                                                                      (expand
                                                                       "strict_increasing?")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0"
                                                                         "Im(n0y!1) / Re(n0y!1)")
                                                                        (("1"
                                                                          (lemma
                                                                           "posreal_div_posreal_is_posreal"
                                                                           ("px"
                                                                            "Im(n0y!1)"
                                                                            "py"
                                                                            "Re(n0y!1)"))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("pz"
                                                            "Re(n0y!1)"
                                                            "x"
                                                            "Re(n0x!1)"
                                                            "y"
                                                            "0"))
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "Re(n0y!1)"
                                                        "x"
                                                        "Re(n0x!1)"
                                                        "y"
                                                        "0"))
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "negreal_times_negreal_is_posreal"
                                                           ("nx"
                                                            "Im(n0y!1)"
                                                            "ny"
                                                            "Re(n0x!1)"))
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (lift-if)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (lemma
                                                                   "both_sides_div_pos_lt1"
                                                                   ("pz"
                                                                    "Re(n0y!1)"
                                                                    "x"
                                                                    "Im(n0y!1)"
                                                                    "y"
                                                                    "0"))
                                                                  (("3"
                                                                    (lemma
                                                                     "atan_strict_increasing")
                                                                    (("3"
                                                                      (expand
                                                                       "strict_increasing?")
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "Im(n0y!1) / Re(n0y!1)"
                                                                         "0")
                                                                        (("3"
                                                                          (rewrite
                                                                           "atan_0")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (split)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "trichotomy"
                                                     ("x" "Im(n0y!1)"))
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("pz"
                                                            "Im(n0y!1)"
                                                            "x"
                                                            "Re(n0x!1)"
                                                            "y"
                                                            "0"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred "n0y!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "negreal_times_negreal_is_posreal"
                                                           ("nx"
                                                            "Im(n0y!1)"
                                                            "ny"
                                                            "Re(n0x!1)"))
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "negreal_times_negreal_is_posreal"
                                                 ("nx"
                                                  "Re(n0y!1)"
                                                  "ny"
                                                  "Re(n0x!1)"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "trichotomy"
                                                             ("x"
                                                              "Im(n0y!1)"))
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "atan(Im(n0y!1) / Re(n0y!1))")
                                                                  (("1"
                                                                    (lemma
                                                                     "atan_strict_increasing")
                                                                    (("1"
                                                                      (expand
                                                                       "strict_increasing?")
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_div_neg_lt1"
                                                                         ("nz"
                                                                          "Re(n0y!1)"
                                                                          "x"
                                                                          "Im(n0y!1)"
                                                                          "y"
                                                                          "0"))
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (lemma
                                                                   "negreal_div_negreal_is_posreal"
                                                                   ("nx"
                                                                    "Im(n0y!1)"
                                                                    "ny"
                                                                    "Re(n0y!1)"))
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2 -1)
          (("2" (skosimp)
            (("2" (replace -1)
              (("2" (rewrite "arg_is_0_nz")
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (typepred "arg(n0y!1)")
                      (("2" (assert)
                        (("2" (hide -1 -2)
                          (("2" (expand "arg")
                            (("2" (assert)
                              (("2" (expand "atan2")
                                (("2" (replace -2)
                                  (("2" (assert)
                                    (("2" (typepred "n0y!1")
                                      (("2"
                                        (lemma "trichotomy" ("x" "Re(n0y!1)"))
                                        (("2"
                                          (split)
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("pz"
                                              "Re(n0x!1)"
                                              "x"
                                              "0"
                                              "y"
                                              "Re(n0y!1)"))
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "trichotomy"
                                               ("x" "Im(n0y!1)"))
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("pz"
                                                    "Re(n0x!1)"
                                                    "x"
                                                    "0"
                                                    "y"
                                                    "Im(n0y!1)"))
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("pz"
                                                    "Re(n0x!1)"
                                                    "y"
                                                    "0"
                                                    "x"
                                                    "Im(n0y!1)"))
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("pz"
                                              "Re(n0x!1)"
                                              "y"
                                              "0"
                                              "x"
                                              "Re(n0y!1)"))
                                            (("3"
                                              (assert)
                                              (("3"
                                                (lemma
                                                 "trichotomy"
                                                 ("x" "Im(n0y!1)"))
                                                (("3"
                                                  (split)
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("pz"
                                                      "Re(n0x!1)"
                                                      "x"
                                                      "0"
                                                      "y"
                                                      "Im(n0y!1)"))
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil)
                                                   ("3"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("pz"
                                                      "Re(n0x!1)"
                                                      "y"
                                                      "0"
                                                      "x"
                                                      "Im(n0y!1)"))
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp) (("2" (expand "*") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "complex" complex_types nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig) (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (arg_is_0_nz formula-decl nil polar nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (zero_times1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (atan_plus formula-decl nil atan trig)
    (div_times formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (div_mult_neg_lt1 formula-decl nil real_props nil)
    (trich_lt formula-decl nil real_props nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan_neg formula-decl nil atan trig)
    (negreal_div_negreal_is_posreal judgement-tcc nil real_types nil)
    (atan_inv formula-decl nil atan trig)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan_0 formula-decl nil atan trig)
    (both_sides_div_neg_lt1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (atan_inv_neg formula-decl nil atan trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (atan2 const-decl "real" atan2 trig)
    (arg_p_lt_pi formula-decl nil polar nil)
    (arg_lt_0 formula-decl nil polar nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (neg_nzcomplex application-judgement "nzcomplex" complex_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "complex" complex_types nil)
    (arg_neg formula-decl nil polar nil)
    (trichotomy formula-decl nil real_axioms nil)
    (arg_is_pi formula-decl nil polar nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (atan_strict_increasing formula-decl nil atan trig)
    (complex_ext formula-decl nil complex_types nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil))
 (arg_inv 0
  (arg_inv-1 nil 3721317210
   ("" (skosimp)
    (("" (case-replace "arg(n0z!1)=0")
      (("1" (rewrite "arg_is_0")
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "arg")
              (("1" (assert)
                (("1" (expand "atan2")
                  (("1" (use "nzcomplex_nz")
                    (("1" (assert)
                      (("1" (lemma "nz_sq_abs_pos" ("n0z" "n0z!1"))
                        (("1"
                          (lemma "posreal_div_posreal_is_posreal"
                           ("px" "Re(n0z!1)" "py" "sq_abs(n0z!1)"))
                          (("1" (assert)
                            (("1" (rewrite "div_div1")
                              (("1" (rewrite "div_cancel2")
                                (("1" (replace -5) (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case-replace "arg(n0z!1) = pi")
        (("1" (rewrite "arg_is_pi")
          (("1" (flatten)
            (("1" (assert)
              (("1" (lemma "nz_sq_abs_pos" ("n0z" "n0z!1"))
                (("1" (expand "arg")
                  (("1" (assert)
                    (("1" (expand "atan2")
                      (("1"
                        (lemma "both_sides_div_pos_lt1"
                         ("pz" "sq_abs(n0z!1)" "x" "Re(n0z!1)" "y" "0"))
                        (("1" (assert)
                          (("1" (expand "sq_abs")
                            (("1" (replace -4)
                              (("1" (rewrite "sq_0")
                                (("1" (hide -1)
                                  (("1" (rewrite "atan_0")
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (use "nzcomplex_nz")
            (("2" (assert)
              (("2" (expand "arg")
                (("2" (assert)
                  (("2" (case-replace "Re(n0z!1) = 0")
                    (("1" (assert)
                      (("1" (case-replace "Im(n0z!1) < 0")
                        (("1" (expand "atan2")
                          (("1" (assert)
                            (("1" (assert)
                              (("1" (lift-if 3)
                                (("1" (assert)
                                  (("1" (prop)
                                    (("1"
                                      (lemma "nz_sq_abs_pos" ("n0z" "n0z!1"))
                                      (("1"
                                        (lemma
                                         "posreal_div_posreal_is_posreal"
                                         ("px"
                                          "-1*Im(n0z!1)"
                                          "py"
                                          "sq_abs(n0z!1)"))
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind)
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (flip-ineq -1)
                                          (("2" (grind-reals) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "atan2")
                            (("2" (lift-if 4)
                              (("2" (assert)
                                (("2" (prop)
                                  (("1"
                                    (lemma "posreal_div_posreal_is_posreal"
                                     ("px" "Im(n0z!1)" "py" "sq_abs(n0z!1)"))
                                    (("1" (assert)
                                      (("1"
                                        (grind-reals)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind)
                                    (("2" (decompose-equality)
                                      (("2" (grind-reals) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case-replace "Im(n0z!1) < 0")
                        (("1" (expand "atan2")
                          (("1" (assert)
                            (("1"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "-1*Im(n0z!1)" "py" "sq_abs(n0z!1)"))
                              (("1" (assert)
                                (("1" (case-replace "Re(n0z!1) > 0")
                                  (("1"
                                    (lemma "posreal_div_posreal_is_posreal"
                                     ("px" "Re(n0z!1)" "py" "sq_abs(n0z!1)"))
                                    (("1" (assert)
                                      (("1"
                                        (rewrite "div_div1")
                                        (("1"
                                          (rewrite "div_cancel2" 4)
                                          (("1"
                                            (rewrite "atan_neg" 4 :dir rl)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert)
                                    (("2"
                                      (lemma
                                       "both_sides_div_pos_lt1"
                                       ("pz"
                                        "sq_abs(n0z!1)"
                                        "x"
                                        "Re(n0z!1)"
                                        "y"
                                        "0"))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "div_div1")
                                          (("2"
                                            (rewrite "div_cancel2" 5)
                                            (("2"
                                              (case-replace
                                               "((-1 * Im(n0z!1) / Re(n0z!1)))=-(Im(n0z!1) / Re(n0z!1))")
                                              (("1"
                                                (rewrite "atan_neg" 5)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lift-if 5)
                            (("2" (expand "atan2")
                              (("2" (assert)
                                (("2"
                                  (lemma "posreal_div_posreal_is_posreal"
                                   ("px" "Im(n0z!1)" "py" "sq_abs(n0z!1)"))
                                  (("1" (assert)
                                    (("1" (case-replace "Re(n0z!1)>0")
                                      (("1"
                                        (lemma
                                         "posreal_div_posreal_is_posreal"
                                         ("px"
                                          "Re(n0z!1)"
                                          "py"
                                          "sq_abs(n0z!1)"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "div_div1")
                                            (("1"
                                              (rewrite "div_cancel2")
                                              (("1"
                                                (rewrite "atan_neg" 5 :dir rl)
                                                (("1"
                                                  (assert)
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "both_sides_div_pos_lt1"
                                           ("pz"
                                            "sq_abs(n0z!1)"
                                            "x"
                                            "Re(n0z!1)"
                                            "y"
                                            "0"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "div_div1")
                                              (("2"
                                                (rewrite "div_cancel2")
                                                (("2"
                                                  (case-replace
                                                   "(-1 * Im(n0z!1) / (1 * Re(n0z!1)))=-(Im(n0z!1) / Re(n0z!1))")
                                                  (("1"
                                                    (rewrite "atan_neg")
                                                    (("1"
                                                      (assert)
                                                      (("1" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (case-replace "Im(n0z!1) =0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (<= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (atan2 const-decl "real" atan2 trig)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_div1 formula-decl nil real_props nil)
    (atan_0 formula-decl nil atan trig)
    (div_cancel2 formula-decl nil real_props nil)
    (nz_sq_abs_pos judgement-tcc nil complex_types nil)
    (nzcomplex_nz formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (arg_is_0 formula-decl nil polar nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (atan_neg formula-decl nil atan trig)
    (pos_div_gt formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (neg_times_le formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (arg_is_pi formula-decl nil polar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (/ const-decl "complex" complex_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (sq_0 formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil))
   nil))
 (arg_div 0
  (arg_div-3 nil 3721235753
   ("" (skosimp)
    (("" (lemma "arg_inv" ("n0z" "n0y!1"))
      (("" (lemma "arg_mult" ("n0x" "n0x!1" "n0y" "1/n0y!1"))
        (("1" (replace -2 -1)
          (("1" (hide -2)
            (("1" (expand "/")
              (("1" (expand "*")
                (("1" (assert)
                  (("1"
                    (case-replace
                     "Re(n0x!1) * ((1 * Re(n0y!1)) / sq_abs(n0y!1)) -
                        Im(n0x!1) * (((-1) * Im(n0y!1)) / sq_abs(n0y!1))=(Im(n0x!1) * Im(n0y!1) + Re(n0x!1) * Re(n0y!1)) /
                        sq_abs(n0y!1)")
                    (("1" (hide -1)
                      (("1"
                        (case-replace
                         "Im(n0x!1) * ((1 * Re(n0y!1)) / sq_abs(n0y!1)) +
                            Re(n0x!1) * (((-1) * Im(n0y!1)) / sq_abs(n0y!1))=(Im(n0x!1) * Re(n0y!1) - Re(n0x!1) * Im(n0y!1)) /
                            sq_abs(n0y!1)")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (replace -1 1)
                              (("1" (hide -1)
                                (("1" (case-replace "arg(n0y!1) = 0")
                                  (("1" (lift-if 1) (("1" (assert) nil nil))
                                    nil)
                                   ("2" (case-replace "arg(n0y!1) = 0")
                                    (("2" (case-replace "arg(n0y!1) = pi")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "trichotomy"
                                           ("x" "arg(n0x!1)"))
                                          (("1"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lift-if 4)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (arg_inv formula-decl nil polar nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos const-decl "real" sincos_def trig) (> const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (trichotomy formula-decl nil real_axioms nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (arg_mult formula-decl nil polar nil)
    (/ const-decl "complex" complex_types nil))
   nil))
 (arg_from_polar 0
  (arg_from_polar-3 nil 3722882894
   ("" (skeep)
    (("" (expand "from_polar")
      ((""
        (case "NOT (Re(sin(theta) * complex_i * r + r * cos(theta)) = r*cos(theta) AND Im(sin(theta) * complex_i * r + r * cos(theta)) = r*sin(theta))")
        (("1" (hide 2)
          (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "arg")
            (("2" (lift-if)
              (("2" (ground)
                (("1" (replace -3)
                  (("1" (lemma "sin_eq_0")
                    (("1" (inst - "theta")
                      (("1" (ground)
                        (("1" (skosimp*)
                          (("1" (case "i!1 >=2")
                            (("1" (mult-by -1 "pi") (("1" (assert) nil nil))
                              nil)
                             ("2" (case "i!1 <= -1")
                              (("1" (mult-by -1 "pi") (("1" (assert) nil nil))
                                nil)
                               ("2" (case "i!1 = 1")
                                (("1" (replaces -1)
                                  (("1" (assert)
                                    (("1" (replace -2)
                                      (("1"
                                        (lemma "cos_pi")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "i!1 = 0")
                                  (("1" (replaces -1)
                                    (("1" (replaces -2)
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (mult-by 2 "r") (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "atan2")
                  (("2" (lift-if)
                    (("2" (ground)
                      (("1" (lemma "atan_tan")
                        (("1" (inst - "theta")
                          (("1" (expand "tan") (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (hide (2 3))
                              (("2"
                                (case "NOT (cos(theta)>0 AND sin(theta)<0)")
                                (("1" (split)
                                  (("1" (mult-by 1 "r")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (mult-by 1 "r")
                                    (("2" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (hide (-2 -3))
                                  (("2" (flatten)
                                    (("2" (lemma "cos_le_0")
                                      (("2"
                                        (inst - "theta")
                                        (("2"
                                          (lemma "sin_ge_0")
                                          (("2"
                                            (inst - "theta")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "cos_neg")
                                                (("2"
                                                  (inst - "theta")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (lemma "cos_le_0")
                                                      (("2"
                                                        (inst - "-theta")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "cos_eq_0")
                        (("2" (inst - "theta")
                          (("2" (assert)
                            (("2" (ground)
                              (("1" (skosimp*)
                                (("1" (lemma "sin_ge_0")
                                  (("1" (inst - "theta")
                                    (("1" (assert)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (mult-by -1 "r")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "NOT sin(theta)<0")
                                          (("1"
                                            (mult-by 1 "r")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case "i!1>=0")
                                            (("1"
                                              (mult-by -1 "pi")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (case "i!1 <= -2")
                                              (("1"
                                                (mult-by -1 "pi")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "i!1 = -1")
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (mult-by 2 "r") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (case "NOT (cos(theta) < 0 AND sin(theta) < 0)")
                        (("1" (split)
                          (("1" (mult-by 1 "r") (("1" (assert) nil nil)) nil)
                           ("2" (mult-by 1 "r") (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide (-3 1 3))
                            (("2" (lemma "atan_tan")
                              (("2" (inst - "theta+pi")
                                (("1" (case "tan(theta+pi) = tan(theta)")
                                  (("1" (replaces -1)
                                    (("1" (expand "tan")
                                      (("1"
                                        (replaces -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "tan" 1)
                                    (("2" (rewrite "sin_plus" 1)
                                      (("2"
                                        (rewrite "cos_plus" 1)
                                        (("2"
                                          (rewrite "cos_pi")
                                          (("2"
                                            (rewrite "sin_pi")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "Tan?")
                                    (("3" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (lemma "cos_ge_0")
                                  (("2" (inst - "theta")
                                    (("2" (assert)
                                      (("2"
                                        (lemma "sin_ge_0")
                                        (("2"
                                          (inst - "theta")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (case "NOT sin(theta)>=0")
                  (("1" (mult-by 1 "r") (("1" (assert) nil nil)) nil)
                   ("2" (hide 1)
                    (("2" (case "theta < 0")
                      (("1" (lemma "sin_lt_0")
                        (("1" (inst - "theta + 2*pi")
                          (("1" (assert)
                            (("1" (rewrite "sin_plus")
                              (("1" (rewrite "cos_2pi")
                                (("1" (rewrite "sin_2pi")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "NOT theta>=0")
                          (("1" (assert) nil nil)
                           ("2" (hide 1)
                            (("2" (expand "atan2")
                              (("2" (lift-if)
                                (("2" (assert)
                                  (("2" (ground)
                                    (("1" (case "NOT cos(theta)>0")
                                      (("1"
                                        (mult-by 1 "r")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide -2)
                                        (("2"
                                          (lemma "atan_tan")
                                          (("2"
                                            (inst - "theta")
                                            (("1"
                                              (expand "tan")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "cos_le_0")
                                                (("2"
                                                  (inst - "theta")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "cos_eq_0")
                                      (("2"
                                        (inst - "theta")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (case "i!1 = 0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case "i!1>=1")
                                                (("1"
                                                  (mult-by -1 "pi")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "i!1<=-1")
                                                    (("1"
                                                      (mult-by -1 "pi")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by 2 "r")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (lemma "cos_eq_0")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (ground)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (case "i!1 = 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (rewrite "sin_pi2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "i!1>=1")
                                                  (("1"
                                                    (mult-by -1 "pi")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (case "i!1<=-1")
                                                    (("1"
                                                      (mult-by -1 "pi")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (mult-by 2 "r")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (case "NOT cos(theta)<0")
                                      (("1"
                                        (mult-by 1 "r")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide (1 3))
                                        (("2"
                                          (case "NOT theta > pi/2")
                                          (("1"
                                            (lemma "cos_ge_0")
                                            (("1"
                                              (inst - "theta")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "atan_tan")
                                              (("2"
                                                (inst - "theta-pi")
                                                (("2"
                                                  (expand "tan" -1)
                                                  (("2"
                                                    (rewrite "sin_minus")
                                                    (("2"
                                                      (rewrite "cos_minus")
                                                      (("2"
                                                        (rewrite "sin_pi")
                                                        (("2"
                                                          (rewrite "cos_pi")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((from_polar const-decl "complex" polar nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (sin_2pi formula-decl nil sincos trig)
    (cos_2pi formula-decl nil sincos trig)
    (sin_lt_0 formula-decl nil trig_ineq trig)
    (cos_minus formula-decl nil sincos trig)
    (sin_minus formula-decl nil sincos trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_pi2 formula-decl nil sincos trig)
    (atan2 const-decl "real" atan2 trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (theta skolem-const-decl "gt_npi_le_pi" polar nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan const-decl "real" trig_basic trig)
    (cos_le_0 formula-decl nil trig_ineq trig)
    (sin_ge_0 formula-decl nil trig_ineq trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_neg formula-decl nil sincos_def trig)
    (atan_tan formula-decl nil trig_inverses trig)
    (cos_eq_0 formula-decl nil sincos trig)
    (cos_ge_0 formula-decl nil trig_ineq trig)
    (Tan? const-decl "bool" trig_basic trig)
    (sin_plus formula-decl nil sincos trig)
    (sin_pi formula-decl nil sincos trig)
    (cos_plus formula-decl nil sincos trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (TRUE const-decl "bool" booleans nil)
    (cos_pi formula-decl nil sincos trig)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil) (sin_eq_0 formula-decl nil sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (sin const-decl "real" sincos_def trig) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (<= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil)
  (arg_from_polar-2 nil 3722772929
   ("" (skeep)
    (("" (expand "from_polar")
      ((""
        (case "NOT (Re(sin(theta) * i * r + r * cos(theta)) = r*cos(theta) AND Im(sin(theta) * i * r + r * cos(theta)) = r*sin(theta))")
        (("1" (hide 2)
          (("1" (split)
            (("1" (rewrite "Re_plus")
              (("1" (lemma "Re_imag")
                (("1" (inst - "sin(theta)*r")
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (hide -1)
                          (("1" (rewrite "Re_real") nil)))))))))))))))
             ("2" (rewrite "Im_plus")
              (("2" (assert)
                (("2" (lemma "Im_real")
                  (("2" (inst - "r*cos(theta)")
                    (("2" (replaces -1)
                      (("2" (assert)
                        (("2" (lemma "Im_imag")
                          (("2" (inst - "sin(theta)*r")
                            (("2" (assert) nil)))))))))))))))))))))
         ("2" (flatten)
          (("2" (expand "arg")
            (("2" (replace -1)
              (("2" (replace -2)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (rewrite "complex_is_0_Re_Im" -1)
                      (("1" (flatten)
                        (("1" (replace -3)
                          (("1" (replace -4)
                            (("1" (assert)
                              (("1" (lemma "sin_eq_0")
                                (("1" (inst - "theta")
                                  (("1" (ground)
                                    (("1" (skosimp*)
                                      (("1"
                                        (case "i!1 >=2")
                                        (("1"
                                          (mult-by -1 "pi")
                                          (("1" (assert) nil)))
                                         ("2"
                                          (case "i!1 <= -1")
                                          (("1"
                                            (mult-by -1 "pi")
                                            (("1" (assert) nil)))
                                           ("2"
                                            (case "i!1 = 1")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (lemma "cos_pi")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))))
                                             ("2"
                                              (case "i!1 = 0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -2)
                                                  (("1" (assert) nil)))))
                                               ("2" (assert) nil)))))))))))
                                     ("2" (mult-by 2 "r")
                                      (("2" (assert) nil)))))))))))))))))))
                     ("2" (expand "atan2")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (lemma "atan_tan")
                            (("1" (inst - "theta")
                              (("1" (expand "tan")
                                (("1" (assert)
                                  (("1"
                                    (case "r*sin(theta)/(r*cos(theta)) = atan(theta)")
                                    (("1" (assert)
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil)))))
                                     ("2" (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil)))))))))))
                               ("2" (assert)
                                (("2" (hide (2 3))
                                  (("2"
                                    (case "NOT (cos(theta)>0 AND sin(theta)<0)")
                                    (("1" (split)
                                      (("1"
                                        (mult-by 1 "r")
                                        (("1" (assert) nil)))
                                       ("2"
                                        (mult-by 1 "r")
                                        (("2" (assert) nil)))))
                                     ("2" (hide (-2 -3))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma "cos_le_0")
                                          (("2"
                                            (inst - "theta")
                                            (("2"
                                              (lemma "sin_ge_0")
                                              (("2"
                                                (inst - "theta")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "cos_neg")
                                                    (("2"
                                                      (inst - "theta")
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (lemma "cos_le_0")
                                                          (("2"
                                                            (inst - "-theta")
                                                            (("2"
                                                              (ground)
                                                              nil)))))))))))))))))))))))))))))))))))
                           ("2" (lemma "cos_eq_0")
                            (("2" (inst - "theta")
                              (("2" (assert)
                                (("2" (ground)
                                  (("1" (skosimp*)
                                    (("1" (lemma "sin_ge_0")
                                      (("1"
                                        (inst - "theta")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -)
                                            (("1"
                                              (mult-by -1 "r")
                                              (("1" (assert) nil)))
                                             ("2"
                                              (case "NOT sin(theta)<0")
                                              (("1"
                                                (mult-by 1 "r")
                                                (("1" (assert) nil)))
                                               ("2"
                                                (case "i!1>=0")
                                                (("1"
                                                  (mult-by -1 "pi")
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (case "i!1 <= -2")
                                                  (("1"
                                                    (mult-by -1 "pi")
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (case "i!1 = -1")
                                                    (("1" (assert) nil)
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))))))))))))
                                   ("2" (mult-by 2 "r")
                                    (("2" (assert) nil)))))))))))
                           ("3"
                            (case "NOT (cos(theta) < 0 AND sin(theta) < 0)")
                            (("1" (split)
                              (("1" (mult-by 1 "r") (("1" (assert) nil)))
                               ("2" (mult-by 1 "r") (("2" (assert) nil)))))
                             ("2" (flatten)
                              (("2" (hide (-3 1 3))
                                (("2" (lemma "atan_tan")
                                  (("2" (inst - "theta+pi")
                                    (("1" (case "tan(theta+pi) = tan(theta)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "tan")
                                          (("1"
                                            (replaces -1)
                                            (("1" (assert) nil)))))))
                                       ("2"
                                        (expand "tan" 1)
                                        (("2"
                                          (rewrite "sin_plus" 1)
                                          (("2"
                                            (rewrite "cos_plus" 1)
                                            (("2"
                                              (rewrite "cos_pi")
                                              (("2"
                                                (rewrite "sin_pi")
                                                (("2" (assert) nil)))))))))))
                                       ("3"
                                        (expand "Tan?")
                                        (("3" (assert) nil)))))
                                     ("2" (lemma "cos_ge_0")
                                      (("2"
                                        (inst - "theta")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "sin_ge_0")
                                            (("2"
                                              (inst - "theta")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))))))))))))
                     ("3" (case "NOT sin(theta)>=0")
                      (("1" (mult-by 1 "r") (("1" (assert) nil)))
                       ("2" (hide 1)
                        (("2" (case "theta < 0")
                          (("1" (lemma "sin_lt_0")
                            (("1" (inst - "theta + 2*pi")
                              (("1" (assert)
                                (("1" (rewrite "sin_plus")
                                  (("1" (rewrite "cos_2pi")
                                    (("1" (rewrite "sin_2pi")
                                      (("1" (assert) nil)))))))))))))
                           ("2" (assert)
                            (("2" (case "NOT theta>=0")
                              (("1" (assert) nil)
                               ("2" (hide 1)
                                (("2" (expand "atan2")
                                  (("2" (lift-if)
                                    (("2" (assert)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (case "NOT cos(theta)>0")
                                          (("1"
                                            (mult-by 1 "r")
                                            (("1" (assert) nil)))
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (lemma "atan_tan")
                                              (("2"
                                                (inst - "theta")
                                                (("1"
                                                  (expand "tan")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      nil)))))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "cos_le_0")
                                                    (("2"
                                                      (inst - "theta")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))
                                         ("2"
                                          (lemma "cos_eq_0")
                                          (("2"
                                            (inst - "theta")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (case "i!1 = 0")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (case "i!1>=1")
                                                    (("1"
                                                      (mult-by -1 "pi")
                                                      (("1" (assert) nil)))
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case "i!1<=-1")
                                                        (("1"
                                                          (mult-by -1 "pi")
                                                          (("1"
                                                            (assert)
                                                            nil)))
                                                         ("2"
                                                          (assert)
                                                          nil)))))))))))
                                               ("2"
                                                (mult-by 2 "r")
                                                (("2" (assert) nil)))))))))
                                         ("3"
                                          (lemma "cos_eq_0")
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (ground)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (case "i!1 = 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces -2)
                                                            (("1"
                                                              (rewrite
                                                               "sin_pi2")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))))))
                                                     ("2"
                                                      (case "i!1>=1")
                                                      (("1"
                                                        (mult-by -1 "pi")
                                                        (("1" (assert) nil)))
                                                       ("2"
                                                        (case "i!1<=-1")
                                                        (("1"
                                                          (mult-by -1 "pi")
                                                          (("1"
                                                            (assert)
                                                            nil)))
                                                         ("2"
                                                          (assert)
                                                          nil)))))))))
                                                 ("2"
                                                  (mult-by 2 "r")
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))
                                         ("4"
                                          (case "NOT cos(theta)<0")
                                          (("1"
                                            (mult-by 1 "r")
                                            (("1" (assert) nil)))
                                           ("2"
                                            (hide (1 3))
                                            (("2"
                                              (case "NOT theta > pi/2")
                                              (("1"
                                                (lemma "cos_ge_0")
                                                (("1"
                                                  (inst - "theta")
                                                  (("1" (assert) nil)))))
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (lemma "atan_tan")
                                                  (("2"
                                                    (inst - "theta-pi")
                                                    (("2"
                                                      (expand "tan" -1)
                                                      (("2"
                                                        (rewrite "sin_minus")
                                                        (("2"
                                                          (rewrite
                                                           "cos_minus")
                                                          (("2"
                                                            (rewrite "sin_pi")
                                                            (("2"
                                                              (rewrite
                                                               "cos_pi")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (arg_from_polar-1 nil 3722709118
   ("" (skeep)
    (("" (expand "from_polar")
      ((""
        (case "NOT (Re(sin(theta) * complex_i * r + r * cos(theta)) = r*cos(theta) AND Im(sin(theta) * complex_i * r + r * cos(theta)) = r*sin(theta))")
        (("1" (hide 2)
          (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "arg")
            (("2" (lift-if)
              (("2" (ground)
                (("1" (grind)
                  (("1" (div-by -1 "r")
                    (("1" (div-by -2 "r")
                      (("1" (grind)
                        (("1" (lemma "cos_eq_0_2pi")
                          (("1" (lemma "sin_eq_0_2pi")
                            (("1" (inst -1 "theta+pi")
                              (("1" (inst -2 "theta+pi")
                                (("1" (lemma "sin_plus")
                                  (("1" (lemma "cos_plus")
                                    (("1" (inst -1 "theta" "pi")
                                      (("1"
                                        (inst -2 "theta" "pi")
                                        (("1"
                                          (lemma "cos_pi")
                                          (("1"
                                            (lemma "sin_pi")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (idempotent_rectangular 0
  (idempotent_rectangular-1 nil 3455991054
   ("" (skosimp)
    (("" (expand "from_rectangular")
      (("" (expand "rectangular")
        (("" (grind :rewrites "complex_ext") nil nil)) nil))
      nil))
    nil)
   ((from_rectangular const-decl "complex" polar nil)
    (complex_ const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rectangular const-decl "[real, real]" polar nil))
   shostak))
 (idempotent_polar 0
  (idempotent_polar-1 nil 3455991097
   ("" (skosimp)
    (("" (expand "polar")
      (("" (expand "from_polar")
        (("" (expand "complex_i")
          (("" (lemma "arg_div_abs" ("n0x" "n0z!1"))
            (("" (replaces -1)
              (("" (decompose-equality)
                (("1" (lemma "Im_sin_abs1" ("n0x" "n0z!1/abs(n0z!1)"))
                  (("1" (assert) (("1" (grind :exclude "arg") nil nil)) nil))
                  nil)
                 ("2" (lemma "Re_cos_abs1" ("n0x" "n0z!1/abs(n0z!1)"))
                  (("2" (assert) (("2" (grind :exclude "arg") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polar const-decl "[nnreal, gt_npi_le_pi]" polar nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (Re_cos_abs1 formula-decl nil polar nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_sin_abs1 formula-decl nil polar nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (Im_div1 formula-decl nil complex_types nil)
    (abs_div2 formula-decl nil polar nil) (abs_abs formula-decl nil polar nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (sin const-decl "real" sincos_def trig)
    (* const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cos const-decl "real" sincos_def trig)
    (abs const-decl "nnreal" polar nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (div_nzcomplex1 application-judgement "nzcomplex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Im_add1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (arg_div_abs formula-decl nil polar nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (from_polar const-decl "complex" polar nil))
   shostak))
 (de_moivres_theorem_TCC1 0
  (de_moivres_theorem_TCC1-1 nil 3721933419 ("" (subtype-tcc) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (abs const-decl "nnreal" polar nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (de_moivres_theorem subtype "polar.n"
    "{i: integers.int | booleans.OR(polar.abs(polar.z) /= 0, reals.>=(i, 0))}")))
 (de_moivres_theorem 0
  (de_moivres_theorem-1 nil 3721933516
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (typepred "n!1") (("1" (propax) nil nil)) nil)
       ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (case "j=0")
          (("1" (grind :exclude ("abs" "arg" "to_pi")) nil nil)
           ("2" (case "j=1")
            (("1" (assert)
              (("1" (rewrite -1)
                (("1" (expand "^")
                  (("1" (replace -1 2)
                    (("1" (hide -1 -2 1)
                      (("1" (expand "from_polar")
                        (("1" (typepred "to_pi(1 * arg(z))")
                          (("1" (rewrite -3)
                            (("1" (rewrite -3)
                              (("1" (typepred "to_pi(2 * arg(z))")
                                (("1" (rewrite -3)
                                  (("1" (rewrite -3)
                                    (("1" (assert)
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "2 * arg(z) = arg(z)+arg(z)")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma "cos_plus")
                                                        (("1"
                                                          (lemma "sin_plus")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "arg(z)"
                                                             "arg(z)")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "arg(z)"
                                                               "arg(z)")
                                                              (("1"
                                                                (grind
                                                                 :exclude
                                                                 ("abs"
                                                                  "arg"))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "j>1")
              (("1" (assert)
                (("1" (expand "^" 3)
                  (("1" (replace -2 3)
                    (("1" (hide-all-but (-1 3))
                      (("1" (expand "expt")
                        (("1" (expand "from_polar")
                          (("1" (typepred "to_pi(j * arg(z))")
                            (("1" (rewrite -3)
                              (("1" (rewrite -3)
                                (("1" (typepred "to_pi(arg(z) + arg(z) * j)")
                                  (("1" (rewrite -3)
                                    (("1" (rewrite -3)
                                      (("1"
                                        (lemma "cos_plus")
                                        (("1"
                                          (lemma "sin_plus")
                                          (("1"
                                            (inst -1 "arg(z)" "arg(z)*j")
                                            (("1"
                                              (inst -2 "arg(z)" "arg(z)*j")
                                              (("1"
                                                (grind :exclude ("arg" "abs"))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (complex type-eq-decl nil complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ def-decl "complex" complex_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (<= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (from_polar const-decl "complex" polar nil)
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "nnreal" polar nil)
    (arg const-decl "gt_npi_le_pi" polar nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (sin const-decl "real" sincos_def trig)
    (to_pi const-decl
     "{x: gt_npi_le_pi | cos(x) = cos(r) AND sin(x) = sin(r)}" to2pi trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (+ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_plus formula-decl nil sincos trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (from_2pi_to_pi const-decl
     "{x: gt_npi_le_pi | cos(x) = cos(r) AND sin(x) = sin(r)}" to2pi trig)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_plus formula-decl nil sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (polar_to_rect 0
  (polar_to_rect-1 nil 3721933891
   ("" (skeep)
    (("" (expand "from_polar")
      (("" (assert) (("" (grind :exclude ("sin" "cos")) nil nil)) nil)) nil))
    nil)
   ((from_polar const-decl "complex" polar nil)
    (complex_ const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (polar_zero 0
  (polar_zero-2 nil 3721934105
   ("" (skeep)
    (("" (grind)
      (("" (grind-reals)
        (("" (lemma "sin_cos_eq_0") (("" (inst?) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((from_polar const-decl "complex" polar nil)
    (+ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_cos_eq_0 formula-decl nil trig_basic trig)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (zero_times3 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (polar_abs 0
  (polar_abs-1 nil 3721934225
   ("" (skeep)
    (("" (grind)
      ((""
        (case-replace "cos(theta) * cos(theta) * nnx * nnx +
            sin(theta) * sin(theta) * nnx * nnx = sq(nnx)*(sin(theta)*sin(theta)+cos(theta)*cos(theta))")
        (("1" (hide -1)
          (("1" (rewrite "sin_cos_one") (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((complex_ const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (from_polar const-decl "complex" polar nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (abs const-decl "nnreal" polar nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqrt_square formula-decl nil sqrt reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_cos_one formula-decl nil sincos_def trig)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sin const-decl "real" sincos_def trig)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cos const-decl "real" sincos_def trig)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (polar_to_rect_eq 0
  (polar_to_rect_eq-1 nil 3721935124
   ("" (skeep)
    (("" (expand "from_polar")
      (("" (typepred "arg(z)")
        (("" (lemma "abs_cos_arg")
          (("" (lemma "abs_sin_arg")
            (("" (inst -1 "z")
              (("" (inst -2 "z")
                (("" (grind :exclude ("abs" "to_pi" "arg"))
                  (("" (decompose-equality 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((from_polar const-decl "complex" polar nil)
    (abs_cos_arg formula-decl nil polar nil)
    (+ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs_sin_arg formula-decl nil polar nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (complex type-eq-decl nil complex_types nil)
    (<= const-decl "bool" reals nil)
    (gt_npi_le_pi nonempty-type-eq-decl nil trig_types trig)
    (arg const-decl "gt_npi_le_pi" polar nil))
   nil)))


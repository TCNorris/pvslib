(complex_types
 (Re_rew 0
  (Re_rew-1 nil 3721223965 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) shostak))
 (Im_rew 0
  (Im_rew-1 nil 3721223970 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) shostak))
 (eq_rew 0
  (eq_rew-1 nil 3721048828 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) shostak))
 (complex_ext 0
  (complex_ext-1 nil 3721224526
   ("" (grind) (("" (decompose-equality 1) nil nil)) nil)
   ((complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (real__TCC1 0
  (real__TCC1-1 nil 3721049047 ("" (subtype-tcc) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (real_? const-decl "bool" complex_types nil))
   nil
   (real_ subtype "complex_types.complex_(complex_types.x, 0)"
    "(complex_types.real_?)")))
 (nzcomplex_TCC1 0
  (nzcomplex_TCC1-1 nil 3455977248 ("" (subtype-tcc) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) nil
   (nzcomplex subtype "complex_types.complex_(1, 0)" "nzcomplex")))
 (complex_i_TCC1 0
  (complex_i_TCC1-1 nil 3455977248 ("" (subtype-tcc) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) nil
   (complex_i subtype "complex_types.complex_(0, 1)" "nzcomplex")))
 (Re_i 0
  (Re_i-1 nil 3456000372 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil))
   shostak))
 (Im_i 0
  (Im_i-1 nil 3456000377 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil))
   shostak))
 (nzcomplex_ext 0
  (nzcomplex_ext-1 nil 3721312876 ("" (grind :rewrites "complex_ext") nil nil)
   ((/= const-decl "boolean" notequal nil)
    (complex_ext formula-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (nzcomplex_nz 0
  (nzcomplex_nz-1 nil 3721313050 ("" (grind :rewrites "complex_ext") nil nil)
   ((/= const-decl "boolean" notequal nil)
    (complex_ext formula-decl nil complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (Re_conjugate 0
  (Re_conjugate-1 nil 3455978062 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil))
   shostak))
 (Im_conjugate 0
  (Im_conjugate-1 nil 3455978065 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil))
   shostak))
 (nz_sq_abs_pos 0
  (nz_sq_abs_pos-1 nil 3455977248
   ("" (skosimp)
    (("" (expand "sq_abs")
      (("" (lemma "sq_plus_eq_0" ("a" "Im(n0z!1)" "b" "Re(n0z!1)"))
        (("" (assert)
          (("" (hide 1)
            (("" (lemma "nzcomplex_nz")
              (("" (inst?) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_abs const-decl "nnreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzcomplex_nz formula-decl nil complex_types nil)
    (sq_plus_eq_0 formula-decl nil sq reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil
   (nz_sq_abs_pos subtype "complex_types.sq_abs(complex_types.n0z)"
    "posreal")))
 (real_plus_complex_def 0
  (real_plus_complex_def-1 nil 3722880958 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (complex_plus_real_def 0
  (complex_plus_real_def-1 nil 3722880968 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (real_minus_complex_def 0
  (real_minus_complex_def-1 nil 3722881040 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (complex_minus_real_def 0
  (complex_minus_real_def-1 nil 3722881095 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (real_mult_complex_def 0
  (real_mult_complex_def-1 nil 3722881166 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (complex_mult_real_def 0
  (complex_mult_real_def-1 nil 3722881172 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (divide_TCC1 0
  (divide_TCC1-1 nil 3722876776 ("" (subtype-tcc) nil nil)
   ((complex_ const-decl "complex" complex_types nil)) nil
   (divide subtype "complex_types.complex_(complex_types.n0x, 0)"
    "nzcomplex")))
 (real_div_complex_def 0
  (real_div_complex_def-1 nil 3722881261 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_div_real_def 0
  (complex_div_real_def-1 nil 3722881266 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (caret_TCC1 0
  (caret_TCC1-1 nil 3721146045 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (caret subtype "((number_fields.-)(complex_types.n, 1))" "nat")))
 (caret_TCC2 0
  (caret_TCC2-1 nil 3721146045 ("" (termination-tcc) nil nil) nil nil
   (caret termination
    "complex_types.^(complex_types.z, ((number_fields.-)(complex_types.n, 1)))"
    "nil")))
 (conj_add 0
  (conj_add-1 nil 3724609980 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conj_mult 0
  (conj_mult-1 nil 3724610123 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (conj_expt 0
  (conj_expt-1 nil 3724609992
   ("" (induct "n")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep*)
      (("2" (inst - "z1")
        (("2" (expand "^" +)
          (("2" (case "j=0")
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (lemma "conj_mult")
                (("2" (inst?)
                  (("2" (replace -1 2)
                    (("2" (replace -2 2) (("2" (propax) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (conj_mult formula-decl nil complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ def-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (complex type-eq-decl nil complex_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (conj_real_mult 0
  (conj_real_mult-1 nil 3724610177 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_sub_zero 0
  (complex_sub_zero-1 nil 3721511601 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_def 0
  (complex_sq_def-1 nil 3456291067 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_neg_neg 0
  (complex_neg_neg-1 nil 3456291074
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_plus_neg 0
  (complex_plus_neg-1 nil 3456291087 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_mult_neg 0
  (complex_mult_neg-1 nil 3721240364 ("" (grind) nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_div_def 0
  (complex_div_def-1 nil 3456291096 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_sq_expt2 0
  (complex_sq_expt2-1 nil 3721146053 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (^ def-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_mult_distrib_plus 0
  (complex_mult_distrib_plus-1 nil 3721260459 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_mult_distrib_minus 0
  (complex_mult_distrib_minus-1 nil 3721260484 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_plus_distrib_mult 0
  (complex_plus_distrib_mult-1 nil 3721260651 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_minus_distrib_mult 0
  (complex_minus_distrib_mult-1 nil 3721260658 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_0_mult 0
  (complex_0_mult-1 nil 3721562532 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (complex_mult_0 0
  (complex_mult_0-1 nil 3721562537 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (complex_1_mult 0
  (complex_1_mult-1 nil 3722880759
   ("" (grind :rewrites "complex_ext") nil nil)
   ((complex_ext formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_mult_1 0
  (complex_mult_1-1 nil 3722880784
   ("" (grind :rewrites "complex_ext") nil nil)
   ((complex_ext formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_n1_mult 0
  (complex_n1_mult-1 nil 3722880807 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (complex_mult_n1 0
  (complex_mult_n1-1 nil 3722880824 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (complex_plus_real 0
  (complex_plus_real-1 nil 3722876783
   ("" (grind :rewrites "complex_ext") nil nil)
   ((+ const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_minus_real 0
  (complex_minus_real-1 nil 3722876791
   ("" (grind :rewrites "complex_ext") nil nil)
   ((- const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_neg_real 0
  (complex_neg_real-1 nil 3722899766 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (complex_mult_real 0
  (complex_mult_real-1 nil 3722876800
   ("" (grind :rewrites "complex_ext") nil nil)
   ((* const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_div_real 0
  (complex_div_real-1 nil 3722876805
   ("" (grind :rewrites "complex_ext") nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (/ const-decl "complex" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (Re_add1 0
  (Re_add1-1 nil 3455977291 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Re_add2 0
  (Re_add2-1 nil 3455977297 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Re_add3 0
  (Re_add3-1 nil 3455977301 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Re_neg1 0
  (Re_neg1-1 nil 3455977305 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_sub1 0
  (Re_sub1-1 nil 3455977308 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_sub2 0
  (Re_sub2-1 nil 3455977311 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_sub3 0
  (Re_sub3-1 nil 3455977314 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_mul1 0
  (Re_mul1-1 nil 3455977317 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_mul2 0
  (Re_mul2-1 nil 3455977327 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Re_mul3 0
  (Re_mul3-1 nil 3455977321 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Re_div1 0
  (Re_div1-1 nil 3455977331 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_div2 0
  (Re_div2-1 nil 3455977335 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_div3 0
  (Re_div3-1 nil 3455977338 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_add1 0
  (Im_add1-1 nil 3455977342 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Im_add2 0
  (Im_add2-1 nil 3455977344 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Im_add3 0
  (Im_add3-1 nil 3455977347 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Im_neg1 0
  (Im_neg1-1 nil 3455977350 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_sub1 0
  (Im_sub1-1 nil 3455977354 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_sub2 0
  (Im_sub2-1 nil 3455977358 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_sub3 0
  (Im_sub3-1 nil 3455977361 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_mul1 0
  (Im_mul1-1 nil 3455977364 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_mul2 0
  (Im_mul2-1 nil 3455977367 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Im_mul3 0
  (Im_mul3-1 nil 3455977370 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Im_div1 0
  (Im_div1-1 nil 3455977373 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_div2 0
  (Im_div2-1 nil 3455977376 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_div3 0
  (Im_div3-1 nil 3455977379 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_commutative_add 0
  (complex_commutative_add-1 nil 3472824291 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (complex_associative_add 0
  (complex_associative_add-1 nil 3472824297 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_associative_sub_add 0
  (complex_associative_sub_add-1 nil 3721262801 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_associative_sub_sub 0
  (complex_associative_sub_sub-1 nil 3721262806 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_commutative_mult 0
  (complex_commutative_mult-1 nil 3472824303 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_associative_mult 0
  (complex_associative_mult-1 nil 3472824309 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_associative_mult_div 0
  (complex_associative_mult_div-1 nil 3722902001 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_div_cancel1 0
  (complex_div_cancel1-1 nil 3472823605
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (grind) (("1" (grind-reals) nil nil)) nil)
       ("2" (grind) (("2" (grind-reals) nil nil)) nil))
      nil))
    nil)
   ((Im_mul1 formula-decl nil complex_types nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (div_distributes_minus formula-decl nil real_props nil))
   shostak))
 (complex_div_cancel2 0
  (complex_div_cancel2-1 nil 3472825516
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (grind) (("1" (grind-reals) nil nil)) nil)
       ("2" (grind) (("2" (grind-reals) nil nil)) nil))
      nil))
    nil)
   ((Im_mul1 formula-decl nil complex_types nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (div_distributes_minus formula-decl nil real_props nil))
   shostak))
 (complex_div_cancel3 0
  (complex_div_cancel3-1 nil 3472827540
   ("" (skeep)
    (("" (grind :rewrites "complex_ext")
      (("1" (replaces - :dir rl) (("1" (grind-reals) nil nil)) nil)
       ("2" (replaces - :dir rl) (("2" (grind-reals) nil nil)) nil)
       ("3" (grind-reals) nil nil) ("4" (grind-reals) nil nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil))
   shostak))
 (complex_div_cancel4 0
  (complex_div_cancel4-1 nil 3472828471
   ("" (skeep)
    (("" (grind :rewrites "complex_ext")
      (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)
       ("3" (replaces - :dir rl) (("3" (grind-reals) nil nil)) nil)
       ("4" (replaces - :dir rl) (("4" (grind-reals) nil nil)) nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (complex_div_zero 0
  (complex_div_zero-1 nil 3722536604
   ("" (grind :rewrites "complex_ext") nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "complex" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (plus_conjugate 0
  (plus_conjugate-1 nil 3721044652 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (minus_conjugate 0
  (minus_conjugate-1 nil 3455978004 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_plus 0
  (conjugate_plus-1 nil 3455978007 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_neg 0
  (conjugate_neg-1 nil 3455978009 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_minus 0
  (conjugate_minus-1 nil 3455978012 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_times 0
  (conjugate_times-1 nil 3455978015 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_inv_TCC1 0
  (conjugate_inv_TCC1-1 nil 3455977248
   ("" (skeep :preds? t) (("" (grind :rewrites "complex_ext") nil nil)) nil)
   ((complex_ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil
   (conjugate_inv subtype "complex_types.conjugate(complex_types.n0z)"
    "nzcomplex")))
 (conjugate_inv 0
  (conjugate_inv-1 nil 3455978018 ("" (grind) nil nil)
   ((complex_ const-decl "complex" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_div 0
  (conjugate_div-1 nil 3455978021 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_eq 0
  (conjugate_eq-1 nil 3721390089 ("" (grind :rewrites "complex_ext") nil nil)
   ((real_? const-decl "bool" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (zero_times 0
  (zero_times-2 nil 3721045053
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "*")
          (("1" (assert)
            (("1" (flatten)
              (("1" (move-terms -1 l 2)
                (("1" (assert)
                  (("1" (label "HH" -)
                    (("1" (hide "HH")
                      (("1" (reveal "HH")
                        (("1" (mult-by -2 "Re(z1)")
                          (("1" (real-props)
                            (("1" (group! (! -1 l 1) r)
                              (("1" (replaces -2)
                                (("1" (group! (! -1 l 1) l)
                                  (("1" (rewrite "sq" :dir rl)
                                    (("1" (rewrite "sq" :dir rl)
                                      (("1"
                                        (case-replace "Im(z2)=0")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (reveal "HH")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (grind-reals)
                                                  (("1"
                                                    (grind
                                                     :rewrites
                                                     "complex_ext")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind
                                                     :rewrites
                                                     "complex_ext")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (cancel-by -1 "Im(z2)")
                                          (("2"
                                            (rewrite "sq_plus_eq_0")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (grind
                                                 :rewrites
                                                 "complex_ext")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "complex" complex_types nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (/= const-decl "boolean" notequal nil)
    (div_1 skolem-const-decl "real" complex_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (zero_div formula-decl nil extra_tegies nil)
    (sq_plus_eq_0 formula-decl nil sq reals)
    (zero_times3 formula-decl nil real_props nil)
    (complex_ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (TRUE const-decl "bool" booleans nil)
    (zero_times1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (eq_rew formula-decl nil complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (zero_times-1 nil 3721044685
   ("" (skeep)
    (("" (grind)
      (("" (decompose-equality -1)
        (("" (decompose-equality 1)
          (("1" (decompose-equality 2)
            (("1" (grind-reals) (("1" (postpone) nil nil)) nil)
             ("2" (postpone) nil nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (complex_pow_zero 0
  (complex_pow_zero-1 nil 3721496123
   ("" (skeep)
    (("" (expand "^" 1)
      (("" (case-replace "p=1")
        (("" (assert) (("" (rewrite "zero_times") nil nil)) nil)) nil))
      nil))
    nil)
   ((^ def-decl "complex" complex_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (complex_ const-decl "complex" complex_types nil)
    (complex type-eq-decl nil complex_types nil)
    (zero_times formula-decl nil complex_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (neg_nzcomplex 0
  (neg_nzcomplex-1 nil 3455980658
   ("" (skeep :preds? t) (("" (grind :rewrites "complex_ext") nil nil)) nil)
   ((complex_ const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (- const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil
   (neg_nzcomplex subtype "(complex_types.-)(complex_types.n0z)"
    "nzcomplex")))
 (mul_nzcomplex1 0
  (mul_nzcomplex1-1 nil 3455980777
   ("" (skeep)
    (("" (typepred "n0z1")
      (("" (typepred "n0z2")
        (("" (lemma "zero_times" ("z1" "n0z1" "z2" "n0z2"))
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero_times formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (mul_nzcomplex1 subtype
    "complex_types.*(complex_types.n0z1, complex_types.n0z2)" "nzcomplex")))
 (mul_nzcomplex2 0
  (mul_nzcomplex2-1 nil 3455980777
   ("" (skeep)
    (("" (typepred "n0x")
      (("" (typepred "n0z") (("" (grind :rewrites "complex_ext") nil nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (complex type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil
   (mul_nzcomplex2 subtype
    "complex_types.*(complex_types.complex_(complex_types.n0x, 0), complex_types.n0z)"
    "nzcomplex")))
 (mul_nzcomplex3 0
  (mul_nzcomplex3-1 nil 3455980777
   ("" (skeep)
    (("" (typepred "n0z")
      (("" (typepred "n0x") (("" (grind :rewrites "complex_ext") nil nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "complex" complex_types nil)
    (complex_ext formula-decl nil complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   nil
   (mul_nzcomplex3 subtype
    "complex_types.*(complex_types.n0z, complex_types.complex_(complex_types.n0x, 0))"
    "nzcomplex")))
 (div_nzcomplex1 0
  (div_nzcomplex1-1 nil 3455989916
   ("" (skosimp)
    (("" (typepred "n0z1!1")
      (("" (typepred "n0z2!1")
        ((""
          (lemma "mul_nzcomplex1"
           ("n0z1" "n0z1!1" "n0z2" "conjugate(n0z2!1)"))
          (("1" (flatten)
            (("1" (grind :rewrites "complex_ext")
              (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil))
            nil)
           ("2" (flatten) (("2" (grind :rewrites "complex_ext") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (conjugate const-decl "complex" complex_types nil)
    (mul_nzcomplex1 judgement-tcc nil complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (complex_ext formula-decl nil complex_types nil)
    (* const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_cancel3 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (div_nzcomplex1 subtype
    "complex_types./(complex_types.n0z1, complex_types.n0z2)" "nzcomplex")))
 (div_nzcomplex2 0
  (div_nzcomplex2-2 nil 3721309669
   ("" (skosimp)
    (("" (typepred "n0x!1")
      (("" (typepred "n0z!1") (("" (grind :rewrites "complex_ext") nil nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/ const-decl "complex" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (complex_ext formula-decl nil complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (complex type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil
   (div_nzcomplex2 subtype
    "complex_types./(complex_types.complex_(complex_types.n0x, 0), complex_types.n0z)"
    "nzcomplex")))
 (pow_nzcomplex 0
  (pow_nzcomplex-1 nil 3721147859
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (grind) nil nil)
       ("2" (skeep 1)
        (("2" (expand "^" -1)
          (("2" (typepred "n0z")
            (("2" (flatten)
              (("2" (lift-if -1)
                (("2" (split -1)
                  (("1" (flatten) nil nil)
                   ("2" (flatten)
                    (("2" (lemma "zero_times")
                      (("2" (inst?)
                        (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (complex_pow_eq_zero 0
  (complex_pow_eq_zero-1 nil 3722532280
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "pow_nzcomplex")
          (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replaces -1) (("2" (rewrite "complex_pow_zero") nil nil)) nil))
        nil))
      nil))
    nil)
   ((pow_nzcomplex recursive-judgement-axiom nil complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (z skolem-const-decl "complex" complex_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (TRUE const-decl "bool" booleans nil)
    (complex_pow_zero formula-decl nil complex_types nil))
   shostak))
 (complex_sq_neg 0
  (complex_sq_neg-1 nil 3472822788 ("" (skeep) (("" (grind) nil nil)) nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_times 0
  (complex_sq_times-1 nil 3472822805 ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_plus 0
  (complex_sq_plus-1 nil 3472822867 ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_minus 0
  (complex_sq_minus-1 nil 3472822895 ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_neg_minus 0
  (complex_sq_neg_minus-1 nil 3472822915
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex_ const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_div_TCC1 0
  (complex_sq_div_TCC1-2 "" 3790337179
   ("" (skosimp)
    (("" (expand "sq")
      (("" (lemma "mul_nzcomplex1" ("n0z1" "n0z!1" "n0z2" "n0z!1"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (complex_sq_div subtype "complex_types.sq(complex_types.n0z)" "nzcomplex"))
  (complex_sq_div_TCC1-1 nil 3472822488
   ("" (skosimp)
    (("" (expand "sq")
      (("" (lemma "mul_nzcomplex1" ("n0z1" "n0z!1" "n0z2" "n0z!1"))
        (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq const-decl "complex" complex_types nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types nil)
    (mul_nzcomplex1 judgement-tcc nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil
   (complex_sq_div subtype "complex_types.sq(complex_types.n0z)"
    "nzcomplex")))
 (complex_sq_div 0
  (complex_sq_div-2 "" 3790337179
   ("" (skosimp)
    ((""
      (lemma "complex_div_cancel4"
       ("z2" "sq(z!1 / n0z!1)" "z1" "sq(z!1)" "n0z" "sq(n0z!1)"))
      (("" (replace -1)
        (("" (hide -1)
          (("" (lemma "complex_sq_times" ("z1" "z!1 / n0z!1" "z2" "n0z!1"))
            (("" (lemma "complex_div_cancel2" ("z" "z!1" "n0z" "n0z!1"))
              (("" (name-replace "DRL1" "sq(z!1 / n0z!1) * sq(n0z!1)")
                (("" (name-replace "DRL2" "(z!1 / n0z!1) * n0z!1")
                  (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (complex_sq_div-1 nil 3472822942
   ("" (skosimp)
    ((""
      (lemma "complex_div_cancel4"
       ("z2" "sq(z!1 / n0z!1)" "z1" "sq(z!1)" "n0z" "sq(n0z!1)"))
      (("" (replace -1)
        (("" (hide -1)
          (("" (lemma "complex_sq_times" ("z1" "z!1 / n0z!1" "z2" "n0z!1"))
            (("" (lemma "complex_div_cancel2" ("z" "z!1" "n0z" "n0z!1"))
              (("" (name-replace "DRL1" "sq(z!1 / n0z!1) * sq(n0z!1)")
                (("" (name-replace "DRL2" "(z!1 / n0z!1) * n0z!1")
                  (("" (expand "sq")
                    (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (complex_ const-decl "complex" complex_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex_div_cancel4 formula-decl nil complex_types nil)
    (complex_div_cancel2 formula-decl nil complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "complex" complex_types nil)
    (complex_sq_times formula-decl nil complex_types nil))
   shostak)))


(fault_assumptions_stage
 (enabled_TCC1 0
  (enabled_TCC1-1 nil 3400509949
   ("" (skosimp*) (("" (use "set_below_is_finite[S]") nil nil)) nil)
   ((rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set_below_is_finite judgement-tcc nil finite_sets_below_extra nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil))
   nil
   (enabled subtype
    "{s | fault_assumptions_stage.check(fault_assumptions_stage.d)(fault_assumptions_stage.s)(fault_assumptions_stage.rcvd(fault_assumptions_stage.d)(fault_assumptions_stage.s))}"
    "finite_set[below(S)]")))
 (enabled?_TCC1 0
  (enabled?_TCC1-1 nil 3400509949
   ("" (skosimp*) (("" (use "set_below_is_finite[S]") nil nil)) nil)
   ((enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set_below_is_finite judgement-tcc nil finite_sets_below_extra nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil))
   nil
   (enabled? subtype
    "{s | EXISTS d: fault_assumptions_stage.enabled(fault_assumptions_stage.rcvd, fault_assumptions_stage.check)(fault_assumptions_stage.d)(fault_assumptions_stage.s)}"
    "finite_set[below(S)]")))
 (enabled_within 0
  (enabled_within-1 nil 3398428612
   ("" (expand "enabled_within?")
    (("" (expand "enabled?")
      (("" (expand "subset?")
        (("" (expand "member") (("" (skosimp*) (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled? const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset? const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil))
   shostak))
 (quorum_implies_majority 0
  (quorum_implies_majority-1 nil 3399300749
   ("" (expand "majority?")
    (("" (expand "simple_majority?")
      (("" (expand "quorum?")
        (("" (expand "quorum?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (flatten)
                (("" (rewrite "card_difference_alt")
                  (("" (rewrite "intersection_commutative")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simple_majority? const-decl "bool" pigeonhole nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (card_difference_alt formula-decl nil pigeonhole nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (majority? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (majority 0
  (majority-1 nil 3398608880
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (prop)
          (("1" (expand "quorum?")
            (("1" (skosimp*)
              (("1" (expand "majority?")
                (("1" (inst?)
                  (("1" (expand "quorum?")
                    (("1" (forward-chain "simple_majority_nonempty[below(S)]")
                      (("1" (assert)
                        (("1" (rewrite "card_difference_alt")
                          (("1" (expand "simple_majority?")
                            (("1" (rewrite "intersection_commutative")
                              (("1" (assert)
                                (("1" (expand "mid") (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "quorum_implies_majority") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (mid const-decl "tau_type" tau_declaration nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (majority? const-decl "bool" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (simple_majority_nonempty formula-decl nil pigeonhole nil)
    (card_difference_alt formula-decl nil pigeonhole nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (simple_majority? const-decl "bool" pigeonhole nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (quorum_implies_majority formula-decl nil fault_assumptions_stage nil))
   nil))
 (enabled_within_quorum 0
  (enabled_within_quorum-1 nil 3398097334
   ("" (skosimp*)
    (("" (expand "quorum?")
      (("" (expand "enabled_within?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (expand "quorum?")
              (("" (expand "enabled_nonempty?")
                (("" (inst?)
                  (("" (assert)
                    (("" (use "card_difference_alt[below(S)]")
                      (("" (assert)
                        (("" (rewrite "intersection_subset2")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum? const-decl "bool" fault_assumptions_stage nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (card_difference_alt formula-decl nil pigeonhole nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (intersection_subset2 formula-decl nil sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finite_difference application-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (enabled_within_quorum_nada 0
  (enabled_within_quorum_nada-1 nil 3398097400
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (prop)
          (("1" (rewrite "enabled_within_quorum") nil nil)
           ("2" (expand "enabled_within?")
            (("2" (expand "subset?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (expand "quorum?")
                    (("2" (expand "quorum?")
                      (("2" (expand "nada")
                        (("2" (inst?)
                          (("2" (flatten)
                            (("2" (rewrite "difference_intersection")
                              (("2" (use "nonempty_card[below(S)]")
                                (("2" (assert)
                                  (("2" (expand "nonempty?")
                                    (("2" (hide -2 -4 1)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "intersection")
                                          (("2"
                                            (expand "complement")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst?)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nada const-decl "tau_type" tau_declaration nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (enabled_within_quorum formula-decl nil fault_assumptions_stage nil)
    (subset? const-decl "bool" sets nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (difference_intersection formula-decl nil sets_lemmas nil)
    (finite_intersection2 application-judgement "finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (quorum_nonempty 0
  (quorum_nonempty-1 nil 3398428650
   ("" (expand "quorum?")
    (("" (expand "quorum?")
      (("" (expand "enabled_nonempty?")
        (("" (skosimp*) (("" (inst?) (("" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((quorum? const-decl "bool" pigeonhole nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil))
   shostak))
 (max_TCC1 0
  (max_TCC1-1 nil 3395661145 ("" (subtype-tcc) nil nil)
   ((D formal-const-decl "posnat" fault_assumptions_stage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (M const-decl "posnat" pigeonhole nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (max subtype
        "(number_fields.-)(pigeonhole[naturalnumbers.below(fault_assumptions_stage.S)].M(fault_assumptions_stage.enabled(fault_assumptions_stage.rcvd, fault_assumptions_stage.check)(fault_assumptions_stage.d), fault_assumptions_stage.tau), 1)"
        "nat")))
 (intersection_majority_nonempty 0
  (intersection_majority_nonempty-1 nil 3395661380
   ("" (skosimp*)
    (("" (expand "enabled_nonempty?")
      (("" (expand "intersection_majority?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (expand "intersection_majority?")
                (("" (rewrite "intersection_idempotent")
                  (("" (rewrite "union_idempotent")
                    (("" (use "majority_nonempty[below(S)]")
                      (("" (expand "majority_subset?")
                        (("" (rewrite "subset_reflexive")
                          (("" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (intersection_idempotent formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (majority_nonempty formula-decl nil pigeonhole nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (union_idempotent formula-decl nil sets_lemmas nil)
    (intersection_majority? const-decl "bool" pigeonhole nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (intersection_majority? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (byzantine_intersection_nonempty 0
  (byzantine_intersection_nonempty-1 nil 3395661396
   ("" (skosimp*)
    (("" (expand "byzantine_intersection_majority?")
      (("" (expand "byzantine_intersection_majority?")
        (("" (expand "enabled_nonempty?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?)
                (("" (rewrite "intersection_associative" :dir rl)
                  (("" (rewrite "intersection_idempotent")
                    (("" (rewrite "union_idempotent")
                      (("" (use "nonempty_card[below(S)]")
                        (("" (assert)
                          (("" (hide -2)
                            (("" (expand "nonempty?")
                              (("" (rewrite "intersection_commutative")
                                (("" (rewrite "emptyset_is_empty?" -)
                                  (("" (replace*)
                                    (("" (rewrite "intersection_empty")
                                      (("" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((byzantine_intersection_majority? const-decl "bool"
     fault_assumptions_stage nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (intersection_associative formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (union_idempotent formula-decl nil sets_lemmas nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (intersection_empty formula-decl nil sets_lemmas nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (finite_difference application-judgement "finite_set" finite_sets nil)
    (intersection const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (intersection_idempotent formula-decl nil sets_lemmas nil)
    (byzantine_intersection_majority? const-decl "bool" pigeonhole nil))
   nil))
 (intersection_majority 0
  (intersection_majority-1 nil 3395661418
   ("" (skosimp*)
    (("" (expand "intersection_majority?")
      (("" (expand "intersection_majority?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (invoke (then (case "%1 <= %2") (assert)) (! 1 r) (! -2 r))
              (("" (rewrite "card_subset")
                (("" (hide -2 2 3)
                  (("" (expand "enabled_within?")
                    (("" (inst-cp - "d2!1")
                      (("" (inst - "d1!1")
                        (("" (expand "subset?")
                          (("" (expand "union")
                            (("" (expand "member")
                              (("" (skosimp*)
                                (("" (inst?)
                                  (("" (inst?) (("" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((intersection_majority? const-decl "bool" fault_assumptions_stage nil)
    (intersection_majority? const-decl "bool" fault_assumptions_stage nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (<= const-decl "bool" reals nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (union const-decl "set" sets nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_subset formula-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (intersection_majority? const-decl "bool" pigeonhole nil)
    (intersection_majority? const-decl "bool" pigeonhole nil))
   nil))
 (enabled_agree 0
  (enabled_agree-1 nil 3397688401
   ("" (skosimp*)
    (("" (expand "uniformly_enabled?")
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (expand "enabled_within?")
            (("" (expand "subset?")
              (("" (expand "member")
                (("" (prop)
                  (("1" (inst?)
                    (("1" (inst - "x!1" "d1!1" "d2!1")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (inst?)
                    (("2" (inst - "x!1" "d2!1" "d1!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniformly_enabled? const-decl "bool" fault_assumptions_stage nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" fault_assumptions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil fault_assumptions_stage nil)
    (D formal-const-decl "posnat" fault_assumptions_stage nil))
   nil)))


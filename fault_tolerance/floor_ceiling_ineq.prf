(floor_ceiling_ineq
 (ge_floor_l 0
  (ge_floor_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (ge_floor_r 0
  (ge_floor_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (gt_floor_l 0
  (gt_floor_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (gt_floor_r 0
  (gt_floor_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (le_floor_l 0
  (le_floor_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (le_floor_r 0
  (le_floor_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (lt_floor_l 0
  (lt_floor_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (lt_floor_r 0
  (lt_floor_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "floor_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (floor_def formula-decl nil floor_ceil nil))
   nil))
 (floor_monotone 0
  (floor_monotone-1 nil 3274786734 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (ge_ceiling_l 0
  (ge_ceiling_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (ge_ceiling_r 0
  (ge_ceiling_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (gt_ceiling_l 0
  (gt_ceiling_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (gt_ceiling_r 0
  (gt_ceiling_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (le_ceiling_l 0
  (le_ceiling_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (le_ceiling_r 0
  (le_ceiling_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (lt_ceiling_l 0
  (lt_ceiling_l-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (lt_ceiling_r 0
  (lt_ceiling_r-1 nil 3274467640
   ("" (skosimp)
    (("" (prop)
      (("1" (use "ceiling_def") (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ceiling_def formula-decl nil floor_ceil nil))
   nil))
 (ceiling_monotone 0
  (ceiling_monotone-1 nil 3274786805
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak)))


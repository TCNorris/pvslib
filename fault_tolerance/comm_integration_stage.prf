(comm_integration_stage
 (msg_checker_TCC1 0
  (msg_checker_TCC1-1 nil 3399202157 ("" (subtype-tcc) nil nil) nil nil
   (msg_checker subtype
    "(LAMBDA msg: message_adt[comm_integration_stage.T].valid?(comm_integration_stage.msg))"
    "msg_checker")))
 (osym_rcvd_TCC1 0
  (osym_rcvd_TCC1-1 nil 3399202157
   (""
    (inst +
     "lambda (d: [sent_vec_stage[S, D, message], below(S)]): garbled[T]")
    nil nil)
   ((garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (osym_rcvd existence ""
    "[d: [sent_vec_stage[S, D, message[T]], naturalnumbers.below(comm_integration_stage.S)] -> {m: message_adt[comm_integration_stage.T].message | booleans.OR(m = d`1(d`2), m = message_adt[comm_integration_stage.T].garbled)}]")))
 (oasym_rcvd_TCC1 0
  (oasym_rcvd_TCC1-1 nil 3399202157
   (""
    (inst +
     "lambda (d: [sent_vec_stage[S, D, message], below(S), below(D)]): garbled[T]")
    nil nil)
   ((garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (oasym_rcvd existence ""
    "[d1: [sent_vec_stage[S, D, message[T]], naturalnumbers.below(comm_integration_stage.S), naturalnumbers.below(comm_integration_stage.D)] -> {m: message_adt[comm_integration_stage.T].message | booleans.OR(m = d1`1(d1`2), m = message_adt[comm_integration_stage.T].garbled)}]")))
 (sv_rcvd_TCC1 0
  (sv_rcvd_TCC1-1 nil 3399202157
   (""
    (inst +
     "lambda (d: [sent_vec_stage[S, D, message], below(S), below(D)]): garbled[T]")
    nil nil)
   ((garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (tsym_rcvd const-decl "message" comm_integration_stage nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (sv_rcvd existence ""
    "[d1: [sent_vec_stage[S, D, message[T]], naturalnumbers.below(comm_integration_stage.S), naturalnumbers.below(comm_integration_stage.D)] -> {m: message_adt[comm_integration_stage.T].message | booleans.OR(m = comm_integration_stage.tsym_rcvd(d1`1, d1`2), m = message_adt[comm_integration_stage.T].garbled)}]")))
 (correct_denotation_send 0
  (correct_denotation_send-1 nil 3399202157
   ("" (skosimp*)
    (("" (expand "correct_denotation?")
      (("" (expand "rcvd")
        (("" (ground)
          (("1" (typepred "osym_rcvd(sent!1, s!1)") (("1" (assert) nil nil))
            nil)
           ("2" (typepred "oasym_rcvd(sent!1, s!1, d!1)")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_denotation? const-decl "bool" integration_fault_model nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (osym_rcvd const-decl "{m: message | m = sent(s) OR m = garbled}"
     comm_integration_stage nil)
    (oasym_rcvd const-decl "{m: message | m = sent(s) OR m = garbled}"
     comm_integration_stage nil)
    (rcvd const-decl "message" comm_integration_stage nil))
   nil))
 (conforms_type 0
  (conforms_type-1 nil 3399202157 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (injective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (conforms const-decl "bool" comm_integration_stage nil))
   nil
   (conforms_type subtype
    "comm_integration_stage.conforms(comm_integration_stage.msg_check, comm_integration_stage.common_check)"
    "valid_check_stage")))
 (scheduled_conform 0
  (scheduled_conform-1 nil 3399202195
   ("" (expand "enabled_within?")
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (expand "enabled")
          (("" (expand "conforms") (("" (skosimp*) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (conforms const-decl "bool" comm_integration_stage nil)
    (member const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (exact_correct_denotation 0
  (exact_correct_denotation-1 nil 3399202221
   ("" (skosimp*)
    (("" (expand "exact_correct_denotation?")
      (("" (skosimp*)
        (("" (expand "correct_denotation")
          (("" (expand "enabled")
            (("" (use "correct_denotation_send") (("" (prop) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exact_correct_denotation? const-decl "bool" exact_comm_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (correct_denotation_send formula-decl nil comm_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (valid_check_stage type-eq-decl nil comm_integration_stage nil)
    (msg_checker nonempty-type-eq-decl nil comm_integration_stage nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (message type-decl nil message_adt nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil))
   nil))
 (quorum_correct_integration 0
  (quorum_correct_integration-1 nil 3399297904
   ("" (skosimp*)
    (("" (expand "quorum_correct?")
      (("" (inst?)
        (("" (assert) (("" (use "exact_correct_denotation") nil nil)) nil))
        nil))
      nil))
    nil)
   ((quorum_correct? const-decl "bool" exact_comm_stage nil)
    (quorum_correct? const-decl "bool" comm_integration_stage nil)
    (exact_correct_denotation formula-decl nil comm_integration_stage nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (msg_checker nonempty-type-eq-decl nil comm_integration_stage nil)
    (valid_check_stage type-eq-decl nil comm_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (majority_correct_rw 0
  (majority_correct_rw-1 nil 3399297971
   ("" (skosimp*)
    (("" (expand "majority_correct?")
      (("" (expand "quorum_correct?")
        (("" (rewrite "majority") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((majority_correct? const-decl "bool" comm_integration_stage nil)
    (majority formula-decl nil fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (msg_checker nonempty-type-eq-decl nil comm_integration_stage nil)
    (valid_check_stage type-eq-decl nil comm_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (rcvd const-decl "message" comm_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (quorum_correct? const-decl "bool" comm_integration_stage nil))
   shostak))
 (exact_single_denotation 0
  (exact_single_denotation-1 nil 3399202843
   ("" (expand "exact_single_denotation?")
    (("" (skosimp*)
      (("" (expand "single_denotation")
        (("" (expand "single_denotation?")
          (("" (expand "enabled")
            (("" (expand "rcvd")
              (("" (lift-if)
                (("" (assert)
                  (("" (prop)
                    (("1" (assert)
                      (("1" (typepred "oasym_rcvd(sent!1, s!1, d2!1)")
                        (("1" (prop)
                          (("1" (typepred "oasym_rcvd(sent!1, s!1, d1!1)")
                            (("1" (ground) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "sv_rcvd(sent!1, s!1, d2!1)")
                      (("2" (ground)
                        (("2" (typepred "sv_rcvd(sent!1, s!1, d1!1)")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((single_denotation? const-decl "bool" integration_fault_model nil)
    (rcvd const-decl "message" comm_integration_stage nil)
    (sv_rcvd const-decl "{m: message | m = tsym_rcvd(sent, s) OR m = garbled}"
     comm_integration_stage nil)
    (tsym_rcvd const-decl "message" comm_integration_stage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (oasym_rcvd const-decl "{m: message | m = sent(s) OR m = garbled}"
     comm_integration_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (single_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (exact_single_denotation? const-decl "bool" exact_comm_stage nil))
   nil))
 (uniformly_enabled 0
  (uniformly_enabled-1 nil 3399202868
   ("" (expand "uniformly_enabled?")
    (("" (expand "enabled")
      (("" (skosimp*)
        (("" (assert)
          (("" (expand "uniform?")
            (("" (inst?)
              (("" (inst - "d2!1")
                (("" (assert)
                  (("" (expand "symmetric_denotation")
                    (("" (expand "symmetric_denotation?")
                      (("" (expand "rcvd")
                        (("" (lift-if)
                          (("" (assert) (("" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (symmetric_denotation? const-decl "bool" integration_fault_model nil)
    (rcvd const-decl "message" comm_integration_stage nil)
    (symmetric_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (uniform? const-decl "bool" fault_assumptions_stage nil)
    (uniformly_enabled? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (exact_symmetric_single 0
  (exact_symmetric_single-1 nil 3399202889
   ("" (expand "exact_single_denotation?")
    (("" (skosimp*)
      (("" (expand "symmetric_denotation")
        (("" (expand "symmetric_denotation?")
          (("" (expand "enabled")
            (("" (expand "rcvd") (("" (lift-if) (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_denotation? const-decl "bool" integration_fault_model nil)
    (rcvd const-decl "message" comm_integration_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (symmetric_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (exact_single_denotation? const-decl "bool" exact_comm_stage nil))
   nil))
 (all_symmetric_integration 0
  (all_symmetric_integration-1 nil 3399298905
   ("" (expand "all_symmetric?")
    (("" (skosimp*)
      (("" (inst?)
        (("" (assert)
          (("" (use "uniformly_enabled")
            (("" (assert) (("" (use "exact_symmetric_single") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exact_symmetric_single formula-decl nil comm_integration_stage nil)
    (D formal-const-decl "posnat" comm_integration_stage nil)
    (T formal-nonempty-type-decl nil comm_integration_stage nil)
    (message type-decl nil message_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (msg_checker nonempty-type-eq-decl nil comm_integration_stage nil)
    (valid_check_stage type-eq-decl nil comm_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (uniformly_enabled formula-decl nil comm_integration_stage nil)
    (symmetric_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" comm_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (all_symmetric? const-decl "bool" comm_integration_stage nil)
    (all_symmetric? const-decl "bool" exact_comm_stage nil))
   nil))
 (good_conforms 0
  (good_conforms-1 nil 3399216206
   ("" (skosimp*)
    (("" (expand "good")
      (("" (expand "enabled")
        (("" (expand "rcvd") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((good const-decl "finite_set[below(N)]" integration_fault_model nil)
    (rcvd const-decl "message" comm_integration_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil))
   shostak)))


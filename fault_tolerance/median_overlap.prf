(median_overlap
 (median_overlap 0
  (median_overlap-5 "" 3414576876
   ("" (skosimp*)
    (("" (rewrite "min_reduce")
      (("" (rewrite "max_reduce")
        (("" (lemma "median_pigeonhole[below(N)]")
          ((""
            (inst - "highset(v1!1, e1!1, mid(card(e1!1)))"
             "lowset(v2!1, e2!1, card(e2!1) - 1 - mid(card(e2!1)))" "e1!1"
             "e2!1")
            (("" (assert)
              (("" (prop)
                (("1" (expand "highset")
                  (("1" (expand "lowset")
                    (("1" (skosimp*)
                      (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "majority_subset?")
                  (("2" (use "card_highset")
                    (("2" (assert)
                      (("2" (expand* "subset?" "highset" "member")
                        (("2" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "majority_subset?")
                  (("3" (use "card_lowset")
                    (("3" (assert)
                      (("3" (expand* "subset?" "lowset" "member")
                        (("3" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_reduce formula-decl nil reduce_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (mid const-decl "tau_type" tau_declaration nil)
    (vec type-eq-decl nil node nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" median_overlap nil)
    (T formal-nonempty-type-decl nil median_overlap nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" median_overlap nil)
    (vec2seq_type application-judgement "ne_seqs[T]" median_overlap nil)
    (median_pigeonhole formula-decl nil pigeonhole nil)
    (nonempty_finite_union1 application-judgement "non_empty_finite_set"
     finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (card_lowset formula-decl nil reduce_properties nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (card_highset formula-decl nil reduce_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (highset const-decl "finite_set[below(N)]" reduce_properties nil)
    (lowset const-decl "finite_set[below(N)]" reduce_properties nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max_reduce formula-decl nil reduce_properties nil))
   nil)
  (median_overlap-4 "" 3414576816
   ("" (skosimp*)
    (("" (rewrite "min_reduce")
      (("" (rewrite "max_reduce")
        (("" (lemma "median_pigeonhole[below(N)]")
          ((""
            (inst - "highset(f1!1, e1!1, mid(card(e1!1)))"
             "lowset(f2!1, e2!1, card(e2!1) - 1 - mid(card(e2!1)))" "e1!1"
             "e2!1")
            (("" (assert)
              (("" (prop)
                (("1" (expand "highset")
                  (("1" (expand "lowset")
                    (("1" (skosimp*)
                      (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "majority_subset?")
                  (("2" (use "card_highset")
                    (("2" (assert)
                      (("2" (expand* "subset?" "highset" "member")
                        (("2" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "majority_subset?")
                  (("3" (use "card_lowset")
                    (("3" (assert)
                      (("3" (expand* "subset?" "lowset" "member")
                        (("3" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_reduce formula-decl nil reduce_properties nil)
    (lowset const-decl "finite_set[below(N)]" reduce_properties nil)
    (highset const-decl "finite_set[below(N)]" reduce_properties nil)
    (card_highset formula-decl nil reduce_properties nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (card_lowset formula-decl nil reduce_properties nil)
    (median_pigeonhole formula-decl nil pigeonhole nil)
    (total_order? const-decl "bool" orders nil)
    (vec type-eq-decl nil node nil)
    (mid const-decl "tau_type" tau_declaration nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (min_reduce formula-decl nil reduce_properties nil))
   nil)
  (median_overlap-3 "" 3414417975
   ("" (skosimp*)
    (("" (rewrite "min_reduce")
      (("" (rewrite "max_reduce")
        (("" (lemma "median_pigeonhole[below(N)]")
          ((""
            (inst - "highset(e1!1, f1!1, mid(card(e1!1)))"
             "lowset(e2!1, f2!1, card(e2!1) - 1 - mid(card(e2!1)))" "e1!1"
             "e2!1")
            (("" (assert)
              (("" (prop)
                (("1" (expand "highset")
                  (("1" (expand "lowset")
                    (("1" (skosimp*)
                      (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "majority_subset?")
                  (("2" (use "card_highset")
                    (("2" (assert)
                      (("2" (expand* "subset?" "highset" "member")
                        (("2" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "majority_subset?")
                  (("3" (use "card_lowset")
                    (("3" (assert)
                      (("3" (expand* "subset?" "lowset" "member")
                        (("3" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_reduce formula-decl nil reduce_properties nil)
    (lowset const-decl "finite_set[below(N)]" reduce_properties nil)
    (highset const-decl "finite_set[below(N)]" reduce_properties nil)
    (card_highset formula-decl nil reduce_properties nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (card_lowset formula-decl nil reduce_properties nil)
    (median_pigeonhole formula-decl nil pigeonhole nil)
    (total_order? const-decl "bool" orders nil)
    (mid const-decl "tau_type" tau_declaration nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (vec type-eq-decl nil node nil)
    (min_reduce formula-decl nil reduce_properties nil))
   nil)
  (median_overlap-2 "" 3413908960
   ("" (skosimp*)
    (("" (rewrite "min_reduce")
      (("" (rewrite "max_reduce")
        (("" (lemma "median_pigeonhole[below(N)]")
          ((""
            (inst - "highset(e1!1, f1!1, mid(card(e1!1)))"
             "lowset(e2!1, f2!1, card(e2!1) - 1 - mid(card(e2!1)))" "e1!1"
             "e2!1")
            (("" (assert)
              (("" (prop)
                (("1" (expand "highset")
                  (("1" (expand "lowset")
                    (("1" (skosimp*)
                      (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "majority_subset?")
                  (("2" (use "card_highset")
                    (("2" (assert)
                      (("2" (expand "subset?")
                        (("2" (expand "highset")
                          (("2" (expand "member") (("2" (skosimp*) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "majority_subset?")
                  (("3" (use "card_lowset")
                    (("3" (assert)
                      (("3" (expand "subset?")
                        (("3" (expand "lowset")
                          (("3" (expand "member") (("3" (skosimp*) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_reduce formula-decl nil reduce_properties nil)
    (vec type-eq-decl nil node nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (mid const-decl "tau_type" tau_declaration nil)
    (total_order? const-decl "bool" orders nil)
    (median_pigeonhole formula-decl nil pigeonhole nil)
    (card_lowset formula-decl nil reduce_properties nil)
    (majority_subset? const-decl "bool" pigeonhole nil)
    (card_highset formula-decl nil reduce_properties nil)
    (highset const-decl "finite_set[below(N)]" reduce_properties nil)
    (lowset const-decl "finite_set[below(N)]" reduce_properties nil)
    (max_reduce formula-decl nil reduce_properties nil))
   shostak)
  (median_overlap-1 nil 3377472462
   ("" (skosimp*)
    (("" (rewrite "min_reduce")
      (("" (rewrite "max_reduce")
        (("" (typepred "index(e1!1, f1!1)(mid(e1!1))")
          ((""
            (typepred
             "index(e2!1, f2!1)(card[below(N)](e2!1) - 1 - mid(e2!1))")
            (("" (expand "index_value")
              (("" (flatten)
                (("" (hide -1 -2 -4 -5 -6 -7)
                  (("" (expand "mid")
                    (("" (lemma "median_pigeonhole")
                      ((""
                        (invoke (inst - "%1" "%2" "%3" "%4") (! -3 l 1)
                         (! -2 l 1) (! -4 l 1 1 1) (! -4 1 l 1 2))
                        (("1" (expand "majority_subset?")
                          (("1" (rewrite "subset_filter")
                            (("1" (rewrite "subset_filter")
                              (("1" (assert)
                                (("1" (skosimp*)
                                  (("1" (hide -3 -4 -5)
                                    (("1" (expand "filter")
                                      (("1"
                                        (expand ">=")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_order? const-decl "bool" orders nil)
    (median_pigeonhole formula-decl nil pigeonhole nil)
    (majority_subset? const-decl "bool" pigeonhole nil))
   nil)))


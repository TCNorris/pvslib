(median_stage
 (one_asymmetric_overlap 0
  (one_asymmetric_overlap-2 nil 3403957288
   ("" (skosimp*)
    (("" (expand "overlap_imprecision?")
      (("" (expand "all_single_imprecision?")
        (("" (inst?)
          (("" (assert)
            (("" (expand "reduce_overlap?")
              (("" (skosimp*)
                (("" (use "median_overlap")
                  (("1" (prop)
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (expand "enabled?") (("1" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "one_asymmetric_ommission?")
                      (("2" (inst?) nil nil)) nil))
                    nil)
                   ("2" (expand "enabled_nonempty?") (("2" (inst?) nil nil))
                    nil)
                   ("3" (expand "enabled_nonempty?") (("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((overlap_imprecision? const-decl "bool" inexact_reduce_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" median_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (D formal-const-decl "posnat" median_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled? const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (reduce_overlap? const-decl "bool" reduce_choice nil)
    (<= const-decl "bool" reals nil)
    (median_overlap formula-decl nil median_overlap nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (vec type-eq-decl nil node nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (rcvd!1 skolem-const-decl "rcvd_matrix_stage[S, D, real]" median_stage
     nil)
    (check!1 skolem-const-decl "check_stage[S, D, real]" median_stage nil)
    (d1!1 skolem-const-decl "below(D)" median_stage nil)
    (d2!1 skolem-const-decl "below(D)" median_stage nil)
    (one_asymmetric_ommission? const-decl "bool" median_stage nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (all_single_imprecision? const-decl "bool" inexact_comm_stage nil))
   nil)
  (one_asymmetric_overlap-1 nil 3403957273 ("" (postpone) nil nil) nil
   shostak))
 (median_convergence 0
  (median_convergence-1 nil 3363685456
   ("" (skosimp*)
    (("" (forward-chain "quorum_imprecision_nonempty")
      (("" (forward-chain "one_asymmetric_overlap")
        (("" (expand "median")
          (("" (lemma "convergence")
            (("" (inst?)
              (("" (inst?)
                (("" (inst - "epsilon!1" 2)
                  (("" (rewrite "convergent_midpoint") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_imprecision_nonempty formula-decl nil inexact_comm_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (mid const-decl "tau_type" tau_declaration nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" median_stage nil)
    (D formal-const-decl "posnat" median_stage nil)
    (median const-decl "choice_stage" median_stage nil)
    (midpoint_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (convergent_midpoint formula-decl nil real_finite_sequences nil)
    (max_length const-decl "nat" reduce_choice nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (error formal-const-decl "real" median_stage nil)
    (convergence formula-decl nil inexact_reduce_stage nil)
    (one_asymmetric_overlap formula-decl nil median_stage nil))
   shostak)))


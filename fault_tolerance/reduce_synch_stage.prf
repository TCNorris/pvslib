(reduce_synch_stage
 (synch_stage_offset 0
  (synch_stage_offset-1 nil 3397891907
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "synch_stage")
        (("" (expand "offset")
          (("" (rewrite "Clock_rewrite ") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (offset const-decl "real" clock_shift nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (below type-eq-decl nil nat_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (check const-decl "bool" timing_integration_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (C const-decl "int" inverse_clocks nil)
    (Clock_rewrite formula-decl nil inverse_clocks nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (lower_synch_validity 0
  (lower_synch_validity-3 "" 3790104971
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "correct_quorum_lower")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_min_witness[D, real, <=]")
              (("" (skosimp*)
                (("" (replace -2 :hide? t)
                  (("" (move-terms 1 l 2)
                    (("" (lemma "reduce_min_validity")
                      (("" (inst?)
                        (("" (inst - "min" _ _)
                          (("" (inst?)
                            (("" (inst?)
                              (("" (assert)
                                ((""
                                  (invoke
                                   (then (case "%1 <= %2") (assert)
                                    (hide -1 2))
                                   (! -1 r) (! 1 r))
                                  (("" (hide -2 -3)
                                    (("" (use "v_min_is_min[D, real, <=]")
                                      ((""
                                        (assert)
                                        ((""
                                          (invoke
                                           (then
                                            (case "%1 <= %2")
                                            (assert)
                                            (hide -1 2))
                                           (! -1 r)
                                           (! 1 r))
                                          ((""
                                            (lemma "offset_left_edge")
                                            ((""
                                              (inst?)
                                              ((""
                                                (expand "synch_stage")
                                                ((""
                                                  (inst?)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (prop)
                                                      (("1"
                                                        (invoke
                                                         (then
                                                          (case "%1 <= %2")
                                                          (assert)
                                                          (hide -1 2))
                                                         (! -1 r 1)
                                                         (! 1 r 1))
                                                        (("1"
                                                          (expand "offset")
                                                          (("1"
                                                            (rewrite
                                                             "clock_nondecreasing")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (isolate
                                                                 1
                                                                 r
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "Clock_nondecreasing")
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "min_reduce_choice")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "clock_edge?")
                                                          (("2"
                                                            (expand "quorum?")
                                                            (("2"
                                                              (inst - "n!1")
                                                              (("2"
                                                                (expand
                                                                 "quorum?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (use
                                                                     "in_rcvd")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (replace*)
                                                                          (("2"
                                                                            (expand
                                                                             "received")
                                                                            (("2"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (lower_synch_validity-2 nil 3403624219
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "correct_quorum_lower")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_min_witness[D, real, <=]")
              (("" (skosimp*)
                (("" (replace -2 :hide? t)
                  (("" (move-terms 1 l 2)
                    (("" (lemma "reduce_min_validity")
                      (("" (inst?)
                        (("" (inst - "min" _ _)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1"
                                  (invoke
                                   (then (case "%1 <= %2") (assert)
                                    (hide -1 2))
                                   (! -1 r) (! 1 r))
                                  (("1" (hide -2 -3)
                                    (("1" (use "v_min_is_min[D, real, <=]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (invoke
                                           (then
                                            (case "%1 <= %2")
                                            (assert)
                                            (hide -1 2))
                                           (! -1 r)
                                           (! 1 r))
                                          (("1"
                                            (lemma "offset_left_edge")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "synch_stage")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (invoke
                                                         (then
                                                          (case "%1 <= %2")
                                                          (assert)
                                                          (hide -1 2))
                                                         (! -1 r 1)
                                                         (! 1 r 1))
                                                        (("1"
                                                          (expand "offset")
                                                          (("1"
                                                            (rewrite
                                                             "clock_nondecreasing")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (isolate
                                                                 1
                                                                 r
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "Clock_nondecreasing")
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "min_reduce_choice")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "clock_edge?")
                                                          (("2"
                                                            (expand "quorum?")
                                                            (("2"
                                                              (inst - "n!1")
                                                              (("2"
                                                                (expand
                                                                 "quorum?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (use
                                                                     "in_rcvd")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (replace*)
                                                                          (("2"
                                                                            (expand
                                                                             "received")
                                                                            (("2"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (use "min_le_max[real, <=]") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_synch? const-decl "bool" timing_integration_stage nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (ne_seqs type-eq-decl nil seqs structures) (vec type-eq-decl nil node nil)
    (reduce_min_validity formula-decl nil inexact_reduce_stage nil)
    (min_in_consensus name-judgement "in_consensus_function"
     real_finite_sequences nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (min_reduce_choice formula-decl nil reduce_choice nil)
    (Clock_nondecreasing formula-decl nil inverse_clocks nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (clock_nondecreasing formula-decl nil physical_clocks nil)
    (C const-decl "int" inverse_clocks nil)
    (offset const-decl "real" clock_shift nil)
    (clock_edge? const-decl "bool" physical_clocks nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (send const-decl "real" timing_integration_stage nil)
    (in_consensus_function type-eq-decl nil finite_seqs nil)
    (in? const-decl "bool" seqs structures)
    (in_rcvd formula-decl nil reduce_choice nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (offset_left_edge formula-decl nil clock_shift nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (v_min const-decl "T" select_minmax nil)
    (nominal const-decl "real" timing_integration_stage nil)
    (epsilon_l const-decl "posreal" timing_imprecision nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (correct_quorum_lower formula-decl nil timing_integration_stage nil))
   nil)
  (lower_synch_validity-1 nil 3397891926
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "correct_quorum_lower")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_min_witness[D, real, <=]")
              (("" (skosimp*)
                (("" (replace -2 :hide? t)
                  (("" (move-terms 1 l 2)
                    (("" (lemma "reduce_min_validity")
                      (("" (inst?)
                        (("" (inst - "min" _ _)
                          (("" (inst?)
                            (("" (inst?)
                              (("" (assert)
                                ((""
                                  (invoke
                                   (then (case "%1 <= %2") (assert)
                                    (hide -1 2))
                                   (! -1 r) (! 1 r))
                                  (("" (hide -2 -3)
                                    (("" (use "v_min_is_min[D, real, <=]")
                                      ((""
                                        (assert)
                                        ((""
                                          (invoke
                                           (then
                                            (case "%1 <= %2")
                                            (assert)
                                            (hide -1 2))
                                           (! -1 r)
                                           (! 1 r))
                                          ((""
                                            (lemma "offset_left_edge")
                                            ((""
                                              (inst?)
                                              ((""
                                                (expand "synch_stage")
                                                ((""
                                                  (inst?)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (prop)
                                                      (("1"
                                                        (invoke
                                                         (then
                                                          (case "%1 <= %2")
                                                          (assert)
                                                          (hide -1 2))
                                                         (! -1 r 1)
                                                         (! 1 r 1))
                                                        (("1"
                                                          (expand "offset")
                                                          (("1"
                                                            (rewrite
                                                             "clock_nondecreasing")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (isolate
                                                                 1
                                                                 r
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "Clock_nondecreasing")
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "min_reduce_choice")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "clock_edge?")
                                                          (("2"
                                                            (expand "quorum?")
                                                            (("2"
                                                              (inst - "n!1")
                                                              (("2"
                                                                (expand
                                                                 "quorum?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (use
                                                                     "min_rcvd")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (replace*)
                                                                          (("2"
                                                                            (expand
                                                                             "received")
                                                                            (("2"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_synch? const-decl "bool" timing_integration_stage nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (vec type-eq-decl nil node nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (reduce_min_validity formula-decl nil inexact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (min_reduce_choice formula-decl nil reduce_choice nil)
    (Clock_nondecreasing formula-decl nil inverse_clocks nil)
    (clock_nondecreasing formula-decl nil physical_clocks nil)
    (C const-decl "int" inverse_clocks nil)
    (offset const-decl "real" clock_shift nil)
    (clock_edge? const-decl "bool" physical_clocks nil)
    (finite_difference application-judgement "finite_set" finite_sets nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (send const-decl "real" timing_integration_stage nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (offset_left_edge formula-decl nil clock_shift nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (v_min const-decl "T" select_minmax nil)
    (nominal const-decl "real" timing_integration_stage nil)
    (epsilon_l const-decl "posreal" timing_imprecision nil)
    (rate const-decl "posreal" physical_clocks nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (correct_quorum_lower formula-decl nil timing_integration_stage nil))
   nil))
 (upper_synch_validity 0
  (upper_synch_validity-1 nil 3397891940
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "correct_quorum_upper")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (skosimp*)
                (("" (replace -2 :hide? t)
                  (("" (move-terms 1 r 2)
                    (("" (expand "synch_stage")
                      (("" (use "reduce_max_validity")
                        (("" (assert)
                          ((""
                            (invoke
                             (then (case "%1 <= %2") (assert) (hide -1 2))
                             (! 1 l) (! -1 l))
                            (("" (hide -2 -3)
                              (("" (lemma "v_max_is_max[D, real, <=]")
                                (("" (invoke (inst - _ _ "%1") (! 1 r 1))
                                  (("" (inst?)
                                    (("" (assert)
                                      ((""
                                        (invoke
                                         (then
                                          (case "%1 <= %2")
                                          (assert)
                                          (hide -1 2))
                                         (! 1 l)
                                         (! -1 l))
                                        ((""
                                          (use "offset_right")
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_synch? const-decl "bool" timing_integration_stage nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (ne_seqs type-eq-decl nil seqs structures) (vec type-eq-decl nil node nil)
    (offset_right formula-decl nil clock_shift nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (offset const-decl "real" clock_shift nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (reduce_max_validity formula-decl nil inexact_reduce_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (v_max const-decl "T" select_minmax nil)
    (nominal const-decl "real" timing_integration_stage nil)
    (nnreal type-eq-decl nil real_types nil)
    (epsilon_u const-decl "nnreal" timing_imprecision nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (correct_quorum_upper formula-decl nil timing_integration_stage nil))
   nil))
 (synch_master_slave 0
  (synch_master_slave-1 nil 3397891952
   ("" (skosimp*)
    (("" (rewrite "abs_max")
      (("" (rewrite "max_le")
        (("" (prop)
          (("1" (use "v_min_is_min[S, real, <=]")
            (("1" (use "upper_synch_validity")
              (("1" (use "v_max_is_max[D, real, <=]") (("1" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (use "v_max_is_max[S, real, <=]")
            (("2" (use "lower_synch_validity")
              (("2" (use "v_min_is_min[D, real, <=]") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_max formula-decl nil abs_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (integer nonempty-type-from-decl nil integers nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (nominal const-decl "real" timing_integration_stage nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (below type-eq-decl nil nat_types nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (upper_synch_validity formula-decl nil reduce_synch_stage nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (vec type-eq-decl nil node nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (lower_synch_validity formula-decl nil reduce_synch_stage nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (epsilon_u const-decl "nnreal" timing_imprecision nil)
    (nnreal type-eq-decl nil real_types nil)
    (epsilon_l const-decl "posreal" timing_imprecision nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (max_le formula-decl nil minmax_ineq nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (synch_agreement_propagation 0
  (synch_agreement_propagation-3 "" 3790104975
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "quorum_imprecision")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (use "v_min_witness[D, real, <=]")
                (("" (skosimp*)
                  (("" (replace*)
                    (("" (expand "synch_stage")
                      ((""
                        (lemma "inexact_reduce_stage.agreement_propagation")
                        (("" (inst - "max" "min" _ _ _ _ _ _ _ _)
                          (("" (inst?)
                            (("" (inst?)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (hide -3 -5 -6 -7 -9 -10)
                                    (("" (use "v_min_is_min[D, real, <=]")
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma "v_max_is_max[D, real, <=]")
                                          ((""
                                            (inst - "n!2" _ _)
                                            ((""
                                              (inst?)
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma "offset_drift_edge")
                                                  ((""
                                                    (invoke
                                                     (inst
                                                      -
                                                      _
                                                      _
                                                      "%1"
                                                      "%2"
                                                      _
                                                      _)
                                                     (! -3 l 1)
                                                     (! -2 r 1))
                                                    ((""
                                                      (inst?)
                                                      ((""
                                                        (inst?)
                                                        ((""
                                                          (inst?)
                                                          ((""
                                                            (prop)
                                                            (("1"
                                                              (invoke
                                                               (then
                                                                (case
                                                                 "%1 <= %2")
                                                                (assert)
                                                                (hide -1 2))
                                                               (! 1 l)
                                                               (! -1 l))
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "offset_nondecreasing")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "N!1"
                                                                     "c_dst!1"
                                                                     _
                                                                     _
                                                                     _)
                                                                    (("1"
                                                                      (use
                                                                       "max_reduce_choice")
                                                                      (("1"
                                                                        (lemma
                                                                         "min_reduce_choice")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           _
                                                                           _
                                                                           "n!1"
                                                                           _
                                                                           _)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               _
                                                                               _
                                                                               "n!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 _
                                                                                 _
                                                                                 "n!2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-6 1))
                                                              (("2"
                                                                (expand
                                                                 "clock_edge?")
                                                                (("2"
                                                                  (use
                                                                   "in_rcvd")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "quorum?")
                                                                      (("2"
                                                                        (inst?
                                                                         -)
                                                                        (("2"
                                                                          (expand
                                                                           "quorum?")
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "received")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (-6 1))
                                                              (("3"
                                                                (expand
                                                                 "clock_edge?")
                                                                (("3"
                                                                  (use
                                                                   "in_rcvd")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "quorum?")
                                                                      (("3"
                                                                        (inst?
                                                                         -)
                                                                        (("3"
                                                                          (expand
                                                                           "quorum?")
                                                                          (("3"
                                                                            (prop)
                                                                            (("3"
                                                                              (hide
                                                                               -2
                                                                               2)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "received")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (synch_agreement_propagation-2 nil 3403624271
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "quorum_imprecision")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (use "v_min_witness[D, real, <=]")
                (("" (skosimp*)
                  (("" (replace*)
                    (("" (expand "synch_stage")
                      ((""
                        (lemma "inexact_reduce_stage.agreement_propagation")
                        (("" (inst - "max" "min" _ _ _ _ _ _ _ _)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (hide -3 -5 -6 -7 -9 -10)
                                    (("1" (use "v_min_is_min[D, real, <=]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "v_max_is_max[D, real, <=]")
                                          (("1"
                                            (inst - "n!2" _ _)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "offset_drift_edge")
                                                  (("1"
                                                    (invoke
                                                     (inst
                                                      -
                                                      _
                                                      _
                                                      "%1"
                                                      "%2"
                                                      _
                                                      _)
                                                     (! -3 l 1)
                                                     (! -2 r 1))
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (invoke
                                                               (then
                                                                (case
                                                                 "%1 <= %2")
                                                                (assert)
                                                                (hide -1 2))
                                                               (! 1 l)
                                                               (! -1 l))
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "offset_nondecreasing")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "N!1"
                                                                     "c_dst!1"
                                                                     _
                                                                     _
                                                                     _)
                                                                    (("1"
                                                                      (use
                                                                       "max_reduce_choice")
                                                                      (("1"
                                                                        (lemma
                                                                         "min_reduce_choice")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           _
                                                                           _
                                                                           "n!1"
                                                                           _
                                                                           _)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               _
                                                                               _
                                                                               "n!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 _
                                                                                 _
                                                                                 "n!2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-6 1))
                                                              (("2"
                                                                (expand
                                                                 "clock_edge?")
                                                                (("2"
                                                                  (use
                                                                   "in_rcvd")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "quorum?")
                                                                      (("2"
                                                                        (inst?
                                                                         -)
                                                                        (("2"
                                                                          (expand
                                                                           "quorum?")
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "received")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (-6 1))
                                                              (("3"
                                                                (expand
                                                                 "clock_edge?")
                                                                (("3"
                                                                  (use
                                                                   "in_rcvd")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "quorum?")
                                                                      (("3"
                                                                        (inst?
                                                                         -)
                                                                        (("3"
                                                                          (expand
                                                                           "quorum?")
                                                                          (("3"
                                                                            (prop)
                                                                            (("3"
                                                                              (hide
                                                                               -2
                                                                               2)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "received")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (use "min_le_max[real, <=]") nil nil)) nil)
                           ("3" (skosimp*)
                            (("3" (use "min_le_max[real, <=]") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_synch? const-decl "bool" timing_integration_stage nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (vec type-eq-decl nil node nil) (ne_seqs type-eq-decl nil seqs structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (min_in_consensus name-judgement "in_consensus_function"
     real_finite_sequences nil)
    (max_in_consensus name-judgement "in_consensus_function"
     real_finite_sequences nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (offset_drift_edge formula-decl nil clock_shift nil)
    (in_rcvd formula-decl nil reduce_choice nil)
    (in? const-decl "bool" seqs structures)
    (in_consensus_function type-eq-decl nil finite_seqs nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (send const-decl "real" timing_integration_stage nil)
    (clock_edge? const-decl "bool" physical_clocks nil)
    (offset const-decl "real" clock_shift nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (offset_nondecreasing formula-decl nil clock_shift nil)
    (max_reduce_choice formula-decl nil reduce_choice nil)
    (min_reduce_choice formula-decl nil reduce_choice nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (epsilon const-decl "posreal" timing_imprecision nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (sent const-decl "real" timing_integration_stage nil)
    (agreement_propagation formula-decl nil inexact_reduce_stage nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_imprecision formula-decl nil timing_integration_stage nil))
   nil)
  (synch_agreement_propagation-1 nil 3397891975
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "quorum_imprecision")
        (("" (use "enabled_within_stage")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (use "v_min_witness[D, real, <=]")
                (("" (skosimp*)
                  (("" (replace*)
                    (("" (expand "synch_stage")
                      ((""
                        (lemma "inexact_reduce_stage.agreement_propagation")
                        (("" (inst - "max" "min" _ _ _ _ _ _ _ _)
                          (("" (inst?)
                            (("" (inst?)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (hide -3 -5 -6 -7 -9 -10)
                                    (("" (use "v_min_is_min[D, real, <=]")
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma "v_max_is_max[D, real, <=]")
                                          ((""
                                            (inst - "n!2" _ _)
                                            ((""
                                              (inst?)
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma "offset_drift_edge")
                                                  ((""
                                                    (invoke
                                                     (inst
                                                      -
                                                      _
                                                      _
                                                      "%1"
                                                      "%2"
                                                      _
                                                      _)
                                                     (! -3 l 1)
                                                     (! -2 r 1))
                                                    ((""
                                                      (inst?)
                                                      ((""
                                                        (inst?)
                                                        ((""
                                                          (inst?)
                                                          ((""
                                                            (prop)
                                                            (("1"
                                                              (invoke
                                                               (then
                                                                (case
                                                                 "%1 <= %2")
                                                                (assert)
                                                                (hide -1 2))
                                                               (! 1 l)
                                                               (! -1 l))
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "offset_nondecreasing")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "N!1"
                                                                     "c_dst!1"
                                                                     _
                                                                     _
                                                                     _)
                                                                    (("1"
                                                                      (use
                                                                       "max_reduce_choice")
                                                                      (("1"
                                                                        (lemma
                                                                         "min_reduce_choice")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           _
                                                                           _
                                                                           "n!1"
                                                                           _
                                                                           _)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               _
                                                                               _
                                                                               "n!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 _
                                                                                 _
                                                                                 "n!2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-6 1))
                                                              (("2"
                                                                (expand
                                                                 "clock_edge?")
                                                                (("2"
                                                                  (use
                                                                   "min_rcvd")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "quorum?")
                                                                      (("2"
                                                                        (inst?
                                                                         -)
                                                                        (("2"
                                                                          (expand
                                                                           "quorum?")
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "received")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (-6 1))
                                                              (("3"
                                                                (expand
                                                                 "clock_edge?")
                                                                (("3"
                                                                  (use
                                                                   "max_rcvd")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "quorum?")
                                                                      (("3"
                                                                        (inst?
                                                                         -)
                                                                        (("3"
                                                                          (expand
                                                                           "quorum?")
                                                                          (("3"
                                                                            (prop)
                                                                            (("3"
                                                                              (hide
                                                                               -2
                                                                               2)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "received")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_imprecision formula-decl nil timing_integration_stage nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (rate const-decl "posreal" physical_clocks nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (agreement_propagation formula-decl nil inexact_reduce_stage nil)
    (sent const-decl "real" timing_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (epsilon const-decl "posreal" timing_imprecision nil)
    (check const-decl "bool" timing_integration_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (min_reduce_choice formula-decl nil reduce_choice nil)
    (max_reduce_choice formula-decl nil reduce_choice nil)
    (offset_nondecreasing formula-decl nil clock_shift nil)
    (offset const-decl "real" clock_shift nil)
    (clock_edge? const-decl "bool" physical_clocks nil)
    (send const-decl "real" timing_integration_stage nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (quorum? const-decl "bool" pigeonhole nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (offset_drift_edge formula-decl nil clock_shift nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (vec type-eq-decl nil node nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (quorum_synch? const-decl "bool" timing_integration_stage nil))
   nil))
 (overlap_imprecision 0
  (overlap_imprecision-2 "" 3790104975
   ("" (skosimp*)
    (("" (use "single_imprecision_timing")
      (("" (expand "overlap_synch?")
        (("" (expand "overlap_imprecision?")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (overlap_imprecision-1 nil 3403649053
   ("" (skosimp*)
    (("" (use "single_imprecision_timing")
      (("" (expand "overlap_synch?")
        (("" (expand "overlap_imprecision?")
          (("" (inst?)
            (("1" (assert) nil nil)
             ("2" (expand "reduce_overlap?")
              (("2" (inst - 0 0)
                (("1" (skosimp*)
                  (("1" (expand "empty?")
                    (("1" (expand "member") (("1" (inst?) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((single_imprecision_timing formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (overlap_imprecision? const-decl "bool" inexact_reduce_stage nil)
    (single_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (overlap_synch? const-decl "bool" reduce_synch_stage nil))
   shostak))
 (synch_convergence 0
  (synch_convergence-1 nil 3403646347
   ("" (skosimp*)
    (("" (expand "quorum_synch?")
      (("" (use "quorum_imprecision")
        (("" (use "overlap_imprecision")
          (("" (use "enabled_within_stage")
            (("" (expand "max_length")
              (("" (assert)
                (("" (use "v_max_witness[D, real, <=]")
                  (("" (use "v_min_witness[D, real, <=]")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (replace*)
                          (("" (expand "synch_stage")
                            (("" (hide -2 -4)
                              (("" (use "inexact_reduce_stage.convergence")
                                (("" (assert)
                                  (("" (use "v_min_is_min[D, real, <=]")
                                    (("" (lemma "v_max_is_max[D, real, <=]")
                                      ((""
                                        (inst - "n!2" _ _)
                                        ((""
                                          (inst?)
                                          ((""
                                            (assert)
                                            ((""
                                              (use "offset_drift")
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_synch? const-decl "bool" timing_integration_stage nil)
    (overlap_imprecision formula-decl nil reduce_synch_stage nil)
    (max_length const-decl "nat" reduce_synch_stage nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (vec type-eq-decl nil node nil) (ne_seqs type-eq-decl nil seqs structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (offset_drift formula-decl nil clock_shift nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (sent const-decl "real" timing_integration_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (epsilon const-decl "posreal" timing_imprecision nil)
    (check const-decl "bool" timing_integration_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (convergence formula-decl nil inexact_reduce_stage nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_imprecision formula-decl nil timing_integration_stage nil))
   nil))
 (synch_agreement_generation 0
  (synch_agreement_generation-2 nil 3397906826
   ("" (skosimp*)
    (("" (expand "all_symmetric_synch?")
      (("" (flatten)
        (("" (use "all_symmetric_timing")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (use "v_min_witness[D, real, <=]")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (replace*)
                      (("" (expand "synch_stage")
                        (("" (hide -2 -4)
                          ((""
                            (use "inexact_reduce_stage.agreement_generation")
                            (("" (assert)
                              (("" (use "v_min_is_min[D, real, <=]")
                                (("" (assert)
                                  (("" (lemma "v_max_is_max[D, real, <=]")
                                    (("" (inst - "n!2" _ _)
                                      ((""
                                        (inst?)
                                        ((""
                                          (assert)
                                          ((""
                                            (use "offset_drift")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_symmetric_synch? const-decl "bool" timing_integration_stage nil)
    (all_symmetric_timing formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec type-eq-decl nil node nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (offset_drift formula-decl nil clock_shift nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (epsilon const-decl "posreal" timing_imprecision nil)
    (received const-decl "real" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (agreement_generation formula-decl nil inexact_reduce_stage nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil)
  (synch_agreement_generation-1 nil 3397891984
   ("" (skosimp*)
    (("" (expand "enabled_symmetric_synch?")
      (("" (flatten)
        (("" (use "all_symmetric_timing")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (use "v_min_witness[D, real, <=]")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (replace*)
                      (("" (expand "synch_stage")
                        (("" (hide -2 -4)
                          ((""
                            (use "inexact_reduce_stage.agreement_generation")
                            (("" (assert)
                              (("" (use "v_min_is_min[D, real, <=]")
                                (("" (assert)
                                  (("" (lemma "v_max_is_max[D, real, <=]")
                                    (("" (inst - "n!2" _ _)
                                      ((""
                                        (inst?)
                                        ((""
                                          (assert)
                                          ((""
                                            (use "offset_drift")
                                            ((""
                                              (assert)
                                              ((""
                                                (hide-all-but (-8 1))
                                                ((""
                                                  (expand "enabled_nonempty?")
                                                  ((""
                                                    (expand "all_clock_edge?")
                                                    ((""
                                                      (skosimp*)
                                                      ((""
                                                        (inst?)
                                                        ((""
                                                          (use "reduce_rcvd")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (skosimp*)
                                                              ((""
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                ((""
                                                                  (expand
                                                                   "clock_edge?")
                                                                  ((""
                                                                    (expand
                                                                     "received")
                                                                    ((""
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (rate const-decl "posreal" physical_clocks nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (clock_edge? const-decl "bool" physical_clocks nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (all_clock_edge? const-decl "bool" clock_shift nil)
    (offset_drift formula-decl nil clock_shift nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (epsilon const-decl "posreal" timing_imprecision nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (agreement_generation formula-decl nil inexact_reduce_stage nil)
    (v_min_witness formula-decl nil select_minmax nil))
   nil))
 (synch_agreement_generation_edge 0
  (synch_agreement_generation_edge-1 nil 3403624730
   ("" (skosimp*)
    (("" (expand "all_symmetric_synch?")
      (("" (flatten)
        (("" (use "all_symmetric_timing")
          (("" (assert)
            (("" (use "v_max_witness[D, real, <=]")
              (("" (use "v_min_witness[D, real, <=]")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (replace*)
                      (("" (expand "synch_stage")
                        (("" (hide -2 -4)
                          ((""
                            (use "inexact_reduce_stage.agreement_generation")
                            (("" (assert)
                              (("" (use "v_min_is_min[D, real, <=]")
                                (("" (assert)
                                  (("" (lemma "v_max_is_max[D, real, <=]")
                                    (("" (inst - "n!2" _ _)
                                      ((""
                                        (inst?)
                                        ((""
                                          (assert)
                                          ((""
                                            (use "offset_drift_edge")
                                            ((""
                                              (ground)
                                              (("1"
                                                (hide-all-but (-8 1))
                                                (("1"
                                                  (expand "enabled_nonempty?")
                                                  (("1"
                                                    (expand "clock_edge?")
                                                    (("1"
                                                      (use "in_rcvd")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (replace*)
                                                              (("1"
                                                                (expand
                                                                 "received")
                                                                (("1"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst? -)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-8 1))
                                                (("2"
                                                  (expand "clock_edge?")
                                                  (("2"
                                                    (use "in_rcvd")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace*)
                                                          (("1"
                                                            (expand
                                                             "received")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "enabled_nonempty?")
                                                        (("2"
                                                          (inst? -)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_symmetric_synch? const-decl "bool" timing_integration_stage nil)
    (all_symmetric_timing formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (min_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (var_latency formal-const-decl "nonneg_real" reduce_synch_stage nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" reduce_synch_stage nil)
    (D formal-const-decl "posnat" reduce_synch_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (v_max_witness formula-decl nil select_minmax nil)
    (in_consensus_function type-eq-decl nil finite_seqs nil)
    (in? const-decl "bool" seqs structures)
    (synch_stage const-decl "real" reduce_synch_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec type-eq-decl nil node nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (in_rcvd formula-decl nil reduce_choice nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (send const-decl "real" timing_integration_stage nil)
    (clock_edge? const-decl "bool" physical_clocks nil)
    (offset_drift_edge formula-decl nil clock_shift nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (epsilon const-decl "posreal" timing_imprecision nil)
    (received const-decl "real" timing_integration_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (agreement_generation formula-decl nil inexact_reduce_stage nil)
    (v_min_witness formula-decl nil select_minmax nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil)))


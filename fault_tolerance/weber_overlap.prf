(weber_overlap
 (weber_overlap 0
  (weber_overlap-3 nil 3414577033
   ("" (skosimp*)
    (("" (expand "intersection_majority?")
      (("" (use "card_intersection_le[below(N)]")
        (("" (flatten)
          (("" (rewrite "min_reduce")
            (("" (rewrite "max_reduce")
              (("" (lemma "pigeonhole[below(N)]")
                ((""
                  (inst - "highset(v1!1, e1!1, tau(src_set!1)(card(e1!1)))"
                   "lowset(v2!1, e2!1, card(e2!1) - 1 - tau(src_set!1)(card(e2!1)))")
                  (("" (prop)
                    (("1" (expand* "highset" "lowset" "subset?" "member")
                      (("1" (skosimp*)
                        (("1" (inst? +)
                          (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (use "card_highset")
                        (("2" (use "card_lowset")
                          (("2" (expand* "tau" "weber")
                            (("2" (lemma "card_subset[below(N)]")
                              (("2" (inst-cp - "e2!1" "src_set!1")
                                (("2" (inst - "e1!1" "src_set!1")
                                  (("2" (assert)
                                    (("2" (assert)
                                      (("2"
                                        (invoke
                                         (then (case "%1 <= %2") (assert))
                                         (! 1 r)
                                         (! -1 r))
                                        (("2"
                                          (rewrite "card_subset")
                                          (("2"
                                            (hide-all-but (-7 -8 1))
                                            (("2"
                                              (expand*
                                               "subset?"
                                               "union"
                                               "member"
                                               "highset"
                                               "lowset")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst?)
                                                    (("2" (prop) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((intersection_majority? const-decl "bool" pigeonhole nil)
    (max_reduce formula-decl nil reduce_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lowset const-decl "finite_set[below(N)]" reduce_properties nil)
    (highset const-decl "finite_set[below(N)]" reduce_properties nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card_lowset formula-decl nil reduce_properties nil)
    (card_subset formula-decl nil finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (<= const-decl "bool" reals nil) (union const-decl "set" sets nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (weber const-decl "tau_type" tau_declaration nil)
    (card_highset formula-decl nil reduce_properties nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (vec2seq_type application-judgement "ne_seqs[T]" weber_overlap nil)
    (<= formal-const-decl "(total_order?[T])" weber_overlap nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil weber_overlap nil)
    (vec type-eq-decl nil node nil)
    (tau const-decl "tau_type" weber_overlap nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min_reduce formula-decl nil reduce_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" weber_overlap nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_intersection_le formula-decl nil finite_sets nil))
   nil)
  (weber_overlap-2 nil 3403897937
   ("" (skosimp*)
    (("" (expand "intersection_majority?")
      (("" (use "card_intersection_le[below(N)]")
        (("" (flatten)
          (("" (rewrite "min_reduce")
            (("" (rewrite "max_reduce")
              (("" (lemma "pigeonhole[below(N)]")
                ((""
                  (inst - "highset(e1!1, f1!1, tau(src_set!1)(card(e1!1)))"
                   "lowset(e2!1, f2!1, card(e2!1) - 1 - tau(src_set!1)(card(e2!1)))")
                  (("" (prop)
                    (("1" (expand* "highset" "lowset" "subset?" "member")
                      (("1" (skosimp*)
                        (("1" (inst? +)
                          (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (use "card_highset")
                        (("2" (use "card_lowset")
                          (("2" (expand* "tau" "weber")
                            (("2" (lemma "card_subset[below(N)]")
                              (("2" (inst-cp - "e2!1" "src_set!1")
                                (("2" (inst - "e1!1" "src_set!1")
                                  (("2" (assert)
                                    (("2" (assert)
                                      (("2"
                                        (invoke
                                         (then (case "%1 <= %2") (assert))
                                         (! 1 r)
                                         (! -1 r))
                                        (("2"
                                          (rewrite "card_subset")
                                          (("2"
                                            (hide-all-but (-7 -8 1))
                                            (("2"
                                              (expand*
                                               "subset?"
                                               "union"
                                               "member"
                                               "highset"
                                               "lowset")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst?)
                                                    (("2" (prop) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_reduce formula-decl nil reduce_properties nil)
    (lowset const-decl "finite_set[below(N)]" reduce_properties nil)
    (highset const-decl "finite_set[below(N)]" reduce_properties nil)
    (card_lowset formula-decl nil reduce_properties nil)
    (weber const-decl "tau_type" tau_declaration nil)
    (card_highset formula-decl nil reduce_properties nil)
    (pigeonhole formula-decl nil pigeonhole nil)
    (total_order? const-decl "bool" orders nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (vec type-eq-decl nil node nil)
    (min_reduce formula-decl nil reduce_properties nil))
   nil)
  (weber_overlap-1 nil 3377617870
   ("" (skosimp*)
    (("" (expand "intersection_majority?")
      (("" (use "card_intersection_le[below(N)]")
        (("" (flatten)
          (("" (rewrite "min_reduce")
            (("" (rewrite "max_reduce")
              ((""
                (typepred
                 "index(eligible1!1, f1!1)(tau(expected!1)(eligible1!1))")
                ((""
                  (typepred "index(eligible2!1, f2!1)
                                      (card[below(N)](eligible2!1) - 1 -
                                        tau(expected!1)(eligible2!1))")
                  (("" (expand "index_value")
                    (("" (flatten)
                      (("" (hide -1 -2 -4 -5 -6 -7)
                        (("" (expand* "tau" "tau_def" "maj")
                          (("" (assert)
                            (("" (assert)
                              (("" (hide -3 -4)
                                (("" (lemma "pigeonhole")
                                  ((""
                                    (invoke (inst - "%1" "%2") (! -2 l 1)
                                     (! -3 l 1))
                                    (("" (prop)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (rewrite "filter")
                                          (("1"
                                            (rewrite "filter")
                                            (("1"
                                              (expand ">=")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (invoke
                                           (then (case "%1 <= %2") (assert))
                                           (! 1 r)
                                           (! -1 r 1 1))
                                          (("2"
                                            (hide-all-but (-3 -4 1))
                                            (("2"
                                              (rewrite "card_subset")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "union")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (expand "filter")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pigeonhole formula-decl nil pigeonhole nil)
    (total_order? const-decl "bool" orders nil))
   nil)))


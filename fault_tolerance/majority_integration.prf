(majority_integration
 (consensus_validity 0
  (consensus_validity-1 nil 3399201792
   ("" (skosimp*)
    (("" (replace -1 :hide? t)
      (("" (expand "protocol")
        (("" (rewrite "majority_correct_rw")
          (("" (use "quorum_correct_integration")
            (("" (assert)
              (("" (use "consensus_validity")
                (("" (assert)
                  (("" (rewrite "majority_correct_rw")
                    (("" (expand "enabled_within?")
                      (("" (skosimp*)
                        (("" (expand "conforms")
                          (("" (use "scheduled_conform[N(i!1), N(1+i!1), T]")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (majority_correct_rw formula-decl nil comm_integration nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (message type-decl nil message_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (msg_checker nonempty-type-eq-decl nil comm_integration_stage nil)
    (valid_check_stage type-eq-decl nil comm_integration_stage nil)
    (valid_check_function type-eq-decl nil comm_integration nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (conforms const-decl "check_stage[N(i), N(i + 1), UT]" comm_integration
     nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "[nat -> posnat]" majority_integration nil)
    (T formal-nonempty-type-decl nil majority_integration nil)
    (enabled_within? const-decl "bool" exact_comm nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (scheduled_conform formula-decl nil comm_integration_stage nil)
    (majority_correct_rw formula-decl nil exact_comm nil)
    (check_function type-eq-decl nil node_functions nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix type-eq-decl nil node_functions nil)
    (rcvd const-decl "[below(N(i + 1)) -> [below(N(i)) -> UT]]"
     comm_integration nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec type-eq-decl nil node_functions nil)
    (consensus_validity formula-decl nil majority nil)
    (mid const-decl "tau_type" exact_comm nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (quorum_correct_integration formula-decl nil comm_integration nil)
    (protocol const-decl "bool" protocol_integration nil))
   nil))
 (agreement_generation 0
  (agreement_generation-1 nil 3399201811
   ("" (skosimp*)
    (("" (replace -1 :hide? t)
      (("" (expand "protocol")
        (("" (expand "exists_all_symmetric?")
          (("" (use "all_symmetric_integration")
            (("" (assert)
              (("" (use "agreement_generation")
                (("" (assert)
                  (("" (expand "exists_all_symmetric?" -1)
                    (("" (prop)
                      (("" (expand "enabled_within?")
                        (("" (skosimp*)
                          (("" (expand "conforms")
                            ((""
                              (use "scheduled_conform[N(i!1), N(1+i!1), T]")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exists_all_symmetric? const-decl "bool" comm_integration nil)
    (scheduled_conform formula-decl nil comm_integration_stage nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (enabled_within? const-decl "bool" exact_comm nil)
    (exists_all_symmetric? const-decl "bool" exact_comm nil)
    (check_function type-eq-decl nil node_functions nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix type-eq-decl nil node_functions nil)
    (rcvd const-decl "[below(N(i + 1)) -> [below(N(i)) -> UT]]"
     comm_integration nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec type-eq-decl nil node_functions nil)
    (agreement_generation formula-decl nil majority nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (message type-decl nil message_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (garbled? adt-recognizer-decl "[message -> boolean]" message_adt nil)
    (garbled adt-constructor-decl "(garbled?)" message_adt nil)
    (msg_checker nonempty-type-eq-decl nil comm_integration_stage nil)
    (valid_check_stage type-eq-decl nil comm_integration_stage nil)
    (valid_check_function type-eq-decl nil comm_integration nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (conforms const-decl "check_stage[N(i), N(i + 1), UT]" comm_integration
     nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (mid const-decl "tau_type" exact_comm nil)
    (T formal-nonempty-type-decl nil majority_integration nil)
    (N formal-const-decl "[nat -> posnat]" majority_integration nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (all_symmetric_integration formula-decl nil comm_integration nil)
    (protocol const-decl "bool" protocol_integration nil))
   nil)))


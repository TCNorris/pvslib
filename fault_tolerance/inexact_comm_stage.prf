(inexact_comm_stage
 (majority_lower_rw 0
  (majority_lower_rw-2 nil 3398098770
   ("" (expand "majority_lower?")
    (("" (expand "quorum_lower?")
      (("" (skosimp*) (("" (rewrite "majority") nil nil)) nil)) nil))
    nil)
   ((quorum_lower? const-decl "bool" inexact_comm_stage nil)
    (majority formula-decl nil fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil)
    (majority_lower? const-decl "bool" inexact_comm_stage nil))
   nil)
  (majority_lower_rw-1 nil 3397765633
   ("" (expand "majority_lower?")
    (("" (expand "generalized_majority_lower?")
      (("" (skosimp*) (("" (rewrite "simple_majority") nil nil)) nil)) nil))
    nil)
   ((check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil))
   shostak))
 (majority_upper_rw 0
  (majority_upper_rw-2 nil 3398098795
   ("" (skosimp*)
    (("" (expand "majority_upper?")
      (("" (expand "quorum_upper?") (("" (rewrite "majority") nil nil)) nil))
      nil))
    nil)
   ((majority_upper? const-decl "bool" inexact_comm_stage nil)
    (majority formula-decl nil fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil)
    (quorum_upper? const-decl "bool" inexact_comm_stage nil))
   nil)
  (majority_upper_rw-1 nil 3397765788
   ("" (skosimp*)
    (("" (expand "majority_upper?")
      (("" (expand "generalized_majority_upper?")
        (("" (rewrite "simple_majority") nil nil)) nil))
      nil))
    nil)
   ((check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil))
   shostak))
 (quorum_accuracy 0
  (quorum_accuracy-2 nil 3398099077
   ("" (skosimp*)
    (("" (split)
      (("1" (expand "quorum_lower?")
        (("1" (expand "quorum_accuracy?")
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "quorum_accuracy?")
        (("2" (expand "quorum_upper?")
          (("2" (skosimp*) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_accuracy? const-decl "bool" inexact_comm_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (quorum_lower? const-decl "bool" inexact_comm_stage nil)
    (quorum_upper? const-decl "bool" inexact_comm_stage nil))
   nil)
  (quorum_accuracy-1 nil 3398099028
   (";;; Proof for formula inexact_comm_stage.generalized_majority_accuracy"
    (skosimp*)
    ((";;; Proof for formula inexact_comm_stage.generalized_majority_accuracy"
      (split)
      (("1" (expand "generalized_majority_lower?")
        (("1" (expand "generalized_majority_accuracy?")
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil)))))))))
       ("2" (expand "generalized_majority_accuracy?")
        (("2" (expand "generalized_majority_upper?")
          (("2" (skosimp*) (("2" (inst?) (("2" (assert) nil))))))))))))
    "")
   nil nil))
 (majority_accuracy 0
  (majority_accuracy-1 nil 3397761911
   ("" (skosimp*)
    (("" (split)
      (("1" (expand "majority_lower?")
        (("1" (expand "majority_accuracy?")
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "majority_accuracy?")
        (("2" (expand "majority_upper?")
          (("2" (skosimp*) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_accuracy? const-decl "bool" inexact_comm_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (majority_lower? const-decl "bool" inexact_comm_stage nil)
    (majority_upper? const-decl "bool" inexact_comm_stage nil))
   shostak))
 (majority_accuracy_rw 0
  (majority_accuracy_rw-1 nil 3397765811
   ("" (skosimp*)
    (("" (expand "quorum_accuracy?")
      (("" (expand "majority_accuracy?") (("" (rewrite "majority") nil nil))
        nil))
      nil))
    nil)
   ((quorum_accuracy? const-decl "bool" inexact_comm_stage nil)
    (majority formula-decl nil fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil)
    (majority_accuracy? const-decl "bool" inexact_comm_stage nil))
   shostak))
 (quorum_imprecision_nonempty 0
  (quorum_imprecision_nonempty-1 nil 3403958215
   ("" (skosimp*)
    (("" (expand "quorum_imprecision?")
      (("" (skosimp*) (("" (forward-chain "quorum_nonempty") nil nil)) nil))
      nil))
    nil)
   ((quorum_imprecision? const-decl "bool" inexact_comm_stage nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil))
   shostak))
 (majority_imprecision_rw 0
  (majority_imprecision_rw-3 nil 3398098906
   ("" (expand "majority_imprecision?")
    (("" (expand "quorum_imprecision?")
      (("" (skosimp*) (("" (rewrite "majority") nil nil)) nil)) nil))
    nil)
   ((quorum_imprecision? const-decl "bool" inexact_comm_stage nil)
    (majority formula-decl nil fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil)
    (majority_imprecision? const-decl "bool" inexact_comm_stage nil))
   nil)
  (majority_imprecision_rw-2 nil 3398098852
   ("" (skosimp*)
    (("" (expand "quorum_imprecision?")
      (("" (expand "majority_imprecision?")
        (("" (rewrite "simple_majority") nil nil)) nil))
      nil))
    nil)
   ((rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil))
   nil)
  (majority_imprecision_rw-1 nil 3397765834
   ("" (skosimp*)
    (("" (expand "generalized_majority_imprecision?")
      (("" (expand "majority_imprecision?")
        (("" (rewrite "simple_majority") nil nil)) nil))
      nil))
    nil)
   ((rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil))
   shostak))
 (correct_imprecision 0
  (correct_imprecision-2 nil 3397746661
   ("" (expand "correct_imprecision?")
    (("" (expand "correct_upper_inaccuracy?")
      (("" (expand "correct_lower_inaccuracy?")
        (("" (skosimp*)
          (("" (inst-cp - "d2!1" "s2!1")
            (("" (inst - "d1!1" "s1!1")
              (("" (inst-cp - "d2!1" "s2!1")
                (("" (inst - "d1!1" "s1!1")
                  (("" (prop)
                    (("" (expand "abs")
                      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_upper_inaccuracy? const-decl "bool" inexact_comm_stage nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (correct_lower_inaccuracy? const-decl "bool" inexact_comm_stage nil)
    (correct_imprecision? const-decl "bool" inexact_comm_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (correct_imprecision-1 nil 3397746449
   ("" (skosimp*)
    (("" (expand "lower_correct_inaccuracy?")
      (("" (expand "upper_correct_inaccuracy?")
        (("" (expand "correct_imprecision?")
          (("" (skosimp*)
            (("" (inst - "d2!1" "s2!1")
              (("" (inst - "d1!1" "s1!1")
                (("" (assert)
                  (("" (assert)
                    (("" (expand "abs") (("" (postpone) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rcvd_diameter 0
  (rcvd_diameter-1 nil 3397746717
   ("" (expand "rcvd_diameter?")
    (("" (expand "correct_imprecision?")
      (("" (expand "diameter?")
        (("" (expand "enabled_within?")
          (("" (expand "subset?")
            (("" (expand "member")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (inst - "d2!1" "s2!1")
                    (("" (inst - "s1!1" "s2!1")
                      (("" (inst-cp - "d1!1" "s1!1")
                        (("" (inst - "d2!1" "s2!1")
                          (("" (prop)
                            (("" (expand "abs")
                              (("" (lift-if) (("" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (correct_imprecision? const-decl "bool" inexact_comm_stage nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_comm_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" inexact_comm_stage nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (subset? const-decl "bool" sets nil)
    (diameter? const-decl "bool" inexact_comm_stage nil)
    (rcvd_diameter? const-decl "bool" inexact_comm_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))


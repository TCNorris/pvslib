(timing_window
 (timing_conforms_def 0
  (timing_conforms_def-1 nil 3310129453
   ("" (skosimp*)
    (("" (rewrite "abs_max")
      (("" (rewrite "max_le")
        (("" (expand "timing_conforms?")
          (("" (prop)
            (("1" (lemma "clock_increasing")
              (("1"
                (inst - "Timestamp(c!1, ev!1)" "T!1 - Delta_max(skew!1)"
                 "c!1")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (lemma "clock_increasing")
              (("2"
                (inst - "Delta_max(skew!1) + T!1" "Timestamp(c!1, ev!1)"
                 "c!1")
                (("2" (assert) nil nil)) nil))
              nil)
             ("3" (rewrite "clock_nondecreasing") nil nil)
             ("4" (rewrite "clock_nondecreasing") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_max formula-decl nil abs_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_window nil)
    (rate const-decl "posreal" physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (integer nonempty-type-from-decl nil integers nil)
    (min_latency formal-const-decl "nonneg_real" timing_window nil)
    (var_latency formal-const-decl "nonneg_real" timing_window nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (timing_conforms? const-decl "bool" timing_window nil)
    (clock_nondecreasing formula-decl nil physical_clocks nil)
    (clock_increasing formula-decl nil physical_clocks nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (max_le formula-decl nil minmax_ineq nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Delta_max const-decl "nat" timing_window nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (good_range_always_conforms 0
  (good_range_always_conforms-2 nil 3351527353
   ("" (skosimp*)
    (("" (rewrite "timing_conforms_def")
      (("" (expand "Delta_max")
        (("" (rewrite "le_floor_r")
          (("" (factor 1 r)
            (("" (div-by 1 "rate")
              (("" (use "link_abs_bound")
                (("" (assert)
                  (("" (use "abs_drift_lb")
                    (("" (lemma "triangle")
                      (("" (invoke (inst - "%1" "%2") (! -3 l 1) (! -5 l 1))
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (timing_conforms_def formula-decl nil timing_window nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_window nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (max_error const-decl "posreal" timing_imprecision nil)
    (var_latency formal-const-decl "nonneg_real" timing_window nil)
    (min_latency formal-const-decl "nonneg_real" timing_window nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (le_floor_r formula-decl nil floor_ceiling_ineq nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs_drift_lb formula-decl nil physical_clocks nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (link_abs_bound formula-decl nil timing_imprecision nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Delta_max const-decl "nat" timing_window nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (good_range_always_conforms-1 nil 3351512334
   ("" (skosimp*)
    (("" (forward-chain "good_range_is_good_event")
      (("" (rewrite "timing_conforms_def")
        (("" (lemma "good_event_lem")
          (("" (assert)
            (("" (inst - "T!1" "c1!1" "c2!1" "ev!1" "skew!1")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rate const-decl "posreal" physical_clocks nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil))
   nil))
 (good_range_inner_window 0
  (good_range_inner_window-1 nil 3373808691
   ("" (expand "inner_window?")
    (("" (skosimp*)
      (("" (forward-chain "good_range_always_conforms") nil nil)) nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_window nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (good_range_always_conforms formula-decl nil timing_window nil)
    (inner_window? const-decl "bool" timing_window nil))
   shostak)))


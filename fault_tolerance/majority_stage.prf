(majority_stage
 (majority_at_destination 0
  (majority_at_destination-1 nil 3397906248
   ("" (expand "majority_correct?")
    (("" (skosimp*)
      (("" (expand "majority?" -)
        (("" (inst?)
          (("" (rewrite "simple_majority_subset")
            (("" (use "uniform_majority")
              (("" (prop)
                (("" (hide -2 2)
                  (("" (lemma "correct_uniform")
                    (("" (inst?)
                      (("" (assert)
                        (("" (inst - "sent!1" "src_set!1")
                          (("" (prop) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (uniform_majority formula-decl nil majority_properties nil)
    (nodeid_set type-eq-decl nil node nil) (vec type-eq-decl nil node nil)
    (intersection const-decl "set" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (correct_uniform formula-decl nil exact_comm_stage nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (T formal-nonempty-type-decl nil majority_stage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (simple_majority_subset formula-decl nil pigeonhole nil)
    (majority? const-decl "bool" fault_assumptions_stage nil)
    (majority_correct? const-decl "bool" exact_comm_stage nil))
   nil))
 (majority_validity 0
  (majority_validity-3 nil 3495215146
   ("" (skosimp*)
    (("" (use "majority_at_destination")
      (("" (prop)
        (("" (expand "majority_vote")
          (("" (rewrite "majority_validity") nil nil)) nil))
        nil))
      nil))
    nil)
   ((majority_at_destination formula-decl nil majority_stage nil)
    (T formal-nonempty-type-decl nil majority_stage nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (majority_vote const-decl "T" majority_stage nil)
    (vec type-eq-decl nil node nil)
    (majority_function type-eq-decl nil finite_seqs nil)
    (is_majority const-decl "bool" majority_seq structures)
    (maj_exists const-decl "bool" majority_seq structures)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (nodeid_set type-eq-decl nil node nil)
    (majority_validity formula-decl nil majority_properties nil))
   nil)
  (majority_validity-2 nil 3495206562
   ("" (skosimp*)
    (("" (use "majority_at_destination")
      (("" (prop)
        (("" (expand "majority_vote")
          (("" (rewrite "majority_validity2") nil nil)) nil))
        nil))
      nil))
    nil)
   ((nodeid_set type-eq-decl nil node nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (vec type-eq-decl nil node nil))
   nil)
  (majority_validity-1 nil 3397734472
   ("" (skosimp*)
    (("" (use "majority_at_destination")
      (("" (prop)
        (("" (expand "majority_voter")
          (("" (rewrite "majority_validity") nil nil)) nil))
        nil))
      nil))
    nil)
   ((vec type-eq-decl nil node nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (nodeid_set type-eq-decl nil node nil)
    (majority_validity formula-decl nil majority_properties nil))
   nil))
 (consensus_validity 0
  (consensus_validity-1 nil 3397478720
   ("" (skosimp*)
    (("" (rewrite "uniform?" +)
      (("" (skosimp*)
        (("" (use "majority_validity") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((uniform? const-decl "bool" node nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec type-eq-decl nil node nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (majority_vote const-decl "T" majority_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nodeid_set type-eq-decl nil node nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (T formal-nonempty-type-decl nil majority_stage nil)
    (majority_validity formula-decl nil majority_stage nil))
   nil))
 (agreement_generation_alt 0
  (agreement_generation_alt-1 nil 3397478742
   ("" (expand "all_symmetric?")
    (("" (skosimp*)
      (("" (expand "majority_vote")
        (("" (lemma "enabled_agree")
          (("" (inst - _ "d1!1" "d2!1" _ _)
            (("" (inst?)
              (("" (assert)
                (("" (replace -1 :hide? t)
                  (("" (use "agreement_generation")
                    (("" (assert)
                      (("" (expand "enabled_symmetric?")
                        (("" (expand "exact_single_denotation?")
                          (("" (skosimp*)
                            (("" (inst?)
                              (("" (expand "enabled_within?")
                                (("" (expand "subset?")
                                  (("" (expand "member")
                                    (("" (inst?) (("" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil majority_stage nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled_agree formula-decl nil fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (exact_single_denotation? const-decl "bool" exact_comm_stage nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (enabled_symmetric? const-decl "bool" node nil)
    (nodeid_set type-eq-decl nil node nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (vec type-eq-decl nil node nil)
    (agreement_generation formula-decl nil majority_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (majority_vote const-decl "T" majority_stage nil)
    (all_symmetric? const-decl "bool" exact_comm_stage nil))
   nil))
 (agreement_generation 0
  (agreement_generation-1 nil 3397478757
   ("" (skosimp*)
    (("" (typepred "dst_set!1")
      (("" (hide -1)
        (("" (expand* "empty?" "member")
          (("" (skosimp*)
            (("" (inst + "majority_vote(mf!1)(rcvd!1, check!1)(x!1)")
              (("" (expand "uniform?")
                (("" (skosimp*)
                  (("" (use "agreement_generation_alt")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil majority_stage nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (majority_vote const-decl "T" majority_stage nil)
    (agreement_generation_alt formula-decl nil majority_stage nil)
    (uniform? const-decl "bool" node nil))
   nil))
 (faulty_source 0
  (faulty_source-1 nil 3397731711
   ("" (skosimp*)
    (("" (lemma "majority_validity")
      (("" (inst - _ _ _ _ _ _ "v!1")
        (("" (inst?)
          (("" (inst?)
            (("" (prop)
              (("1" (replace -1 :hide? t)
                (("1" (expand "majority_correct_element?")
                  (("1" (skosimp*)
                    (("1" (expand "exact_correct_denotation?")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (expand "uniform?")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "enabled_within?")
                                  (("1" (expand "subset?")
                                    (("1" (expand "member")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "majority_correct_element?")
                (("2" (skosimp*)
                  (("2" (expand "majority_correct?")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_validity formula-decl nil majority_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (is_majority const-decl "bool" majority_seq structures)
    (majority_function type-eq-decl nil finite_seqs nil)
    (majority_correct_element? const-decl "bool" exact_comm_stage nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (uniform? const-decl "bool" node nil)
    (majority_correct? const-decl "bool" exact_comm_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil majority_stage nil))
   shostak))
 (sources_disagree 0
  (sources_disagree-1 nil 3397730508
   ("" (skosimp*)
    (("" (use "majority_at_destination")
      (("" (assert)
        (("" (rewrite "is_majority")
          (("" (expand "majority_exists?")
            (("" (expand "maj_exists") (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_at_destination formula-decl nil majority_stage nil)
    (T formal-nonempty-type-decl nil majority_stage nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_majority formula-decl nil majority_properties nil)
    (nodeid_set type-eq-decl nil node nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (vec type-eq-decl nil node nil)
    (maj_exists const-decl "bool" majority_seq structures)
    (majority_exists? const-decl "bool" majority_properties nil))
   shostak))
 (asymmetric_source 0
  (asymmetric_source-1 nil 3397736114
   ("" (skosimp*)
    (("" (use "agreement_generation")
      (("" (assert)
        (("" (prop)
          (("" (hide 2)
            (("" (expand "all_symmetric?")
              (("" (rewrite "exists_not")
                (("" (expand "symmetric_source?")
                  (("" (inst - 0)
                    (("1" (skosimp*)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((agreement_generation formula-decl nil majority_stage nil)
    (majority_function type-eq-decl nil finite_seqs nil)
    (is_majority const-decl "bool" majority_seq structures)
    (maj_exists const-decl "bool" majority_seq structures)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil majority_stage nil)
    (S formal-const-decl "posnat" majority_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" majority_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (all_symmetric? const-decl "bool" exact_comm_stage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exists_not formula-decl nil quantifier_props nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (symmetric_source? const-decl "bool" exact_comm_stage nil))
   shostak)))


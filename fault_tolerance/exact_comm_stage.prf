(exact_comm_stage
 (correct_uniform 0
  (correct_uniform-1 nil 3408881223
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil exact_comm_stage nil)
    (D formal-const-decl "posnat" exact_comm_stage nil)
    (S formal-const-decl "posnat" exact_comm_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil)
    (uniform? const-decl "bool" node nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil))
   nil))
 (correct_uniform_alt 0
  (correct_uniform_alt-1 nil 3408881254
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (inst?) (("" (assert) (("" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil exact_comm_stage nil)
    (D formal-const-decl "posnat" exact_comm_stage nil)
    (S formal-const-decl "posnat" exact_comm_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil)
    (enabled? const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (uniform? const-decl "bool" node nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil))
   nil))
 (majority_correct_rw 0
  (majority_correct_rw-1 nil 3399302787
   ("" (skosimp*)
    (("" (iff)
      (("" (expand "majority_correct?")
        (("" (expand "quorum_correct?")
          (("" (prop)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (assert) (("1" (rewrite "majority") nil nil)) nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst?)
                (("2" (assert) (("2" (rewrite "majority") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_correct? const-decl "bool" exact_comm_stage nil)
    (T formal-nonempty-type-decl nil exact_comm_stage nil)
    (D formal-const-decl "posnat" exact_comm_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (majority formula-decl nil fault_assumptions_stage nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" exact_comm_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (majority_correct? const-decl "bool" exact_comm_stage nil))
   nil)))


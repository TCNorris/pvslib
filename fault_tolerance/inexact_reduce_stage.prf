(inexact_reduce_stage
 (reduce_lower_validity 0
  (reduce_lower_validity-4 nil 3398099160
   ("" (expand "quorum_lower?")
    (("" (skosimp*)
      (("" (use "quorum_nonempty")
        (("" (assert)
          (("" (expand "quorum?")
            (("" (inst - "d!1")
              (("" (expand "enabled_nonempty?")
                (("" (inst?)
                  (("" (expand "correct_lower_inaccuracy?")
                    (("" (inst?)
                      (("" (expand "reduce_choice")
                        (("" (use "choice_lower_validity")
                          (("" (assert)
                            (("" (skosimp*)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (choice_lower_validity formula-decl nil reduce_properties nil)
    (vec type-eq-decl nil node nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (correct_lower_inaccuracy? const-decl "bool" inexact_comm_stage nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_lower? const-decl "bool" inexact_comm_stage nil))
   nil)
  (reduce_lower_validity-3 nil 3377342922
   ("" (expand "generalized_majority_lower?")
    (("" (skosimp*)
      (("" (expand "generalized_majority?")
        (("" (inst - "d!1")
          (("" (expand "generalized_majority?")
            (("" (flatten)
              (("" (expand "correct_lower_inaccuracy?")
                (("" (inst?)
                  (("" (expand "reduce_select")
                    (("" (assert)
                      (("" (use "min_reduce_min")
                        (("" (use "min_validity")
                          (("" (assert)
                            (("" (skosimp*)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (correct_lower_inaccuracy? const-decl "bool" inexact_comm_stage nil))
   nil)
  (reduce_lower_validity-2 nil 3377017892
   ("" (skosimp*)
    (("" (expand "tau_majority?")
      (("" (flatten)
        (("" (inst?)
          (("" (expand "lower_correct_denotation?")
            (("" (inst?)
              (("" (expand "reduce_select")
                (("" (expand "eligible_nonempty?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (use "min_reduce_min")
                        (("" (use "min_validity")
                          (("" (assert)
                            (("" (skosimp*)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil))
   nil)
  (reduce_lower_validity-1 nil 3377017115
   ("" (skosimp*)
    (("" (expand "tau_majority?")
      (("" (flatten)
        (("" (inst?)
          (("" (expand "lower_correct_denotation?")
            (("" (inst?)
              (("" (expand "reduce_select")
                (("" (expand "eligible_nonempty?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (use "min_validity")
                        (("" (assert)
                          (("" (skosimp*)
                            (("" (inst?)
                              (("" (assert)
                                (("" (inst?)
                                  (("" (assert) (("" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (reduce_upper_validity 0
  (reduce_upper_validity-3 nil 3398099179
   ("" (expand "quorum_upper?")
    (("" (skosimp*)
      (("" (use "quorum_nonempty")
        (("" (assert)
          (("" (expand "quorum?")
            (("" (inst?)
              (("" (expand "enabled_nonempty?")
                (("" (inst?)
                  (("" (expand "reduce_choice")
                    (("" (assert)
                      (("" (expand "correct_upper_inaccuracy?")
                        (("" (inst?)
                          (("" (assert)
                            (("" (use "choice_upper_validity")
                              (("" (assert)
                                (("" (skosimp*)
                                  (("" (inst?)
                                    (("" (inst?) (("" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (choice_upper_validity formula-decl nil reduce_properties nil)
    (vec type-eq-decl nil node nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (correct_upper_inaccuracy? const-decl "bool" inexact_comm_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_upper? const-decl "bool" inexact_comm_stage nil))
   nil)
  (reduce_upper_validity-2 nil 3377342941
   ("" (expand "generalized_majority_upper?")
    (("" (expand "generalized_majority?")
      (("" (expand "generalized_majority?")
        (("" (skosimp*)
          (("" (inst - "d!1")
            (("" (flatten)
              (("" (expand "reduce_select")
                (("" (assert)
                  (("" (expand "correct_upper_inaccuracy?")
                    (("" (inst?)
                      (("" (assert)
                        (("" (use "max_reduce_max")
                          (("" (use "max_validity")
                            (("" (assert)
                              (("" (skosimp*)
                                (("" (inst?)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (correct_upper_inaccuracy? const-decl "bool" inexact_comm_stage nil))
   nil)
  (reduce_upper_validity-1 nil 3377018207
   ("" (skosimp*)
    (("" (expand "tau_majority?")
      (("" (flatten)
        (("" (inst?)
          (("" (expand "eligible_nonempty?")
            (("" (inst?)
              (("" (expand "reduce_select")
                (("" (assert)
                  (("" (expand "upper_correct_denotation?")
                    (("" (inst?)
                      (("" (assert)
                        (("" (use "max_reduce_max")
                          (("" (use "max_validity")
                            (("" (assert)
                              (("" (skosimp*)
                                (("" (inst?)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (reduce_master_slave 0
  (reduce_master_slave-2 nil 3398099204
   ("" (skosimp*)
    (("" (forward-chain "quorum_accuracy")
      (("" (use "reduce_lower_validity")
        (("" (use "reduce_upper_validity")
          (("" (assert)
            (("" (skosimp*)
              (("" (expand "diameter?")
                (("" (inst-cp - "s!1" "s!2")
                  (("" (inst - "s!3" "s!1")
                    (("" (assert)
                      (("" (expand "enabled_within?")
                        (("" (inst?)
                          (("" (expand "subset?")
                            (("" (expand "member")
                              (("" (inst-cp - "s!2")
                                (("" (inst - "s!3")
                                  (("" (prop)
                                    (("" (assert)
                                      ((""
                                        (expand "abs")
                                        ((""
                                          (lift-if)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_accuracy formula-decl nil inexact_comm_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (reduce_upper_validity formula-decl nil inexact_reduce_stage nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (subset? const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (diameter? const-decl "bool" inexact_comm_stage nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (reduce_lower_validity formula-decl nil inexact_reduce_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (reduce_master_slave-1 nil 3377018342
   ("" (skosimp*)
    (("" (forward-chain "generalized_majority_accuracy")
      (("" (use "reduce_lower_validity")
        (("" (use "reduce_upper_validity")
          (("" (assert)
            (("" (skosimp*)
              (("" (expand "diameter?")
                (("" (inst-cp - "s!1" "s!2")
                  (("" (inst - "s!3" "s!1")
                    (("" (assert)
                      (("" (expand "enabled_within?")
                        (("" (inst?)
                          (("" (expand "subset?")
                            (("" (expand "member")
                              (("" (inst-cp - "s!2")
                                (("" (inst - "s!3")
                                  (("" (prop)
                                    (("" (assert)
                                      ((""
                                        (expand "abs")
                                        ((""
                                          (lift-if)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (diameter? const-decl "bool" inexact_comm_stage nil))
   nil))
 (reduce_agreement_propagation 0
  (reduce_agreement_propagation-3 nil 3398099225
   ("" (expand "quorum_imprecision?")
    (("" (skosimp*)
      (("" (use "quorum_nonempty")
        (("" (assert)
          (("" (expand "quorum?")
            (("" (inst-cp - "d1!1")
              (("" (inst - "d2!1")
                (("" (expand "enabled_nonempty?")
                  (("" (inst-cp - "d1!1")
                    (("" (inst - "d2!1")
                      (("" (expand "reduce_choice")
                        (("" (expand "reduce_choice")
                          (("" (assert)
                            (("" (use "rcvd_diameter")
                              (("" (assert)
                                (("" (lemma "min_validity")
                                  (("" (inst - _ _ _ "rcvd!1(d2!1)")
                                    (("" (inst?)
                                      ((""
                                        (assert)
                                        ((""
                                          (hide -4)
                                          ((""
                                            (lemma "max_validity")
                                            ((""
                                              (inst - _ _ _ "rcvd!1(d1!1)")
                                              ((""
                                                (inst?)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (hide -5)
                                                    ((""
                                                      (skosimp*)
                                                      ((""
                                                        (expand
                                                         "rcvd_diameter?")
                                                        ((""
                                                          (inst
                                                           -
                                                           "d1!1"
                                                           "d2!1"
                                                           "n!1"
                                                           "n!2")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (reduce_choice const-decl "T" reduce_properties nil)
    (rcvd_diameter formula-decl nil inexact_comm_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (min_validity formula-decl nil reduce_properties nil)
    (<= const-decl "bool" reals nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (max_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (min_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (rcvd_diameter? const-decl "bool" inexact_comm_stage nil)
    (max_validity formula-decl nil reduce_properties nil)
    (vec type-eq-decl nil node nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_imprecision? const-decl "bool" inexact_comm_stage nil))
   nil)
  (reduce_agreement_propagation-2 nil 3377342964
   ("" (expand "generalized_majority_imprecision?")
    (("" (skosimp*)
      (("" (expand "generalized_majority?")
        (("" (inst-cp - "d1!1")
          (("" (inst - "d2!1")
            (("" (expand "generalized_majority?")
              (("" (expand "reduce_select")
                (("" (flatten)
                  (("" (assert)
                    (("" (use "rcvd_diameter")
                      (("" (assert)
                        (("" (lemma "min_validity")
                          (("" (inst - _ _ "rcvd!1(d2!1)" _)
                            (("" (inst?)
                              (("" (assert)
                                (("" (hide -4)
                                  (("" (lemma "max_validity")
                                    (("" (inst - _ _ "rcvd!1(d1!1)" _)
                                      ((""
                                        (inst?)
                                        ((""
                                          (assert)
                                          ((""
                                            (hide -5)
                                            ((""
                                              (skosimp*)
                                              ((""
                                                (expand "rcvd_diameter?")
                                                ((""
                                                  (inst
                                                   -
                                                   "d1!1"
                                                   "d2!1"
                                                   "i!1"
                                                   "i!2")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (use "max_reduce_max")
                                                      ((""
                                                        (lemma
                                                         "min_reduce_min")
                                                        ((""
                                                          (inst
                                                           -
                                                           _
                                                           "rcvd!1(d2!1)"
                                                           _
                                                           _)
                                                          ((""
                                                            (inst?)
                                                            ((""
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rcvd_diameter formula-decl nil inexact_comm_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (rcvd_diameter? const-decl "bool" inexact_comm_stage nil)
    (finite_difference application-judgement "finite_set" finite_sets nil))
   nil)
  (reduce_agreement_propagation-1 nil 3377018393
   ("" (skosimp*)
    (("" (expand "tau_majority?")
      (("" (flatten)
        (("" (inst-cp - "d1!1")
          (("" (inst - "d2!1")
            (("" (expand "eligible_nonempty?")
              (("" (inst-cp - "d1!1")
                (("" (inst - "d2!1")
                  (("" (expand "reduce_select")
                    (("" (assert)
                      (("" (use "inexact_agreement")
                        (("" (assert)
                          (("" (lemma "min_validity")
                            (("" (inst - _ _ "rcvd!1(d2!1)" _)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (hide -3)
                                    (("" (lemma "max_validity")
                                      ((""
                                        (inst - _ _ "rcvd!1(d1!1)" _)
                                        ((""
                                          (inst?)
                                          ((""
                                            (assert)
                                            ((""
                                              (hide -4)
                                              ((""
                                                (skosimp*)
                                                ((""
                                                  (expand
                                                   "inexact_agreement?")
                                                  ((""
                                                    (inst
                                                     -
                                                     "d1!1"
                                                     "d2!1"
                                                     "i!1"
                                                     "i!2")
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (use "max_reduce_max")
                                                        ((""
                                                          (lemma
                                                           "min_reduce_min")
                                                          ((""
                                                            (inst
                                                             -
                                                             _
                                                             "rcvd!1(d2!1)"
                                                             _
                                                             _)
                                                            ((""
                                                              (inst?)
                                                              ((""
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil))
 (convergence_overlap 0
  (convergence_overlap-1 nil 3403638221
   ("" (skosimp*)
    (("" (expand "overlap?")
      (("" (expand "overlap_imprecision?")
        (("" (skosimp*)
          (("" (expand "reduce_overlap?")
            (("" (expand "reduce_choice")
              (("" (expand "reduce_choice")
                (("" (inst?)
                  (("" (inst - "d2!1")
                    (("" (skosimp*)
                      (("" (lift-if)
                        (("" (expand "empty?")
                          (("" (expand "member")
                            (("" (prop)
                              (("1" (inst?) nil nil)
                               ("2" (lift-if)
                                (("2" (prop)
                                  (("1" (inst?) nil nil)
                                   ("2" (hide 1 3)
                                    (("2" (expand "single_imprecision?")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst - "d2!1")
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((overlap? const-decl "bool" inexact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty? const-decl "bool" sets nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (single_imprecision? const-decl "bool" inexact_comm_stage nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (max_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (member const-decl "bool" sets nil)
    (reduce_choice const-decl "T" reduce_properties nil)
    (reduce_overlap? const-decl "bool" reduce_choice nil)
    (overlap_imprecision? const-decl "bool" inexact_reduce_stage nil))
   nil))
 (reduce_convergence 0
  (reduce_convergence-3 "" 3790104985
   ("" (skosimp*)
    (("" (lemma "reduce_agreement_propagation")
      (("" (inst - "max" "min" _ "d1!1" "d2!1" _ _ _ _ _ _)
        (("" (inst?)
          (("" (inst?)
            (("" (assert)
              (("" (expand "quorum_imprecision?")
                (("" (skosimp*)
                  (("" (forward-chain "quorum_nonempty")
                    (("" (forward-chain "convergence_overlap")
                      (("" (expand "overlap?")
                        (("" (inst - "d1!1" "d2!1")
                          (("" (expand "enabled_nonempty?")
                            (("" (inst-cp - "d1!1")
                              (("" (inst - "d2!1")
                                (("" (expand "reduce_choice")
                                  (("" (expand "reduce_choice")
                                    (("" (assert)
                                      ((""
                                        (hide -3 -4 -5 -6 -7 1 2)
                                        ((""
                                          (expand "convergent?")
                                          ((""
                                            (inst?)
                                            ((""
                                              (assert)
                                              ((""
                                                (hide-all-but 1)
                                                ((""
                                                  (rewrite
                                                   "reduce_length[S,real,<=]")
                                                  ((""
                                                    (lemma "max_length_bound")
                                                    ((""
                                                      (inst?)
                                                      ((""
                                                        (inst-cp - "d1!1")
                                                        ((""
                                                          (inst - "d2!1")
                                                          ((""
                                                            (expand "M" -)
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (rewrite
                                                                 "reduce_length[S,real,<=]")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (reduce_convergence-2 nil 3403638272
   ("" (skosimp*)
    (("" (lemma "reduce_agreement_propagation")
      (("" (inst - "max" "min" _ "d1!1" "d2!1" _ _ _ _ _ _)
        (("1" (inst?)
          (("1" (inst?)
            (("1" (assert)
              (("1" (expand "quorum_imprecision?")
                (("1" (skosimp*)
                  (("1" (forward-chain "quorum_nonempty")
                    (("1" (forward-chain "convergence_overlap")
                      (("1" (expand "overlap?")
                        (("1" (inst - "d1!1" "d2!1")
                          (("1" (expand "enabled_nonempty?")
                            (("1" (inst-cp - "d1!1")
                              (("1" (inst - "d2!1")
                                (("1" (expand "reduce_choice")
                                  (("1" (expand "reduce_choice")
                                    (("1" (assert)
                                      (("1"
                                        (hide -3 -4 -5 -6 -7 1 2)
                                        (("1"
                                          (expand "convergent?")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (rewrite
                                                   "reduce_length[S,real,<=]")
                                                  (("1"
                                                    (lemma "max_length_bound")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst-cp - "d1!1")
                                                        (("1"
                                                          (inst - "d2!1")
                                                          (("1"
                                                            (expand "M" -)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "reduce_length[S,real,<=]")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) (("2" (rewrite "min_le_max") nil nil)) nil)
         ("3" (assert)
          (("3" (skosimp*)
            (("3" (assert) (("3" (rewrite "min_le_max") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce_agreement_propagation formula-decl nil inexact_reduce_stage nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence_overlap formula-decl nil inexact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" real_finite_sequences nil)
    (reduce_length formula-decl nil reduce_properties nil)
    (M const-decl "nat" reduce_choice nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (max_length_bound formula-decl nil reduce_choice nil)
    (vec type-eq-decl nil node nil)
    (reduce const-decl "ne_seqs" reduce_properties nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (nnreal type-eq-decl nil real_types nil)
    (reduce_choice const-decl "T" reduce_properties nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (overlap? const-decl "bool" inexact_reduce_stage nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_imprecision? const-decl "bool" inexact_comm_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures) (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (max_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (min_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil))
   nil)
  (reduce_convergence-1 nil 3403631989
   ("" (skosimp*)
    (("" (lemma "reduce_agreement_propagation")
      (("" (inst - "max" "min" _ "d1!1" "d2!1" _ _ _ _ _ _)
        (("" (inst?)
          (("" (inst?)
            (("" (assert)
              (("" (expand "quorum_imprecision?")
                (("" (skosimp*)
                  (("" (forward-chain "quorum_nonempty")
                    (("" (forward-chain "reduce_overlap")
                      (("" (expand "overlap?")
                        (("" (inst - "d1!1" "d2!1")
                          (("" (expand "enabled_nonempty?")
                            (("" (inst-cp - "d1!1")
                              (("" (inst - "d2!1")
                                (("" (expand "reduce_choice")
                                  (("" (expand "reduce_choice")
                                    (("" (assert)
                                      ((""
                                        (hide -3 -4 -5 -6 -7 1 2)
                                        ((""
                                          (expand "convergent?")
                                          ((""
                                            (inst?)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (convergent? const-decl "bool" real_finite_sequences nil)
    (reduce const-decl "ne_seqs" reduce_properties nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (reduce_choice const-decl "T" reduce_properties nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_imprecision? const-decl "bool" inexact_comm_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil))
   shostak))
 (reduce_agreement_generation 0
  (reduce_agreement_generation-2 "" 3790104986
   ("" (expand "all_symmetric?")
    (("" (skosimp*)
      (("" (lemma "enabled_agree")
        (("" (inst?)
          (("" (inst - "d1!1" "d2!1")
            (("" (prop)
              (("" (expand "reduce_choice")
                (("" (expand "reduce_choice")
                  (("" (assert)
                    (("" (replace*)
                      (("" (lift-if)
                        (("" (assert)
                          (("" (prop)
                            (("" (expand "inexact_consensus?")
                              (("" (inst?)
                                (("" (assert)
                                  (("" (hide 2)
                                    (("" (expand "similar?")
                                      ((""
                                        (prop)
                                        (("1"
                                          (rewrite "reduce_length[S,real,<=]")
                                          (("1"
                                            (rewrite
                                             "reduce_length[S,real,<=]")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (lemma "reduce_overlap")
                                            (("2"
                                              (inst
                                               -
                                               "enabled(rcvd!1, check!1)(d2!1)"
                                               "i!1"
                                               "tau!1"
                                               "rcvd!1(d2!1)"
                                               "rcvd!1(d1!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (expand
                                                       "single_imprecision?")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "d1!1"
                                                         "d2!1"
                                                         "n!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "enabled_within?")
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "reduce_length[S,real,<=]")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (reduce_agreement_generation-1 nil 3377019761
   ("" (expand "all_symmetric?")
    (("" (skosimp*)
      (("" (lemma "enabled_agree")
        (("" (inst?)
          (("" (inst - "d1!1" "d2!1")
            (("" (prop)
              (("" (expand "reduce_choice")
                (("" (expand "reduce_choice")
                  (("" (assert)
                    (("" (replace*)
                      (("" (assert)
                        (("" (lift-if)
                          (("" (assert)
                            (("" (prop)
                              (("" (expand "inexact_consensus?")
                                (("" (inst?)
                                  (("" (assert)
                                    (("" (hide 2)
                                      ((""
                                        (expand "similar?")
                                        ((""
                                          (prop)
                                          (("1"
                                            (rewrite
                                             "reduce_length[S,real,<=]")
                                            (("1"
                                              (rewrite
                                               "reduce_length[S,real,<=]")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (lemma "reduce_overlap")
                                              (("2"
                                                (inst
                                                 -
                                                 "enabled(rcvd!1, check!1)(d2!1)"
                                                 "i!1"
                                                 "tau!1"
                                                 "rcvd!1(d2!1)"
                                                 "rcvd!1(d1!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (expand
                                                         "single_imprecision?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "d1!1"
                                                           "d2!1"
                                                           "n!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "enabled_within?")
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "reduce_length[S,real,<=]")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (reduce_choice const-decl "T" reduce_properties nil)
    (inexact_consensus? const-decl "bool" real_finite_sequences nil)
    (similar? const-decl "bool" real_finite_sequences nil)
    (single_imprecision? const-decl "bool" inexact_comm_stage nil)
    (subset? const-decl "bool" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (member const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_overlap formula-decl nil reduce_properties nil)
    (reduce_length formula-decl nil reduce_properties nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (reduce const-decl "ne_seqs" reduce_properties nil)
    (<= const-decl "bool" reals nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vec type-eq-decl nil node nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (enabled_agree formula-decl nil fault_assumptions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (all_symmetric? const-decl "bool" inexact_comm_stage nil))
   nil))
 (reduce_min_validity 0
  (reduce_min_validity-1 nil 3377020035
   ("" (skosimp*)
    (("" (use "v_min_witness[D, real, <=]")
      (("" (skosimp*)
        (("" (replace -2 :hide? t)
          (("" (use "reduce_lower_validity")
            (("" (assert)
              (("" (skosimp*)
                (("" (use "v_min_is_min[S, real, <=]")
                  (("" (expand* "enabled_within?" "subset?" "member")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_min_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (<= const-decl "bool" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (reduce_lower_validity formula-decl nil inexact_reduce_stage nil))
   nil))
 (reduce_max_validity 0
  (reduce_max_validity-1 nil 3377020225
   ("" (skosimp*)
    (("" (use "v_max_witness[D, real, <=]")
      (("" (skosimp*)
        (("" (replace -2 :hide? t)
          (("" (use "reduce_upper_validity")
            (("" (assert)
              (("" (skosimp*)
                (("" (lemma "v_max_is_max[S, real, <=]")
                  (("" (inst - "s!1" "src_set!1" "sent!1")
                    (("" (assert)
                      (("" (expand* "enabled_within?" "subset?" "member")
                        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_max_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (<= const-decl "bool" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (reduce_upper_validity formula-decl nil inexact_reduce_stage nil))
   nil))
 (minmax_diameter 0
  (minmax_diameter-1 nil 3397760847
   ("" (expand "diameter?")
    (("" (skosimp*)
      (("" (lemma "v_min_is_min[S, real, <=]")
        (("" (inst?)
          (("" (inst-cp - "s2!1")
            (("" (inst - "s1!1")
              (("" (lemma "v_max_is_max[S, real, <=]")
                (("" (inst - _ "src_set!1" "sent!1")
                  (("" (inst-cp - "s1!1")
                    (("" (inst - "s2!1")
                      (("" (assert)
                        (("" (expand "abs")
                          (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (vec type-eq-decl nil node nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (<= const-decl "bool" reals nil)
    (diameter? const-decl "bool" inexact_comm_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (agreement_propagation 0
  (agreement_propagation-1 nil 3377020306
   ("" (skosimp*)
    (("" (use "v_min_witness[D, real, <=]")
      (("" (use "v_max_witness[D, real, <=]")
        (("" (skosimp*)
          (("" (replace*)
            (("" (hide -4 -2)
              (("" (use "reduce_agreement_propagation")
                (("" (assert) (("" (rewrite "minmax_diameter") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_min_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (<= const-decl "bool" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minmax_diameter formula-decl nil inexact_reduce_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (reduce_agreement_propagation formula-decl nil inexact_reduce_stage nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (v_max_witness formula-decl nil select_minmax nil))
   nil))
 (agreement_generation 0
  (agreement_generation-1 nil 3377020356
   ("" (skosimp*)
    (("" (use "v_max_witness[D, real, <=]")
      (("" (use "v_min_witness[D, real, <=]")
        (("" (skosimp*)
          (("" (replace*)
            (("" (hide -4 -2)
              (("" (use "reduce_agreement_generation") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_max_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (<= const-decl "bool" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (reduce_agreement_generation formula-decl nil inexact_reduce_stage nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (v_min_witness formula-decl nil select_minmax nil))
   nil))
 (convergence 0
  (convergence-1 nil 3403631327
   ("" (skosimp*)
    (("" (use "v_min_witness[D, real, <=]")
      (("" (use "v_max_witness[D, real, <=]")
        (("" (skosimp*)
          (("" (replace*)
            (("" (hide -4 -2)
              (("" (use "reduce_convergence")
                (("" (ground) (("" (rewrite "minmax_diameter") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_min_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" inexact_reduce_stage nil)
    (<= const-decl "bool" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "real" inexact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" inexact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minmax_diameter formula-decl nil inexact_reduce_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (reduce_convergence formula-decl nil inexact_reduce_stage nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (v_max_witness formula-decl nil select_minmax nil))
   nil)))


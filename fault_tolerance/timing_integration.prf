(timing_integration
 (enabled_within_timing 0
  (enabled_within_timing-1 nil 3399212708
   ("" (skosimp*)
    (("" (expand "enabled_within?")
      (("" (skosimp*)
        (("" (expand "received")
          (("" (expand "check")
            ((""
              (use "enabled_within_stage[rho, min_latency(i!1), var_latency(i!1), stage(i!1), stage(1 + i!1)]")
              nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled_within? const-decl "bool" inexact_comm nil)
    (received const-decl "[below(stage(i + 1)) -> [below(stage(i)) -> real]]"
     timing_integration nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (enabled_within_stage formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min_latency formal-const-decl "[nat -> nonneg_real]" timing_integration
     nil)
    (var_latency formal-const-decl "[nat -> nonneg_real]" timing_integration
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (stage formal-const-decl "[nat -> posnat]" timing_integration nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (check const-decl
     "[below(stage(i + 1)) -> [below(stage(i)) -> [real -> bool]]]"
     timing_integration nil))
   nil)))


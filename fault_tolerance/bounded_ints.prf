(bounded_ints
 (sup_int_int 0
  (sup_int_int-2 nil 3276445937
   ("" (skosimp* t)
    (("" (typepred "sup(SS!1)")
      (("" (expand "least_upper_bound")
        (("" (flatten)
          (("" (case "upper_bound(<=)(floor(sup(SS!1)), SS!1)")
            (("1" (inst - "floor(sup(SS!1))")
              (("1" (assert)
                (("1" (split +)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2 -2)
              (("2" (expand "upper_bound")
                (("2" (skosimp* t)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals))
   nil (sup_int_int subtype "bounded_reals[int].sup(bounded_ints.SS)" "int"))
  (sup_int_int-1 nil 3276445256
   ("" (skosimp*) (("" (use "sup_int_is_int") nil nil)) nil)
   ((above_bounded const-decl "bool" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals))
   shostak
   (sup_int_int subtype "bounded_reals[int].sup(bounded_ints.SS)" "int")))
 (sup_int_in_set 0
  (sup_int_in_set-1 nil 3276434506
   ("" (skosimp* t)
    (("" (expand "in_set")
      (("" (typepred "sup(SS!1)")
        (("" (expand "least_upper_bound")
          (("" (flatten)
            (("" (case "upper_bound(<=)(sup(SS!1) - 1, SS!1)")
              (("1" (inst - "sup(SS!1) - 1") (("1" (assert) nil nil)) nil)
               ("2" (hide -2)
                (("2" (expand "upper_bound")
                  (("2" (skosimp* t)
                    (("2" (inst?)
                      (("2" (case-replace "z!1 = sup(SS!1)")
                        (("2" (assert)
                          (("2" (case "EXISTS (i:int): i = sup(SS!1)")
                            (("1" (skosimp*)
                              (("1" (replace -1 :dir rl :hide? t)
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (inst + "sup(SS!1)") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sup_int_int application-judgement "int" bounded_ints nil)
    (in_set const-decl "bool" bounded_reals reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals))
   shostak))
 (sup_int_is_in_set 0
  (sup_int_is_in_set-1 nil 3309356067
   ("" (skosimp* t)
    (("" (use "sup_int_in_set")
      (("" (expand "in_set") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((sup_int_in_set formula-decl nil bounded_ints nil)
    (in_set const-decl "bool" bounded_reals reals)
    (sup_int_int application-judgement "int" bounded_ints nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals))
   nil
   (sup_int_is_in_set subtype "bounded_reals[int].sup(bounded_ints.SS)"
    "(bounded_ints.SS)"))))


(timing_integration_stage
 (t_min_TCC1 0
  (t_min_TCC1-2 nil 3399206238
   ("" (skosimp*)
    (("" (rewrite "finite_image")
      (("1" (expand "empty?")
        (("1" (expand "member")
          (("1" (expand "image")
            (("1" (rewrite "forall_not")
              (("1" (inst + "t_of(c_dst!1, T!1)(0)")
                (("1" (inst?)
                  (("1" (expand "fullset") (("1" (assert) nil nil)) nil)) nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "finite_below") nil nil))
      nil))
    nil)
   ((finite_image judgement-tcc nil function_image_aux nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fullset const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (integer nonempty-type-from-decl nil integers nil)
    (t_of const-decl "real" timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (forall_not formula-decl nil quantifier_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (image const-decl "set[R]" function_image nil)
    (empty? const-decl "bool" sets nil)
    (finite_below formula-decl nil finite_sets_below finite_sets))
   nil
   (t_min subtype
    "function_image[naturalnumbers.below(timing_integration_stage.D), real].image(timing_integration_stage.t_of(timing_integration_stage.c_dst, timing_integration_stage.T), sets[naturalnumbers.below(timing_integration_stage.D)].fullset)"
    "non_empty_finite_set[real]"))
  (t_min_TCC1-1 nil 3399206166 ("" (subtype-tcc) nil nil) nil nil
   (t_min subtype
    "function_image[naturalnumbers.below(timing_integration_stage.D), real].image(timing_integration_stage.t_of(timing_integration_stage.c_dst, timing_integration_stage.T), sets[naturalnumbers.below(timing_integration_stage.D)].fullset)"
    "non_empty_finite_set[real]")))
 (uniformly_outer_exists 0
  (uniformly_outer_exists-1 nil 3399212050
   ("" (skosimp*)
    (("" (inst + "lambda d: t_min(c_dst!1, T!1 - Delta_max(pi!1) - 2)")
      (("" (expand "uniformly_outer_window?")
        (("" (skosimp*)
          (("" (expand "outer_window?")
            (("" (expand "timing_conforms?")
              (("" (flatten)
                (("" (expand "t_min")
                  (("" (hide -2)
                    (("" (forward-chain "clock_nondecreasing_alt")
                      (("" (hide -2)
                        (("" (expand "Timestamp")
                          ((""
                            (typepred
                             "min(image(t_of(c_dst!1, T!1 - 2 - Delta_max(pi!1)),
                          fullset[below(D)]))")
                            (("" (hide -1)
                              ((""
                                (inst -
                                 "t_of(c_dst!1, T!1 - 2 - Delta_max(pi!1))(d!1)")
                                (("" (prop)
                                  (("1" (rewrite "t_of")
                                    (("1" (lemma "Clock_nondecreasing")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (invoke (inst - "%1") (! -2 r))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "Clock_rewrite")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "image")
                                    (("2" (inst?)
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (integer nonempty-type-from-decl nil integers nil)
    (t_min const-decl "real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (Delta_max const-decl "nat" timing_window nil)
    (timing_conforms? const-decl "bool" timing_window nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (clock_nondecreasing_alt formula-decl nil physical_clocks nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (image const-decl "set[R]" function_image nil)
    (t_of const-decl "real" timing_integration_stage nil)
    (fullset const-decl "set" sets nil)
    (Clock_nondecreasing formula-decl nil inverse_clocks nil)
    (Clock_rewrite formula-decl nil inverse_clocks nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (d!1 skolem-const-decl "below(D)" timing_integration_stage nil)
    (outer_window? const-decl "bool" timing_window nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil))
   nil))
 (symmetric_timing_uniform 0
  (symmetric_timing_uniform-1 nil 3399212081
   ("" (skosimp*)
    (("" (expand "symmetric_timing_conforms?")
      (("" (expand "uniformly_inner_window?")
        (("" (expand "uniformly_outer_window?")
          (("" (prop)
            (("1" (expand "inner_window?")
              (("1" (expand "outer_window?")
                (("1" (skosimp*)
                  (("1" (inst?) (("1" (assert) (("1" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "inner_window?")
              (("2" (skosimp*)
                (("2" (assert) (("2" (hide -2) (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "outer_window?")
              (("3" (expand "inner_window?")
                (("3" (skosimp*) (("3" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_timing_conforms? const-decl "bool" timing_integration_stage
     nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (inner_window? const-decl "bool" timing_window nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (outer_window? const-decl "bool" timing_window nil)
    (uniformly_inner_window? const-decl "bool" timing_integration_stage nil))
   nil))
 (uniformly_outer_single_denotation 0
  (uniformly_outer_single_denotation-1 nil 3399212111
   ("" (expand "uniformly_outer_window?")
    (("" (expand "single_denotation_timing?")
      (("" (skosimp*)
        (("" (inst?)
          (("" (expand "inner_window?")
            (("" (expand "outer_window?") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (outer_window? const-decl "bool" timing_window nil)
    (inner_window? const-decl "bool" timing_window nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil))
   nil))
 (good_send_TCC1 0
  (good_send_TCC1-2 nil 3399206261
   ("" (inst + "LAMBDA (c_src, T, s): LAMBDA d: c_src(s)(T-W) + min_latency")
    (("" (skosimp*) (("" (expand "good_range") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (W const-decl "posint" timing_imprecision nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (good_range const-decl "set[real]" timing_imprecision nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (set type-eq-decl nil sets nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (good_send existence ""
    "[d1: [[naturalnumbers.below(timing_integration_stage.S) -> good_clock[rho]], integer, naturalnumbers.below(timing_integration_stage.S)] -> [naturalnumbers.below(timing_integration_stage.D) -> (timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].good_range(d1`1(d1`3)((number_fields.-)(d1`2, timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].W))))]]"))
  (good_send_TCC1-1 nil 3399206166 ("" (existence-tcc) nil nil) nil nil
   (good_send existence ""
    "[d1: [[naturalnumbers.below(timing_integration_stage.S) -> good_clock[rho]], integer, naturalnumbers.below(timing_integration_stage.S)] -> [naturalnumbers.below(timing_integration_stage.D) -> (timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].good_range(d1`1(d1`3)((number_fields.-)(d1`2, timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].W))))]]")))
 (osym_send_TCC1 0
  (osym_send_TCC1-2 nil 3399206278
   (""
    (inst +
     "LAMBDA (c_src, c_dst, T, pi, s): lambda d: c_src(s)(T-W) + min_latency")
    (("" (skosimp*)
      (("" (expand* "union" "member" "uniformly_good_range?")
        (("" (skosimp*)
          (("" (assert)
            (("" (expand "good_range") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((good_range const-decl "set[real]" timing_imprecision nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (W const-decl "posint" timing_imprecision nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (uniformly_good_range? const-decl "bool" timing_integration_stage nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (osym_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.S) -> good_clock[rho]], [naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S)] -> (sets[[naturalnumbers.below(timing_integration_stage.D) -> real]].union(timing_integration_stage.uniformly_good_range?(d`1(d`5), d`3), timing_integration_stage.uniformly_outer_window?(d`2, d`3, d`4)))]"))
  (osym_send_TCC1-1 nil 3399206166 ("" (existence-tcc) nil nil) nil nil
   (osym_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.S) -> good_clock[rho]], [naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S)] -> (sets[[naturalnumbers.below(timing_integration_stage.D) -> real]].union(timing_integration_stage.uniformly_good_range?(d`1(d`5), d`3), timing_integration_stage.uniformly_outer_window?(d`2, d`3, d`4)))]")))
 (oasym_send_TCC1 0
  (oasym_send_TCC1-2 nil 3399206303
   (""
    (inst + "LAMBDA (c_src, c_dst, T, pi, s, d): c_src(s)(T-W) + min_latency")
    (("" (skosimp*)
      (("" (expand* "union" "member" "good_range")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (outer_window? const-decl "bool" timing_window nil)
    (W const-decl "posint" timing_imprecision nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (good_range const-decl "set[real]" timing_imprecision nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (oasym_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.S) -> good_clock[rho]], [naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S), naturalnumbers.below(timing_integration_stage.D)] -> (sets[real].union(timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].good_range(d`1(d`5)((number_fields.-)(d`3, timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].W))), timing_window[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].outer_window?(d`2(d`6), d`3, d`4)))]"))
  (oasym_send_TCC1-1 nil 3399206166 ("" (existence-tcc) nil nil) nil nil
   (oasym_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.S) -> good_clock[rho]], [naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S), naturalnumbers.below(timing_integration_stage.D)] -> (sets[real].union(timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].good_range(d`1(d`5)((number_fields.-)(d`3, timing_imprecision[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].W))), timing_window[timing_integration_stage.rho, timing_integration_stage.min_latency, timing_integration_stage.var_latency].outer_window?(d`2(d`6), d`3, d`4)))]")))
 (tsym_send_TCC1 0
  (tsym_send_TCC1-2 nil 3399206328
   (""
    (inst +
     "lambda c_dst, T, pi, s: choose({f | uniformly_outer_window?(c_dst, T, pi)(f)})")
    (("1" (skosimp*)
      (("1" (expand "union")
        (("1" (expand "intersection")
          (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "nonempty?")
        (("2" (expand "empty?")
          (("2" (expand "member")
            (("2" (rewrite "forall_not")
              (("2" (use "uniformly_outer_exists") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (forall_not formula-decl nil quantifier_props nil)
    (uniformly_outer_exists formula-decl nil timing_integration_stage nil)
    (member const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (uniformly_inner_window? const-decl "bool" timing_integration_stage nil)
    (intersection const-decl "set" sets nil) (union const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (tsym_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S)] -> (sets[[naturalnumbers.below(timing_integration_stage.D) -> real]].union(sets[[naturalnumbers.below(timing_integration_stage.D) -> real]].intersection(timing_integration_stage.uniformly_inner_window?(d`1, d`2, d`3), timing_integration_stage.single_denotation_timing?(d`1, d`2, d`3)), timing_integration_stage.uniformly_outer_window?(d`1, d`2, d`3)))]"))
  (tsym_send_TCC1-1 nil 3399206166 ("" (existence-tcc) nil nil) nil nil
   (tsym_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S)] -> (sets[[naturalnumbers.below(timing_integration_stage.D) -> real]].union(sets[[naturalnumbers.below(timing_integration_stage.D) -> real]].intersection(timing_integration_stage.uniformly_inner_window?(d`1, d`2, d`3), timing_integration_stage.single_denotation_timing?(d`1, d`2, d`3)), timing_integration_stage.uniformly_outer_window?(d`1, d`2, d`3)))]")))
 (sv_send_TCC1 0
  (sv_send_TCC1-2 nil 3399206352
   (""
    (inst +
     "lambda c_dst, T, pi, s: choose({f | uniformly_outer_window?(c_dst, T, pi)(f)})")
    (("1" (skosimp*)
      (("1" (use "uniformly_outer_single_denotation")
        (("1" (assert) nil nil)
         ("2" (expand "nonempty?")
          (("2" (expand "empty?")
            (("2" (expand "member")
              (("2" (rewrite "forall_not")
                (("2" (use "uniformly_outer_exists") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "nonempty?")
        (("2" (expand "empty?")
          (("2" (expand "member")
            (("2" (rewrite "forall_not")
              (("2" (use "uniformly_outer_exists") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (uniformly_outer_exists formula-decl nil timing_integration_stage nil)
    (forall_not formula-decl nil quantifier_props nil)
    (empty? const-decl "bool" sets nil)
    (c_dst!1 skolem-const-decl "[below(D) -> good_clock[rho]]"
     timing_integration_stage nil)
    (T!1 skolem-const-decl "integer" timing_integration_stage nil)
    (pi!1 skolem-const-decl "nonneg_real" timing_integration_stage nil)
    (uniformly_outer_single_denotation formula-decl nil
     timing_integration_stage nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (sv_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S)] -> (timing_integration_stage.single_denotation_timing?(d`1, d`2, d`3))]"))
  (sv_send_TCC1-1 nil 3399206166 ("" (existence-tcc) nil nil) nil nil
   (sv_send existence ""
    "[d: [[naturalnumbers.below(timing_integration_stage.D) -> good_clock[rho]], integer, nonneg_real, naturalnumbers.below(timing_integration_stage.S)] -> (timing_integration_stage.single_denotation_timing?(d`1, d`2, d`3))]")))
 (tsym_single_denotation 0
  (tsym_single_denotation-1 nil 3399212149
   ("" (skosimp*)
    (("" (expand "single_denotation_timing?")
      (("" (skosimp*)
        (("" (typepred "tsym_send(c_dst!1, T!1, pi!1, s!1)")
          (("" (expand "union")
            (("" (expand "member")
              (("" (expand "intersection")
                (("" (expand "member")
                  (("" (expand "single_denotation_timing?")
                    (("" (prop)
                      (("1" (inst?) (("1" (prop) nil nil)) nil)
                       ("2" (expand "uniformly_outer_window?")
                        (("2" (inst?)
                          (("2" (expand "outer_window?")
                            (("2" (expand "inner_window?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (tsym_send const-decl
     "(union(intersection(uniformly_inner_window?(c_dst, T, pi),
                    single_denotation_timing?(c_dst, T, pi)),
       uniformly_outer_window?(c_dst, T, pi)))" timing_integration_stage nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (uniformly_inner_window? const-decl "bool" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (intersection const-decl "set" sets nil) (union const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (inner_window? const-decl "bool" timing_window nil)
    (outer_window? const-decl "bool" timing_window nil))
   nil))
 (received_clock_edge 0
  (received_clock_edge-1 nil 3399212183
   ("" (skosimp*)
    (("" (expand "clock_edge?")
      (("" (expand "received") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((clock_edge? const-decl "bool" physical_clocks nil)
    (send const-decl "real" timing_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Timestamp const-decl "integer" timing_imprecision nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (received const-decl "real" timing_integration_stage nil))
   nil))
 (enabled_within_stage 0
  (enabled_within_stage-1 nil 3399212205
   ("" (expand "enabled_within?")
    (("" (expand "subset?")
      (("" (expand "enabled")
        (("" (expand "member")
          (("" (expand "check") (("" (skosimp*) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (check const-decl "bool" timing_integration_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (correct_denotation_send 0
  (correct_denotation_send-1 nil 3399212219
   ("" (skosimp*)
    (("" (expand "correct_denotation?")
      (("" (prop)
        (("1" (assert) (("1" (expand "send") (("1" (propax) nil nil)) nil))
          nil)
         ("2" (assert)
          (("2" (expand "send")
            (("2" (invoke (typepred "%1") (! 1 1 0))
              (("2"
                (expand* "union" "member" "uniformly_good_range?"
                 "uniformly_outer_window?")
                (("2" (prop) (("1" (inst?) nil nil) ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (expand "send")
            (("3" (invoke (typepred "%1") (! 1 1))
              (("3" (expand* "union" "member") (("3" (prop) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_denotation? const-decl "bool" integration_fault_model nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (good_range const-decl "set[real]" timing_imprecision nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (W const-decl "posint" timing_imprecision nil)
    (outer_window? const-decl "bool" timing_window nil)
    (oasym_send const-decl
     "(union(good_range(c_src(s)(T - W)), outer_window?(c_dst(d), T, pi)))"
     timing_integration_stage nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (integer nonempty-type-from-decl nil integers nil)
    (uniformly_good_range? const-decl "bool" timing_integration_stage nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (osym_send const-decl "(union(uniformly_good_range?(c_src(s), T),
       uniformly_outer_window?(c_dst, T, pi)))" timing_integration_stage nil)
    (member const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (send const-decl "real" timing_integration_stage nil))
   nil))
 (conforming_correct_denotation_send 0
  (conforming_correct_denotation_send-1 nil 3399212244
   ("" (skosimp*)
    (("" (expand "clock_relation?")
      (("" (inst - "s!1" "d!1")
        (("" (use "correct_denotation_send")
          (("" (expand "correct_denotation")
            (("" (assert)
              (("" (hide 1)
                (("" (expand* "enabled" "check" "received" "outer_window?")
                  (("" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (clock_relation? const-decl "bool" timing_integration_stage nil)
    (correct_denotation_send formula-decl nil timing_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (check const-decl "bool" timing_integration_stage nil)
    (outer_window? const-decl "bool" timing_window nil)
    (received const-decl "real" timing_integration_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (single_denotation_send 0
  (single_denotation_send-1 nil 3399212262
   ("" (expand "single_denotation_timing?")
    (("" (expand "transpose")
      (("" (skosimp*)
        (("" (expand "single_denotation?")
          (("" (expand "send")
            (("" (lift-if)
              (("" (assert)
                (("" (prop)
                  (("1" (typepred "good_send(c_src!1, T!1, s!1)(d1!1)")
                    (("1" (typepred "good_send(c_src!1, T!1, s!1)(d2!1)")
                      (("1" (expand "good_range")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "abs")
                              (("1" (lift-if) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (typepred "osym_send(c_src!1, c_dst!1, T!1, pi!1, s!1)")
                    (("2" (expand "union")
                      (("2" (expand "member")
                        (("2" (prop)
                          (("1" (expand "uniformly_good_range?")
                            (("1" (inst-cp - "d2!1")
                              (("1" (inst - "d1!1")
                                (("1" (expand "good_range")
                                  (("1" (flatten)
                                    (("1" (assert)
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "uniformly_outer_window?")
                            (("2" (expand "inner_window?")
                              (("2" (expand "outer_window?")
                                (("2" (inst?) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3"
                    (typepred
                     "oasym_send(c_src!1, c_dst!1, T!1, pi!1, s!1, d1!1)")
                    (("3"
                      (typepred
                       "oasym_send(c_src!1, c_dst!1, T!1, pi!1, s!1, d2!1)")
                      (("3" (expand "union")
                        (("3" (expand "member")
                          (("3" (split -1)
                            (("1" (split -)
                              (("1" (expand "good_range")
                                (("1" (flatten)
                                  (("1" (expand "abs")
                                    (("1" (lift-if) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "outer_window?")
                                (("2" (expand "inner_window?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (expand "outer_window?")
                              (("2" (expand "inner_window?")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "tsym_send(c_dst!1, T!1, pi!1, s!1)")
                    (("4" (expand "union")
                      (("4" (expand "intersection")
                        (("4" (expand "member")
                          (("4" (prop)
                            (("1" (expand "single_denotation_timing?")
                              (("1" (inst?) (("1" (prop) nil nil)) nil)) nil)
                             ("2" (expand "uniformly_outer_window?")
                              (("2" (expand "inner_window?")
                                (("2" (expand "outer_window?")
                                  (("2" (inst?) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (typepred "sv_send(c_dst!1, T!1, pi!1, s!1)")
                    (("5" (expand "single_denotation_timing?")
                      (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transpose const-decl "T3" transpose nil)
    (single_denotation? const-decl "bool" integration_fault_model nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (good_range const-decl "set[real]" timing_imprecision nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (W const-decl "posint" timing_imprecision nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (good_send const-decl "(good_range(c_src(s)(T - W)))"
     timing_integration_stage nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (inner_window? const-decl "bool" timing_window nil)
    (outer_window? const-decl "bool" timing_window nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (uniformly_good_range? const-decl "bool" timing_integration_stage nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (osym_send const-decl "(union(uniformly_good_range?(c_src(s), T),
       uniformly_outer_window?(c_dst, T, pi)))" timing_integration_stage nil)
    (oasym_send const-decl
     "(union(good_range(c_src(s)(T - W)), outer_window?(c_dst(d), T, pi)))"
     timing_integration_stage nil)
    (intersection const-decl "set" sets nil)
    (uniformly_inner_window? const-decl "bool" timing_integration_stage nil)
    (tsym_send const-decl
     "(union(intersection(uniformly_inner_window?(c_dst, T, pi),
                    single_denotation_timing?(c_dst, T, pi)),
       uniformly_outer_window?(c_dst, T, pi)))" timing_integration_stage nil)
    (sv_send const-decl "(single_denotation_timing?(c_dst, T, pi))"
     timing_integration_stage nil)
    (send const-decl "real" timing_integration_stage nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (symmetric_send 0
  (symmetric_send-1 nil 3399212288
   ("" (skosimp*)
    (("" (rewrite "single_denotation_send")
      (("" (expand "single_denotation?")
        (("" (expand "symmetric_denotation?") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((single_denotation_send formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (symmetric_denotation? const-decl "bool" integration_fault_model nil)
    (single_denotation? const-decl "bool" integration_fault_model nil))
   nil))
 (symmetric_timing_conforms 0
  (symmetric_timing_conforms-1 nil 3399212302
   ("" (skosimp*)
    (("" (rewrite "symmetric_timing_uniform")
      (("" (expand "transpose")
        (("" (assert)
          (("" (flatten)
            (("" (expand "uniformly_outer_window?")
              (("" (expand "uniformly_inner_window?")
                (("" (skosimp*)
                  (("" (expand "symmetric_denotation?")
                    (("" (prop)
                      (("1" (expand "send")
                        (("1" (assert)
                          (("1" (typepred "good_send(c_src!1, T!1, s!1)(d!1)")
                            (("1" (use "good_range_inner_window")
                              (("1" (assert)
                                (("1" (expand "clock_relation?")
                                  (("1" (inst?) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "send")
                        (("2" (assert)
                          (("2"
                            (typepred
                             "osym_send(c_src!1, c_dst!1, T!1, pi!1, s!1)")
                            (("2" (expand "union")
                              (("2" (expand "member")
                                (("2" (expand "uniformly_outer_window?")
                                  (("2" (prop)
                                    (("1" (expand "uniformly_good_range?")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (use "good_range_inner_window")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "clock_relation?")
                                              (("1" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "send")
                        (("3" (assert)
                          (("3"
                            (typepred "tsym_send(c_dst!1, T!1, pi!1, s!1)")
                            (("3" (expand "intersection")
                              (("3" (expand "union")
                                (("3" (expand "member")
                                  (("3" (prop)
                                    (("1" (expand "uniformly_inner_window?")
                                      (("1" (inst?) nil nil)) nil)
                                     ("2" (expand "uniformly_outer_window?")
                                      (("2" (inst?) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_timing_uniform formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (transpose const-decl "T3" transpose nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (send const-decl "real" timing_integration_stage nil)
    (uniformly_outer_window? const-decl "bool" timing_integration_stage nil)
    (good_range_inner_window formula-decl nil timing_window nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (clock_relation? const-decl "bool" timing_integration_stage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (good_range const-decl "set[real]" timing_imprecision nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (W const-decl "posint" timing_imprecision nil)
    (good_send const-decl "(good_range(c_src(s)(T - W)))"
     timing_integration_stage nil)
    (member const-decl "bool" sets nil)
    (osym_send const-decl "(union(uniformly_good_range?(c_src(s), T),
       uniformly_outer_window?(c_dst, T, pi)))" timing_integration_stage nil)
    (uniformly_good_range? const-decl "bool" timing_integration_stage nil)
    (union const-decl "set" sets nil) (intersection const-decl "set" sets nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (tsym_send const-decl
     "(union(intersection(uniformly_inner_window?(c_dst, T, pi),
                    single_denotation_timing?(c_dst, T, pi)),
       uniformly_outer_window?(c_dst, T, pi)))" timing_integration_stage nil)
    (symmetric_denotation? const-decl "bool" integration_fault_model nil)
    (uniformly_inner_window? const-decl "bool" timing_integration_stage nil))
   nil))
 (correct_lower_timing 0
  (correct_lower_timing-1 nil 3399212324
   ("" (expand "correct_lower_inaccuracy?")
    (("" (skosimp*)
      (("" (forward-chain "conforming_correct_denotation_send")
        (("" (hide -4)
          (("" (expand* "nominal" "received")
            (("" (rewrite "link_lower_range") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (send const-decl "real" timing_integration_stage nil)
    (link_lower_range formula-decl nil timing_imprecision nil)
    (nominal const-decl "real" timing_integration_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (conforming_correct_denotation_send formula-decl nil
     timing_integration_stage nil)
    (correct_lower_inaccuracy? const-decl "bool" inexact_comm_stage nil))
   nil))
 (correct_quorum_lower 0
  (correct_quorum_lower-1 nil 3402930555
   ("" (skosimp*)
    (("" (expand "quorum_lower?")
      (("" (assert)
        (("" (inst?)
          (("" (assert)
            (("" (use "correct_lower_timing") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_lower? const-decl "bool" inexact_comm_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (correct_lower_timing formula-decl nil timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil))
   nil))
 (correct_majority_lower 0
  (correct_majority_lower-1 nil 3399212342
   ("" (skosimp*)
    (("" (expand "majority_lower?")
      (("" (assert)
        (("" (inst?)
          (("" (assert)
            (("" (use "correct_lower_timing") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_lower? const-decl "bool" inexact_comm_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (correct_lower_timing formula-decl nil timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil))
   nil))
 (correct_upper_timing 0
  (correct_upper_timing-1 nil 3399212366
   ("" (expand "correct_upper_inaccuracy?")
    (("" (skosimp*)
      (("" (forward-chain "conforming_correct_denotation_send")
        (("" (hide -4)
          (("" (expand* "nominal" "received")
            (("" (rewrite "link_upper_range") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (send const-decl "real" timing_integration_stage nil)
    (link_upper_range formula-decl nil timing_imprecision nil)
    (nominal const-decl "real" timing_integration_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (conforming_correct_denotation_send formula-decl nil
     timing_integration_stage nil)
    (correct_upper_inaccuracy? const-decl "bool" inexact_comm_stage nil))
   nil))
 (correct_majority_upper 0
  (correct_majority_upper-1 nil 3399212387
   ("" (skosimp*)
    (("" (expand "majority_upper?")
      (("" (inst?)
        (("" (assert)
          (("" (use "correct_lower_timing")
            (("" (assert)
              (("" (use "correct_upper_timing") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_upper? const-decl "bool" inexact_comm_stage nil)
    (correct_upper_timing formula-decl nil timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (correct_lower_timing formula-decl nil timing_integration_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (correct_quorum_upper 0
  (correct_quorum_upper-1 nil 3402930612
   ("" (skosimp*)
    (("" (expand "quorum_upper?")
      (("" (inst?)
        (("" (assert)
          (("" (use "correct_upper_timing") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((quorum_upper? const-decl "bool" inexact_comm_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (correct_upper_timing formula-decl nil timing_integration_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (correct_accuracy_timing 0
  (correct_accuracy_timing-1 nil 3399212409
   ("" (skosimp*)
    (("" (expand "majority_accuracy?")
      (("" (inst?)
        (("" (assert)
          (("" (use "correct_lower_timing")
            (("" (assert)
              (("" (use "correct_upper_timing") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_accuracy? const-decl "bool" inexact_comm_stage nil)
    (correct_upper_timing formula-decl nil timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (correct_lower_timing formula-decl nil timing_integration_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (correct_imprecision_timing 0
  (correct_imprecision_timing-1 nil 3399212436
   ("" (expand "correct_imprecision?")
    (("" (skosimp*)
      (("" (expand* "received" "sent")
        (("" (lemma "link_relative_range")
          ((""
            (inst - "c_dst!1(d1!1)" "c_dst!1(d2!1)" "c_src!1(s1!1)(T!1 - W)" _
             "c_src!1(s2!1)(T!1 - W)" _)
            (("" (inst?)
              (("" (assert)
                (("" (hide 2)
                  (("" (split)
                    (("1" (hide -2 -3)
                      (("1" (use "conforming_correct_denotation_send")
                        (("1" (assert)
                          (("1" (expand "received") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -4 -5)
                      (("2" (use "conforming_correct_denotation_send")
                        (("2" (assert)
                          (("2" (expand "received") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (link_relative_range formula-decl nil timing_imprecision nil)
    (send const-decl "real" timing_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (conforming_correct_denotation_send formula-decl nil
     timing_integration_stage nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (W const-decl "posint" timing_imprecision nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (received const-decl "real" timing_integration_stage nil)
    (sent const-decl "real" timing_integration_stage nil)
    (correct_imprecision? const-decl "bool" inexact_comm_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (quorum_imprecision 0
  (quorum_imprecision-1 nil 3402930681
   ("" (expand "quorum_imprecision?")
    (("" (skosimp*)
      (("" (inst?)
        (("" (assert)
          (("" (use "correct_imprecision_timing") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (correct_imprecision_timing formula-decl nil timing_integration_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_imprecision? const-decl "bool" inexact_comm_stage nil))
   nil))
 (majority_imprecision 0
  (majority_imprecision-1 nil 3399212453
   ("" (expand "majority_imprecision?")
    (("" (skosimp*)
      (("" (inst?)
        (("" (assert)
          (("" (use "correct_imprecision_timing") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (correct_imprecision_timing formula-decl nil timing_integration_stage nil)
    (correct_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (majority_imprecision? const-decl "bool" inexact_comm_stage nil))
   nil))
 (single_imprecision_timing 0
  (single_imprecision_timing-1 nil 3399212474
   ("" (expand "single_imprecision?")
    (("" (expand "enabled")
      (("" (expand "check")
        (("" (skosimp*)
          (("" (expand "received")
            (("" (rewrite "link_symmetry")
              (("" (hide 2)
                (("" (expand "single_denotation")
                  (("" (forward-chain "single_denotation_send")
                    (("" (expand "single_denotation_timing?")
                      (("" (expand "transpose")
                        (("" (expand "inner_window?")
                          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (link_symmetry formula-decl nil timing_imprecision nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (integer nonempty-type-from-decl nil integers nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (send const-decl "real" timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (min_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (var_latency formal-const-decl "nonneg_real" timing_integration_stage nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (single_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (single_denotation_timing? const-decl "bool" timing_integration_stage nil)
    (inner_window? const-decl "bool" timing_window nil)
    (transpose const-decl "T3" transpose nil)
    (single_denotation_send formula-decl nil timing_integration_stage nil)
    (received const-decl "real" timing_integration_stage nil)
    (check const-decl "bool" timing_integration_stage nil)
    (single_imprecision? const-decl "bool" inexact_comm_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (uniformly_enabled 0
  (uniformly_enabled-1 nil 3399212492
   ("" (expand "uniformly_enabled?")
    (("" (expand "enabled")
      (("" (expand "check")
        (("" (skosimp*)
          (("" (expand "symmetric_denotation")
            (("" (forward-chain "symmetric_timing_conforms")
              (("" (expand "symmetric_timing_conforms?")
                (("" (expand "inner_window?")
                  (("" (expand "received")
                    (("" (inst - "d1!1" "d2!1")
                      (("" (expand "transpose") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (symmetric_timing_conforms formula-decl nil timing_integration_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (fault_class type-decl nil integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (inner_window? const-decl "bool" timing_window nil)
    (transpose const-decl "T3" transpose nil)
    (received const-decl "real" timing_integration_stage nil)
    (symmetric_timing_conforms? const-decl "bool" timing_integration_stage
     nil)
    (symmetric_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (check const-decl "bool" timing_integration_stage nil)
    (uniformly_enabled? const-decl "bool" fault_assumptions_stage nil))
   nil))
 (symmetric_imprecision_timing 0
  (symmetric_imprecision_timing-1 nil 3399212510
   ("" (skosimp*)
    (("" (use "single_imprecision_timing")
      (("" (assert)
        (("" (use "symmetric_single_denotation")
          (("" (expand "single_imprecision?")
            (("" (skosimp*)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "subset?")
                    (("" (expand "member")
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((single_imprecision_timing formula-decl nil timing_integration_stage nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rate const-decl "posreal" physical_clocks nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symmetric_single_denotation formula-decl nil integration_fault_model nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (single_imprecision? const-decl "bool" inexact_comm_stage nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (all_symmetric_timing 0
  (all_symmetric_timing-1 nil 3399212527
   ("" (skosimp*)
    (("" (expand "all_symmetric?")
      (("" (inst?)
        (("" (assert)
          (("" (use "uniformly_enabled")
            (("" (assert)
              (("" (use "symmetric_imprecision_timing")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_symmetric? const-decl "bool" inexact_comm_stage nil)
    (symmetric_imprecision_timing formula-decl nil timing_integration_stage
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (D formal-const-decl "posnat" timing_integration_stage nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rho formal-const-decl "nonneg_real" timing_integration_stage nil)
    (rate const-decl "posreal" physical_clocks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_clock nonempty-type-eq-decl nil physical_clocks nil)
    (uniformly_enabled formula-decl nil timing_integration_stage nil)
    (symmetric_denotation const-decl "finite_set[below(N)]"
     integration_fault_model nil)
    (node_status type-eq-decl nil integration_fault_model nil)
    (fault_class type-decl nil integration_fault_model nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" timing_integration_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)))


(exact_comm
 (majority_correct_rw 0
  (majority_correct_rw-1 nil 3399302843
   ("" (skosimp*)
    (("" (expand "majority_correct?")
      (("" (expand "quorum_correct?")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (rewrite "majority_correct_rw")
                  (("1" (expand "mid" +) (("1" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst?)
              (("2" (assert)
                (("2" (rewrite "majority_correct_rw")
                  (("2" (expand "mid" -) (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((majority_correct? const-decl "bool" exact_comm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (majority_correct_rw formula-decl nil exact_comm_stage nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (check_function type-eq-decl nil node_functions nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix type-eq-decl nil node_functions nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (sent_vec type-eq-decl nil node_functions nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "[nat -> posnat]" exact_comm nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-nonempty-type-decl nil exact_comm nil)
    (mid const-decl "tau_type" exact_comm nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (quorum_correct? const-decl "bool" exact_comm nil))
   shostak)))


(exact_reduce_stage
 (reduce_lower_validity 0
  (reduce_lower_validity-2 nil 3398098383
   ("" (expand "quorum_correct?")
    (("" (skosimp*)
      (("" (use "quorum_nonempty")
        (("" (assert)
          (("" (expand "quorum?")
            (("" (inst - "d!1")
              (("" (expand "reduce_choice")
                (("" (expand "enabled_nonempty?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (expand "exact_correct_denotation?")
                        (("" (inst?)
                          (("" (use "choice_lower_validity")
                            (("" (assert)
                              (("" (skosimp*)
                                (("" (inst?)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (vec type-eq-decl nil node nil)
    (choice_lower_validity formula-decl nil reduce_properties nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_correct? const-decl "bool" exact_comm_stage nil))
   nil)
  (reduce_lower_validity-1 nil 3377473307
   ("" (expand "generalized_majority_correct?")
    (("" (expand "generalized_majority?")
      (("" (skosimp*)
        (("" (expand "generalized_majority?")
          (("" (inst - "d!1")
            (("" (flatten)
              (("" (expand "reduce_select")
                (("" (assert)
                  (("" (expand "exact_correct_denotation?")
                    (("" (inst?)
                      (("" (use "min_validity")
                        (("" (assert)
                          (("" (skosimp*)
                            (("" (inst?)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (use "min_reduce_min")
                                    (("" (assert)
                                      ((""
                                        (lemma "transitive")
                                        ((""
                                          (invoke
                                           (inst - "<=" "%1" "%2" "%3")
                                           (! -5 l)
                                           (! -2 l)
                                           (! -2 r))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (transitive formula-decl nil relations_extra nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil))
   nil))
 (reduce_upper_validity 0
  (reduce_upper_validity-2 nil 3398098413
   ("" (expand "quorum_correct?")
    (("" (skosimp*)
      (("" (use "quorum_nonempty")
        (("" (assert)
          (("" (expand "quorum?")
            (("" (inst - "d!1")
              (("" (expand "reduce_choice")
                (("" (expand "enabled_nonempty?")
                  (("" (inst?)
                    (("" (assert)
                      (("" (expand "exact_correct_denotation?")
                        (("" (inst?)
                          (("" (use "choice_upper_validity")
                            (("" (assert)
                              (("" (skosimp*)
                                (("" (inst?)
                                  (("" (inst?) (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (vec type-eq-decl nil node nil)
    (choice_upper_validity formula-decl nil reduce_properties nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (quorum? const-decl "bool" fault_assumptions_stage nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_correct? const-decl "bool" exact_comm_stage nil))
   nil)
  (reduce_upper_validity-1 nil 3377473687
   ("" (expand "generalized_majority_correct?")
    (("" (skosimp*)
      (("" (expand "generalized_majority?")
        (("" (expand "generalized_majority?")
          (("" (inst - "d!1")
            (("" (flatten)
              (("" (expand "reduce_select")
                (("" (assert)
                  (("" (expand "exact_correct_denotation?")
                    (("" (inst?)
                      (("" (use "max_validity")
                        (("" (assert)
                          (("" (skosimp*)
                            (("" (inst?)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (use "max_reduce_max")
                                    (("" (assert)
                                      ((""
                                        (lemma "transitive")
                                        ((""
                                          (invoke
                                           (inst - "<=" "%1" "%2" "%3")
                                           (! -2 l)
                                           (! -2 r)
                                           (! -5 r))
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets nil)
    (transitive formula-decl nil relations_extra nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (exact_correct_denotation? const-decl "bool" exact_comm_stage nil))
   nil))
 (reduce_agreement_generation 0
  (reduce_agreement_generation-2 "" 3790104896
   ("" (expand "all_symmetric?")
    (("" (skosimp*)
      (("" (lemma "enabled_agree")
        (("" (inst?)
          (("" (assert)
            (("" (inst - "d1!1" "d2!1")
              (("" (assert)
                (("" (expand "reduce_choice")
                  (("" (lemma "choice_agreement_generation")
                    (("" (inst?)
                      (("" (assert)
                        (("" (expand "enabled_symmetric?")
                          (("" (expand "exact_single_denotation?")
                            (("" (skosimp*)
                              (("" (inst?)
                                (("" (assert)
                                  (("" (expand "enabled_within?")
                                    (("" (expand "subset?")
                                      ((""
                                        (expand "member")
                                        ((""
                                          (inst?)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (reduce_agreement_generation-1 nil 3377474009
   ("" (expand "all_symmetric?")
    (("" (skosimp*)
      (("" (lemma "enabled_agree")
        (("" (inst?)
          (("" (assert)
            (("" (inst - "d1!1" "d2!1")
              (("" (assert)
                (("" (expand "reduce_choice")
                  (("" (lemma "choice_agreement_generation")
                    (("" (inst?)
                      (("" (inst - "rcvd!1(d2!1)")
                        (("" (assert)
                          (("" (expand "enabled_symmetric?")
                            (("" (expand "exact_single_denotation?")
                              (("" (skosimp*)
                                (("" (inst?)
                                  (("" (assert)
                                    (("" (expand "enabled_within?")
                                      ((""
                                        (expand "subset?")
                                        ((""
                                          (expand "member")
                                          ((""
                                            (inst?)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (vec type-eq-decl nil node nil)
    (enabled_symmetric? const-decl "bool" node nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (exact_single_denotation? const-decl "bool" exact_comm_stage nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (choice_agreement_generation formula-decl nil reduce_properties nil)
    (enabled_agree formula-decl nil fault_assumptions_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (all_symmetric? const-decl "bool" exact_comm_stage nil))
   nil))
 (reduce_min_validity 0
  (reduce_min_validity-1 nil 3377474364
   ("" (skosimp*)
    (("" (use "v_min_witness[D, T, <=]")
      (("" (skosimp*)
        (("" (replace -2 :hide? t)
          (("" (lemma "transitive")
            (("" (inst?)
              (("" (use "reduce_lower_validity")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (use "v_min_is_min[S, T, <=]")
                      (("" (prop)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (1 -6 -1))
                          (("2" (expand* "enabled_within?" "subset?" "member")
                            (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_min_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (v_min const-decl "T" select_minmax nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (v_min_is_min formula-decl nil select_minmax nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (reduce_lower_validity formula-decl nil exact_reduce_stage nil)
    (transitive formula-decl nil relations_extra nil))
   nil))
 (reduce_max_validity 0
  (reduce_max_validity-1 nil 3377474394
   ("" (skosimp*)
    (("" (use "v_max_witness[D, T, <=]")
      (("" (skosimp*)
        (("" (replace -2 :hide? t)
          (("" (lemma "transitive")
            (("" (inst?)
              (("" (use "reduce_upper_validity")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (lemma "v_max_is_max[S, T, <=]")
                      (("" (inst - "s!1" "src_set!1" "sent!1")
                        (("" (assert)
                          (("" (prop)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide-all-but (1 -6 -1))
                              (("2"
                                (expand* "enabled_within?" "subset?" "member")
                                (("2" (inst?) (("2" (prop) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_max_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (v_max const-decl "T" select_minmax nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (v_max_is_max formula-decl nil select_minmax nil)
    (enabled_within? const-decl "bool" fault_assumptions_stage nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (reduce_upper_validity formula-decl nil exact_reduce_stage nil)
    (transitive formula-decl nil relations_extra nil))
   nil))
 (reduce_consensus 0
  (reduce_consensus-1 nil 3377474435
   ("" (skosimp*)
    (("" (use "reduce_min_validity")
      (("" (use "reduce_max_validity")
        (("" (assert)
          (("" (rewrite "v_minmax_choose_alt[D, T, <=]")
            (("" (rewrite "v_minmax_choose_alt[S, T, <=]")
              (("" (hide -4 -3)
                (("" (flatten)
                  (("" (typepred "<=")
                    ((""
                      (expand* "total_order?" "partial_order?" "preorder?"
                       "transitive?")
                      (("" (prop)
                        (("1"
                          (invoke (inst - "%1" "%2" "v!1") (! -5 l) (! -5 r))
                          (("1" (assert) nil nil)) nil)
                         ("2"
                          (invoke (inst - "v!1" "%1" "%2") (! -6 l) (! -6 r))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce_min_validity formula-decl nil exact_reduce_stage nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures) (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (partial_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (v_min const-decl "T" select_minmax nil)
    (v_max const-decl "T" select_minmax nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (vec type-eq-decl nil node nil)
    (v_minmax_choose_alt formula-decl nil select_minmax nil)
    (reduce_max_validity formula-decl nil exact_reduce_stage nil))
   nil))
 (reduce_min_eq_max 0
  (reduce_min_eq_max-1 nil 3377474470
   ("" (skosimp*)
    (("" (use "v_max_witness[D, T, <=]")
      (("" (use "v_min_witness[D, T, <=]")
        (("" (skosimp*)
          (("" (replace*)
            (("" (hide -4 -2)
              (("" (use "reduce_agreement_generation") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_max_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" exact_reduce_stage nil)
    (T formal-nonempty-type-decl nil exact_reduce_stage nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_order?[T])" exact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "T" exact_reduce_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" exact_reduce_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (reduce_agreement_generation formula-decl nil exact_reduce_stage nil)
    (v_min_witness formula-decl nil select_minmax nil))
   nil)))


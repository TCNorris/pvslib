(node
 (uniform_char 0
  (uniform_char-1 nil 3398785326 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" node nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nodeid_set type-eq-decl nil node nil)
    (uniform_nodes const-decl "nodeid_set" node nil)
    (uniform? const-decl "bool" node nil))
   nil))
 (enabled_symmetric_uniform 0
  (enabled_symmetric_uniform-1 nil 3400498443
   ("" (skosimp*)
    (("" (decompose-equality)
      (("" (expand* "uniform_nodes" "enabled_symmetric?")
        (("" (inst?) (("" (iff) (("" (ground) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (nodeid_set type-eq-decl nil node nil)
    (T formal-nonempty-type-decl nil node nil) (vec type-eq-decl nil node nil)
    (uniform_nodes const-decl "nodeid_set" node nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" node nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (enabled_symmetric? const-decl "bool" node nil))
   nil))
 (m_TCC1 0
  (m_TCC1-1 nil 3414514526
   ("" (lemma "bij_exists[below(N)]")
    ((""
      (inst +
       "lambda enabled: choose({g: [below(card(enabled)) -> (enabled)] | bijective?(g)})")
      (("" (skosimp*)
        (("" (inst?)
          (("" (skosimp*)
            (("" (expand "nonempty?")
              (("" (expand "empty?")
                (("" (expand "member")
                  (("" (typepred "enabled!1")
                    (("" (expand "empty?")
                      (("" (skosimp*)
                        (("" (expand "member")
                          (("" (inst - "inverse(f!1)")
                            (("1" (rewrite "bij_inv_is_bij")
                              (("1" (inst?) nil nil)) nil)
                             ("2" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nodeid_nonempty type-eq-decl nil node nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (bijective? const-decl "bool" functions nil)
    (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "below(N)" node nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (inverse const-decl "D" function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (enabled!1 skolem-const-decl "nodeid_nonempty" node nil)
    (bij_exists formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" node nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (m existence ""
    "[enabled: node.nodeid_nonempty -> (functions[naturalnumbers.below(finite_sets[naturalnumbers.below(node.N)].card(enabled)), (enabled)].bijective?)]")))
 (vec2seq_TCC1 0
  (vec2seq_TCC1-1 nil 3414514526
   ("" (skosimp*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil
   (vec2seq subtype "{t: node.T | booleans.TRUE}"
    "(sets[node.T].nonempty?)")))
 (vec2seq_agreement 0
  (vec2seq_agreement-1 nil 3414752776
   ("" (skosimp*)
    (("" (expand "vec2seq")
      (("" (decompose-equality)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (expand "enabled_symmetric?")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vec2seq const-decl "finite_sequence[T]" node nil)
    (member const-decl "bool" sets nil)
    (enabled_symmetric? const-decl "bool" node nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" node nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (nodeid_set type-eq-decl nil node nil)
    (T formal-nonempty-type-decl nil node nil)
    (TRUE const-decl "bool" booleans nil)
    (m const-decl "(bijective?[below(card(enabled)), (enabled)])" node nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nodeid_nonempty type-eq-decl nil node nil)
    (vec type-eq-decl nil node nil) (choose const-decl "(p)" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nodes!1 skolem-const-decl "nodeid_set" node nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   shostak))
 (vec2seq_type 0
  (vec2seq_type-1 nil 3414757641
   ("" (skosimp*)
    (("" (expand "vec2seq")
      (("" (use "nonempty_card[below(N)]")
        (("" (assert)
          (("" (expand "nonempty?")
            (("" (typepred "enabled!1") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vec2seq const-decl "finite_sequence[T]" node nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (nodeid_nonempty type-eq-decl nil node nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" node nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty_card formula-decl nil finite_sets nil))
   nil
   (vec2seq_type subtype "node.vec2seq(node.v, node.enabled)" "ne_seqs[T]"))))


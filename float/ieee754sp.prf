(ieee754sp
 (IMP_float_TCC1 0
  (IMP_float_TCC1-1 nil 3700482052 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_float subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (IMP_float_props_rounding_TCC1 0
  (IMP_float_props_rounding_TCC1-1 nil 3700482052 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (IMP_float_props_rounding subtype "ieee754sp.ieee754radix"
    "integers.above(1)")))
 (single_precision_format_TCC1 0
  (single_precision_format_TCC1-1 nil 3698581150 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (single_precision_format subtype "ieee754sp.ieee754sp_prec"
    "integers.above(1)")))
 (sp_closest?_j 0
  (sp_closest?_j-1 nil 3682006290
   ("" (split 1)
    (("1" (skeep) (("1" (expand "sp_closest?") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (expand "sp_closest?")
      (("2" (use "EvenClosest_rounded_mode")
        (("2"
          (case "EvenClosest?(single_precision_format) = LAMBDA (x1, (f1: (Fbounded?(single_precision_format)))):
               EvenClosest?(single_precision_format)(x1, f1)")
          (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil))
        nil))
      nil))
    nil)
   ((EvenClosest? const-decl "bool" float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (EvenClosest_rounded_mode formula-decl nil float nil)
    (sp_closest? const-decl "bool" ieee754sp nil))
   shostak
   (sp_closest?_j subtype "ieee754sp.sp_closest?"
    "{round: float[2].RestrictedRounding(ieee754sp.single_precision_format, float[2].EvenClosest?) | float[2].rounded_mode?(ieee754sp.single_precision_format)(round)}")))
 (sp_closest?_closestroundingpred_j 0
  (sp_closest?_closestroundingpred_j-1 nil 3699276912
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (sp_closest?_closestroundingpred_j subtype "ieee754sp.sp_closest?"
    "float[2].ClosestRoundingPred(ieee754sp.single_precision_format)")))
 (RtoS_TCC1 0
  (RtoS_TCC1-1 nil 3667932138
   ("" (skeep)
    (("" (use "RND_EClosest_isEclosest")
      (("" (expand "closest_single?")
        (("" (expand "sp_closest?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((RND_EClosest_isEclosest formula-decl nil float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil))
   shostak
   (RtoS subtype
    "float[2].RND_EClosest(ieee754sp.single_precision_format)(ieee754sp.x1)"
    "{f: ieee754sp.unb_single | ieee754sp.closest_single?(ieee754sp.x1)(f)}")))
 (rtos_canonicroundfun_exactrepconservation_j 0
  (rtos_canonicroundfun_exactrepconservation_j-1 nil 3699284021
   ("" (split 1)
    (("1" (skeep)
      (("1" (typepred "RtoS(x)")
        (("1" (expand "closest_single?") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep) (("2" (typepred "RtoS(x)") (("2" (propax) nil nil)) nil))
      nil)
     ("3" (use "ClosestRtoF_exact_rep_conv[2]")
      (("3" (skeep)
        (("3" (typepred "RtoS(r)")
          (("3" (expand "closest_single?")
            (("3" (expand "sp_closest?")
              (("3" (expand "EvenClosest?") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ClosestRtoF_exact_rep_conv formula-decl nil float nil)
    (Closest? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Rounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp
     nil))
   nil
   (rtos_canonicroundfun_exactrepconservation_j subtype "ieee754sp.RtoS"
    "{RtoF: float[2].CanonicRoundingFun(ieee754sp.single_precision_format, ieee754sp.sp_closest?) | float[2].exact_rep_conservation(ieee754sp.single_precision_format, ieee754sp.sp_closest?)(RtoF)}")))
 (noteq_rew_rl1 0
  (noteq_rew_rl1-1 nil 3683491511 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil) (Flt? const-decl "bool" float nil)
    (< const-decl "bool" float nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak))
 (noteq_rew_rl2 0
  (noteq_rew_rl2-1 nil 3683491521
   ("" (skeep)
    (("" (replace -2) (("" (expand ">") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil) (Flt? const-decl "bool" float nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" float nil))
   shostak))
 (noteq_rew 0
  (noteq_rew-1 nil 3682009054
   ("" (skeep)
    (("" (iff)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand ">")
            (("1" (expand "<")
              (("1" (use "FltCorrect")
                (("1" (replace -1 :hide? t)
                  (("1" (use "FltCorrect")
                    (("1" (replace -1 :hide? t)
                      (("1" (assert)
                        (("1" (case "FtoR(X)=FtoR(Y)")
                          (("1" (hide-all-but (-1 1))
                            (("1" (use "FcanonicUnique")
                              (("1" (inst -1 "single_precision_format")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posnat_expt application-judgement "posnat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil) (Flt? const-decl "bool" float nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (< const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (FcanonicUnique formula-decl nil float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (FltCorrect formula-decl nil float nil) (> const-decl "bool" float nil))
   shostak))
 (neq_rew 0
  (neq_rew-1 nil 3682009780 ("" (expand "/=") (("" (propax) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)) shostak))
 (StoR_round 0
  (StoR_round-1 nil 3675274831
   ("" (skeep)
    (("" (expand "StoR")
      (("" (expand "Sulp")
        (("" (use "ClosestUlp")
          (("" (assert)
            (("" (split -1)
              (("1" (invoke (typepred "%2") (? 1 "(%1,%2)"))
                (("1" (expand "closest_single?")
                  (("1" (expand "sp_closest?")
                    (("1" (expand "EvenClosest?") (("1" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (invoke (typepred "%3") (? 1 "Fbounded?%1(%2)(%3)"))
                (("2" (expand "Fcanonic?")
                  (("2" (expand "Fnormal?")
                    (("2" (expand "Fsubnormal?") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((StoR const-decl "real" ieee754sp nil)
    (ClosestUlp formula-decl nil float nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvenClosest? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fsubnormal? const-decl "bool" float nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (Fnormal? const-decl "bool" float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
   exact_rep_conservation[2](single_precision_format, sp_closest?)(RtoF)}"
     ieee754sp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (Fulp_posreal_j application-judgement "posreal" ieee754sp nil)
    (Sulp const-decl "posreal" ieee754sp nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (StoR_RtoS 0
  (StoR_RtoS-1 nil 3675275376
   (""
    (case "FORALL(x,y,z: real): abs(x-y) <= z IMPLIES EXISTS(v:real): v >= -z AND v <= z AND x = y + v")
    (("1" (skeep)
      (("1" (use "StoR_round")
        (("1" (inst? -2 :where -1)
          (("1" (assert)
            (("1" (skeep -2) (("1" (inst 1 "v") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (inst 1 "x-y") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Sulp const-decl "posreal" ieee754sp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
   exact_rep_conservation[2](single_precision_format, sp_closest?)(RtoF)}"
     ieee754sp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (StoR_round formula-decl nil ieee754sp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (StoR_inc 0
  (StoR_inc-1 nil 3675328982
   ("" (skeep)
    (("" (expand "<=" -1)
      (("" (use "FleCorrect")
        (("" (assert) (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (StoR const-decl "real" ieee754sp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (FleCorrect formula-decl nil float nil))
   shostak))
 (RtoS_inc 0
  (RtoS_inc-2 "" 3790103440
   ("" (skeep)
    (("" (case "x1=x2")
      (("1" (replace -1 :hide? t)
        (("1" (expand "<=")
          (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "RtoS")
        (("2" (use "RND_EClosest_isEclosest")
          (("2" (use "EvenClosest_Monotone")
            (("2" (expand "Monotone?")
              (("2"
                (inst -1 "x1" "x2" "RND_EClosest(single_precision_format)(x1)"
                 "RND_EClosest(single_precision_format)(x2)")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (expand "<=" 2)
                      (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (use "RND_EClosest_isEclosest") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (RtoS_inc-1 nil 3675330582
   ("" (skeep)
    (("" (case "x1=x2")
      (("1" (replace -1 :hide? t)
        (("1" (expand "<=")
          (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "RtoS")
        (("2" (use "RND_EClosest_isEclosest")
          (("2" (use "EvenClosest_Monotone")
            (("2" (expand "Monotone?")
              (("2"
                (inst -1 "x1" "x2" "RND_EClosest(single_precision_format)(x1)"
                 "RND_EClosest(single_precision_format)(x2)")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (expand "<=" 2)
                      (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (use "RND_EClosest_isEclosest") nil nil))
                    nil))
                  nil)
                 ("2"
                  (typepred "RND_EClosest[2](single_precision_format)(x2)")
                  (("2" (expand "Fcanonic?")
                    (("2" (expand "Fnormal?")
                      (("2" (expand "Fsubnormal?") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" float nil) (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
   exact_rep_conservation[2](single_precision_format, sp_closest?)(RtoF)}"
     ieee754sp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (FleCorrect formula-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (Monotone? const-decl "bool" float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (EvenClosest_Monotone formula-decl nil float nil))
   shostak))
 (Sulp_def 0
  (Sulp_def-1 nil 3671547731
   ("" (skeep)
    (("" (expand "Sulp")
      (("" (use "FulpCanonic") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Sulp const-decl "posreal" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (Fulp_posreal_j application-judgement "posreal" ieee754sp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (FulpCanonic formula-decl nil float nil))
   shostak))
 (RtoS_opp 0
  (RtoS_opp-2 "" 3675336247
   ("" (skeep)
    (("" (use "FcanonicUnique")
      (("" (inst -1 "single_precision_format")
        (("" (assert)
          (("" (split -1)
            (("1" (hide 2)
              (("1" (case "closest_single?(-x)(RtoS(-x))")
                (("1" (case "closest_single?(-x)(Fopp(RtoS(x)))")
                  (("1" (use "EvenClosest_Unique")
                    (("1" (inst -1 "single_precision_format")
                      (("1" (expand "Unique?")
                        (("1" (inst? -1 :where 1)
                          (("1" (inst -1 "-x")
                            (("1" (assert)
                              (("1" (expand "closest_single?")
                                (("1" (expand "sp_closest?")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "closest_single?")
                    (("2" (expand "sp_closest?")
                      (("2" (hide 2)
                        (("2" (use "EvenClosestFopp")
                          (("2" (assert)
                            (("2" (typepred "RtoS(x)")
                              (("2" (expand "closest_single?")
                                (("2" (expand "sp_closest?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use "FcanonicOpp")
                    (("3" (assert)
                      (("3" (use "FcanonicBounded") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "RtoS(-x)") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "FcanonicOpp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FcanonicUnique formula-decl nil float nil)
    (Fopp const-decl "float" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
   exact_rep_conservation[2](single_precision_format, sp_closest?)(RtoF)}"
     ieee754sp nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Unique? const-decl "bool" float nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (EvenClosestFopp formula-decl nil float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FcanonicBounded formula-decl nil float nil)
    (FcanonicOpp formula-decl nil float nil))
   shostak)
  (RtoS_opp-1 nil 3675331460
   ("" (skeep)
    (("" (case "closest_single?(x)(RtoS(x))")
      (("1" (case "closest_single?(-x)(RtoS(-x))")
        (("1" (case "closest_single?(-x)(Fopp(RtoS(x)))")
          (("1" (hide -3)
            (("1" (expand "closest_single?")
              (("1" (expand "EvenClosest?")
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (split -4)
                      (("1" (postpone) nil nil)
                       ("2" (inst -1 "Fopp(RtoS(x))")
                        (("2" (assert)
                          (("2" (use "FcanonicUnique")
                            (("2" (assert)
                              (("2" (use "FcanonicOpp")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "RtoS(-x)")
                      (("2" (assert)
                        (("2" (use "FcanonicUnique")
                          (("2" (assert)
                            (("2" (use "FcanonicOpp") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (unique_zero_RtoS_TCC1 0
  (unique_zero_RtoS_TCC1-1 nil 3699177578
   ("" (skeep)
    (("" (use "sp_closest?_j")
      (("" (flatten)
        (("" (inst?)
          (("" (assert)
            (("" (typepred "RtoS(x)")
              (("" (expand "closest_single?") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sp_closest?_j judgement-tcc nil ieee754sp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
   exact_rep_conservation[2](single_precision_format, sp_closest?)(RtoF)}"
     ieee754sp nil))
   nil
   (unique_zero_RtoS subtype "ieee754sp.RtoS"
    "float[2].RNDF(ieee754sp.single_precision_format, float[2].EvenClosest?(ieee754sp.single_precision_format))")))
 (unique_zero_RtoS 0
  (unique_zero_RtoS-1 nil 3699177916
   ("" (expand "RtoS")
    (("" (use "unique_zero_RND_EClosest")
      (("" (invoke (case "%1 =%2") (! -1 3) (! 1 3))
        (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil))
      nil))
    nil)
   ((unique_zero_RND_EClosest formula-decl nil float_props_rounding nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp
     nil))
   shostak))
 (sp_rep_exp_bound 0
  (sp_rep_exp_bound-2 "" 3744429939
   ("" (skeep)
    (("" (lemma "rep_exp_bound")
      ((""
        (inst -1 "single_precision_format"
         "EvenClosest?(single_precision_format)" "RtoS" "exp" "x" "err" "f")
        (("1" (assert) (("1" (expand "StoR") (("1" (propax) nil nil)) nil))
          nil)
         ("2" (expand "single_precision_format")
          (("2" (typepred "exp") (("2" (propax) nil nil)) nil)) nil)
         ("3" (split 1)
          (("1" (use "sp_closest?_j")
            (("1" (flatten)
              (("1" (skeep)
                (("1" (typepred "RtoS(x!1)")
                  (("1" (expand "closest_single?")
                    (("1" (inst? -3) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (use "unique_zero_RtoS") nil nil))
            nil))
          nil)
         ("4" (expand "EvenClosest?") (("4" (skeep) nil nil)) nil))
        nil))
      nil))
    nil)
   ((rep_exp_bound formula-decl nil float_props_rounding nil)
    (sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (sp_closest?_j judgement-tcc nil ieee754sp nil)
    (unique_zero_RtoS formula-decl nil ieee754sp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (StoR const-decl "real" ieee754sp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (exp skolem-const-decl "{exp: int | -149 <= exp}" ieee754sp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (Rounding type-eq-decl nil float nil) (RNDF type-eq-decl nil float nil)
    (unique_zero const-decl "bool" float_props_rounding nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (EvenClosest? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
   exact_rep_conservation[2](single_precision_format, sp_closest?)(RtoF)}"
     ieee754sp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (sp_rep_exp_bound-1 nil 3699177587
   ("" (skeep)
    (("" (lemma "rep_exp_bound")
      ((""
        (inst -1 "single_precision_format"
         "EvenClosest?(single_precision_format)" "RtoS" "exp" "x" "err" "f")
        (("1" (assert) (("1" (expand "StoR") (("1" (propax) nil nil)) nil))
          nil)
         ("2" (expand "single_precision_format")
          (("2" (typepred "exp") (("2" (assert) nil nil)) nil)) nil)
         ("3" (split 1)
          (("1" (hide-all-but 1)
            (("1" (skeep)
              (("1" (use "unique_zero_RtoS") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (use "sp_closest?_j")
            (("2" (flatten)
              (("2" (skeep)
                (("2" (typepred "RtoS(x!1)")
                  (("2" (expand "closest_single?")
                    (("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (expand "EvenClosest?") (("4" (skeep) nil nil)) nil))
        nil))
      nil))
    nil)
   ((rep_exp_bound formula-decl nil float_props_rounding nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil) (RNDF type-eq-decl nil float nil)
    (unique_zero const-decl "bool" float_props_rounding nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil))
   shostak)))


(extended_float_sub
 (flip_sign_TCC1 0
  (flip_sign_TCC1-1 nil 3765626614
   ("" (skeep :preds? t)
    (("" (split 1)
      (("1" (lemma "FcanonicOpp")
        (("1" (inst -1 "given_format" "val(f)")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand "Fopp")
        (("2" (typepred "val(f)") (("2" (propax) nil nil)) nil)) nil)
       ("3" (expand "Fopp") (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float "float/")
    (precision formal-const-decl "above(1)" extended_float_sub nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     extended_float_sub nil)
    (given_format const-decl "Format" extended_float nil)
    (float type-eq-decl nil float "float/")
    (efloat type-decl nil extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]"
     extended_float nil)
    (Fcanonic? const-decl "bool" float "float/")
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (max_exp const-decl "posint" extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl
     "[(nzfinite?) -> {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
     extended_float nil)
    (FcanonicOpp formula-decl nil float "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float_sub nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fopp const-decl "float" float "float/")
    (minus_int_is_int application-judgement "int" integers nil))
   nil
   (flip_sign subtype
    "float[extended_float_sub.radix].Fopp(extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].val(extended_float_sub.f))"
    "{v: extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].unb_canonic_float | booleans.AND(reals.<=(Fexp(v), extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].max_exp), Fnum(v) /= 0)}")))
 (IMP_ieee754_operation_scheme__binary_TCC1 0
  (IMP_ieee754_operation_scheme__binary_TCC1-1 nil 3765626614
   ("" (subtype-tcc) nil nil) nil nil
   (IMP_ieee754_operation_scheme__binary subtype
    "LAMBDA (x, y: reals.real): (number_fields.-)(x, y)"
    "[[x: (extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].trivial?1), (extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].trivial?2(x))] -> real]")))
 (IMP_ieee754_operation_scheme__binary_TCC2 0
  (IMP_ieee754_operation_scheme__binary_TCC2-1 nil 3765626614
   ("" (subtype-tcc) nil nil) nil nil
   (IMP_ieee754_operation_scheme__binary subtype
    "extended_float_sub.x"
    "[(extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?), (extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?)]")))
 (IMP_ieee754_operation_scheme__binary_TCC3 0
  (IMP_ieee754_operation_scheme__binary_TCC3-1 nil 3765626614
   ("" (assuming-tcc) nil nil) nil nil
   (IMP_ieee754_operation_scheme__binary assuming
    "ieee754_operation_scheme__binary[extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].efloat, extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_numeric?, extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].zero?, extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?, extended_float_rounding[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].prj_ef, extended_float_rounding[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].rnd_ef, extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].trivial?1, extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].trivial?2, LAMBDA (x, y: reals.real): (number_fields.-)(x, y), extended_float_sub.sub_non_finite, restrict[[(extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?), (extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?)], {args: [extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].efloat, extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].efloat] | booleans.AND(extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?(args`1), booleans.AND(extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].is_finite?(args`2), (booleans.OR((booleans.NOT)(extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].trivial?1(extended_float_rounding[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].prj_ef(args`1))), (booleans.NOT)(extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].trivial?2(extended_float_rounding[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].prj_ef(args`1))(extended_float_rounding[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].prj_ef(args`2)))))))}, extended_float[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].efloat].restrict(extended_float_operations_support[extended_float_sub.radix, extended_float_sub.precision, extended_float_sub.dExp].nan2), extended_float_sub.sub_zero]"
    "finite_is_numeric: ASSUMPTION FORALL (X: ieee754_operation_scheme__binary.fpnumber): booleans.IMPLIES(ieee754_operation_scheme__binary.finite?(X), ieee754_operation_scheme__binary.numeric?(X))"))))


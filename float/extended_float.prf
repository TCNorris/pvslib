(extended_float
 (closest?_ucf__j 0
  (closest?_ucf__j-2 nil 3765291232
   ("" (split 1)
    (("1" (skeep) (("1" (expand "closest?_ucf") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (expand "closest?_ucf")
      (("2" (use "EvenClosest_rounded_mode")
        (("2"
          (case "EvenClosest?(given_format) = LAMBDA (x1: real, (f1: (Fbounded?(given_format)))):
                        EvenClosest?(given_format)(x1, f1)")
          (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil))
        nil))
      nil))
    nil)
   ((EvenClosest? const-decl "bool" float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (given_format const-decl "Format" extended_float nil)
    (radix formal-const-decl "above(1)" extended_float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (EvenClosest_rounded_mode formula-decl nil float nil)
    (closest?_ucf const-decl "bool" extended_float nil))
   nil
   (closest?_ucf__j subtype "extended_float.closest?_ucf"
    "{round: float[extended_float.radix].RestrictedRounding(extended_float.given_format, float[extended_float.radix].EvenClosest?) | float[extended_float.radix].rounded_mode?(extended_float.given_format)(round)}"))
  (closest?_ucf__j-1 nil 3765291217 ("" (judgement-tcc) nil nil) nil nil
   (closest?_ucf__j subtype "extended_float.closest?_ucf"
    "{round: float[extended_float.radix].RestrictedRounding(extended_float.given_format, float[extended_float.radix].EvenClosest?) | float[extended_float.radix].rounded_mode?(extended_float.given_format)(round)}")))
 (rnd_eclosest_is_particuLar_closest 0
  (rnd_eclosest_is_particuLar_closest-1 nil 3765199352
   ("" (skeep)
    (("" (use "RND_EClosest_isEclosest")
      (("" (expand "currified_closest?_ucf")
        (("" (expand "closest?_ucf") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((RND_EClosest_isEclosest formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float nil)
    (given_format const-decl "Format" extended_float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (closest?_ucf const-decl "bool" extended_float nil)
    (currified_closest?_ucf const-decl "bool" extended_float nil))
   nil))
 (rnd_ucf_TCC1 0
  (rnd_ucf_TCC1-1 nil 3765199342
   ("" (use "rnd_eclosest_is_particuLar_closest") nil nil)
   ((rnd_eclosest_is_particuLar_closest formula-decl nil extended_float nil))
   nil
   (rnd_ucf subtype
    "float[extended_float.radix].RND_EClosest(extended_float.given_format)(extended_float.x1)"
    "{f: extended_float.unb_canonic_float | extended_float.currified_closest?_ucf(extended_float.x1)(f)}")))
 (rnd_prj_ucf 0
  (rnd_prj_ucf-1 nil 3765204462
   ("" (skeep)
    (("" (expand "rnd_ucf")
      (("" (lemma "ClosestRNDF_FtoR_inverse")
        ((""
          (inst -1 "given_format" "EvenClosest?(given_format)"
           " RND_EClosest(given_format)")
          (("1" (expand "FtoR_inverse")
            (("1" (expand "prj_ucf") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (skeep) (("2" (use "RND_EClosest_isEclosest") nil nil)) nil)
           ("3" (skeep)
            (("3" (expand "EvenClosest?") (("3" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}" extended_float
     nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (given_format const-decl "Format" extended_float nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (prj_ucf const-decl "real" extended_float nil)
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (FtoR_inverse const-decl "bool" float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (ClosestRNDF_FtoR_inverse formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float nil))
   nil))
 (rnd_opp_ucf 0
  (rnd_opp_ucf-1 nil 3765539483
   ("" (skeep)
    (("" (use "FcanonicUnique")
      (("" (inst -1 "given_format")
        (("" (assert)
          (("" (split -1)
            (("1" (hide 2)
              (("1" (case "currified_closest?_ucf(-x)(rnd_ucf(-x))")
                (("1" (case "currified_closest?_ucf(-x)(Fopp(rnd_ucf(x)))")
                  (("1" (use "EvenClosest_Unique")
                    (("1" (inst -1 "given_format")
                      (("1" (expand "Unique?")
                        (("1" (inst? -1 :where 1)
                          (("1" (inst -1 "-x")
                            (("1" (assert)
                              (("1" (expand "currified_closest?_ucf")
                                (("1" (expand "closest?_ucf")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "currified_closest?_ucf")
                    (("2" (expand "closest?_ucf")
                      (("2" (hide 2)
                        (("2" (use "EvenClosestFopp")
                          (("2" (assert)
                            (("2" (typepred "rnd_ucf(x)")
                              (("2" (expand "currified_closest?_ucf")
                                (("2" (expand "closest?_ucf")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use "FcanonicOpp")
                    (("3" (assert)
                      (("3" (use "FcanonicBounded") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "rnd_ucf(-x)") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "FcanonicOpp")
              (("2" (inst -1 "given_format" "rnd_ucf(x)")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FcanonicUnique formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float nil)
    (Fopp const-decl "float" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}" extended_float
     nil)
    (currified_closest?_ucf const-decl "bool" extended_float nil)
    (Fbounded? const-decl "bool" float nil)
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (given_format const-decl "Format" extended_float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (closest?_ucf const-decl "bool" extended_float nil)
    (Unique? const-decl "bool" float nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (EvenClosestFopp formula-decl nil float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FcanonicBounded formula-decl nil float nil)
    (FcanonicOpp formula-decl nil float nil))
   nil))
 (rnd_ucf_monotonic 0
  (rnd_ucf_monotonic-1 nil 3765540525
   ("" (skeep)
    (("" (typepred "rnd_ucf(x1)")
      (("" (expand "currified_closest?_ucf")
        (("" (expand "closest?_ucf")
          (("" (use "EvenClosest_monotone")
            (("" (expand "monotone?")
              (("" (inst -1 "x1" "x2" "rnd_ucf(x1)" "rnd_ucf(x2)")
                (("" (split -1)
                  (("1" (expand "prj_ucf") (("1" (propax) nil nil)) nil)
                   ("2" (assert) nil nil) ("3" (propax) nil nil)
                   ("4" (typepred "rnd_ucf(x2)")
                    (("4" (expand "currified_closest?_ucf")
                      (("4" (expand "closest?_ucf") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}" extended_float
     nil)
    (currified_closest?_ucf const-decl "bool" extended_float nil)
    (Fbounded? const-decl "bool" float nil)
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (given_format const-decl "Format" extended_float nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" extended_float nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (closest?_ucf const-decl "bool" extended_float nil)
    (monotone? const-decl "bool" float nil)
    (prj_ucf const-decl "real" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (EvenClosest_monotone formula-decl nil float nil))
   nil))
 (rnc_ucf_increasing 0
  (rnc_ucf_increasing-1 nil 3765540564
   ("" (skeep)
    (("" (expand "<=" 1)
      (("" (use "FleCorrect")
        (("" (replace -1 :hide? t)
          (("" (use "rnd_ucf_monotonic")
            (("" (assert)
              (("" (expand "prj_ucf") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (prj_ucf const-decl "real" extended_float nil)
    (rnd_ucf_monotonic formula-decl nil extended_float nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (given_format const-decl "Format" extended_float nil)
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (Fbounded? const-decl "bool" float nil)
    (currified_closest?_ucf const-decl "bool" extended_float nil)
    (rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}" extended_float
     nil)
    (radix formal-const-decl "above(1)" extended_float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FleCorrect formula-decl nil float nil))
   nil))
 (min_exp_TCC1 0
  (min_exp_TCC1-1 nil 3765199342 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (min_exp subtype "(number_fields.-)(extended_float.dExp)" "negint")))
 (max_exp_TCC1 0
  (max_exp_TCC1-1 nil 3765199342 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (max_exp subtype
    "(number_fields.+)((number_fields.-)(extended_float.dExp, number_fields.*(2, ((number_fields.-)(extended_float.precision, 1)))), 1)"
    "posint")))
 (min_pos_value_TCC1 0
  (min_pos_value_TCC1-1 nil 3763821233 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (min_pos_value subtype "extended_float.min_exp"
    "{i: integers.int | booleans.OR(extended_float.radix /= 0, reals.>=(i, 0))}")))
 (max_pos_value_TCC1 0
  (max_pos_value_TCC1-1 nil 3763821233 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (max_pos_value subtype "extended_float.precision"
    "{i: integers.int | booleans.OR(extended_float.radix /= 0, reals.>=(i, 0))}")))
 (max_pos_value_TCC2 0
  (max_pos_value_TCC2-1 nil 3763821233 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (max_pos_value subtype "extended_float.max_exp"
    "{i: integers.int | booleans.OR(extended_float.radix /= 0, reals.>=(i, 0))}")))
 (max_pos_value_TCC3 0
  (max_pos_value_TCC3-1 nil 3763821233
   ("" (case "(radix ^ precision - 1) * radix ^ max_exp > 0")
    (("1" (assert) nil nil)
     ("2" (hide 2)
      (("2" (use "posreal_mult_closed")
        (("2" (assert)
          (("2" (hide 2)
            (("2" (typepred "radix")
              (("2" (lemma "increasing_expt_aux")
                (("2" (expand "^")
                  (("2" (inst -1 "radix" "precision -2 ")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (typepred "radix") (("3" (assert) nil nil)) nil))
      nil)
     ("4" (typepred "radix") (("4" (assert) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (increasing_expt_aux formula-decl nil exponentiation nil)
    (posreal_mult_closed formula-decl nil real_axioms nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" extended_float nil)
    (precision formal-const-decl "above(1)" extended_float nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (max_exp const-decl "posint" extended_float nil))
   nil
   (max_pos_value subtype
    "number_fields.*(((number_fields.-)(exponentiation.^(extended_float.radix, extended_float.precision), 1)), exponentiation.^(extended_float.radix, extended_float.max_exp))"
    "posreal")))
 (emax_TCC1 0
  (emax_TCC1-1 nil 3765199342 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (max_exp const-decl "posint" extended_float nil))
   nil
   (emax subtype
    "(number_fields.-)((number_fields.+)(extended_float.max_exp, extended_float.precision), 1)"
    "integers.above(1)")))
 (min_pos_value__min_pos_unb_canonic_float__eq 0
  (min_pos_value__min_pos_unb_canonic_float__eq-1 nil 3764927848
   ("" (expand "minimum_positive_bounded_value")
    (("" (expand "min_pos_value")
      (("" (expand "min_exp")
        (("" (expand "given_format") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((min_pos_value const-decl "posreal" extended_float nil)
    (given_format const-decl "Format" extended_float nil)
    (min_exp const-decl "negint" extended_float nil)
    (minimum_positive_bounded_value const-decl "posreal" float nil))
   shostak))
 (inf_exclusive 0
  (inf_exclusive-1 nil 3765039147 ("" (decompose-equality) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (efloat type-decl nil extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (infinite? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (positive? shared-adt-accessor-decl
     "[{x: efloat | infinite?(x) OR zero?(x)} -> bool]" extended_float nil)
    (inf adt-constructor-decl "[bool -> (infinite?)]" extended_float nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil))
   shostak))
 (zero_inclusive 0
  (zero_inclusive-1 nil 3765034302
   ("" (grind)
    (("" (apply-extensionality 1) (("" (apply-extensionality 3) nil nil))
      nil))
    nil)
   ((efloat_zero_extensionality formula-decl nil extended_float nil)
    (efloat type-decl nil extended_float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zero adt-constructor-decl "[bool -> (zero?)]" extended_float nil)
    (FALSE const-decl "bool" booleans nil))
   shostak))
 (zero_exclusive 0
  (zero_exclusive-1 nil 3765039125 ("" (decompose-equality) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (efloat type-decl nil extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (infinite? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (positive? shared-adt-accessor-decl
     "[{x: efloat | infinite?(x) OR zero?(x)} -> bool]" extended_float nil)
    (zero adt-constructor-decl "[bool -> (zero?)]" extended_float nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil))
   shostak)))


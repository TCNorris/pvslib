(double__interprets__ieee754_add
 (IMP_ieee754_add_TCC1 0
  (IMP_ieee754_add_TCC1-1 nil 3765548609 ("" (subtype-tcc) nil nil) nil nil
   (IMP_ieee754_add subtype "double__interprets__ieee754_data.radix_"
    "ieee754_radix")))
 (IMP_ieee754_add_TCC2 0
  (IMP_ieee754_add_TCC2-1 nil 3765548609 ("" (subtype-tcc) nil nil) nil nil
   (IMP_ieee754_add subtype "double__interprets__ieee754_data.precision_"
    "ieee754_format_parameters.ieee754_precision(2)")))
 (IMP_ieee754_add_TCC3 0
  (IMP_ieee754_add_TCC3-1 nil 3765625470 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (emax const-decl "above(1)" extended_float nil)
    (max_exp const-decl "posint" extended_float nil))
   nil
   (IMP_ieee754_add subtype "extended_float[2, 53, 1074].emax"
    "ieee754_format_parameters.ieee754_maxExp(2, 53)")))
 (IMP_ieee754_add_add_correct__finite_TCC1 0
  (IMP_ieee754_add_add_correct__finite_TCC1-2 "" 3790104297
   ("" (skeep :preds? t)
    (("" (use "ieee754_add_add_correct__finite_interpretation_obligation_1")
      nil nil))
    nil)
   ((nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (ieee754_add_add_correct__finite_interpretation_obligation_1 formula-decl
     nil extended_float_add__interprets__ieee754_add nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__finite: AXIOM FORALL (f1: (ieee754_data.finite?), f2: (ieee754_data.finite?) | booleans.OR(ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].nzfinite?(double__interprets__ieee754_add.f1), ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].nzfinite?(f2))): ieee754_add.add_ieee754(f1, f2) = ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].round((number_fields.+)(ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].proj(f1), ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].proj(f2)))"))
  (IMP_ieee754_add_add_correct__finite_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__finite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((ieee754_add_add_correct__finite_interpretation_obligation_1 formula-decl
     nil extended_float_add__interprets__ieee754_add nil)
    (efloat type-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__finite: AXIOM FORALL (f1: (ieee754_data.finite?), f2: (ieee754_data.finite?) | booleans.OR(ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].nzfinite?(double__interprets__ieee754_add.f1), ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].nzfinite?(f2))): ieee754_add.add_ieee754(f1, f2) = ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].round((number_fields.+)(ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].proj(f1), ieee754_semantics[ieee754_add.b, ieee754_add.p, ieee754_add.emax].proj(f2)))")))
 (IMP_ieee754_add_add_correct__nan_TCC1 0
  (IMP_ieee754_add_add_correct__nan_TCC1-2 "" 3790104299
   ("" (mapped-axiom-tcc) nil nil)
   ((fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (efloat type-decl nil extended_float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (nan_from const-decl "(nan?)" extended_float_operations_support nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nan: AXIOM FORALL (f1, f2: ieee754_data.datum): booleans.IMPLIES(booleans.OR(ieee754_data.NaN?(f1), ieee754_data.NaN?(f2)), ieee754_data.NaN?(ieee754_add.add_ieee754(f1, f2)))"))
  (IMP_ieee754_add_add_correct__nan_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__nan_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (efloat type-decl nil extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (nan_from const-decl "(nan?)" extended_float_operations_support nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nan: AXIOM FORALL (f1, f2: ieee754_data.datum): booleans.IMPLIES(booleans.OR(ieee754_data.NaN?(f1), ieee754_data.NaN?(f2)), ieee754_data.NaN?(ieee754_add.add_ieee754(f1, f2)))")))
 (IMP_ieee754_add_add_correct__nInf_nInf_TCC1 0
  (IMP_ieee754_add_add_correct__nInf_nInf_TCC1-2 "" 3790104300
   ("" (mapped-axiom-tcc) nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nInf_nInf: AXIOM ieee754_add.add_ieee754(ieee754_data.nInf, ieee754_data.nInf) = ieee754_data.nInf"))
  (IMP_ieee754_add_add_correct__nInf_nInf_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__nInf_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nInf_nInf: AXIOM ieee754_add.add_ieee754(ieee754_data.nInf, ieee754_data.nInf) = ieee754_data.nInf")))
 (IMP_ieee754_add_add_correct__nInf_finite_TCC1 0
  (IMP_ieee754_add_add_correct__nInf_finite_TCC1-2 "" 3790104301
   ("" (mapped-axiom-tcc) nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nInf_finite: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(ieee754_data.nInf, f) = ieee754_data.nInf"))
  (IMP_ieee754_add_add_correct__nInf_finite_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__nInf_finite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nInf_finite: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(ieee754_data.nInf, f) = ieee754_data.nInf")))
 (IMP_ieee754_add_add_correct__nInf_pInf_TCC1 0
  (IMP_ieee754_add_add_correct__nInf_pInf_TCC1-2 "" 3790104302
   ("" (mapped-axiom-tcc) nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nInf_pInf: AXIOM ieee754_data.NaN?(ieee754_add.add_ieee754(ieee754_data.nInf, ieee754_data.pInf))"))
  (IMP_ieee754_add_add_correct__nInf_pInf_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__nInf_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nInf_pInf: AXIOM ieee754_data.NaN?(ieee754_add.add_ieee754(ieee754_data.nInf, ieee754_data.pInf))")))
 (IMP_ieee754_add_add_correct__finite_nInf_TCC1 0
  (IMP_ieee754_add_add_correct__finite_nInf_TCC1-2 "" 3790104303
   ("" (mapped-axiom-tcc) nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__finite_nInf: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(f, ieee754_data.nInf) = ieee754_data.nInf"))
  (IMP_ieee754_add_add_correct__finite_nInf_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__finite_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__finite_nInf: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(f, ieee754_data.nInf) = ieee754_data.nInf")))
 (IMP_ieee754_add_add_correct__finite_pInf_TCC1 0
  (IMP_ieee754_add_add_correct__finite_pInf_TCC1-2 "" 3790104304
   ("" (mapped-axiom-tcc) nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__finite_pInf: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(f, ieee754_data.pInf) = ieee754_data.pInf"))
  (IMP_ieee754_add_add_correct__finite_pInf_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__finite_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__finite_pInf: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(f, ieee754_data.pInf) = ieee754_data.pInf")))
 (IMP_ieee754_add_add_correct__nZero_nZero_TCC1 0
  (IMP_ieee754_add_add_correct__nZero_nZero_TCC1-2 "" 3790104305
   ("" (mapped-axiom-tcc) nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nZero_nZero: AXIOM ieee754_add.add_ieee754(ieee754_data.nZero, ieee754_data.nZero) = ieee754_data.nZero"))
  (IMP_ieee754_add_add_correct__nZero_nZero_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__nZero_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__nZero_nZero: AXIOM ieee754_add.add_ieee754(ieee754_data.nZero, ieee754_data.nZero) = ieee754_data.nZero")))
 (IMP_ieee754_add_add_correct__pZero_pZero_TCC1 0
  (IMP_ieee754_add_add_correct__pZero_pZero_TCC1-2 "" 3790104306
   ("" (mapped-axiom-tcc) nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pZero_pZero: AXIOM ieee754_add.add_ieee754(ieee754_data.pZero, ieee754_data.pZero) = ieee754_data.pZero"))
  (IMP_ieee754_add_add_correct__pZero_pZero_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__pZero_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pZero_pZero: AXIOM ieee754_add.add_ieee754(ieee754_data.pZero, ieee754_data.pZero) = ieee754_data.pZero")))
 (IMP_ieee754_add_add_correct__pInf_nInf_TCC1 0
  (IMP_ieee754_add_add_correct__pInf_nInf_TCC1-2 "" 3790104307
   ("" (mapped-axiom-tcc) nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pInf_nInf: AXIOM ieee754_data.NaN?(ieee754_add.add_ieee754(ieee754_data.pInf, ieee754_data.nInf))"))
  (IMP_ieee754_add_add_correct__pInf_nInf_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__pInf_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pInf_nInf: AXIOM ieee754_data.NaN?(ieee754_add.add_ieee754(ieee754_data.pInf, ieee754_data.nInf))")))
 (IMP_ieee754_add_add_correct__pInf_finite_TCC1 0
  (IMP_ieee754_add_add_correct__pInf_finite_TCC1-2 "" 3790104308
   ("" (mapped-axiom-tcc) nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pInf_finite: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(ieee754_data.pInf, f) = ieee754_data.pInf"))
  (IMP_ieee754_add_add_correct__pInf_finite_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__pInf_finite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pInf_finite: AXIOM FORALL (f: (ieee754_data.finite?)): ieee754_add.add_ieee754(ieee754_data.pInf, f) = ieee754_data.pInf")))
 (IMP_ieee754_add_add_correct__pInf_pInf_TCC1 0
  (IMP_ieee754_add_add_correct__pInf_pInf_TCC1-2 "" 3790104309
   ("" (mapped-axiom-tcc) nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pInf_pInf: AXIOM ieee754_add.add_ieee754(ieee754_data.pInf, ieee754_data.pInf) = ieee754_data.pInf"))
  (IMP_ieee754_add_add_correct__pInf_pInf_TCC1-1 nil 3765548609
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_add_add_correct__pInf_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil))
   nil
   (IMP_ieee754_add mapped-axiom
    "ieee754_add[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, add_ieee754 := add_ed }}.ieee754_add"
    "add_correct__pInf_pInf: AXIOM ieee754_add.add_ieee754(ieee754_data.pInf, ieee754_data.pInf) = ieee754_data.pInf"))))


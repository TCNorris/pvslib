double__interprets__ieee754_data
: THEORY BEGIN

  radix_     : MACRO { i: posint | i=2 } = 2
  precision_ : MACRO { i: posint | radix_=2 IMPLIES (i=53 OR i=24)} = 53
  dExp_      : MACRO { d: posnat | radix_=2 IMPLIES (precision_=53 IMPLIES d=1074) AND (precision_=24 IMPLIES d=149) }
               = 1074

  IMPORTING extended_float[radix_,precision_,dExp_]

  %
  % Interpretation
  %

  ieee754_data_pinf_not_finite_interpretation_obligation_1:  LEMMA
    NOT is_finite?(posinf);
  
  ieee754_data_pinf_not_NaN_interpretation_obligation_1: LEMMA
    NOT nan?(posinf);
  
  ieee754_data_ninf_not_finite_interpretation_obligation_1: LEMMA
    NOT is_finite?(neginf);
  
  ieee754_data_ninf_not_NaN_interpretation_obligation_1: LEMMA
    NOT nan?(neginf);
  
  ieee754_data_nan_not_finite_interpretation_obligation_1: LEMMA
    FORALL (nan: {x: efloat | nan?(x)}):
      NOT is_finite?(nan);
  
  ieee754_data_pzero_finite_interpretation_obligation_1: LEMMA
    is_finite?(poszero);
  
  ieee754_data_nzero_finite_interpretation_obligation_1: LEMMA
    is_finite?(negzero);

  ieee754_data_pInf_nInf_Nan_finite_interpretation_obligation_1: LEMMA
    FORALL (f: efloat):
      f /= posinf AND
       f /= neginf AND NOT nan?(f)
       IMPLIES is_finite?(f);

%|- IMP_ieee754_data_*_TCC1: PROOF
%|- (then (skeep :preds? t) (use "ieee754_data_$1_interpretation_obligation_1") (assert))
%|- QED
 
  IMPORTING ieee754_data {{
    datum := efloat,
    finite? := is_finite?,
    pInf := posinf,
    nInf := neginf,
    NaN? := nan?,
    pZero := poszero,
    nZero := negzero }}

END double__interprets__ieee754_data

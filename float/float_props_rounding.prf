(float_props_rounding
 (exp_bound_TCC1 0
  (exp_bound_TCC1-1 nil 3699177029 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (exp_bound subtype "float_props_rounding.exp"
    "{i: integers.int | booleans.OR(float_props_rounding.radix /= 0, reals.>=(i, 0))}")))
 (exp_bound 0
  (exp_bound-1 nil 3699177037
   ("" (skeep)
    (("" (case "FtoR(RtoF(x))=0")
      (("1" (typepred "RtoF")
        (("1" (inst -2 "x")
          (("1" (split -2)
            (("1" (typepred "exp") (("1" (assert) nil nil)) nil)
             ("2" (expand "FtoR" -2)
              (("2" (hide-all-but (-2 1)) (("2" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "exp < Fexp(RtoF(x))")
        (("1" (hide 2)
          (("1" (case "radix ^ exp < FtoR(RtoF(x))")
            (("1" (hide -2)
              (("1" (case "Closest?(b)(x,RtoF(x))")
                (("1" (expand "Closest?")
                  (("1" (inst -1 "float_pair(1, exp)")
                    (("1" (case "FtoR(float_pair(1, exp))=radix^exp")
                      (("1" (replace -1 :hide? t) (("1" (grind) nil nil)) nil)
                       ("2" (expand "FtoR" 1)
                        (("2" (expand "float_pair") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Fbounded?")
                      (("2" (expand "float_pair")
                        (("2" (hide-all-but 1)
                          (("2" (expand "abs")
                            (("2" (assert)
                              (("2" (use "radix_less_vNum")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "RtoF")
                  (("2" (typepred "round")
                    (("2" (inst? -1)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "FtoR" 1)
              (("2" (lemma "both_sides_expt_gt1_lt")
                (("2" (inst? -1 :where 1)
                  (("1" (inst? -1 :where -2)
                    (("1" (replace -1 :hide? t :dir rl)
                      (("1" (lemma "lt_times_lt_pos1")
                        (("1"
                          (inst -1 "radix^exp" "1" "radix ^ (Fexp(RtoF(x)))"
                           "Fnum(RtoF(x))")
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (case "FtoR(RtoF(x)) > 0")
                              (("1" (case "Fnum(RtoF(x)) > 0")
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but (-1 1))
                                  (("2" (expand "FtoR")
                                    (("2" (assert)
                                      (("2" (grind-reals) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but (1 4))
                                (("2" (lemma "RleRoundedR0")
                                  (("2" (inst -1 "Closest?" "b" "RtoF(x)" "x")
                                    (("2" (split -1)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (typepred "RtoF")
                                        (("3"
                                          (typepred "round")
                                          (("3"
                                            (inst? -1 :where 1)
                                            (("3"
                                              (inst? -2 :where -1)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use "Closest_RoundedMode")
                                        nil
                                        nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (b skolem-const-decl "Format[radix]" float_props_rounding nil)
    (float_pair const-decl "float" float nil)
    (exp skolem-const-decl "{exp: int | -dExp(b) <= exp}" float_props_rounding
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (expt def-decl "real" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (radix_less_vNum formula-decl nil float nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pos_times_gt formula-decl nil real_props nil)
    (RleRoundedR0 formula-decl nil float nil)
    (Closest_RoundedMode formula-decl nil float nil)
    (RND type-eq-decl nil float nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (float type-eq-decl nil float nil) (FtoR const-decl "real" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   nil))
 (closestrounding_preserves_fplowerbound 0
  (closestrounding_preserves_fplowerbound-1 nil 3699176999
   ("" (skeep)
    (("" (case "FtoR(RtoF(x)) < FtoR(f)")
      (("1" (hide 1)
        (("1" (typepred "RtoF")
          (("1" (typepred "round")
            (("1" (inst -1 "x" "RtoF(x)")
              (("1" (inst -2 "x")
                (("1" (assert)
                  (("1" (expand "Closest?")
                    (("1" (inst -1 "f")
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (float type-eq-decl nil float nil) (FtoR const-decl "real" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil))
   nil))
 (rep_exp_bound_TCC1 0
  (rep_exp_bound_TCC1-1 nil 3699178118 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (unique_zero const-decl "bool" float_props_rounding nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil) (/= const-decl "boolean" notequal nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (rep_exp_bound subtype "float_props_rounding.exp"
    "{i: integers.int | booleans.OR(float_props_rounding.radix /= 0, reals.>=(i, 0))}")))
 (rep_exp_bound 0
  (rep_exp_bound-1 nil 3699176590
   ("" (skeep)
    (("" (case "abs(FtoR(f)) <=  abs(x) + err")
      (("1" (hide -2)
        (("1" (case "abs(FtoR(f)) = FtoR(Fabs(f))")
          (("1" (replace -1 :hide? t)
            (("1" (case "FtoR(Fabs(f)) <= FtoR(RtoF(abs(x) + err))")
              (("1" (hide -2)
                (("1" (lemma "Lexico")
                  (("1" (inst -1 "b" "Fabs(f)" "RtoF(abs(x) + err)")
                    (("1" (split -1)
                      (("1" (hide -2)
                        (("1" (expand "Fabs" -1)
                          (("1" (lemma "exp_bound")
                            (("1"
                              (inst -1 "b" "round" "RtoF" "exp"
                               "abs(x)  + err")
                              (("1" (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2" (typepred "RtoF")
                                (("2" (expand "unique_zero")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (hide-all-but 1)
                        (("3" (expand "Fabs")
                          (("3" (expand "FtoR") (("3" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (typepred "RtoF") (("4" (inst? -2) nil nil)) nil)
                       ("5" (use "FabsCanonic") (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 1))
                (("2" (lemma "closestrounding_preserves_fplowerbound")
                  (("2" (inst -1 "b" "round" "RtoF" "Fabs(f)" "abs(x) + err")
                    (("1" (assert) nil nil)
                     ("2" (use "FabsBounded")
                      (("2" (assert)
                        (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "FabsCorrect") (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (use "abs_dist") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((abs_dist formula-decl nil abs_lems reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fabs const-decl "float" float nil)
    (FabsBounded formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (f skolem-const-decl "(Fcanonic?(b))" float_props_rounding nil)
    (closestrounding_preserves_fplowerbound formula-decl nil
     float_props_rounding nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (RtoF skolem-const-decl
     "{RtoF: CanonicRoundingFun(b, round) | unique_zero(b, round, RtoF)}"
     float_props_rounding nil)
    (round skolem-const-decl "ClosestRoundingPred[radix](b)"
           float_props_rounding nil)
    (b skolem-const-decl "Format[radix]" float_props_rounding nil)
    (exp_bound formula-decl nil float_props_rounding nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (FabsCanonic formula-decl nil float nil)
    (Lexico formula-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (unique_zero const-decl "bool" float_props_rounding nil)
    (FabsCorrect formula-decl nil float nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (float type-eq-decl nil float nil) (FtoR const-decl "real" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (unique_zero_closest_rounding 0
  (unique_zero_closest_rounding-1 nil 3699216677
   ("" (expand "unique_zero")
    (("" (skeep*)
      (("" (typepred "RtoF")
        (("" (inst? -2)
          (("" (hide -1)
            (("" (expand "Fcanonic?")
              (("" (invoke (case "%1") (! -1 1))
                (("1" (hide -2)
                  (("1" (expand "Fnormal?")
                    (("1" (typepred "RtoF(y)")
                      (("1" (expand "Fbounded?")
                        (("1" (flatten)
                          (("1" (replace -4 :hide? t) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "Fsubnormal?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Fnormal? const-decl "bool" float nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (Fsubnormal? const-decl "bool" float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil) (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (unique_zero const-decl "bool" float_props_rounding nil))
   shostak))
 (unique_zero_RND_aux 0
  (unique_zero_RND_aux-1 nil 3699202825
   ("" (skeep*)
    (("" (typepred "RND_aux(b)(y)")
      (("" (expand "Fcanonic?")
        (("" (invoke (case "%1") (! -1 1))
          (("1" (hide -2)
            (("1" (expand "Fnormal?")
              (("1" (flatten)
                (("1" (expand "Fbounded?")
                  (("1" (flatten)
                    (("1" (replace -4 :hide? t) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "Fsubnormal?") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((RND_aux const-decl "(Fcanonic?(b))" float nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fsubnormal? const-decl "bool" float nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fbounded? const-decl "bool" float nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Fnormal? const-decl "bool" float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (unique_zero_RND_Min_TCC1 0
  (unique_zero_RND_Min_TCC1-1 nil 3765014622
   ("" (skeep* :preds? t) (("" (use "RND_Min_isMin") nil nil)) nil)
   ((Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RND_Min_isMin formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (unique_zero_RND_Min subtype
    "float[float_props_rounding.radix].RND_Min(float_props_rounding.b)"
    "float[float_props_rounding.radix].RNDF(float_props_rounding.b, float[float_props_rounding.radix].isMin?(float_props_rounding.b))")))
 (unique_zero_RND_Min 0
  (unique_zero_RND_Min-1 nil 3699185066
   ("" (skeep)
    (("" (expand "unique_zero")
      (("" (skeep)
        (("" (expand "RND_Min")
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "unique_zero_RND_aux") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (lemma "unique_zero_RND_aux")
                          (("1" (inst -1 "b" "-y")
                            (("1" (assert)
                              (("1" (expand "Fopp") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (use "FpredFoppFsucc")
                          (("2" (replace -1 :hide? t)
                            (("2" (expand "Fopp" (-1 2))
                              (("2" (lemma "FsuccPos")
                                (("2" (inst -1 "b" "RND_aux(b)(-y)")
                                  (("2" (split -1)
                                    (("1" (expand "FtoR" -1)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (lemma "RND_aux_ge")
                                      (("2"
                                        (inst -1 "b" "-y")
                                        (("2"
                                          (lemma "FpredPos")
                                          (("2"
                                            (inst
                                             -1
                                             "b"
                                             "Fsucc(b)(RND_aux(b)(-y))")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (lemma "FpredFsucc")
                                                (("1"
                                                  (inst?)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3"
                                                (use "FsuccCanonic")
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unique_zero const-decl "bool" float_props_rounding nil)
    (RND_Min const-decl "(Fcanonic?(b))" float nil)
    (FpredFoppFsucc formula-decl nil float nil)
    (RND_aux const-decl "(Fcanonic?(b))" float nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FtoR const-decl "real" float nil) (Fsucc const-decl "float" float nil)
    (FpredFsucc formula-decl nil float nil)
    (FsuccCanonic formula-decl nil float nil)
    (FpredPos formula-decl nil float nil)
    (RND_aux_ge formula-decl nil float nil)
    (FsuccPos formula-decl nil float nil) (Fopp const-decl "float" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (unique_zero_RND_aux formula-decl nil float_props_rounding nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (Format type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (unique_zero_RND_Max_TCC1 0
  (unique_zero_RND_Max_TCC1-1 nil 3765014622
   ("" (skeep* :preds? t) (("" (use "RND_Max_isMax") nil nil)) nil)
   ((Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RND_Max_isMax formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (unique_zero_RND_Max subtype
    "float[float_props_rounding.radix].RND_Max(float_props_rounding.b)"
    "float[float_props_rounding.radix].RNDF(float_props_rounding.b, float[float_props_rounding.radix].isMax?(float_props_rounding.b))")))
 (unique_zero_RND_Max 0
  (unique_zero_RND_Max-1 nil 3699184990
   ("" (skeep)
    (("" (expand "unique_zero")
      (("" (skeep)
        (("" (expand "RND_Max")
          (("" (expand "Fopp")
            (("" (use "unique_zero_RND_Min")
              (("" (expand "unique_zero")
                (("" (inst -1 "-y") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unique_zero const-decl "bool" float_props_rounding nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (unique_zero_RND_Min formula-decl nil float_props_rounding nil)
    (Format type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fopp const-decl "float" float nil))
   shostak))
 (unique_zero_RND_EClosest_TCC1 0
  (unique_zero_RND_EClosest_TCC1-1 nil 3765014622
   ("" (skeep* :preds? t) (("" (use "RND_EClosest_isEclosest") nil nil)) nil)
   ((Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (unique_zero_RND_EClosest subtype
    "float[float_props_rounding.radix].RND_EClosest(float_props_rounding.b)"
    "float[float_props_rounding.radix].RNDF(float_props_rounding.b, float[float_props_rounding.radix].EvenClosest?(float_props_rounding.b))")))
 (unique_zero_RND_EClosest 0
  (unique_zero_RND_EClosest-1 nil 3699179317
   ("" (skeep)
    (("" (expand "RND_EClosest")
      (("" (expand "unique_zero")
        (("" (skeep)
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "unique_zero_RND_Min")
                    (("1" (expand "unique_zero")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (use "unique_zero_RND_Max")
                          (("1" (expand "unique_zero")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (use "unique_zero_RND_Min")
                              (("1" (expand "unique_zero")
                                (("1" (inst?) (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (use "unique_zero_RND_Min")
                                    (("1" (expand "unique_zero")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (assert)
                                  (("2" (use "unique_zero_RND_Max")
                                    (("2" (expand "unique_zero")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (unique_zero_RND_Max formula-decl nil float_props_rounding nil)
    (unique_zero_RND_Min formula-decl nil float_props_rounding nil)
    (Format type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (unique_zero const-decl "bool" float_props_rounding nil))
   shostak)))


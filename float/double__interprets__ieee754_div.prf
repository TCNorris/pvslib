(double__interprets__ieee754_div
 (IMP_ieee754_div_TCC1 0
  (IMP_ieee754_div_TCC1-1 nil 3765655147 ("" (subtype-tcc) nil nil) nil nil
   (IMP_ieee754_div subtype "double__interprets__ieee754_data.radix_"
    "ieee754_radix")))
 (IMP_ieee754_div_TCC2 0
  (IMP_ieee754_div_TCC2-1 nil 3765655147 ("" (subtype-tcc) nil nil) nil nil
   (IMP_ieee754_div subtype "double__interprets__ieee754_data.precision_"
    "ieee754_format_parameters.ieee754_precision(2)")))
 (IMP_ieee754_div_TCC3 0
  (IMP_ieee754_div_TCC3-1 nil 3765655147 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (emax const-decl "above(1)" extended_float nil)
    (max_exp const-decl "posint" extended_float nil))
   nil
   (IMP_ieee754_div subtype "extended_float[2, 53, 1074].emax"
    "ieee754_format_parameters.ieee754_maxExp(2, 53)")))
 (IMP_ieee754_div_div_correct__finite_TCC1 0
  (IMP_ieee754_div_div_correct__finite_TCC1-2 "" 3790104460
   ("" (skeep :preds? t)
    (("" (use "ieee754_div_div_correct__finite_interpretation_obligation_1")
      nil nil))
    nil)
   nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__finite: AXIOM FORALL (f1: (ieee754_data.finite?), f2: (ieee754_data.finite?) | booleans.AND(ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nzfinite?(double__interprets__ieee754_div.f1), ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nzfinite?(f2))): ieee754_div.div_ieee754(f1, f2) = ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].round(number_fields./(ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].proj(f1), ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].proj(f2)))"))
  (IMP_ieee754_div_div_correct__finite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__finite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((ieee754_div_div_correct__finite_interpretation_obligation_1 formula-decl
     nil extended_float_div__interprets__ieee754_div nil)
    (efloat type-decl nil extended_float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_finite? const-decl "bool" extended_float nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__finite: AXIOM FORALL (f1: (ieee754_data.finite?), f2: (ieee754_data.finite?) | booleans.AND(ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nzfinite?(double__interprets__ieee754_div.f1), ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nzfinite?(f2))): ieee754_div.div_ieee754(f1, f2) = ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].round(number_fields./(ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].proj(f1), ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].proj(f2)))")))
 (IMP_ieee754_div_div_correct__nan_TCC1 0
  (IMP_ieee754_div_div_correct__nan_TCC1-2 "" 3790104462
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nan: AXIOM FORALL (f1, f2: ieee754_data.datum): booleans.IMPLIES(booleans.OR(ieee754_data.NaN?(f1), ieee754_data.NaN?(f2)), ieee754_data.NaN?(ieee754_div.div_ieee754(f1, f2)))"))
  (IMP_ieee754_div_div_correct__nan_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nan_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (efloat type-decl nil extended_float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (nan_from const-decl "(nan?)" extended_float_operations_support nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nan: AXIOM FORALL (f1, f2: ieee754_data.datum): booleans.IMPLIES(booleans.OR(ieee754_data.NaN?(f1), ieee754_data.NaN?(f2)), ieee754_data.NaN?(ieee754_div.div_ieee754(f1, f2)))")))
 (IMP_ieee754_div_div_correct__nInf_nInf_TCC1 0
  (IMP_ieee754_div_div_correct__nInf_nInf_TCC1-2 "" 3790104463
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_nInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.nInf))"))
  (IMP_ieee754_div_div_correct__nInf_nInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nInf_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_nInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.nInf))")))
 (IMP_ieee754_div_div_correct__nInf_nfinite_TCC1 0
  (IMP_ieee754_div_div_correct__nInf_nfinite_TCC1-2 "" 3790104464
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.nInf, f) = ieee754_data.pInf"))
  (IMP_ieee754_div_div_correct__nInf_nfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nInf_nfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (posinf const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.nInf, f) = ieee754_data.pInf")))
 (IMP_ieee754_div_div_correct__nInf_nZero_TCC1 0
  (IMP_ieee754_div_div_correct__nInf_nZero_TCC1-2 "" 3790104465
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_nZero: AXIOM ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.nZero) = ieee754_data.pInf"))
  (IMP_ieee754_div_div_correct__nInf_nZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nInf_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_nZero: AXIOM ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.nZero) = ieee754_data.pInf")))
 (IMP_ieee754_div_div_correct__nInf_pZero_TCC1 0
  (IMP_ieee754_div_div_correct__nInf_pZero_TCC1-2 "" 3790104466
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_pZero: AXIOM ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.pZero) = ieee754_data.nInf"))
  (IMP_ieee754_div_div_correct__nInf_pZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nInf_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_pZero: AXIOM ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.pZero) = ieee754_data.nInf")))
 (IMP_ieee754_div_div_correct__nInf_pfinite_TCC1 0
  (IMP_ieee754_div_div_correct__nInf_pfinite_TCC1-2 "" 3790104467
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.nInf, f) = ieee754_data.nInf"))
  (IMP_ieee754_div_div_correct__nInf_pfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nInf_pfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.nInf, f) = ieee754_data.nInf")))
 (IMP_ieee754_div_div_correct__nInf_pInf_TCC1 0
  (IMP_ieee754_div_div_correct__nInf_pInf_TCC1-2 "" 3790104468
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_pInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.pInf))"))
  (IMP_ieee754_div_div_correct__nInf_pInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nInf_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((neginf const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nInf_pInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nInf, ieee754_data.pInf))")))
 (IMP_ieee754_div_div_correct__nfinite_nInf_TCC1 0
  (IMP_ieee754_div_div_correct__nfinite_nInf_TCC1-2 "" 3790104469
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_nInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nInf) = ieee754_data.pZero"))
  (IMP_ieee754_div_div_correct__nfinite_nInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nfinite_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (poszero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_nInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nInf) = ieee754_data.pZero")))
 (IMP_ieee754_div_div_correct__nfinite_nZero_TCC1 0
  (IMP_ieee754_div_div_correct__nfinite_nZero_TCC1-2 "" 3790104470
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_nZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nZero) = ieee754_data.pInf"))
  (IMP_ieee754_div_div_correct__nfinite_nZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nfinite_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_nZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nZero) = ieee754_data.pInf")))
 (IMP_ieee754_div_div_correct__nfinite_pZero_TCC1 0
  (IMP_ieee754_div_div_correct__nfinite_pZero_TCC1-2 "" 3790104471
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_pZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pZero) = ieee754_data.nInf"))
  (IMP_ieee754_div_div_correct__nfinite_pZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nfinite_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_pZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pZero) = ieee754_data.nInf")))
 (IMP_ieee754_div_div_correct__nfinite_pInf_TCC1 0
  (IMP_ieee754_div_div_correct__nfinite_pInf_TCC1-2 "" 3790104472
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_pInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pInf) = ieee754_data.nZero"))
  (IMP_ieee754_div_div_correct__nfinite_pInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nfinite_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (negzero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nfinite_pInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pInf) = ieee754_data.nZero")))
 (IMP_ieee754_div_div_correct__nZero_nInf_TCC1 0
  (IMP_ieee754_div_div_correct__nZero_nInf_TCC1-2 "" 3790104473
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_nInf: AXIOM ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.nInf) = ieee754_data.pZero"))
  (IMP_ieee754_div_div_correct__nZero_nInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nZero_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_nInf: AXIOM ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.nInf) = ieee754_data.pZero")))
 (IMP_ieee754_div_div_correct__nZero_nfinite_TCC1 0
  (IMP_ieee754_div_div_correct__nZero_nfinite_TCC1-2 "" 3790104474
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.nZero, f) = ieee754_data.pZero"))
  (IMP_ieee754_div_div_correct__nZero_nfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nZero_nfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poszero const-decl "efloat" extended_float nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.nZero, f) = ieee754_data.pZero")))
 (IMP_ieee754_div_div_correct__nZero_nZero_TCC1 0
  (IMP_ieee754_div_div_correct__nZero_nZero_TCC1-2 "" 3790104475
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_nZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.nZero))"))
  (IMP_ieee754_div_div_correct__nZero_nZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nZero_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_nZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.nZero))")))
 (IMP_ieee754_div_div_correct__nZero_pZero_TCC1 0
  (IMP_ieee754_div_div_correct__nZero_pZero_TCC1-2 "" 3790104477
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_pZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.pZero))"))
  (IMP_ieee754_div_div_correct__nZero_pZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nZero_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_pZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.pZero))")))
 (IMP_ieee754_div_div_correct__nZero_pfinite_TCC1 0
  (IMP_ieee754_div_div_correct__nZero_pfinite_TCC1-2 "" 3790104478
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.nZero, f) = ieee754_data.nZero"))
  (IMP_ieee754_div_div_correct__nZero_pfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nZero_pfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.nZero, f) = ieee754_data.nZero")))
 (IMP_ieee754_div_div_correct__nZero_pInf_TCC1 0
  (IMP_ieee754_div_div_correct__nZero_pInf_TCC1-2 "" 3790104479
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_pInf: AXIOM ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.pInf) = ieee754_data.nZero"))
  (IMP_ieee754_div_div_correct__nZero_pInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__nZero_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__nZero_pInf: AXIOM ieee754_div.div_ieee754(ieee754_data.nZero, ieee754_data.pInf) = ieee754_data.nZero")))
 (IMP_ieee754_div_div_correct__pZero_nInf_TCC1 0
  (IMP_ieee754_div_div_correct__pZero_nInf_TCC1-2 "" 3790104480
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_nInf: AXIOM ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.nInf) = ieee754_data.nZero"))
  (IMP_ieee754_div_div_correct__pZero_nInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pZero_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_nInf: AXIOM ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.nInf) = ieee754_data.nZero")))
 (IMP_ieee754_div_div_correct__pZero_nfinite_TCC1 0
  (IMP_ieee754_div_div_correct__pZero_nfinite_TCC1-2 "" 3790104481
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.pZero, f) = ieee754_data.nZero"))
  (IMP_ieee754_div_div_correct__pZero_nfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pZero_nfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (negzero const-decl "efloat" extended_float nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.pZero, f) = ieee754_data.nZero")))
 (IMP_ieee754_div_div_correct__pZero_nZero_TCC1 0
  (IMP_ieee754_div_div_correct__pZero_nZero_TCC1-2 "" 3790104482
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_nZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.nZero))"))
  (IMP_ieee754_div_div_correct__pZero_nZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pZero_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_nZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.nZero))")))
 (IMP_ieee754_div_div_correct__pZero_pZero_TCC1 0
  (IMP_ieee754_div_div_correct__pZero_pZero_TCC1-2 "" 3790104483
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_pZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.pZero))"))
  (IMP_ieee754_div_div_correct__pZero_pZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pZero_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_pZero: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.pZero))")))
 (IMP_ieee754_div_div_correct__pZero_pfinite_TCC1 0
  (IMP_ieee754_div_div_correct__pZero_pfinite_TCC1-2 "" 3790104484
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.pZero, f) = ieee754_data.pZero"))
  (IMP_ieee754_div_div_correct__pZero_pfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pZero_pfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.pZero, f) = ieee754_data.pZero")))
 (IMP_ieee754_div_div_correct__pZero_pInf_TCC1 0
  (IMP_ieee754_div_div_correct__pZero_pInf_TCC1-2 "" 3790104485
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_pInf: AXIOM ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.pInf) = ieee754_data.pZero"))
  (IMP_ieee754_div_div_correct__pZero_pInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pZero_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pZero_pInf: AXIOM ieee754_div.div_ieee754(ieee754_data.pZero, ieee754_data.pInf) = ieee754_data.pZero")))
 (IMP_ieee754_div_div_correct__pfinite_nInf_TCC1 0
  (IMP_ieee754_div_div_correct__pfinite_nInf_TCC1-2 "" 3790104486
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_nInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nInf) = ieee754_data.nZero"))
  (IMP_ieee754_div_div_correct__pfinite_nInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pfinite_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (negzero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_nInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nInf) = ieee754_data.nZero")))
 (IMP_ieee754_div_div_correct__pfinite_nZero_TCC1 0
  (IMP_ieee754_div_div_correct__pfinite_nZero_TCC1-2 "" 3790104487
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_nZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nZero) = ieee754_data.nInf"))
  (IMP_ieee754_div_div_correct__pfinite_nZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pfinite_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_nZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.nZero) = ieee754_data.nInf")))
 (IMP_ieee754_div_div_correct__pfinite_pZero_TCC1 0
  (IMP_ieee754_div_div_correct__pfinite_pZero_TCC1-2 "" 3790104488
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_pZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pZero) = ieee754_data.pInf"))
  (IMP_ieee754_div_div_correct__pfinite_pZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pfinite_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negzero const-decl "efloat" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_pZero: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pZero) = ieee754_data.pInf")))
 (IMP_ieee754_div_div_correct__pfinite_pInf_TCC1 0
  (IMP_ieee754_div_div_correct__pfinite_pInf_TCC1-2 "" 3790104490
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_pInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pInf) = ieee754_data.pZero"))
  (IMP_ieee754_div_div_correct__pfinite_pInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pfinite_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (negzero const-decl "efloat" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (poszero const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pfinite_pInf: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(f, ieee754_data.pInf) = ieee754_data.pZero")))
 (IMP_ieee754_div_div_correct__pInf_nInf_TCC1 0
  (IMP_ieee754_div_div_correct__pInf_nInf_TCC1-2 "" 3790104491
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_nInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.nInf))"))
  (IMP_ieee754_div_div_correct__pInf_nInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pInf_nInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_nInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.nInf))")))
 (IMP_ieee754_div_div_correct__pInf_nfinite_TCC1 0
  (IMP_ieee754_div_div_correct__pInf_nfinite_TCC1-2 "" 3790104492
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.pInf, f) = ieee754_data.nInf"))
  (IMP_ieee754_div_div_correct__pInf_nfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pInf_nfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nznfinite? const-decl "bool" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (neginf const-decl "efloat" extended_float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_nfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].nfinite?)): ieee754_div.div_ieee754(ieee754_data.pInf, f) = ieee754_data.nInf")))
 (IMP_ieee754_div_div_correct__pInf_nZero_TCC1 0
  (IMP_ieee754_div_div_correct__pInf_nZero_TCC1-2 "" 3790104493
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_nZero: AXIOM ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.nZero) = ieee754_data.nInf"))
  (IMP_ieee754_div_div_correct__pInf_nZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pInf_nZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_nZero: AXIOM ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.nZero) = ieee754_data.nInf")))
 (IMP_ieee754_div_div_correct__pInf_pZero_TCC1 0
  (IMP_ieee754_div_div_correct__pInf_pZero_TCC1-2 "" 3790104494
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_pZero: AXIOM ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.pZero) = ieee754_data.pInf"))
  (IMP_ieee754_div_div_correct__pInf_pZero_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pInf_pZero_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_pZero: AXIOM ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.pZero) = ieee754_data.pInf")))
 (IMP_ieee754_div_div_correct__pInf_pfinite_TCC1 0
  (IMP_ieee754_div_div_correct__pInf_pfinite_TCC1-2 "" 3790104495
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.pInf, f) = ieee754_data.pInf"))
  (IMP_ieee754_div_div_correct__pInf_pfinite_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pInf_pfinite_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((nzpfinite? const-decl "bool" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_pfinite: AXIOM FORALL (f: (ieee754_semantics[ieee754_div.b, ieee754_div.p, ieee754_div.emax].pfinite?)): ieee754_div.div_ieee754(ieee754_data.pInf, f) = ieee754_data.pInf")))
 (IMP_ieee754_div_div_correct__pInf_pInf_TCC1 0
  (IMP_ieee754_div_div_correct__pInf_pInf_TCC1-2 "" 3790104496
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_pInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.pInf))"))
  (IMP_ieee754_div_div_correct__pInf_pInf_TCC1-1 nil 3765655147
   (""
    (try (try (mapped-axiom-tcc) (fail) (skip)) (fail)
     (then (skeep :preds? t)
      (use "ieee754_div_div_correct__pInf_pInf_interpretation_obligation_1")
      (assert)))
    nil nil)
   ((posinf const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (neginf const-decl "efloat" extended_float nil)
    (inf_exclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (qnan const-decl "efloat" extended_float nil)
    (div_non_finite const-decl "efloat" extended_float_div nil)
    (div_zero const-decl "efloat" extended_float_div nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]" extended_float_operations_support
     nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (div_ed const-decl "efloat" extended_float_div nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_ieee754_div mapped-axiom
    "ieee754_div[2, 53, extended_float[2, 53, 1074].emax]{{ sem_th := double__interprets__ieee754_semantics, div_ieee754 := div_ed }}.ieee754_div"
    "div_correct__pInf_pInf: AXIOM ieee754_data.NaN?(ieee754_div.div_ieee754(ieee754_data.pInf, ieee754_data.pInf))"))))


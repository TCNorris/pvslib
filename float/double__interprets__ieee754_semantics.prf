(double__interprets__ieee754_semantics
 (IMP_extended_float_rounding_TCC1 0
  (IMP_extended_float_rounding_TCC1-1 nil 3765633151
   ("" (subtype-tcc) nil nil) nil nil
   (IMP_extended_float_rounding subtype
    "double__interprets__ieee754_data.radix_" "integers.above(1)")))
 (IMP_extended_float_rounding_TCC2 0
  (IMP_extended_float_rounding_TCC2-1 nil 3765633151
   ("" (subtype-tcc) nil nil) nil nil
   (IMP_extended_float_rounding subtype
    "double__interprets__ieee754_data.precision_"
    "integers.above(1)")))
 (IMP_extended_float_rounding_TCC3 0
  (IMP_extended_float_rounding_TCC3-1 nil 3765633151
   ("" (subtype-tcc) nil nil) nil nil
   (IMP_extended_float_rounding subtype
    "double__interprets__ieee754_data.dExp_"
    "{d: integers.posnat | reals.>(d, 103)}")))
 (IMP_ieee754_domain_TCC1 0
  (IMP_ieee754_domain_TCC1-1 nil 3763916267 ("" (tcc)) nil nil
   (IMP_ieee754_domain subtype
    "double__interprets__ieee754_data.radix_" "integers.above(1)")))
 (IMP_ieee754_domain_TCC2 0
  (IMP_ieee754_domain_TCC2-1 nil 3765210904 ("" (subtype-tcc) nil nil)
   nil nil
   (IMP_ieee754_domain subtype
    "double__interprets__ieee754_data.precision_"
    "integers.above(1)")))
 (proj_round_is_monotone_on_er_TCC1 0
  (proj_round_is_monotone_on_er_TCC1-1 nil 3765735663
   ("" (skeep) (("" (use "rtoed_er_is_finite") nil nil)) nil)
   ((er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil))
   nil
   (proj_round_is_monotone_on_er subtype
    "extended_float_rounding[2, 53, 1074].rnd_ef(double__interprets__ieee754_semantics.x)"
    "(extended_float[2, 53, 1074].is_finite?)")))
 (proj_round_is_monotone_on_er_TCC2 0
  (proj_round_is_monotone_on_er_TCC1-2 nil 3763831915
   ("" (skeep :preds? t) (("" (use "rtoed_er_is_finite") nil nil)) nil)
   ((er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil))
   nil
   (proj_round_is_monotone_on_er subtype
    "extended_float_rounding[2, 53, 1074].rnd_ef(double__interprets__ieee754_semantics.y)"
    "(extended_float[2, 53, 1074].is_finite?)"))
  (proj_round_is_monotone_on_er_TCC1-1 nil 3763831821
   ("" (subtype-tcc) nil nil) nil nil
   (proj_round_is_monotone_on_er subtype
    "extended_float_rounding[2, 53, 1074].rnd_ef(double__interprets__ieee754_semantics.y)"
    "(extended_float[2, 53, 1074].is_finite?)")))
 (proj_round_is_monotone_on_er 0
  (proj_round_is_monotone_on_er-1 nil 3763831825
   ("" (skeep :preds? t)
    (("" (rewrite "proj_round_er_eq_unb")
      (("" (rewrite "proj_round_er_eq_unb")
        (("" (typepred "rnd_ucf(x)")
          (("" (expand "currified_closest?_ucf")
            (("" (use "closest?_ucf__j")
              (("" (flatten)
                (("" (expand "rounded_mode?")
                  (("" (flatten)
                    (("" (expand "monotone?")
                      (("" (inst -5 "x" "y" "rnd_ucf(x)" "rnd_ucf(y)")
                        (("" (split -5)
                          (("1" (expand "prj_ucf")
                            (("1" (propax) nil nil)) nil)
                           ("2" (case "x=y")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("3" (propax) nil nil)
                           ("4" (typepred "rnd_ucf(y)")
                            (("4" (expand "currified_closest?_ucf")
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj_round_er_eq_unb formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil)
    (emax const-decl "above(1)" extended_float nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}"
     extended_float nil)
    (currified_closest?_ucf const-decl "bool" extended_float nil)
    (Fbounded? const-decl "bool" float nil)
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (given_format const-decl "Format" extended_float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (closest?_ucf__j judgement-tcc nil extended_float nil)
    (rounded_mode? const-decl "bool" float nil)
    (monotone? const-decl "bool" float nil)
    (prj_ucf const-decl "real" extended_float nil))
   nil))
 (ieee754_semantics_interpretation_obligation_1 0
  (ieee754_semantics_interpretation_obligation_1-1 nil 3765289162
   ("" (assert) nil nil) nil shostak))
 (ieee754_semantics_interpretation_obligation_2 0
  (ieee754_semantics_interpretation_obligation_2-1 nil 3765289162
   (""
    (then (skeep)
     (spread (use "round_inverse_of_projection_on_nzfinite")
      ((assert)
       (then (typepred "f") (expand "nzfinite?") (flatten)
        (expand "is_finite?")
        (spread (split -1)
         ((then (expand "prj_ef") (assert)
           (spread (split -1) ((assert) (assert))))
          (propax)))))))
    nil nil)
   ((round_inverse_of_projection_on_nzfinite formula-decl nil
     extended_float_rounding nil))
   shostak))
 (ieee754_semantics_interpretation_obligation_3 0
  (ieee754_semantics_interpretation_obligation_3-1 nil 3765289162
   ("" (tcc) nil nil)
   ((emax const-decl "above(1)" extended_float nil)
    (max_exp const-decl "posint" extended_float nil))
   shostak))
 (ieee754_semantics_interpretation_obligation_5 0
  (ieee754_semantics_interpretation_obligation_5-1 nil 3765289162
   ("" (skeep)
    (("" (expand "prj_ef")
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "exactly_representable?")
            (("1" (inst 1 "0" "1" "LAMBDA(i:below(53)): 0")
              (("1" (expand "value")
                (("1"
                  (case "(LAMBDA (i_1: nat): IF i_1 < 53 THEN 0 * 2 ^ (-i_1) ELSE 0 ENDIF) = LAMBDA (i_1: nat): 0 ")
                  (("1" (replace -1 :hide? t)
                    (("1" (rewrite "sigma_zero[nat]")
                      (("1" (grind-reals) nil nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (apply-extensionality)
                      (("2" (lift-if 1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (eval-formula) nil nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "exactly_representable?")
            (("2" (name-replace "f" "val(x1)")
              (("1"
                (inst 2 "IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF"
                 "Fexp(f) + 53 - 1"
                 "             (LAMBDA (i: below(53)): mod(floor(2 ^ (i+1-53) * abs(Fnum(f))), 2))")
                (("1" (expand "value")
                  (("1"
                    (name-replace "significand_value" "sigma(0, 52,
             LAMBDA (i_1: nat):
               IF i_1 < 53
                 THEN mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) *
                       2 ^ (-i_1)
               ELSE 0
               ENDIF)")
                    (("1"
                      (case-replace
                       "2 ^ (52 + Fexp(f)) = 2 ^ 52 * 2 ^ Fexp(f)")
                      (("1" (div-by 2 "2 ^ (Fexp(f))")
                        (("1"
                          (case "2 ^ 52 * 2 ^ Fexp(f) * (-1) ^ IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF * significand_value / 2 ^ (Fexp(f)) = 2 ^ 52  * (-1) ^ IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF * significand_value")
                          (("1" (replace -1 :hide? t)
                            (("1"
                              (case "Fnum(f)=(-1) ^ IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF * abs(Fnum(f))")
                              (("1"
                                (case
                                 "significand_value*2^52=abs(Fnum(f))")
                                (("1"
                                  (replace -1 :hide? t :dir rl)
                                  (("1"
                                    (expand "prj_ucf")
                                    (("1"
                                      (expand "FtoR")
                                      (("1"
                                        (assert)
                                        (("1" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -2 -1)
                                  (("2"
                                    (expand "significand_value")
                                    (("2"
                                      (case
                                       "FORALL(j:upto(53)): sigma(0, j-1,
            LAMBDA (i_1: nat):
              IF i_1 < 53
                THEN mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) *
                      2 ^ (-i_1)
              ELSE 0
              ENDIF) * 2^(j-1) = floor(abs(Fnum(f))*2^(j-53))")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (rewrite "expt_x0")
                                            (("1"
                                              (lemma "floor_int")
                                              (("1" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (induct
                                           "j"
                                           1
                                           "upto_induction[53]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "floor_0")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind-reals)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (mult-by
                                                         1
                                                         "2 ^ 53")
                                                        (("3"
                                                          (field 1)
                                                          (("3"
                                                            (hide -1)
                                                            (("3"
                                                              (case
                                                               "abs(Fnum(f)) * 2 ^ 53 * 2 ^ (-53) =abs(Fnum(f))")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (typepred
                                                                   "f")
                                                                  (("1"
                                                                    (lemma
                                                                     "FcanonicBounded")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "Fbounded?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "given_format")
                                                                              (("1"
                                                                                (expand
                                                                                 "vNum")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (case
                                                                   "abs(Fnum(f)) * 2 ^ 53 * 2 ^ (-53) = abs(Fnum(f)) * (2 ^ 53 * 2 ^ (-53))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_plus"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "sigma" 1)
                                                (("2"
                                                  (case-replace
                                                   "2 ^ jt * sigma(0, jt - 1,
             LAMBDA (i_1: nat):
               IF i_1 < 53
                 THEN mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) *
                       2 ^ (-i_1)
               ELSE 0
               ENDIF) = 2*floor(abs(Fnum(f)) * 2 ^ (jt - 53))")
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (case-replace
                                                       " mod(floor((2 ^ (jt - 52)) * abs(Fnum(f))), 2) * 2 ^ (-jt) * 2 ^ jt =  mod(floor((2 ^ (jt - 52)) * abs(Fnum(f))), 2) * (2 ^ (-jt) * 2 ^ jt)")
                                                      (("1"
                                                        (rewrite
                                                         "expt_plus"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "FORALL (n,j:int): mod(floor(2^j*n),2)+ 2*floor(2^(j-1)*n)=floor(2^j*n)")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "rem_floor")
                                                                  (("2"
                                                                    (lemma
                                                                     "mod_to_rem")
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "2"
                                                                       "floor(2 ^ j * n)")
                                                                      (("2"
                                                                        (case
                                                                         "mod(floor(2 ^ j * n), 2) + 2 * floor(2 ^ (j - 1) * n) = rem(2)(floor(2 ^ j * n)) + 2 * floor(floor(2 ^ j * n) / 2)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           -2)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (rewrite
                                                                               -1)
                                                                              (("2"
                                                                                (move-terms
                                                                                 1
                                                                                 l
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (div-by
                                                                                     1
                                                                                     "2")
                                                                                    (("2"
                                                                                      (case
                                                                                       "(FORALL (r:real): (floor(r)=floor(floor(2*r)/2)))")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "2 ^ (j - 1) * n")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "2 ^ j=2 * (2 ^ (j - 1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "expt_plus")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "1"
                                                                                               "j-1"
                                                                                               "2")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "expt_x1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (case
                                                                                             "floor(floor(2 * r) / 2) <= r")
                                                                                            (("1"
                                                                                              (case
                                                                                               " r < floor(floor(2 * r) / 2)+1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (move-terms
                                                                                                   1
                                                                                                   r
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (trans-ineq
                                                                                                     1
                                                                                                     "floor(2 * r) / 2-1+1/2"
                                                                                                     :strict
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (field
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (field
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "floor(2 * r) - 2 < floor(floor(2 * r) / 2) * 2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (div-by
                                                                                                 1
                                                                                                 "2")
                                                                                                (("2"
                                                                                                  (grind-reals)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (rewrite
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (div-by
                                                         1
                                                         "sigma(0, jt - 1,
             LAMBDA (i_1: nat):
               IF i_1 < 53
                 THEN mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) *
                       2 ^ (-i_1)
               ELSE 0
               ENDIF)")
                                                        (("2"
                                                          (field 1)
                                                          (("2"
                                                            (lemma
                                                             "expt_plus")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "1"
                                                               "jt-1"
                                                               "2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "abs")
                                  (("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (field 1) nil nil))
                          nil))
                        nil)
                       ("2" (rewrite "expt_plus") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "f")
                  (("2" (typepred "x1")
                    (("2" (expand "is_finite?")
                      (("2" (assert)
                        (("2" (typepred "val(x1)")
                          (("1" (split 1)
                            (("1" (lemma "FcanonicBounded")
                              (("1"
                                (inst? -1 :where -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "Fbounded?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "given_format")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "vNum")
                                            (("1"
                                              (expand "max_exp")
                                              (("1"
                                                (expand "emin")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "emax")
                                                    (("1"
                                                      (expand
                                                       "max_exp")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "max_exp")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "emax")
                                  (("2"
                                    (expand "max_exp")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "x1")
                (("2" (expand "is_finite?")
                  (("2" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prj_ef const-decl "real" extended_float_rounding nil)
    (float type-eq-decl nil float nil)
    (efloat type-decl nil extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (given_format const-decl "Format" extended_float nil)
    (unb_canonic_float type-eq-decl nil extended_float nil)
    (max_exp const-decl "posint" extended_float nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
     extended_float nil)
    (is_finite? const-decl "bool" extended_float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (FcanonicBounded formula-decl nil float nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (mod_to_rem formula-decl nil mod_lems "ints/")
    (FtoR const-decl "real" float nil)
    (prj_ucf const-decl "real" extended_float nil)
    (sigma def-decl "real" sigma "reals/")
    (emin const-decl "negint" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil)
    (sign type-eq-decl nil ieee754_domain nil)
    (exponent type-eq-decl nil ieee754_domain nil)
    (significand type-eq-decl nil ieee754_domain nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma_zero formula-decl nil sigma "reals/")
    (zero_inclusive formula-decl nil extended_float nil)
    (value const-decl "real" ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil))
   shostak))
 (ieee754_semantics_round_er_injective_interpretation_obligation_1 0
  (ieee754_semantics_round_er_injective_interpretation_obligation_1-1
   nil 3765289163 ("" (use "round_is_injective_on_er") nil nil)
   ((round_is_injective_on_er formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil))
   shostak))
 (ieee754_semantics_proj_def_pZero_interpretation_obligation_1_TCC1 0
  (ieee754_semantics_proj_def_pZero_interpretation_obligation_1_TCC1-1
   nil 3765289146 ("" (subtype-tcc) nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil))
   nil
   (ieee754_semantics_proj_def_pZero_interpretation_obligation_1
    subtype "extended_float[2, 53, 1074].poszero"
    "(extended_float[2, 53, 1074].is_finite?)")))
 (ieee754_semantics_proj_def_pZero_interpretation_obligation_1 0
  (ieee754_semantics_proj_def_pZero_interpretation_obligation_1-1 nil
   3765289162 ("" (mapped-axiom-tcc) nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float_rounding nil))
   shostak))
 (ieee754_semantics_proj_def_nZero_interpretation_obligation_1_TCC1 0
  (ieee754_semantics_proj_def_nZero_interpretation_obligation_1_TCC1-1
   nil 3765289146 ("" (subtype-tcc) nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (is_finite? const-decl "bool" extended_float nil))
   nil
   (ieee754_semantics_proj_def_nZero_interpretation_obligation_1
    subtype "extended_float[2, 53, 1074].negzero"
    "(extended_float[2, 53, 1074].is_finite?)")))
 (ieee754_semantics_proj_def_nZero_interpretation_obligation_1 0
  (ieee754_semantics_proj_def_nZero_interpretation_obligation_1-1 nil
   3765289162 ("" (mapped-axiom-tcc) nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float_rounding nil))
   shostak))
 (ieee754_semantics_round_total_on_nzfinite_interpretation_obligation_1
  0
  (ieee754_semantics_round_total_on_nzfinite_interpretation_obligation_1-1
   nil 3765289163
   ("" (skeep :preds? t)
    (("" (inst 1 "prj_ef(f)")
      (("1" (lemma "round_inverse_of_projection_on_nzfinite")
        (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
       ("2" (use "ieee754_semantics_interpretation_obligation_5") nil
        nil))
      nil))
    nil)
   ((nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (is_finite? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (round_inverse_of_projection_on_nzfinite formula-decl nil
     extended_float_rounding nil))
   shostak))
 (ieee754_semantics_round_zero_interpretation_obligation_1 0
  (ieee754_semantics_round_zero_interpretation_obligation_1-1 nil
   3765289163
   ("" (expand "rnd_ef")
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (propax) nil nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rnd_ef const-decl "efloat" extended_float_rounding nil)) shostak))
 (ieee754_semantics_proj_round_interpretation_obligation_1_TCC1 0
  (ieee754_semantics_proj_round_interpretation_obligation_1_TCC1-1 nil
   3765735663
   ("" (skeep) (("" (use "rtoed_er_is_finite") nil nil)) nil)
   ((er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil))
   nil
   (ieee754_semantics_proj_round_interpretation_obligation_1 subtype
    "extended_float_rounding[2, 53, 1074].rnd_ef(double__interprets__ieee754_semantics.x)"
    "(extended_float[2, 53, 1074].is_finite?)")))
 (ieee754_semantics_proj_round_interpretation_obligation_1 0
  (ieee754_semantics_proj_round_interpretation_obligation_1-1 nil
   3765289162 ("" (use "proj_round_on_er") nil nil)
   ((proj_round_on_er formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil))
   shostak))
 (ieee754_semantics_round_monotone_interpretation_obligation_1 0
  (ieee754_semantics_round_monotone_interpretation_obligation_1-1 nil
   3765289163 ("" (use "proj_round_is_monotone_on_er") nil nil) nil
   shostak))
 (IMP_ieee754_semantics_TCC1 0
  (IMP_ieee754_semantics_TCC1-2 "" 3765287804
   (""
    (then (use "ieee754_semantics_interpretation_obligation_1")
     (assert))
    nil nil)
   nil shostak
   (IMP_ieee754_semantics subtype
    "double__interprets__ieee754_data.radix_" "ieee754_radix"))
  (IMP_ieee754_semantics_TCC1-1 nil 3763730012
   ("" (skeep)
    (("" (expand "prj_ef")
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "exactly_representable?")
            (("1" (inst 1 "0" "1" "LAMBDA(i:below(53)): 0")
              (("1" (expand "value")
                (("1"
                  (case "(LAMBDA (i_1: below(53)): 0 * 2 ^ (-i_1)) = LAMBDA (i_1: below(53)): 0 ")
                  (("1" (replace -1 :hide? t)
                    (("1" (rewrite "sigma_zero[below(53)]")
                      (("1" (grind-reals) nil nil)) nil))
                    nil)
                   ("2" (hide 2) (("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "prj_ucf")
            (("2" (expand "FtoR")
              (("2" (expand "exactly_representable?")
                (("2" (name-replace "f" "val(x1)")
                  (("1"
                    (inst 2 "IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF"
                     "Fexp(f) + 53 - 1"
                     "             (LAMBDA (i: below(53)):
                      mod(floor(2 ^ (i+1-53) * abs(Fnum(f))), 2))")
                    (("1" (expand "value")
                      (("1"
                        (name-replace "significand_value"
                         "sigma[below(53)](0, 52,
             LAMBDA (i_1: below(53)):
               mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) * 2 ^ (-i_1))")
                        (("1"
                          (case-replace
                           "2 ^ (52 + Fexp(f)) = 2 ^ 52 * 2 ^ Fexp(f)")
                          (("1" (div-by 2 "2 ^ (Fexp(f))")
                            (("1"
                              (case "2 ^ 52 * 2 ^ Fexp(f) * (-1) ^ IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF *
        significand_value
        / 2 ^ (Fexp(f)) = 2 ^ 52  * (-1) ^ IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF *
        significand_value")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (case
                                   "Fnum(f)=(-1) ^ IF Fnum(f) >= 0 THEN 0 ELSE 1 ENDIF * abs(Fnum(f))")
                                  (("1"
                                    (case
                                     "significand_value*2^52=abs(Fnum(f))")
                                    (("1"
                                      (assert)
                                      (("1" (grind-reals) nil nil))
                                      nil)
                                     ("2"
                                      (hide 3 -2 -1)
                                      (("2"
                                        (expand "significand_value")
                                        (("2"
                                          (case
                                           "FORALL(j:upto(53)): sigma[below(53)] (0,j-1,LAMBDA (i_1: below(53)):
                                  mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) * 2 ^ (-i_1)) * 2^(j-1) = floor(abs(Fnum(f))*2^(j-53))")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (rewrite "expt_x0")
                                                (("1"
                                                  (lemma "floor_int")
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (induct
                                               "j"
                                               1
                                               "upto_induction[53]")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "floor_0")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind-reals)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (mult-by
                                                             1
                                                             "2 ^ 53")
                                                            (("3"
                                                              (field 1)
                                                              (("3"
                                                                (hide
                                                                 -1)
                                                                (("3"
                                                                  (case
                                                                   "abs(Fnum(f)) * 2 ^ 53 * 2 ^ (-53) =abs(Fnum(f))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (typepred
                                                                       "f")
                                                                      (("1"
                                                                        (lemma
                                                                         "FcanonicBounded")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "Fbounded?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "given_format")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "vNum")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (case
                                                                       "abs(Fnum(f)) * 2 ^ 53 * 2 ^ (-53) = abs(Fnum(f)) * (2 ^ 53 * 2 ^ (-53))")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (rewrite
                                                                           "expt_plus"
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "sigma" 1)
                                                    (("2"
                                                      (case-replace
                                                       "2 ^ jt *
       sigma[below(53)](0, jt - 1,
             LAMBDA (i_1: below(53)):
               mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) * 2 ^ (-i_1)) = 2*floor(abs(Fnum(f)) * 2 ^ (jt - 53))")
                                                      (("1"
                                                        (hide -1 -3)
                                                        (("1"
                                                          (case-replace
                                                           " mod(floor((2 ^ (jt - 52)) * abs(Fnum(f))), 2) * 2 ^ (-jt) * 2 ^ jt =  mod(floor((2 ^ (jt - 52)) * abs(Fnum(f))), 2) * (2 ^ (-jt) * 2 ^ jt)")
                                                          (("1"
                                                            (rewrite
                                                             "expt_plus"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "FORALL (n,j:int): mod(floor(2^j*n),2)+
                            2*floor(2^(j-1)*n)=floor(2^j*n)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (lemma
                                                                       "rem_floor")
                                                                      (("2"
                                                                        (lemma
                                                                         "mod_to_rem")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "2"
                                                                           "floor(2 ^ j * n)")
                                                                          (("2"
                                                                            (case
                                                                             "mod(floor(2 ^ j * n), 2) + 2 * floor(2 ^ (j - 1) * n)
                            = rem(2)(floor(2 ^ j * n)) +
                                    2 * floor(floor(2 ^ j * n) / 2)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               -2)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   -1)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     1
                                                                                     l
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (div-by
                                                                                         1
                                                                                         "2")
                                                                                        (("2"
                                                                                          (case
                                                                                           "(FORALL (r:real): (floor(r)=floor(floor(2*r)/2)))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "2 ^ (j - 1) * n")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "2 ^ j=2 * (2 ^ (j - 1))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "expt_plus")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "1"
                                                                                                   "j-1"
                                                                                                   "2")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "expt_x1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "floor(floor(2 * r) / 2) <= r")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   " r < floor(floor(2 * r) / 2)+1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (move-terms
                                                                                                       1
                                                                                                       r
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (trans-ineq
                                                                                                         1
                                                                                                         "floor(2 * r) / 2-1+1/2"
                                                                                                         :strict
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (field
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (field
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "floor(2 * r) - 2 <
                                       floor(floor(2 * r) / 2) * 2")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (div-by
                                                                                                     1
                                                                                                     "2")
                                                                                                    (("2"
                                                                                                      (grind-reals)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (div-by
                                                             1
                                                             "sigma[below(53)]
           (0, jt - 1,
            LAMBDA (i_1: below(53)):
              mod(floor((2 ^ (i_1 - 52)) * abs(Fnum(f))), 2) * 2 ^ (-i_1))")
                                                            (("2"
                                                              (field 1)
                                                              (("2"
                                                                (lemma
                                                                 "expt_plus")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "1"
                                                                   "jt-1"
                                                                   "2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep 1 :preds? t)
                                                  (("3"
                                                    (inst 2 "1")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3"
                                              (skeep 1 :preds? t)
                                              (("3"
                                                (inst 2 "1")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "abs")
                                      (("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (field 1) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_plus") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "f")
                      (("2" (typepred "x1")
                        (("2" (expand "is_finite?")
                          (("2" (assert)
                            (("2" (typepred "val(x1)")
                              (("1"
                                (split 1)
                                (("1"
                                  (lemma "FcanonicBounded")
                                  (("1"
                                    (inst? -1 :where -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "Fbounded?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "given_format")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "max_exp")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "x1")
                    (("2" (expand "is_finite?")
                      (("2" (split -1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (IMP_ieee754_semantics subtype
    "double__interprets__ieee754_data.radix_" "ieee754_radix")))
 (IMP_ieee754_semantics_TCC2 0
  (IMP_ieee754_semantics_round_er_injective_TCC1-1 nil 3763730012
   (""
    (then (use "ieee754_semantics_interpretation_obligation_2")
     (assert))
    nil nil)
   nil nil
   (IMP_ieee754_semantics subtype
    "double__interprets__ieee754_data.precision_"
    "ieee754_format_parameters.ieee754_precision(2)")))
 (IMP_ieee754_semantics_TCC3 0
  (IMP_ieee754_semantics_finite_represents_er_TCC1-1 nil 3763730012
   (""
    (then (use "ieee754_semantics_interpretation_obligation_3")
     (assert))
    nil nil)
   nil nil
   (IMP_ieee754_semantics subtype "extended_float[2, 53, 1074].emax"
    "ieee754_format_parameters.ieee754_maxExp(2, 53)")))
 (IMP_ieee754_semantics_TCC4 0
  (IMP_ieee754_semantics_TCC5-1 nil 3765214228
   (""
    (then (use "ieee754_semantics_interpretation_obligation_5")
     (assert))
    nil nil)
   nil nil
   (IMP_ieee754_semantics subtype
    "extended_float_rounding[2, 53, 1074].prj_ef"
    "[{x: extended_float[2, 53, 1074].efloat | extended_float[2, 53, 1074].is_finite?(x)} -> er_real[2, 53, emax[2, 53, 1074]]]"))
  (IMP_ieee754_semantics_proj_def_nZero_TCC1-1 nil 3763730012
   ("" (tcc))
   ((negzero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float_rounding nil))
   shostak
   (IMP_ieee754_semantics subtype
    "extended_float_rounding[2, 53, 1074].prj_ef"
    "[{x: extended_float[2, 53, 1074].efloat | extended_float[2, 53, 1074].is_finite?(x)} -> er_real[2, 53, emax[2, 53, 1074]]]")))
 (IMP_ieee754_semantics_TCC5 0
  (IMP_ieee754_semantics_round_total_on_nzfinite_TCC1-1 nil 3763820616
   (""
    (then (use "ieee754_semantics_interpretation_obligation_4")
     (assert))
    nil nil)
   ((is_finite? const-decl "bool" extended_float nil)
    (flip_sign const-decl "efloat" extended_float_rounding nil))
   nil
   (IMP_ieee754_semantics subtype
    "extended_float_rounding[2, 53, 1074].flip_sign"
    "[{x: extended_float[2, 53, 1074].efloat | extended_float[2, 53, 1074].nzfinite?(x)} -> {x: extended_float[2, 53, 1074].efloat | extended_float[2, 53, 1074].is_finite?(x)}]"))
  (IMP_ieee754_semantics_finite_round_er_TCC1-1 nil 3763730012
   ("" (skeep :preds? t)
    (("" (expand "is_finite?")
      (("" (expand "exactly_representable?")
        (("" (flatten)
          (("" (expand "rnd_ef")
            (("" (lift-if 1)
              (("" (lift-if 2)
                (("" (assert)
                  (("" (split 1)
                    (("1" (assert) (("1" (postpone) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split 2)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (split 4)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1" (postpone) nil nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (IMP_ieee754_semantics subtype
    "extended_float_rounding[2, 53, 1074].flip_sign"
    "[{x: extended_float[2, 53, 1074].efloat | extended_float[2, 53, 1074].nzfinite?(x)} -> {x: extended_float[2, 53, 1074].efloat | extended_float[2, 53, 1074].is_finite?(x)}]")))
 (IMP_ieee754_semantics_round_er_injective_TCC1 0
  (IMP_ieee754_semantics_round_monotone_TCC1-1 nil 3765628492
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_round_er_injective_interpretation_obligation_1")
     (assert))
    nil)
   ((emax const-decl "above(1)" extended_float nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_er_injective: AXIOM FORALL (x, y: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): booleans.IMPLIES(ieee754_semantics.round(x) = ieee754_semantics.round(y), x = y)")))
 (IMP_ieee754_semantics_proj_def_pZero_TCC1 0
  (IMP_ieee754_semantics_round_monotone_TCC1-1 nil 3765210904
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_proj_def_pZero_interpretation_obligation_1")
     (assert))
    nil)
   ((emax const-decl "above(1)" extended_float nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil))
   shostak
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "proj_def_pZero: AXIOM ieee754_semantics.proj(ieee754_data.pZero) = 0")))
 (IMP_ieee754_semantics_proj_def_nZero_TCC1 0
  (IMP_ieee754_semantics_proj_round_TCC1-1 nil 3765210904
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_proj_def_nZero_interpretation_obligation_1")
     (assert))
    nil)
   ((ieee754_semantics_round_proj_interpretation_obligation_1
     formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil)
    (efloat type-decl nil extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil))
   shostak
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "proj_def_nZero: AXIOM ieee754_semantics.proj(ieee754_data.nZero) = 0")))
 (IMP_ieee754_semantics_nzfinite?_def_TCC1 0
  (IMP_ieee754_semantics_round_monotone_TCC1-1 nil 3765629286
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_nzfinite?_def_interpretation_obligation_1")
     (assert))
    nil)
   nil nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "nzfinite?_def: AXIOM FORALL (f: ieee754_data.datum): ieee754_semantics.nzfinite?(f) = (booleans.AND(ieee754_data.finite?(f), ieee754_semantics.proj(f) /= 0))")))
 (IMP_ieee754_semantics_pfinite?_def_TCC1 0
  (IMP_ieee754_semantics_proj_round_TCC1-1 nil 3765629286
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_pfinite?_def_interpretation_obligation_1")
     (assert))
    nil)
   ((efloat type-decl nil extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "pfinite?_def: AXIOM FORALL (f: ieee754_data.datum): ieee754_semantics.pfinite?(f) = (booleans.AND(ieee754_data.finite?(f), reals.>(ieee754_semantics.proj(f), 0)))")))
 (IMP_ieee754_semantics_nfinite?_def_TCC1 0
  (IMP_ieee754_semantics_TCC6-1 nil 3765628492
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_nfinite?_def_interpretation_obligation_1")
     (assert))
    nil)
   ((ieee754_semantics_add_inv_def_interpretation_obligation_1
     formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil)
    (efloat type-decl nil extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "nfinite?_def: AXIOM FORALL (f: ieee754_data.datum): ieee754_semantics.nfinite?(f) = (booleans.AND(ieee754_data.finite?(f), reals.<(ieee754_semantics.proj(f), 0)))")))
 (IMP_ieee754_semantics_add_inv_def_TCC1 0
  (IMP_ieee754_semantics_round_proj_TCC1-1 nil 3765210904
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_add_inv_def_interpretation_obligation_1")
     (assert))
    nil)
   ((ieee754_semantics_nfinite?_def_interpretation_obligation_1
     formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil)
    (efloat type-decl nil extended_float nil))
   shostak
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "add_inv_def: AXIOM FORALL (f: (ieee754_semantics.nzfinite?)): ieee754_semantics.proj(ieee754_semantics.add_inv(f)) = (number_fields.-)(ieee754_semantics.proj(f))")))
 (IMP_ieee754_semantics_round_total_on_nzfinite_TCC1 0
  (IMP_ieee754_semantics_proj_round_TCC1-1 nil 3765288085
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_round_total_on_nzfinite_interpretation_obligation_1")
     (assert))
    nil)
   ((ieee754_semantics_pfinite?_def_interpretation_obligation_1
     formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil)
    (efloat type-decl nil extended_float nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_total_on_nzfinite: AXIOM FORALL (f: (ieee754_semantics.nzfinite?)): EXISTS (r: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): f = ieee754_semantics.round(r)"))
  (IMP_ieee754_semantics_proj_def_pZero_TCC1-1 nil 3765210904
   ("" (mapped-axiom-tcc) nil nil)
   ((poszero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float_rounding nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_total_on_nzfinite: AXIOM FORALL (f: (ieee754_semantics.nzfinite?)): EXISTS (r: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): f = ieee754_semantics.round(r)")))
 (IMP_ieee754_semantics_round_zero_TCC1 0
  (IMP_ieee754_semantics_round_er_injective_TCC1-2 nil 3765628607
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_round_zero_interpretation_obligation_1")
     (assert))
    nil)
   ((ieee754_semantics_nzfinite?_def_interpretation_obligation_1
     formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil)
    (efloat type-decl nil extended_float nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_zero: AXIOM ieee754_data.pZero = ieee754_semantics.round(0)"))
  (IMP_ieee754_semantics_round_monotone_TCC1-1 nil 3765288127
   (""
    (try (mapped-axiom-tcc) (skip)
     (then (skeep :preds? t)
      (use "round_er_injective_interpretation_obligation_1") (assert)))
    nil nil)
   nil nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_zero: AXIOM ieee754_data.pZero = ieee754_semantics.round(0)"))
  (IMP_ieee754_semantics_round_er_injective_TCC1-1 nil 3765210904
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_zero: AXIOM ieee754_data.pZero = ieee754_semantics.round(0)")))
 (IMP_ieee754_semantics_round_proj_TCC1 0
  (IMP_ieee754_semantics_round_total_on_nzfinite_TCC1-1 nil 3765210904
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_round_proj_interpretation_obligation_1")
     (assert))
    nil)
   nil shostak
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_proj: AXIOM FORALL (f: (ieee754_semantics.nzfinite?)): f = ieee754_semantics.round(ieee754_semantics.proj(f))")))
 (IMP_ieee754_semantics_proj_round_TCC1 0
  (IMP_ieee754_semantics_round_total_on_nzfinite_TCC1-1 nil 3765287517
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_proj_round_interpretation_obligation_1")
     (assert))
    nil)
   nil nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "proj_round: AXIOM FORALL (x: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): x = ieee754_semantics.proj(ieee754_semantics.round(x))"))
  (IMP_ieee754_semantics_round_zero_TCC1-1 nil 3765210904
   ("" (mapped-axiom-tcc) nil nil) nil shostak
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "proj_round: AXIOM FORALL (x: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): x = ieee754_semantics.proj(ieee754_semantics.round(x))")))
 (IMP_ieee754_semantics_round_monotone_TCC1 0
  (IMP_ieee754_semantics_round_proj_TCC1-1 nil 3765288049
   (""
    (then (skeep :preds? t)
     (use "ieee754_semantics_round_monotone_interpretation_obligation_1")
     (assert))
    nil)
   ((emax const-decl "above(1)" extended_float nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_monotone: AXIOM FORALL (x, y: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): booleans.IMPLIES(reals.<=(x, y), reals.<=(ieee754_semantics.proj(ieee754_semantics.round(x)), ieee754_semantics.proj(ieee754_semantics.round(y))))"))
  (IMP_ieee754_semantics_proj_def_nZero_TCC1-1 nil 3765210904
   ("" (mapped-axiom-tcc) nil nil)
   ((negzero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float_rounding nil))
   nil
   (IMP_ieee754_semantics mapped-axiom
    "ieee754_semantics[2, 53, extended_float[2, 53, 1074].emax]{{ data_th := double__interprets__ieee754_data, round := rnd_ef, proj := prj_ef, add_inv := flip_sign, nzfinite? := nzfinite?, pfinite? := nzpfinite?, nfinite? := nznfinite? }}.ieee754_semantics"
    "round_monotone: AXIOM FORALL (x, y: ieee754_domain[ieee754_semantics.b, ieee754_semantics.p, ieee754_semantics.emax].er_real): booleans.IMPLIES(reals.<=(x, y), reals.<=(ieee754_semantics.proj(ieee754_semantics.round(x)), ieee754_semantics.proj(ieee754_semantics.round(y))))"))))


(ieee754dp
 (IMP_float_TCC1 0
  (IMP_float_TCC1-1 nil 3747856119 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_float subtype "ieee754dp.ieee754radix" "integers.above(1)")))
 (IMP_float_props_rounding_TCC1 0
  (IMP_float_props_rounding_TCC1-1 nil 3747856119 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (IMP_float_props_rounding subtype "ieee754dp.ieee754radix"
    "integers.above(1)")))
 (double_precision_format_TCC1 0
  (double_precision_format_TCC1-1 nil 3766231621 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (double_precision_format subtype "ieee754dp.ieee754dp_prec"
    "integers.above(1)")))
 (Dulp_TCC1 0
  (Dulp_TCC1-1 nil 3790102133 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fulp const-decl "real" float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (Dulp subtype
    "float[2].Fulp(ieee754dp.double_precision_format)(ieee754dp.f1)"
    "posreal")))
 (dp_closest?_j 0
  (dp_closest?_j-2 nil 3766233846
   ("" (split 1)
    (("1" (skeep) (("1" (expand "dp_closest?") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (expand "dp_closest?")
      (("2" (use "EvenClosest_rounded_mode")
        (("2"
          (case "EvenClosest?(double_precision_format) = LAMBDA (x1, (f1: (Fbounded?(double_precision_format)))):
                        EvenClosest?(double_precision_format)(x1, f1)")
          (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil))
        nil))
      nil))
    nil)
   ((dp_closest? const-decl "bool" ieee754dp nil)
    (EvenClosest_rounded_mode formula-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvenClosest? const-decl "bool" float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (dp_closest?_j subtype "ieee754dp.dp_closest?"
    "{round: float[2].RestrictedRounding(ieee754dp.double_precision_format, float[2].EvenClosest?) | float[2].rounded_mode?(ieee754dp.double_precision_format)(round)}"))
  (dp_closest?_j-1 nil 3766231621 ("" (judgement-tcc) nil nil) nil nil
   (dp_closest?_j subtype "ieee754dp.dp_closest?"
    "{round: float[2].RestrictedRounding(ieee754dp.double_precision_format, float[2].EvenClosest?) | float[2].rounded_mode?(ieee754dp.double_precision_format)(round)}")))
 (dp_closest?_closestroundingpred_j 0
  (dp_closest?_closestroundingpred_j-1 nil 3766231621
   ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (dp_closest?_closestroundingpred_j subtype "ieee754dp.dp_closest?"
    "float[2].ClosestRoundingPred(ieee754dp.double_precision_format)")))
 (RtoD_TCC1 0
  (RtoD_TCC1-1 nil 3667932138
   ("" (skeep)
    (("" (use "RND_EClosest_isEclosest")
      (("" (expand "closest_double?")
        (("" (expand "dp_closest?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((RND_EClosest_isEclosest formula-decl nil float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil))
   shostak
   (RtoD subtype
    "float[2].RND_EClosest(ieee754dp.double_precision_format)(ieee754dp.x1)"
    "{f: ieee754dp.unb_double | ieee754dp.closest_double?(ieee754dp.x1)(f)}")))
 (rtod_canonicroundfun_exactrepconservation_j 0
  (rtod_canonicroundfun_exactrepconservation_j-2 nil 3766146541
   ("" (split 1)
    (("1" (skeep)
      (("1" (typepred "RtoD(x)")
        (("1" (expand "closest_double?") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep) (("2" (assert) nil nil)) nil)
     ("3" (use "ClosestRtoF_exact_rep_conv[2]")
      (("3" (assert)
        (("3" (skeep)
          (("3" (assert)
            (("3" (typepred "RtoD(r)")
              (("3" (expand "closest_double?")
                (("3" (assert)
                  (("3" (expand "dp_closest?")
                    (("3" (assert)
                      (("3" (expand "EvenClosest?") (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (real nonempty-type-from-decl nil reals nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (RNDF type-eq-decl nil float nil) (Closest? const-decl "bool" float nil)
    (ClosestRtoF_exact_rep_conv formula-decl nil float nil))
   nil
   (rtod_canonicroundfun_exactrepconservation_j subtype "ieee754dp.RtoD"
    "{RtoF: float[2].CanonicRoundingFun(ieee754dp.double_precision_format, ieee754dp.dp_closest?) | float[2].exact_rep_conservation(ieee754dp.double_precision_format, ieee754dp.dp_closest?)(RtoF)}"))
  (rtod_canonicroundfun_exactrepconservation_j-1 nil 3766146475
   ("" (judgement-tcc) nil nil) nil nil
   (rtod_canonicroundfun_exactrepconservation_j subtype "ieee754dp.RtoD"
    "{RtoF: float[2].CanonicRoundingFun(ieee754dp.double_precision_format, ieee754dp.dp_closest?) | float[2].exact_rep_conservation(ieee754dp.double_precision_format, ieee754dp.dp_closest?)(RtoF)}")))
 (rtod_monotonic 0
  (rtod_monotonic-1 nil 3765014623
   ("" (skeep)
    (("" (typepred "RtoD(x1)")
      (("" (expand "closest_double?")
        (("" (expand "dp_closest?")
          (("" (use "EvenClosest_monotone")
            (("" (expand "monotone?")
              (("" (inst -1 "x1" "x2" "RtoD(x1)" "RtoD(x2)")
                (("" (split -1)
                  (("1" (expand "DtoR") (("1" (propax) nil nil)) nil)
                   ("2" (assert) nil nil) ("3" (propax) nil nil)
                   ("4" (typepred "RtoD(x2)")
                    (("4" (expand "closest_double?")
                      (("4" (expand "dp_closest?") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (real nonempty-type-from-decl nil reals nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (monotone? const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DtoR const-decl "real" ieee754dp nil)
    (EvenClosest_monotone formula-decl nil float nil))
   shostak))
 (noteq_rew_rl1 0
  (noteq_rew_rl1-1 nil 3683491511 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil) (Flt? const-decl "bool" float nil)
    (< const-decl "bool" float nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak))
 (noteq_rew_rl2 0
  (noteq_rew_rl2-1 nil 3683491521
   ("" (skeep)
    (("" (replace -2) (("" (expand ">") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil) (Flt? const-decl "bool" float nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" float nil))
   shostak))
 (noteq_rew 0
  (noteq_rew-1 nil 3682009054
   ("" (skeep)
    (("" (iff)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand ">")
            (("1" (expand "<")
              (("1" (use "FltCorrect")
                (("1" (replace -1 :hide? t)
                  (("1" (use "FltCorrect")
                    (("1" (replace -1 :hide? t)
                      (("1" (assert)
                        (("1" (case "FtoR(X)=FtoR(Y)")
                          (("1" (hide-all-but (-1 1))
                            (("1" (use "FcanonicUnique")
                              (("1" (inst -1 "double_precision_format")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" float nil) (FltCorrect formula-decl nil float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FtoR const-decl "real" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (FcanonicUnique formula-decl nil float nil)
    (< const-decl "bool" float nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (Flt? const-decl "bool" float nil) (Fminus const-decl "float" float nil)
    (^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   shostak))
 (neq_rew 0
  (neq_rew-1 nil 3682009780 ("" (expand "/=") (("" (propax) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)) shostak))
 (leq_def 0
  (leq_def-1 nil 3747856125
   ("" (skeep)
    (("" (lemma "Fle_definition")
      (("" (inst -1 "double_precision_format" "X" "Y") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((Fle_definition formula-decl nil float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (Dulp_def 0
  (Dulp_def-1 nil 3671547731
   ("" (skeep)
    (("" (expand "Dulp")
      (("" (use "FulpCanonic") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Dulp const-decl "posreal" ieee754dp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (FulpCanonic formula-decl nil float nil))
   shostak))
 (DtoR_round 0
  (DtoR_round-2 nil 3698671510
   ("" (skeep)
    (("" (expand "DtoR")
      (("" (expand "Dulp")
        (("" (use "ClosestUlp")
          (("" (assert)
            (("" (split -1)
              (("1" (invoke (typepred "%3") (? 1 "Closest?%1(%2,%3)"))
                (("1" (expand "closest_double?")
                  (("1" (expand "dp_closest?")
                    (("1" (expand "EvenClosest?") (("1" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (invoke (typepred "%3") (? 1 "Fbounded?%1(%2)(%3)"))
                (("2" (expand "Fcanonic?")
                  (("2" (expand "Fnormal?")
                    (("2" (expand "Fsubnormal?") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DtoR const-decl "real" ieee754dp nil)
    (ClosestUlp formula-decl nil float nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (Fnormal? const-decl "bool" float nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (Fsubnormal? const-decl "bool" float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (EvenClosest? const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Dulp const-decl "posreal" ieee754dp nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (DtoR_round-1 nil 3675274831
   ("" (skeep)
    (("" (expand "DtoR")
      (("" (expand "Dulp")
        (("" (use "ClosestUlp")
          (("" (assert)
            (("" (split -1)
              (("1" (invoke (typepred "%3") (? 1 "Closest?(%1)(%2,%3)"))
                (("1" (expand "closest_double?")
                  (("1" (expand "dp_closest?")
                    (("1" (expand "EvenClosest?") (("1" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (invoke (typepred "%3") (? 1 "Fbounded?%1(%2)(%3)"))
                (("2" (expand "Fcanonic?")
                  (("2" (expand "Fnormal?")
                    (("2" (expand "Fsubnormal?") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil))
   shostak))
 (DtoR_RtoD 0
  (DtoR_RtoD-1 nil 3675275376
   (""
    (case "FORALL(x,y,z: real): abs(x-y) <= z IMPLIES EXISTS(v:real): v >= -z AND v <= z AND x = y + v")
    (("1" (skeep)
      (("1" (use "DtoR_round")
        (("1" (inst? -2 :where -1)
          (("1" (assert)
            (("1" (skeep -2) (("1" (inst 1 "v") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (inst 1 "x-y") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (DtoR_round formula-decl nil ieee754dp nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Dulp const-decl "posreal" ieee754dp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (DtoR const-decl "real" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (DtoR_RtoD_int_exactly_representable 0
  (DtoR_RtoD_int_exactly_representable-2 nil 3747820460
   ("" (skeep)
    (("" (lemma "Closest_int_exact_rep")
      (("" (inst -1 "double_precision_format" "dp_closest?" "RtoD" "i")
        (("1" (expand "exactly_representable")
          (("1" (expand "DtoR") (("1" (propax) nil nil)) nil)) nil)
         ("2" (expand "double_precision_format")
          (("2" (expand "vNum") (("2" (assert) nil nil)) nil)) nil)
         ("3" (hide 2)
          (("3" (split 1)
            (("1" (skeep)
              (("1" (typepred "RtoD(x)")
                (("1" (expand "closest_double?") (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "RtoD(r)")
                (("2" (expand "closest_double?")
                  (("2" (expand "dp_closest?")
                    (("2" (expand "EvenClosest?") (("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Closest_int_exact_rep formula-decl nil float nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (vNum const-decl "posnat" float nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (i skolem-const-decl "{i: int | abs(i) <= 2 ^ 53}" ieee754dp nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (Rounding type-eq-decl nil float nil) (RNDF type-eq-decl nil float nil)
    (DtoR const-decl "real" ieee754dp nil)
    (exactly_representable const-decl "bool" float nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (EvenClosest? const-decl "bool" float nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (DtoR_RtoD_int_exactly_representable-1 nil 3747819874
   ("" (skeep)
    (("" (lemma "Closest_int_exact_rep")
      (("" (inst -1 "double_precision_format" "sp_closest?" "RtoD" "i")
        (("1" (expand "exactly_representable")
          (("1" (expand "DtoR") (("1" (propax) nil)))))
         ("2" (expand "double_precision_format")
          (("2" (assert) (("2" (expand "vNum") (("2" (assert) nil)))))))
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "RtoD(r)")
              (("3" (expand "closest_double?")
                (("3" (expand "sp_closest?")
                  (("3" (expand "EvenClosest?")
                    (("3" (flatten) nil))))))))))))))))))
    nil)
   nil nil))
 (RtoD_DtoR 0
  (RtoD_DtoR-1 nil 3747817992
   ("" (skeep)
    (("" (expand "RtoD")
      (("" (lemma "ClosestRNDF_FtoR_inverse")
        ((""
          (inst -1 "double_precision_format"
           "EvenClosest?(double_precision_format)"
           " RND_EClosest(double_precision_format)")
          (("1" (expand "FtoR_inverse")
            (("1" (expand "DtoR") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (skeep) (("2" (use "RND_EClosest_isEclosest") nil nil)) nil)
           ("3" (skeep)
            (("3" (expand "EvenClosest?") (("3" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (FtoR_inverse const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Rounding type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (EvenClosest? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRNDF_FtoR_inverse formula-decl nil float nil))
   shostak))
 (DtoR_strictly_increasing 0
  (DtoR_strictly_increasing-1 nil 3747667960
   ("" (skeep)
    (("" (expand "<" 1)
      (("" (expand "DtoR") (("" (rewrite "FltCorrect") nil nil)) nil)) nil))
    nil)
   ((< const-decl "bool" float nil) (FltCorrect formula-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil))
   shostak))
 (DtoR_inc 0
  (DtoR_inc-1 nil 3675328982
   ("" (skeep)
    (("" (expand "<=" 1)
      (("" (use "FleCorrect")
        (("" (assert)
          (("" (expand "DtoR")
            (("" (expand "<=") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil) (<= const-decl "bool" float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (DtoR const-decl "real" ieee754dp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (FleCorrect formula-decl nil float nil))
   shostak))
 (RtoD_inc 0
  (RtoD_inc-2 "" 3790103575
   ("" (skeep)
    (("" (case "x1=x2")
      (("1" (replace -1 :hide? t)
        (("1" (expand "<=")
          (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "RtoD")
        (("2" (use "RND_EClosest_isEclosest")
          (("2" (use "EvenClosest_Monotone")
            (("2" (expand "Monotone?")
              (("2"
                (inst -1 "x1" "x2" "RND_EClosest(double_precision_format)(x1)"
                 "RND_EClosest(double_precision_format)(x2)")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (expand "<=" 2)
                      (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (use "RND_EClosest_isEclosest") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((EvenClosest_Monotone formula-decl nil float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Monotone? const-decl "bool" float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (FleCorrect formula-decl nil float nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil) (<= const-decl "bool" float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak)
  (RtoD_inc-1 nil 3675330582
   ("" (skeep)
    (("" (case "x1=x2")
      (("1" (replace -1 :hide? t)
        (("1" (expand "<=")
          (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "RtoD")
        (("2" (use "RND_EClosest_isEclosest")
          (("2" (use "EvenClosest_Monotone")
            (("2" (expand "Monotone?")
              (("2"
                (inst -1 "x1" "x2" "RND_EClosest(double_precision_format)(x1)"
                 "RND_EClosest(double_precision_format)(x2)")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (expand "<=" 2)
                      (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (use "RND_EClosest_isEclosest") nil nil))
                    nil))
                  nil)
                 ("2"
                  (typepred "RND_EClosest[2](double_precision_format)(x2)")
                  (("2" (expand "Fcanonic?")
                    (("2" (expand "Fnormal?")
                      (("2" (expand "Fsubnormal?") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (FleCorrect formula-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (Monotone? const-decl "bool" float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (EvenClosest_Monotone formula-decl nil float nil))
   shostak))
 (RtoD_opp 0
  (RtoD_opp-2 "" 3675336247
   ("" (skeep)
    (("" (use "FcanonicUnique")
      (("" (inst -1 "double_precision_format")
        (("" (assert)
          (("" (split -1)
            (("1" (hide 2)
              (("1" (case "closest_double?(-x)(RtoD(-x))")
                (("1" (case "closest_double?(-x)(Fopp(RtoD(x)))")
                  (("1" (use "EvenClosest_Unique")
                    (("1" (inst -1 "double_precision_format")
                      (("1" (expand "Unique?")
                        (("1" (inst? -1 :where 1)
                          (("1" (inst -1 "-x")
                            (("1" (assert)
                              (("1" (expand "closest_double?")
                                (("1" (expand "dp_closest?")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "closest_double?")
                    (("2" (expand "dp_closest?")
                      (("2" (hide 2)
                        (("2" (use "EvenClosestFopp")
                          (("2" (assert)
                            (("2" (typepred "RtoD(x)")
                              (("2" (expand "closest_double?")
                                (("2" (expand "dp_closest?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use "FcanonicOpp")
                    (("3" (assert)
                      (("3" (use "FcanonicBounded") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "RtoD(-x)") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "FcanonicOpp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FcanonicUnique formula-decl nil float nil)
    (Fopp const-decl "float" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (FcanonicOpp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (EvenClosestFopp formula-decl nil float nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (Unique? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil))
   shostak)
  (RtoD_opp-1 nil 3675331460
   ("" (skeep)
    (("" (case "closest_double?(x)(RtoD(x))")
      (("1" (case "closest_double?(-x)(RtoD(-x))")
        (("1" (case "closest_double?(-x)(Fopp(RtoD(x)))")
          (("1" (hide -3)
            (("1" (expand "closest_double?")
              (("1" (expand "EvenClosest?")
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (split -4)
                      (("1" (postpone) nil nil)
                       ("2" (inst -1 "Fopp(RtoD(x))")
                        (("2" (assert)
                          (("2" (use "FcanonicUnique")
                            (("2" (assert)
                              (("2" (use "FcanonicOpp")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "RtoD(-x)")
                      (("2" (assert)
                        (("2" (use "FcanonicUnique")
                          (("2" (assert)
                            (("2" (use "FcanonicOpp") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (unique_zero_RtoD_TCC1 0
  (unique_zero_RtoD_TCC1-2 nil 3766233885
   ("" (skeep)
    (("" (typepred "RtoD(x)")
      (("" (expand "closest_double?")
        (("" (expand "dp_closest?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (real nonempty-type-from-decl nil reals nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dp_closest? const-decl "bool" ieee754dp nil))
   nil
   (unique_zero_RtoD subtype "ieee754dp.RtoD"
    "float[2].RNDF(ieee754dp.double_precision_format, float[2].EvenClosest?(ieee754dp.double_precision_format))"))
  (unique_zero_RtoD_TCC1-1 nil 3766231621 ("" (subtype-tcc) nil nil) nil nil
   (unique_zero_RtoD subtype "ieee754dp.RtoD"
    "float[2].RNDF(ieee754dp.double_precision_format, float[2].EvenClosest?(ieee754dp.double_precision_format))")))
 (unique_zero_RtoD 0
  (unique_zero_RtoD-1 nil 3699218117
   ("" (use "unique_zero_closest_rounding") nil nil)
   ((unique_zero_closest_rounding formula-decl nil float_props_rounding nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp
     nil))
   shostak))
 (dp_rep_exp_bound 0
  (dp_rep_exp_bound-1 nil 3699218203
   ("" (skeep)
    (("" (lemma "rep_exp_bound")
      ((""
        (inst -1 "double_precision_format"
         "EvenClosest?(double_precision_format)" "RtoD" "exp" "x" "err" "f")
        (("1" (assert)
          (("1" (typepred "f")
            (("1" (expand "DtoR") (("1" (propax) nil nil)) nil)) nil))
          nil)
         ("2" (expand "double_precision_format")
          (("2" (typepred "exp") (("2" (propax) nil nil)) nil)) nil)
         ("3" (split 1)
          (("1" (skeep)
            (("1" (expand "RtoD")
              (("1" (use "RND_EClosest_isEclosest") nil nil)) nil))
            nil)
           ("2" (hide-all-but 1) (("2" (use "unique_zero_RtoD") nil nil))
            nil))
          nil)
         ("4" (expand "EvenClosest?") (("4" (skeep) nil nil)) nil))
        nil))
      nil))
    nil)
   ((rep_exp_bound formula-decl nil float_props_rounding nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unique_zero const-decl "bool" float_props_rounding nil)
    (RNDF type-eq-decl nil float nil) (Rounding type-eq-decl nil float nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (exp skolem-const-decl "{exp: int | -1074 <= exp}" ieee754dp nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (DtoR const-decl "real" ieee754dp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (unique_zero_RtoD formula-decl nil ieee754dp nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))


(roundoff_error_props
 (smallest_fp_ge_TCC1 0
  (smallest_fp_ge_TCC1-1 nil 3764522785
   (""
    (then (skeep) (expand "RtoD_max") (use "RND_Max_isMax")
     (expand "isMax?") (expand "DtoR") (flatten) (assert) (skeep)
     (inst? -2) (assert))
    nil)
   nil nil))
 (smallest_fp_ge_is_ge 0
  (smallest_fp_ge_is_ge-1 nil 3764522793
   ("" (then (skeep) (typepred "smallest_fp_ge(r_X)") (propax)) nil)
   nil shostak))
 (smallest_fp_ge_nonneg_is_nonneg 0
  (smallest_fp_ge_nonneg_is_nonneg-1 nil 3764522793
   (""
    (then (skeep) (use "smallest_fp_ge_is_ge")
     (spread (case "0 <= x")
      ((then (use "RtoD_inc") (assert) (hide -2) (lemma "RtoD_inc")
        (inst? -1 :where -3) (assert) (rewrite "RtoD_DtoR")
        (apply-transitivity 1 -1 -2))
       (assert))))
    nil)
   nil shostak))
 (smallest_fp_ge_nonneg_j 0
  (smallest_fp_ge_nonneg_j-1 nil 3764522785
   (""
    (then (skeep) (use "smallest_fp_ge_is_ge")
     (spread (case "0 <= x")
      ((then (use "RtoD_inc") (assert) (hide -2) (lemma "RtoD_inc")
        (inst? -1 :where -3) (assert) (rewrite "RtoD_DtoR")
        (apply-transitivity 1 -1 -2))
       (assert))))
    nil)
   nil nil))
 (smallest_fp_ge_dtor 0
  (smallest_fp_ge_dtor-1 nil 3764522793
   (""
    (then (skeep) (typepred "smallest_fp_ge(DtoR(X))") (inst -3 "X")
     (assert)
     (spread (case "DtoR(X) = DtoR(smallest_fp_ge(DtoR(X)))")
      ((then (hide -3 -4)
        (spread
         (case "RtoD(DtoR(X)) = RtoD(DtoR(smallest_fp_ge(DtoR(X))))")
         ((then (rewrite "RtoD_DtoR") (rewrite "RtoD_DtoR"))
          (assert))))
       (assert))))
    nil)
   nil shostak))
 (greatest_fp_le_TCC1 0
  (greatest_fp_le_TCC1-1 nil 3764522785
   (""
    (then (skeep) (expand "RtoD_min") (use "RND_Min_isMin")
     (expand "isMin?") (expand "DtoR") (flatten) (assert) (skeep)
     (inst? -2) (assert))
    nil)
   nil nil))
 (greatest_fp_le_is_le 0
  (greatest_fp_le_is_le-1 nil 3764522793
   ("" (then (skeep) (typepred "greatest_fp_le(r_X)") (propax)) nil)
   nil shostak))
 (greatest_fp_le_nonpos_is_nonpos 0
  (greatest_fp_le_nonpos_is_nonpos-1 nil 3764522793
   (""
    (then (skeep) (use "greatest_fp_le_is_le")
     (spread (case "x <= 0")
      ((then (lemma "RtoD_inc") (inst? -1 :where -2) (assert)
        (lemma "RtoD_inc") (inst? -1 :where -4) (assert) (assert)
        (rewrite "RtoD_DtoR") (assert) (apply-transitivity 1 -1 -2))
       (assert))))
    nil)
   nil shostak))
 (greatest_fp_le_nonneg_j 0
  (greatest_fp_le_nonneg_j-1 nil 3764522785
   ("" (use "greatest_fp_le_nonpos_is_nonpos") nil) nil nil))
 (greatest_fp_le_dtor 0
  (greatest_fp_le_dtor-1 nil 3764522793
   (""
    (then (skeep) (typepred "greatest_fp_le(DtoR(X))") (inst -3 "X")
     (assert)
     (spread (case "DtoR(X) = DtoR(greatest_fp_le(DtoR(X)))")
      ((then (hide -3 -4)
        (spread
         (case "RtoD(DtoR(X)) = RtoD(DtoR(greatest_fp_le(DtoR(X))))")
         ((then (rewrite "RtoD_DtoR") (rewrite "RtoD_DtoR"))
          (assert))))
       (assert))))
    nil)
   nil shostak))
 (lt_greatest_gt_smallest_contradiction 0
  (lt_greatest_gt_smallest_contradiction-1 nil 3764522793
   (""
    (then (skeep) (rewrite "DtoR_strictly_increasing")
     (rewrite "DtoR_strictly_increasing") (use "greatest_fp_le_is_le")
     (use "smallest_fp_ge_is_ge") (assert))
    nil)
   nil shostak))
 (lt_greatest_ge_smallest_contradiction 0
  (lt_greatest_ge_smallest_contradiction-1 nil 3764522793
   (""
    (then (skeep) (rewrite "DtoR_strictly_increasing")
     (rewrite "DtoR_inc") (use "greatest_fp_le_is_le")
     (use "smallest_fp_ge_is_ge") (assert))
    nil)
   nil shostak))
 (var_ge_0_trans_real 0
  (var_ge_0_trans_real-1 nil 3764521680
   (""
    (then (skeep) (skoletin* -2)
     (spread (case "0 <= DtoR(X) - e_X")
      ((spread (case "DtoR(X) - e_X <= r_X")
        ((assert) (then (hide-all-but (1 -4)) (assert))))
       (then (expand "Err_X") (hide-all-but (1 -1))
        (use "smallest_fp_ge_is_ge") (rewrite "DtoR_inc" -2)
        (assert)))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_is_ge formula-decl nil quadrant__trans nil)
    (DtoR_inc formula-decl nil ieee754dp "float/")
    (nonneg_unbdp type-eq-decl nil ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/") nil
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     quadrant__trans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     quadrant__trans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (var_gt_error__var_r_gt_0 0
  (var_gt_error__var_r_gt_0-1 nil 3764521770
   (""
    (then (skeep) (skoletin* -2)
     (spread (case "0 < DtoR(X) - e_X")
      ((spread (case "DtoR(X) - e_X <= r_X")
        ((assert) (then (hide-all-but (1 -4)) (assert))))
       (then (expand "Err_X") (hide-all-but (1 -1))
        (use "smallest_fp_ge_is_ge")
        (rewrite "DtoR_strictly_increasing") (assert)))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_is_ge formula-decl nil quadrant__trans nil)
    (DtoR_strictly_increasing formula-decl nil ieee754dp "float/") nil
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (nonneg_unbdp type-eq-decl nil ieee754dp "float/") nil
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     quadrant__trans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     quadrant__trans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (var_ge_0_trans_fp 0
  (var_ge_0_trans_fp-1 nil 3764521757
   (""
    (then (skeep) (skoletin* -2)
     (spread (case "RtoD(0) <= Err_X")
      ((apply-transitivity 1 -1 -2) (assert))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (Fle_transitive formula-decl nil float "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (transitive? const-decl "bool" relations nil)
    (nonneg_unbdp type-eq-decl nil ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/") nil
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     quadrant__trans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     quadrant__trans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (var_fp_gt_err__var_fp_gt_0 0
  (var_fp_gt_err__var_fp_gt_0-1 nil 3764521770
   (""
    (then (skeep) (skoletin* -2)
     (spread (case "RtoD(0) <= Err_X")
      ((then (hide-all-but (1 -1 -2)) (rewrite "leq_def")
        (spread (split -1)
         ((apply-transitivity 1 -1 -2 "Flt") (assert))))
       (assert))))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     quadrant__trans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     quadrant__trans nil)
    nil (nonneg_unbdp type-eq-decl nil ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/") nil
    (Flt_transitive formula-decl nil float "float/")
    (transitive? const-decl "bool" relations nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (leq_def formula-decl nil ieee754dp "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (var_lt_0_trans_implies_var_not_le_0_orig_TCC1 0
  (var_lt_0_trans_implies_var_not_le_0_orig_TCC1-2 nil 3764522357
   ("" (skeep) (("" (use "greatest_fp_le_nonpos_is_nonpos") nil nil))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (greatest_fp_le_nonpos_is_nonpos formula-decl nil quadrant__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (var_lt_0_trans_implies_var_not_le_0_orig_TCC1-1 nil 3764521668
   ("" (subtype-tcc) nil nil) nil nil))
 (var_lt_0_trans_implies_var_not_le_0_orig 0
  (var_lt_0_trans_implies_var_not_le_0_orig-1 nil 3764521770
   (""
    (then (skeep) (skoletin* -2) (replace -2 :hide? t)
     (lemma "greatest_fp_le_nonpos_is_nonpos") (inst? -1)
     (spread (case "X < RtoD(0)")
      ((then (hide-all-but (-1 -5)) (rewrite "Fle_neg_Flt"))
       (then (hide-all-but (1 -1 -2)) (lemma "Flt_Fle_Flt")
        (inst? -1 :where 1) (inst? -1 :where -3) (assert)))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (Flt_Fle_Flt formula-decl nil float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (greatest_fp_le_nonpos_is_nonpos formula-decl nil quadrant__trans
     nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    nil (nonpos_unbdp type-eq-decl nil ieee754dp "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/") nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     quadrant__trans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/"))
   shostak))
 (var_le_0_trans_implies_var_not_lt_0_orig 0
  (var_le_0_trans_implies_var_not_lt_0_orig-1 nil 3764521770
   (""
    (then (skeep) (skoletin* -2) (replace -2 :hide? t)
     (lemma "greatest_fp_le_nonpos_is_nonpos") (inst? -1)
     (spread (case "X <= RtoD(0)")
      ((then (hide-all-but (-1 -5)) (rewrite "Fle_neg_Flt"))
       (then (hide-all-but (1 -1 -2)) (use "Fle_transitive")
        (expand "transitive?") (inst? -1 :where 1) (inst? -1 :where 2)
        (expand "Err_neg_X") (assert)))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (transitive? const-decl "bool" relations nil) nil
    (Fle_transitive formula-decl nil float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (greatest_fp_le_nonpos_is_nonpos formula-decl nil quadrant__trans
     nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (nonpos_unbdp type-eq-decl nil ieee754dp "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/") nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     quadrant__trans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/"))
   shostak))
 (var_lt_0_trans_implies_var_not_le_eX 0
  (var_lt_0_trans_implies_var_not_le_eX-1 nil 3764521770
   (""
    (then (skeep) (skoletin) (skoletin) (use "greatest_fp_le_is_le")
     (use "smallest_fp_ge_is_ge") (rewrite "DtoR_strictly_increasing")
     (rewrite "DtoR_inc") (assert))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     quadrant__trans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonpos_unbdp type-eq-decl nil ieee754dp "float/") nil
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (smallest_fp_ge_is_ge formula-decl nil quadrant__trans nil)
    (DtoR_inc formula-decl nil ieee754dp "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DtoR_strictly_increasing formula-decl nil ieee754dp "float/")
    (greatest_fp_le_is_le formula-decl nil quadrant__trans nil) nil
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (nonneg_unbdp type-eq-decl nil ieee754dp "float/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     quadrant__trans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     quadrant__trans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (var_le_0_trans_real 0
  (var_le_0_trans_real-1 nil 3764521770
   (""
    (then (skeep) (skoletin* -2)
     (spread (case "DtoR(X) + e_X <= 0")
      ((spread (case "r_X <= DtoR(X) + e_X")
        ((assert) (then (hide-all-but (1 -4)) (assert))))
       (then (use "greatest_fp_le_is_le") (rewrite "DtoR_inc" -2)
        (assert)))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DtoR_inc formula-decl nil ieee754dp "float/")
    (greatest_fp_le_is_le formula-decl nil quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (nonpos_unbdp type-eq-decl nil ieee754dp "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/") nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     quadrant__trans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/"))
   shostak))
 (var_lt_0_trans_real 0
  (var_lt_0_trans_real-1 nil 3764521771
   (""
    (then (skeep) (skoletin* -2)
     (spread (case "DtoR(X) + e_X < 0")
      ((spread (case "r_X <= DtoR(X) + e_X")
        ((assert) (then (hide-all-but (1 -4)) (assert))))
       (then (use "greatest_fp_le_is_le")
        (rewrite "DtoR_strictly_increasing") (assert)))))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DtoR_strictly_increasing formula-decl nil ieee754dp "float/")
    (greatest_fp_le_is_le formula-decl nil quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    nil (nonpos_unbdp type-eq-decl nil ieee754dp "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/") nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     quadrant__trans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/"))
   shostak))
 (fp_ge_re_r_ge_0 0
  (fp_ge_re_r_ge_0-1 nil 3764509331
   ("" (skeep)
    (("" (use "var_ge_0_trans_real")
      (("1" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (assert)
          (("3" (rewrite "smallest_fp_ge_dtor" 1 :dir rl) nil nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((var_ge_0_trans_real formula-decl nil roundoff_error_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (DtoR const-decl "real" ieee754dp "float/") nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_dtor formula-decl nil quadrant__trans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_lt_neg_re_r_lt_0 0
  (fp_lt_neg_re_r_lt_0-1 nil 3764521264
   ("" (skeep)
    (("" (use "var_lt_0_trans_real")
      (("1" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (assert)
          (("3" (rewrite "Dneg_correct" 1 :dir rl)
            (("3" (rewrite "greatest_fp_le_dtor" 1 :dir rl) nil nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((var_lt_0_trans_real formula-decl nil roundoff_error_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (DtoR const-decl "real" ieee754dp "float/") nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (greatest_fp_le_dtor formula-decl nil quadrant__trans nil)
    (Dneg_correct formula-decl nil ieee754dp_neg "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_le_neg_re_r_le_0 0
  (fp_le_neg_re_r_le_0-1 nil 3764521358
   ("" (skeep)
    (("" (use "var_le_0_trans_real")
      (("1" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (assert)
          (("3" (rewrite "Dneg_correct" 1 :dir rl)
            (("3" (rewrite "greatest_fp_le_dtor" 1 :dir rl) nil nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((var_le_0_trans_real formula-decl nil roundoff_error_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (DtoR const-decl "real" ieee754dp "float/") nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (greatest_fp_le_dtor formula-decl nil quadrant__trans nil)
    (Dneg_correct formula-decl nil ieee754dp_neg "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_gt_re_r_gt_0 0
  (fp_gt_re_r_gt_0-1 nil 3764521394
   ("" (skeep)
    (("" (use "var_gt_error__var_r_gt_0")
      (("1" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (assert)
          (("3" (rewrite "smallest_fp_ge_dtor" 1 :dir rl) nil nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((var_gt_error__var_r_gt_0 formula-decl nil roundoff_error_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (DtoR const-decl "real" ieee754dp "float/") nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_dtor formula-decl nil quadrant__trans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))


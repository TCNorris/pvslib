float_props_rounding[radix: above(1)]: THEORY
BEGIN

  IMPORTING float[radix]

  exp_bound: LEMMA
    FORALL(b: Format,
    	   round : ClosestRoundingPred(b),
           RtoF  : RNDF(b,round) | FORALL(y:real):
	   	   		     Fnum(RtoF(y))=0
				     IMPLIES Fexp(RtoF(y)) = -dExp(b),
	   exp   : int | -dExp(b) <= exp ,
	   x     : nonneg_real):
      x <= radix^exp IMPLIES Fexp(RtoF(x)) <= exp

  closestrounding_preserves_fplowerbound: LEMMA 
    FORALL(b: Format,
    	   round : ClosestRoundingPred(b),
           RtoF  : RNDF(b,round),
	   f     : (Fbounded?(b)),
	   x     : real):
      FtoR(f) <= x IMPLIES FtoR(f) <= FtoR(RtoF(x))

  %
  %  Uniqueness of zero
  %  Zero has an unique representation for this concrete
  %  description of floating-point numbers.
  %

  unique_zero(b:Format,round:Rounding(b),RtoF: RNDF(b,round)): bool =
     FORALL(y:real): Fnum(RtoF(y))=0 IMPLIES Fexp(RtoF(y)) = -dExp(b)
     
  rep_exp_bound: LEMMA
    FORALL(b     : Format,
    	   round : ClosestRoundingPred(b),
           RtoF  : CanonicRoundingFun(b,round) | unique_zero(b,round,RtoF),
	   exp   : int | -dExp(b) <= exp,
	   x     : real,
	   err   : nonneg_real,
	   f     : (Fcanonic?(b))):
    abs(FtoR(f) - x) <= err AND
    abs(x)+err <= radix^exp
    IMPLIES Fexp(f) <= exp  

  unique_zero_closest_rounding: LEMMA
    FORALL(b     : Format,
    	   round : Rounding(b),
           RtoF  : CanonicRoundingFun(b,round)):
      unique_zero(b,round,RtoF)

  unique_zero_RND_aux: LEMMA
   FORALL(b: Format):
    FORALL(y: nonneg_real): Fnum(RND_aux(b)(y))=0 IMPLIES Fexp(RND_aux(b)(y)) = -dExp(b)
    
  unique_zero_RND_Min: LEMMA
   FORALL(b: Format):
    unique_zero(b,isMin?(b),RND_Min(b))

  unique_zero_RND_Max: LEMMA
   FORALL(b: Format):
    unique_zero(b,isMax?(b),RND_Max(b))

  unique_zero_RND_EClosest: LEMMA
   FORALL(b: Format):
    unique_zero(b,EvenClosest?(b),RND_EClosest(b))

END float_props_rounding

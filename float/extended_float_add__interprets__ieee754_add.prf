(extended_float_add__interprets__ieee754_add
 (radix__TCC1 0
  (radix__TCC1-1 nil 3765733434 ("" (judgement-tcc) nil nil) nil nil
   (radix__ subtype
    "extended_float_add__interprets__ieee754_add.radix_"
    "integers.above(1)")))
 (precision__TCC1 0
  (precision__TCC1-1 nil 3765733434
   ("" (typepred "precision_") (("" (assert) nil nil)) nil)
   ((nil name-judgement "above(1)"
     extended_float_add__interprets__ieee754_add nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_add__interprets__ieee754_add nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_add__interprets__ieee754_add nil))
   nil
   (precision__ subtype
    "extended_float_add__interprets__ieee754_add.precision_"
    "integers.above(1)")))
 (dExp__TCC1 0
  (dExp__TCC1-1 nil 3765733434
   ("" (typepred "precision_")
    (("" (typepred "dExp_")
      (("" (typepred "radix_") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_add__interprets__ieee754_add nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil name-judgement "above(1)"
     extended_float_add__interprets__ieee754_add nil)
    (nil name-judgement "above(1)"
     extended_float_add__interprets__ieee754_add nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_add__interprets__ieee754_add nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_add__interprets__ieee754_add nil))
   nil
   (dExp__ subtype "extended_float_add__interprets__ieee754_add.dExp_"
    "{d: integers.posnat | reals.>(d, (number_fields.-)(number_fields.*(2, extended_float_add__interprets__ieee754_add.precision_), 3))}")))
 (ieee754_add_add_correct__finite_interpretation_obligation_1 0
  (ieee754_add_add_correct__finite_interpretation_obligation_1-1 nil
   3765733536
   ("" (mapped-axiom-tcc)
    (("1"
      (use "ieee754_semantics_round_proj_interpretation_obligation_1")
      (("1" (assert) nil nil)) nil)
     ("2"
      (use "ieee754_semantics_round_proj_interpretation_obligation_1")
      (("2" (assert) nil nil)) nil)
     ("3"
      (use "ieee754_semantics_round_proj_interpretation_obligation_1")
      (("3" (assert) nil nil)) nil)
     ("4"
      (use "ieee754_semantics_round_proj_interpretation_obligation_1")
      (("4" (assert) nil nil)) nil))
    nil)
   ((nil name-judgement "above(1)"
     extended_float_add__interprets__ieee754_add nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil name-judgement "above(1)"
     extended_float_add__interprets__ieee754_add nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_add__interprets__ieee754_add nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_add__interprets__ieee754_add nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_add__interprets__ieee754_add nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (add_zero const-decl "efloat" extended_float_add nil)
    (nan2 const-decl "efloat" extended_float_operations_support nil)
    (restrict const-decl "R" restrict nil)
    (add_non_finite const-decl "efloat" extended_float_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trivial?2 const-decl "[real -> [real -> bool]]"
     extended_float_operations_support nil)
    (trivial?1 const-decl "[real -> bool]"
     extended_float_operations_support nil)
    (rnd_ef const-decl "efloat" extended_float_rounding nil)
    (prj_ef const-decl "real" extended_float_rounding nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (is_numeric? const-decl "bool" extended_float nil)
    (efloat type-decl nil extended_float nil)
    (fun_fp const-decl "fpnumber" ieee754_operation_scheme__binary nil)
    (add_ed const-decl "efloat" extended_float_add nil)
    (max_exp const-decl "posint" extended_float nil)
    (max_pos_value const-decl "posreal" extended_float nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nil name-judgement "{d: posnat | d > 2 * (precision_ - 1) - 1}"
     extended_float_add__interprets__ieee754_add nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (prj_ucf const-decl "real" extended_float nil)
    (FtoR const-decl "real" float "float/")
    (negzero const-decl "efloat" extended_float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (poszero const-decl "efloat" extended_float nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (ieee754_semantics_round_proj_interpretation_obligation_1
     formula-decl nil
     extended_float_rounding__interprets__ieee754_semantics nil))
   shostak)))


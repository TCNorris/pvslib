%
%  Collection of lemmas about rounding in double precision.
%
roundoff_error_props: THEORY
BEGIN

  IMPORTING ieee754dp_neg

  X, Y: VAR unb_double
  r_X, r_Y: VAR real
  e,e_X, e_Y: VAR nonneg_real

  smallest_fp_ge(x: real)
  : { X: unb_double | x <= DtoR(X) AND FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y) }
  = RtoD_max(x)

%|- smallest_fp_ge_TCC1 : PROOF
%|- (then (skeep) (expand "RtoD_max") (use "RND_Max_isMax")
%|-  (expand "isMax?") (expand "DtoR") (flatten) (assert) (skeep)
%|-  (inst? -2) (assert))
%|- QED

  smallest_fp_ge_is_ge: LEMMA r_X <= DtoR(smallest_fp_ge(r_X))

%|- smallest_fp_ge_is_ge : PROOF
%|- (then (skeep) (typepred "smallest_fp_ge(r_X)") (propax))
%|- QED

  smallest_fp_ge_nonneg_is_nonneg: LEMMA
    FORALL (x: nonneg_real): RtoD(0) <= smallest_fp_ge(x)

%|- smallest_fp_ge_nonneg_is_nonneg : PROOF
%|- (then (skeep) (use "smallest_fp_ge_is_ge")
%|-  (spread (case "0 <= x")
%|-   ((then (use "RtoD_inc") (assert) (hide -2) (lemma "RtoD_inc")
%|-     (inst? -1 :where -3) (assert) (rewrite "RtoD_DtoR")
%|-     (apply-transitivity 1 -1 -2))
%|-    (assert))))
%|- QED

  smallest_fp_ge_nonneg_j: JUDGEMENT
    smallest_fp_ge(x: nonneg_real) HAS_TYPE nonneg_unbdp

%|- smallest_fp_ge_nonneg_j : PROOF
%|- (then (skeep) (use "smallest_fp_ge_is_ge")
%|-  (spread (case "0 <= x")
%|-   ((then (use "RtoD_inc") (assert) (hide -2) (lemma "RtoD_inc")
%|-     (inst? -1 :where -3) (assert) (rewrite "RtoD_DtoR")
%|-     (apply-transitivity 1 -1 -2))
%|-    (assert))))
%|- QED

  smallest_fp_ge_dtor: LEMMA
    X = smallest_fp_ge(DtoR(X))

%|- smallest_fp_ge_dtor : PROOF
%|- (then (skeep) (typepred "smallest_fp_ge(DtoR(X))") (inst -3 "X")
%|-  (assert)
%|-  (spread (case "DtoR(X) = DtoR(smallest_fp_ge(DtoR(X)))")
%|-   ((then (hide -3 -4)
%|-     (spread
%|-      (case "RtoD(DtoR(X)) = RtoD(DtoR(smallest_fp_ge(DtoR(X))))")
%|-      ((then (rewrite "RtoD_DtoR") (rewrite "RtoD_DtoR")) (assert))))
%|-    (assert))))
%|- QED

  greatest_fp_le(x: real)
  : { X: unb_double | DtoR(X) <= x AND FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X) }
  = RtoD_min(x)

%|- greatest_fp_le_TCC1 : PROOF
%|- (then (skeep) (expand "RtoD_min") (use "RND_Min_isMin")
%|-  (expand "isMin?") (expand "DtoR") (flatten) (assert) (skeep)
%|-  (inst? -2) (assert))
%|- QED

  greatest_fp_le_is_le: LEMMA DtoR(greatest_fp_le(r_X)) <= r_X

%|- greatest_fp_le_is_le : PROOF
%|- (then (skeep) (typepred "greatest_fp_le(r_X)") (propax))
%|- QED

  greatest_fp_le_nonpos_is_nonpos: LEMMA
    FORALL (x: nonpos_real): greatest_fp_le(x) <= RtoD(0)

%|- greatest_fp_le_nonpos_is_nonpos : PROOF
%|- (then (skeep) (use "greatest_fp_le_is_le")
%|-  (spread (case "x <= 0")
%|-   ((then (lemma "RtoD_inc") (inst? -1 :where -2) (assert)
%|-     (lemma "RtoD_inc") (inst? -1 :where -4) (assert) (assert)
%|-     (rewrite "RtoD_DtoR") (assert) (apply-transitivity 1 -1 -2))
%|-    (assert))))
%|- QED

  greatest_fp_le_nonneg_j: JUDGEMENT
    greatest_fp_le(x: nonpos_real) HAS_TYPE nonpos_unbdp

%|- greatest_fp_le_nonneg_j : PROOF
%|- (use "greatest_fp_le_nonpos_is_nonpos")
%|- QED

  greatest_fp_le_dtor: LEMMA
    X = greatest_fp_le(DtoR(X))

%|- greatest_fp_le_dtor : PROOF
%|- (then (skeep) (typepred "greatest_fp_le(DtoR(X))") (inst -3 "X")
%|-  (assert)
%|-  (spread (case "DtoR(X) = DtoR(greatest_fp_le(DtoR(X)))")
%|-   ((then (hide -3 -4)
%|-     (spread
%|-      (case "RtoD(DtoR(X)) = RtoD(DtoR(greatest_fp_le(DtoR(X))))")
%|-      ((then (rewrite "RtoD_DtoR") (rewrite "RtoD_DtoR")) (assert))))
%|-    (assert))))
%|- QED

  %

  lt_greatest_gt_smallest_contradiction: LEMMA
    NOT( X < greatest_fp_le(-e_X) AND smallest_fp_ge(e_X) < X )

%|- lt_greatest_gt_smallest_contradiction : PROOF
%|- (then (skeep) (rewrite "DtoR_strictly_increasing")
%|-  (rewrite "DtoR_strictly_increasing") (use "greatest_fp_le_is_le")
%|-  (use "smallest_fp_ge_is_ge") (assert))
%|- QED

  lt_greatest_ge_smallest_contradiction: LEMMA
    NOT( X < greatest_fp_le(-e_X) AND smallest_fp_ge(e_X) <= X )

%|- lt_greatest_ge_smallest_contradiction : PROOF
%|- (then (skeep) (rewrite "DtoR_strictly_increasing") (rewrite "DtoR_inc")
%|-  (use "greatest_fp_le_is_le") (use "smallest_fp_ge_is_ge") (assert))
%|- QED

  %
  %
  %

  var_ge_0_trans_real: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_X: nonneg_unbdp = smallest_fp_ge(e_X) IN Err_X <= X)
    IMPLIES 0 <= r_X

%|- var_ge_0_trans_real : PROOF
%|- (then (skeep) (skoletin* -2)
%|-  (spread (case "0 <= DtoR(X) - e_X")
%|-   ((spread (case "DtoR(X) - e_X <= r_X")
%|-     ((assert) (then (hide-all-but (1 -4)) (assert))))
%|-    (then (expand "Err_X") (hide-all-but (1 -1))
%|-     (use "smallest_fp_ge_is_ge") (rewrite "DtoR_inc" -2) (assert)))))
%|- QED

  var_gt_error__var_r_gt_0: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_X: nonneg_unbdp = smallest_fp_ge(e_X) IN Err_X < X)
    IMPLIES 0 < r_X

%|- var_gt_error__var_r_gt_0 : PROOF
%|- (then (skeep) (skoletin* -2)
%|-  (spread (case "0 < DtoR(X) - e_X")
%|-   ((spread (case "DtoR(X) - e_X <= r_X")
%|-     ((assert) (then (hide-all-but (1 -4)) (assert))))
%|-    (then (expand "Err_X") (hide-all-but (1 -1))
%|-     (use "smallest_fp_ge_is_ge") (rewrite "DtoR_strictly_increasing")
%|-     (assert)))))
%|- QED

  var_ge_0_trans_fp: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_X: nonneg_unbdp = smallest_fp_ge(e_X) IN Err_X <= X)
    IMPLIES RtoD(0) <= X

%|- var_ge_0_trans_fp : PROOF
%|- (then (skeep) (skoletin* -2)
%|-  (spread (case "RtoD(0) <= Err_X")
%|-   ((apply-transitivity 1 -1 -2) (assert))))
%|- QED

  var_fp_gt_err__var_fp_gt_0: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_X: nonneg_unbdp = smallest_fp_ge(e_X) IN Err_X < X)
    IMPLIES RtoD(0) < X

%|- var_fp_gt_err__var_fp_gt_0 : PROOF
%|- (then (skeep) (skoletin* -2)
%|-  (spread (case "RtoD(0) <= Err_X")
%|-   ((then (hide-all-but (1 -1 -2)) (rewrite "leq_def")
%|-     (spread (split -1) ((apply-transitivity 1 -1 -2 "Flt") (assert))))
%|-    (assert))))
%|- QED

  % The translation of X<0 implies NOT(RtoD(0)<=X) in the original
  var_lt_0_trans_implies_var_not_le_0_orig: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_neg_X: nonpos_unbdp = greatest_fp_le(-e_X) IN X < Err_neg_X)
    IMPLIES NOT RtoD(0) <= X

%|- var_lt_0_trans_implies_var_not_le_0_orig : PROOF
%|- (then (skeep) (skoletin* -2) (replace -2 :hide? t)
%|-  (lemma "greatest_fp_le_nonpos_is_nonpos") (inst? -1)
%|-  (spread (case "X < RtoD(0)")
%|-   ((then (hide-all-but (-1 -5)) (rewrite "Fle_neg_Flt"))
%|-    (then (hide-all-but (1 -1 -2)) (lemma "Flt_Fle_Flt")
%|-     (inst? -1 :where 1) (inst? -1 :where -3) (assert)))))
%|- QED

  var_le_0_trans_implies_var_not_lt_0_orig: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_neg_X: nonpos_unbdp = greatest_fp_le(-e_X) IN X <= Err_neg_X)
    IMPLIES NOT RtoD(0) < X

%|- var_le_0_trans_implies_var_not_lt_0_orig : PROOF
%|- (then (skeep) (skoletin* -2) (replace -2 :hide? t)
%|-  (lemma "greatest_fp_le_nonpos_is_nonpos") (inst? -1)
%|-  (spread (case "X <= RtoD(0)")
%|-   ((then (hide-all-but (-1 -5)) (rewrite "Fle_neg_Flt"))
%|-    (then (hide-all-but (1 -1 -2)) (use "Fle_transitive")
%|-     (expand "transitive?") (inst? -1 :where 1) (inst? -1 :where 2)
%|-     (expand "Err_neg_X") (assert)))))
%|- QED

  var_lt_0_trans_implies_var_not_le_eX: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_neg_X: nonpos_unbdp = greatest_fp_le(-e_X) IN X < Err_neg_X)
    IMPLIES (LET Err_X: nonneg_unbdp = smallest_fp_ge(e_X) IN NOT Err_X <= X)

%|- var_lt_0_trans_implies_var_not_le_eX : PROOF
%|- (then (skeep) (skoletin) (skoletin) (use "greatest_fp_le_is_le")
%|-  (use "smallest_fp_ge_is_ge") (rewrite "DtoR_strictly_increasing")
%|-  (rewrite "DtoR_inc") (assert))
%|- QED

  var_le_0_trans_real: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_neg_X: nonpos_unbdp = greatest_fp_le(-e_X) IN X <= Err_neg_X)
    IMPLIES r_X <= 0

%|- var_le_0_trans_real : PROOF
%|- (then (skeep) (skoletin* -2)
%|-  (spread (case "DtoR(X) + e_X <= 0")
%|-   ((spread (case "r_X <= DtoR(X) + e_X")
%|-     ((assert) (then (hide-all-but (1 -4)) (assert))))
%|-    (then (use "greatest_fp_le_is_le") (rewrite "DtoR_inc" -2)
%|-     (assert)))))
%|- QED

  var_lt_0_trans_real: LEMMA
    abs(DtoR(X) - r_X)<=e_X AND
    (LET Err_neg_X: nonpos_unbdp = greatest_fp_le(-e_X) IN X < Err_neg_X)
    IMPLIES r_X < 0

%|- var_lt_0_trans_real : PROOF
%|- (then (skeep) (skoletin* -2)
%|-  (spread (case "DtoR(X) + e_X < 0")
%|-   ((spread (case "r_X <= DtoR(X) + e_X")
%|-     ((assert) (then (hide-all-but (1 -4)) (assert))))
%|-    (then (use "greatest_fp_le_is_le")
%|-     (rewrite "DtoR_strictly_increasing") (assert)))))
%|- QED

  fp_ge_re_r_ge_0: LEMMA
    FORALL(Err_X, X: unb_double, r_X: real):
    abs(DtoR(X) - r_X)<=DtoR(Err_X) AND
    Err_X <= X IMPLIES 0 <= r_X

  fp_lt_neg_re_r_lt_0
  : LEMMA
    FORALL(Err_X, X: unb_double, r_X: real):
    abs(DtoR(X) - r_X)<=DtoR(Err_X) AND
    X < Dneg(Err_X)
    IMPLIES r_X < 0

  fp_le_neg_re_r_le_0
  : LEMMA
    FORALL(Err_X, X: unb_double, r_X: real):
    abs(DtoR(X) - r_X)<=DtoR(Err_X) AND
    X <= Dneg(Err_X)
    IMPLIES r_X <= 0

  fp_gt_re_r_gt_0
  : LEMMA
    FORALL(Err_X, X: unb_double, r_X: real):
    abs(DtoR(X) - r_X)<=DtoR(Err_X) AND
    Err_X < X
    IMPLIES 0 < r_X


END roundoff_error_props

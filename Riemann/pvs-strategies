;; Basic strategies by Amer Tahat.
;;
(load "basic-strats.lisp")

;; Advanced strategies by
;; Greg Anderson
;; Mariano Moscato.
;;

(defparameter *r-builtin*
  '(("*real*" "CONST")
    ("+" "ADD")
    ("*" "MULT")
    ("exp" "EXP")
    ("neg" "NEG")
    ("^" "POW")
    ("-" "SUB")
    ("sin" "SIN")
    ("cos" "COS")
    ("idr" "ID")
    ("o" "COMP")
    ("O" "COMP")))

(defparameter *r-extended* nil)

(defun r-expr (expr)
  (let ((subs *r-builtin*))
    (ia-interval-expr expr 0 nil subs)))

(defstep prove-integrable? ()
  (then
   (match "integrable?(%1, %2, %3)" step
	  (prove-integrable?_ "%3" "%1" "%2"))
   ;; if that didn't work, let's try a fully instantiated call
   (match "integrable?[real](%1, %2, %3)" step
	  (prove-integrable?_ "%3" "%1" "%2")))
  "[Riemann] Tries to close branches with 'integrable?(A,B,EXPR)' goals."
  "Proving an expression to be integrable...")

(defhelper prove-integrable?_ (expr lowerb upperb)
  (let((r-expr   (r-expr (extra-get-expr expr))))
    (spread
     (let ((case-str
	    (format nil
		    "integrable?(~a,~a,riemann_expr_eval.Eval_real(~a))"
		    lowerb upperb
		    r-expr)))
       (case case-str))
     ((then
       (expand "r2E")
       (repeat (expand "Eval_real"))
       (expand "idr")
       (expand "+") (expand "*") (expand "-") (expand "o") (assert))
      (then
       (then (conts-Integ "Eval_cont_fun") (inst? -1)(Integ-integ-exp))))))
  "[Riemann] Helper for prove-integrable?"
  "")

(defstep riemann-numerical (&optional (breaks 12) (precision 2))
  (match "integral(%1, %2, %3)" step
	 (riemann-numerical_$ "%3" "%1" "%2" :breaks breaks :precision precision))
  "[Riemann] If the sequent contains un expression of form 'integral(A, B, EXPR)',
the strategy computes an interval containing the value of the integral of EXPR
over the interval [A,B]. PRECISION is used to determine the size of the output interval
and BREAKS indicates the number of regions to use in the Riemann sum. In
particular, the sum will use 2^BREAKS regions."
  "Computing numerical integration.")

(defhelper riemann-numerical_ (expr lowerb upperb &optional (breaks 12) (precision 2))
  (let (#+:strat-debug
	(dummy    (format t "~%RUNNIG riemann-numerical with precision ~a~%" precision))
	(req-ths  (no-qualified-name "Riemann@strategies.RiemannStrategies__"))
	(lowerb   (when (stringp lowerb) (read-from-string lowerb)))
	(upperb   (when (stringp upperb) (read-from-string upperb)))
	(interval (format nil "[|~a,~a|]" lowerb upperb))
	(r-expr   (r-expr (extra-get-expr expr)))
	(int-expr (format nil "riemann_expr_eval.Eval(~a)" r-expr))
	(re-expr  (format nil "riemann_expr_eval.Eval_real(~a)" r-expr))
	#+:strat-debug
	(dummy    (format t "~a~%" re-expr))
	(b-str    (format nil "~a" breaks))
	(p-str    (format nil "~a" precision))
	(prec     (* precision 4))
	(pr-str   (format nil "~a" prec))
	(r-name   (freshname "r"))
	(epsilon  (format nil "((~a-~a)/(2^(~a*8)))" upperb lowerb breaks)))
    (if req-ths (printf "This strategy requires theory ~a to be imported in the current context" req-ths)
      (then
       (lemma "Simple_Riemann_Soundness")
       (branch
	(inst -1 interval re-expr b-str p-str)
	((then
	  (assert)
	  (branch
	   (inst -1 int-expr)
	   ((then
	     (branch
	      (use "tr_Riemann_correctness" ("epsilon" epsilon))
	      ((then 
		(assert)
		(hide -2)
		(invoke (eval-expr "%1") (! -1 2))
		(replace -1 :hide? t)
		(then
		 (branch
		  (let ((case-str (format nil "~a = ~a" re-expr expr))) (case case-str))
		  ((then (replace -1 :hide? t) (expand "##")(flatten)(assert))
		   (then
		    (expand "r2E")
		    (repeat (expand "Eval_real"))
		    (expand "idr")
		    (expand "+") (expand "*") (expand "-") (expand "o"))))))
	       (then
		(hide-all-but 1)
		(expand "locallyProper?")
		(skeep)
		(lemma "f_bound_determines_locally_proper_results")
		(inst? -1 :subst ("a" lowerb "b" upperb))
		(assert)
		(inst? -1 :where 1)
		(inst -1 re-expr)
		(assert)
		(hide-all-but 1)
		(inclus-fun "riemann_expr_eval.Eval_inclusion"))
	       (eval-formula))))
	    (inclus-fun "riemann_expr_eval.Eval_inclusion"))))
	 (then (expand "r2E") (soundness1$ "riemann_expr_eval.Eval_inclusion" "Eval_cont_fun"))
	 (then (expand "StrictInterval?") (ground)))))))
  "[Riemann] Compute an interval containing the value of the integral of EXPR
over INTERVAL. PRECISION is used to determine the size of the output interval
and BREAKS indicates the number of regions to use in the Riemann sum. In
particular, the sum will use 2^BREAKS regions."
  "Computing the integral of ~a over the given region")

;;; Debug strats

(defstep now ()
  (let((dummy (multiple-value-bind
		  (second minute hour date month year day-of-week dst-p tz)
		  (get-decoded-time)
		(format t "~%TIME ~d/~2,'0d/~d  ~2,'0d:~2,'0d:~2,'0d~%"
			month
			date
			year
			hour
			minute
			second))))
    (skip))
  "Modification of code from http://cl-cookbook.sourceforge.net/dates_and_times.html"
  "")

(defstrat show-debug-mode ()
  (if (member :strat-debug *features*)
      (printf "~%Debug mode is currently enabled.~%")
    (printf "~%Debug mode is currently disabled.~%"))
  "Shows current debug mode."
  "")

(defstrat toggle-debug-mode ()
  (if (member :strat-debug *features*)
      (let ((dummy (setq *features* (remove :strat-debug *features*)))
	    (dummy (load "pvs-strategies")))
	(printf "~%Debug mode disabled.~%"))
    (let ((dummy (pushnew :strat-debug *features*))
	  (dummy (load "pvs-strategies")))
      (printf "~%Debug mode enabled.~%")))
  "Toggles debug mode on the current theory strategies."
  "Toggling debug mode...")

riemann_expr_eval : THEORY
  BEGIN

  IMPORTING RiemannExpr,
            interval_arith@interval,
            interval_arith@interval_lnexp,
            interval_arith@interval_trig,
            interval_arith@interval_sqrt,
            structures@Maybe,
            analysis@continuous_functions[real],
            analysis@composition_continuous[real, real]

  re   : VAR RiemannExpr
  n,p  : VAR nat
  X,Y  : VAR Interval
  x    : VAR real

  r2E(r: rat): RiemannExpr = CONST(r)
  CONVERSION r2E

  idr(x): real = x

  Eval(re)(p): RECURSIVE [Interval -> Interval] =
    CASES re OF
      CONST(r): LAMBDA X: [|r|],
      ADD(re1, re2): LAMBDA X: Add(Eval(re1)(p)(X), Eval(re2)(p)(X)),
      NEG(re1): LAMBDA X: Neg(Eval(re1)(p)(X)),
      SUB(re1, re2): LAMBDA X: Sub(Eval(re1)(p)(X), Eval(re2)(p)(X)),
      MULT(re1, re2): LAMBDA X: Mult(Eval(re1)(p)(X), Eval(re2)(p)(X)),
      POW(re1, n): LAMBDA X: Pow(Eval(re1)(p)(X), n),
      EXP: Exp(p),
      SIN: Sin(p),
      COS: Cos(p),
      ID: (LAMBDA X: X),
      COMP(re1, re2): LAMBDA X: Eval(re1)(p)(Eval(re2)(p)(X))
    ENDCASES
  MEASURE re BY <<

  Eval_real(re): RECURSIVE [real -> real] =
    CASES re OF
      CONST(r): LAMBDA x: r,
      ADD(re1, re2): Eval_real(re1) + Eval_real(re2),
      NEG(re1): -Eval_real(re1),
      SUB(re1, re2): Eval_real(re1) - Eval_real(re2),
      MULT(re1, re2): Eval_real(re1) * Eval_real(re2),
      POW(re1, n): Eval_real(re1) ^ n,
      EXP: exp,
      SIN: sin,
      COS: cos,
      ID: (LAMBDA x: x),
      COMP(re1, re2): Eval_real(re1) o Eval_real(re2)
    ENDCASES
  MEASURE re BY <<

  Eval_inclusion : LEMMA
    x ## X IMPLIES Eval_real(re)(x) ## Eval(re)(p)(X)

  Eval_cont_fun : LEMMA
    continuous?(Eval_real(re))

  END riemann_expr_eval

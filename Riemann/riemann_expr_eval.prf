(riemann_expr_eval
 (Eval_TCC1 0
  (Eval_TCC1-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC2 0
  (Eval_TCC2-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC3 0
  (Eval_TCC3-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC4 0
  (Eval_TCC4-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC5 0
  (Eval_TCC5-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC6 0
  (Eval_TCC6-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC7 0
  (Eval_TCC7-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC8 0
  (Eval_TCC8-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC9 0
  (Eval_TCC9-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_TCC10 0
  (Eval_TCC10-1 nil 3679756552 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RiemannExpr])"
     RiemannExpr_adt nil))
   nil))
 (Eval_inclusion 0
  (Eval_inclusion-1 nil 3679756568
   ("" (induct "re")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand "Eval")
          (("1" (expand "Eval_real")
            (("1" (expand "##") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "X" "p" "x")
          (("2" (inst -2 "X" "p" "x")
            (("2" (assert)
              (("2" (expand "Eval_real" 1)
                (("2" (expand "Eval" 1)
                  (("2" (lemma "Add_inclusion")
                    (("2" (expand "+" 1)
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (expand "Eval_real")
        (("3" (expand "Eval")
          (("3" (lemma "Exp_inclusion")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (inst -1 "X" "p" "x")
          (("4" (inst -2 "X" "p" "x")
            (("4" (assert)
              (("4" (expand "Eval_real" +)
                (("4" (expand "Eval" +)
                  (("4" (expand "*")
                    (("4" (lemma "Mult_inclusion")
                      (("4" (inst?) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (inst -1 "X" "p" "x")
          (("5" (assert)
            (("5" (expand "Eval_real" +)
              (("5" (expand "Eval" +)
                (("5" (expand "-")
                  (("5" (lemma "Neg_inclusion")
                    (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (inst -1 "X" "p" "x")
          (("6" (assert)
            (("6" (expand "Eval_real" +)
              (("6" (expand "Eval" +)
                (("6" (expand "^")
                  (("6" (lemma "Pow_inclusion")
                    (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (inst -1 "X" "p" "x")
          (("7" (inst -2 "X" "p" "x")
            (("7" (assert)
              (("7" (expand "Eval_real" +)
                (("7" (expand "Eval" +)
                  (("7" (expand "-")
                    (("7" (lemma "Sub_inclusion")
                      (("7" (inst?) (("7" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (expand "Eval_real")
        (("8" (expand "Eval")
          (("8" (lemma "Sin_inclusion")
            (("8" (inst?) (("8" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("9" (skeep)
      (("9" (expand "Eval_real")
        (("9" (expand "Eval")
          (("9" (lemma "Cos_inclusion")
            (("9" (inst?) (("9" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("10" (skeep)
      (("10" (expand "Eval_real")
        (("10" (expand "Eval")
          (("10" (expand "id") (("10" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (skeep)
        (("11" (inst -2 "X" "p" "x")
          (("11" (assert)
            (("11"
              (inst -1 "Eval(COMP2_var)(p)(X)" "p"
               "Eval_real(COMP2_var)(x)")
              (("11" (assert)
                (("11" (expand "Eval_real" +)
                  (("11" (expand "Eval" +)
                    (("11" (assert)
                      (("11" (expand "o") (("11" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (Cos_inclusion formula-decl nil interval_trig "interval_arith/")
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (Sin_inclusion formula-decl nil interval_trig "interval_arith/")
    (Sub_inclusion formula-decl nil interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (Pow_inclusion formula-decl nil interval "interval_arith/") nil
    (minus_real_is_real application-judgement "real" reals nil)
    (Neg_inclusion formula-decl nil interval "interval_arith/")
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    nil
    (Exp_inclusion formula-decl nil interval_lnexp "interval_arith/")
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (ub_r2i formula-decl nil interval "interval_arith/")
    (lb_r2i formula-decl nil interval "interval_arith/")
    (RiemannExpr_induction formula-decl nil RiemannExpr_adt nil)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval nil)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RiemannExpr type-decl nil RiemannExpr_adt nil))
   shostak))
 (Eval_cont_fun 0
  (Eval_cont_fun-1 nil 3679757066
   ("" (induct "re")
    (("1" (skeep)
      (("1" (expand "Eval_real")
        (("1" (assert)
          (("1" (lemma "linear_fun_cont")
            (("1" (inst -1 "CONST1_var" "0") (("1" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "Eval_real" +)
        (("2" (lemma "sum_cont_fun")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (expand "Eval_real")
      (("3" (lemma "exp_continuous") (("3" (propax) nil nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (expand "Eval_real" +)
        (("4" (lemma "prod_cont_fun")
          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (expand "Eval_real" +)
        (("5" (lemma "neg_cont_fun")
          (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (expand "Eval_real" +)
        (("6" (lemma "expt_cont_fun")
          (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (expand "Eval_real" +)
        (("7" (lemma "diff_cont_fun")
          (("7" (inst?) (("7" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("8" (expand "Eval_real")
      (("8" (lemma "sin_cont_fun") (("8" (propax) nil nil)) nil)) nil)
     ("9" (expand "Eval_real")
      (("9" (lemma "cos_cont_fun") (("9" (propax) nil nil)) nil)) nil)
     ("10" (expand "Eval_real")
      (("10" (lemma "identity_cont_fun")
        (("10" (expand "I")
          (("10" (expand "id") (("10" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (lemma "composition_cont_fun")
        (("11" (expand "Eval_real" +)
          (("11" (inst?) (("11" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((composition_cont_fun formula-decl nil composition_continuous
     "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (identity_cont_fun formula-decl nil continuous_functions
     "analysis/")
    (cos_cont_fun formula-decl nil sincos "trig_fnd/")
    (sin_cont_fun formula-decl nil sincos "trig_fnd/")
    (diff_cont_fun formula-decl nil continuous_functions "analysis/")
    (expt_cont_fun formula-decl nil continuous_functions "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (neg_cont_fun formula-decl nil continuous_functions "analysis/")
    (prod_cont_fun formula-decl nil continuous_functions "analysis/")
    (exp_continuous formula-decl nil ln_exp "lnexp_fnd/")
    (sum_cont_fun formula-decl nil continuous_functions "analysis/")
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (linear_fun_cont formula-decl nil continuous_functions "analysis/")
    (RiemannExpr_induction formula-decl nil RiemannExpr_adt nil)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval nil)
    (continuous? const-decl "bool" continuous_functions "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RiemannExpr type-decl nil RiemannExpr_adt nil))
   shostak)))


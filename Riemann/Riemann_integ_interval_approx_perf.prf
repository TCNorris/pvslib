(Riemann_integ_interval_approx_perf
 (f_bound_determines_locally_proper_results_TCC1 0
  (f_bound_determines_locally_proper_results_TCC1-1 nil 3781457431
   ("" (skeep)
    (("" (expand "StrictInterval?")
      (("" (expand "[||]")
        (("" (name-replace "bla" "(2 ^ m)")
          (("" (grind-reals) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (StrictInterval? const-decl "bool" interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (lt_plus_lt2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    ([\|\|] const-decl "Interval" interval "interval_arith/"))
   nil))
 (f_bound_determines_locally_proper_results 0
  (f_bound_determines_locally_proper_results-1 nil 3781457439
   ("" (skeep)
    (("" (expand "F_Bound?")
      (("" (lemma "Proper_Member")
        ((""
          (inst -1 "[|(b * i - a * i + (a - b)) / (2 ^ m)
                                     +
                                     a,
                                     (b * i - a * i) / (2 ^ m) + a|]")
          (("" (split -1)
            (("1" (skeep -1)
              (("1" (insteep -2)
                (("1" (lemma "Member_Proper")
                  (("1" (inst? -1 :where 1)
                    (("1" (inst? -1 :where -) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "##")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (name-replace "bla" "(2 ^ m)")
                (("2" (expand "Proper?")
                  (("2" (expand "[||]") (("2" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (subrange type-eq-decl nil subrange_type nil)
    (Proper? const-decl "bool" interval "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_plus_le formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (Member_Proper formula-decl nil interval "interval_arith/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (a skolem-const-decl "real" Riemann_integ_interval_approx_perf nil)
    (b skolem-const-decl "{x: real | a < x}"
     Riemann_integ_interval_approx_perf nil)
    (m skolem-const-decl "posnat" Riemann_integ_interval_approx_perf
     nil)
    (i skolem-const-decl "subrange[1, 2 ^ m]"
     Riemann_integ_interval_approx_perf nil)
    (x skolem-const-decl "real" Riemann_integ_interval_approx_perf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (ub_interval formula-decl nil interval "interval_arith/")
    (Proper_Member formula-decl nil interval "interval_arith/"))
   shostak))
 (r_proper_on_f_locally_proper 0
  (r_proper_on_f_locally_proper-1 nil 3781459164
   ("" (skeep*)
    (("" (expand "R")
      (("" (use "Proper_Mult")
        (("" (hide 2)
          (("" (expand "eq_partition")
            (("" (typepred "F")
              (("" (expand "locallyProper?")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (R const-decl "Interval" Riemann_integ_interval_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finseq type-eq-decl nil finite_sequences nil)
    (above nonempty-type-eq-decl nil integers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (subrange type-eq-decl nil subrange_type nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (i skolem-const-decl "subrange[1, 2 ^ m]"
     Riemann_integ_interval_approx_perf nil)
    (F skolem-const-decl "LocallyProper(a, b, m, n)"
     Riemann_integ_interval_approx_perf nil)
    (n skolem-const-decl "nat" Riemann_integ_interval_approx_perf nil)
    (m skolem-const-decl "posnat" Riemann_integ_interval_approx_perf
     nil)
    (b skolem-const-decl "{x: real | a < x}"
     Riemann_integ_interval_approx_perf nil)
    (a skolem-const-decl "real" Riemann_integ_interval_approx_perf nil)
    (Proper_Mult judgement-tcc nil interval "interval_arith/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (rienmann_sum_r2i_proper_if_every_participating_r_is_proper_TCC1 0
  (rienmann_sum_r2i_proper_if_every_participating_r_is_proper_TCC1-1
   nil 3781458691 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (subrange type-eq-decl nil subrange_type nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Proper? const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (^ const-decl "real" exponentiation nil))
   nil))
 (rienmann_sum_r2i_proper_if_every_participating_r_is_proper 0
  (rienmann_sum_r2i_proper_if_every_participating_r_is_proper-1 nil
   3781459391
   ("" (skeep :but "i")
    (("" (induct "i")
      (("1" (flatten) (("1" (inst -1 "1") (("1" (grind) nil nil)) nil))
        nil)
       ("2" (skeep)
        (("2" (expand "RiemannSum_R2I" 1)
          (("2" (use "Proper_Add")
            (("1" (hide 2)
              (("1" (split -2)
                (("1" (propax) nil nil)
                 ("2" (skeep) (("2" (insteep) nil nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (use "r_proper_on_f_locally_proper") nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil subrange_type nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (R const-decl "Interval" Riemann_integ_interval_approx nil)
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx nil)
    (RiemannSum_R2I def-decl "Interval" Riemann_integ_interval_approx
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (minus_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (pXp const-decl "Interval" interval "interval_arith/")
    (Le const-decl "bool" interval "interval_arith/")
    (Neg const-decl "Interval" interval "interval_arith/")
    (nXp const-decl "Interval" interval "interval_arith/")
    (pXn const-decl "Interval" interval "interval_arith/")
    (pXm const-decl "Interval" interval "interval_arith/")
    (nXn const-decl "Interval" interval "interval_arith/")
    (nXm const-decl "Interval" interval "interval_arith/")
    (mXp const-decl "Interval" interval "interval_arith/")
    (mXn const-decl "Interval" interval "interval_arith/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (mXm const-decl "Interval" interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (r_proper_on_f_locally_proper formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (a skolem-const-decl "real" Riemann_integ_interval_approx_perf nil)
    (b skolem-const-decl "{x: real | a < x}"
     Riemann_integ_interval_approx_perf nil)
    (m skolem-const-decl "posnat" Riemann_integ_interval_approx_perf
     nil)
    (k skolem-const-decl "subrange(1, 2 ^ m)"
     Riemann_integ_interval_approx_perf nil)
    (n skolem-const-decl "nat" Riemann_integ_interval_approx_perf nil)
    (F skolem-const-decl "LocallyProper(a, b, m, n)"
     Riemann_integ_interval_approx_perf nil)
    (Proper_Add judgement-tcc nil interval "interval_arith/"))
   shostak))
 (bestRationalInterval_TCC1 0
  (bestRationalInterval_TCC1-1 nil 3781372000
   ("" (subtype-tcc) nil nil) nil nil))
 (bestRationalInterval_TCC2 0
  (bestRationalInterval_TCC2-1 nil 3781372000
   ("" (subtype-tcc) nil nil) nil nil))
 (best_rational_interval_overapproximates 0
  (best_rational_interval_overapproximates-1 nil 3781441198
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (bestRationalInterval const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (<< const-decl "bool" interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (r___includes_r 0
  (r___includes_r-2 "" 3781440960
   ("" (skeep 1)
    (("" (expand "R__")
      (("" (expand "R_")
        (("" (expand "R")
          (("" (expand "finseq_appl")
            (("" (expand "eq_partition")
              (("" (use "Mult_fundamental")
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1"
                        (invoke (name-replace "bla" "%1") (! -1 1 1))
                        (("1" (expand "Proper?")
                          (("1" (expand "[||]")
                            (("1"
                              (name-replace "x__" "(b - a) / 2 ^ m")
                              (("1"
                                (case "x__ > 0")
                                (("1"
                                  (expand "Mult")
                                  (("1"
                                    (expand "Ge")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "Le")
                                        (("1"
                                          (lift-if -2)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (div-by -4 "x__")
                                              nil
                                              nil)
                                             ("2"
                                              (div-by -4 "x__")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (div-by -2 "x__")
                                              nil
                                              nil)
                                             ("4"
                                              (div-by -4 "x__")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "x__")
                                  (("2"
                                    (assert)
                                    (("2" (grind-reals) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (use "best_rational_interval_overapproximates")
                        (("2" (assert) nil nil)) nil)
                       ("3"
                        (use "best_rational_interval_overapproximates")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R__ const-decl "Interval" Riemann_integ_interval_approx_perf nil)
    (R const-decl "Interval" Riemann_integ_interval_approx nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (Incl_r2i formula-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (x__ skolem-const-decl "real" Riemann_integ_interval_approx_perf
     nil)
    (pos_div_gt formula-decl nil real_props nil)
    (Mult const-decl "Interval" interval "interval_arith/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (pXm const-decl "Interval" interval "interval_arith/")
    (mXp const-decl "Interval" interval "interval_arith/")
    (minus_real_is_real application-judgement "real" reals nil)
    (Neg const-decl "Interval" interval "interval_arith/")
    (pXp const-decl "Interval" interval "interval_arith/")
    (nXp const-decl "Interval" interval "interval_arith/")
    (Le const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (best_rational_interval_overapproximates formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (bestRationalInterval const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (subrange type-eq-decl nil subrange_type nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Mult_fundamental formula-decl nil interval "interval_arith/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (R_ const-decl "Interval" Riemann_integ_interval_approx_perf nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)
  (r___includes_r-1 nil 3781374613
   ("" (skeep 1)
    (("" (expand "R__")
      (("" (expand "R_")
        (("" (expand "R")
          (("" (expand "finseq_appl")
            (("" (expand "eq_partition")
              (("" (use "Mult_fundamental")
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1"
                        (invoke (name-replace "bla" "%1") (! -1 1 1))
                        (("1"
                          (invoke (name-replace "ble" "%1") (! -1 1 2))
                          (("1" (case "Proper?(ble)")
                            (("1" (expand "Proper?")
                              (("1"
                                (expand "ble")
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (grind)
                                    (("1" (postpone) nil nil)
                                     ("2" (postpone) nil nil)
                                     ("3" (postpone) nil nil)
                                     ("4" (postpone) nil nil)
                                     ("5" (postpone) nil nil)
                                     ("6" (postpone) nil nil)
                                     ("7" (postpone) nil nil)
                                     ("8" (postpone) nil nil)
                                     ("9" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (use "best_rational_interval_overapproximates")
                        (("2" (assert) nil nil)) nil)
                       ("3"
                        (use "best_rational_interval_overapproximates")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RiemannSum_R2I_tr__TCC1 0
  (RiemannSum_R2I_tr__TCC1-1 nil 3782068644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (subrange type-eq-decl nil subrange_type nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (^ const-decl "real" exponentiation nil))
   nil))
 (RiemannSum_R2I_tr__TCC2 0
  (RiemannSum_R2I_tr__TCC2-1 nil 3782068644
   ("" (termination-tcc) nil nil) nil nil))
 (RiemannSum_R2I_tr_TCC1 0
  (RiemannSum_R2I_tr_TCC1-1 nil 3781980656
   ("" (skeep)
    (("" (assert)
      (("" (use "pos_expt_gt") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (pos_expt_gt formula-decl nil exponentiation nil))
   nil))
 (bestRationalSigma_TCC1 0
  (bestRationalSigma_TCC1-1 nil 3781980202 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (bestRationalSigma_one 0
  (bestRationalSigma_one-1 nil 3782065796 ("" (grind) nil nil)
   (([\|\|] const-decl "Interval" interval "interval_arith/")
    (bestRationalSigma def-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    (bestRationalInterval const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Sigma_alternative_definition 0
  (Sigma_alternative_definition-1 nil 3782067066
   ("" (skeep :preds? t)
    (("" (name "k_" "j-i")
      (("" (generalize "k_" "k_" "nat")
        (("1" (assert) nil nil)
         ("2" (generalize "j" "j" "int")
          (("2" (generalize "i" "i")
            (("2" (induct "k_")
              (("1" (grind) nil nil)
               ("2" (skolem 1 "k")
                (("2" (flatten)
                  (("2" (skolem 1 ("i_" "j_"))
                    (("2" (flatten)
                      (("2" (expand "Sigma" 1)
                        (("2" (assert)
                          (("2" (inst -1 "i_" "j_-1")
                            (("2" (assert)
                              (("2"
                                (rewrite "Add_assoc" :dir rl)
                                (("2"
                                  (lemma "Add_comm")
                                  (("2"
                                    (inst -1 "F(i_)" "F(j_)")
                                    (("2"
                                      (replace -1 :hide? t)
                                      (("2"
                                        (rewrite "Add_assoc")
                                        (("2"
                                          (replace -1 :hide? t :dir rl)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upfrom nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Add_comm formula-decl nil interval "interval_arith/")
    (Add_assoc formula-decl nil interval "interval_arith/")
    (k_ skolem-const-decl "int" Riemann_integ_interval_approx_perf nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Sigma def-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (Sigma_fundamental 0
  (Sigma_fundamental-1 nil 3782065842
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (split -1)
          (("1" (expand "Sigma" 1)
            (("1" (use "Add_fundamental")
              (("1" (assert) (("1" (inst?) nil nil)) nil)) nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (Sigma def-decl "Interval" interval "interval_arith/")
    (nat_induction formula-decl nil naturalnumbers nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (bestRationalSigma_includes_sigma 0
  (bestRationalSigma_includes_sigma-1 nil 3782066106
   ("" (skeep)
    (("" (case "j>=i")
      (("1" (name "k" "j-i")
        (("1" (case "j>=0")
          (("1" (generalize "k" "k" "nat")
            (("1" (assert) nil nil)
             ("2" (generalize "j" "j")
              (("2" (generalize "i" "i")
                (("2" (induct "k")
                  (("1" (grind) nil nil)
                   ("2" (skolem 1 "n")
                    (("2" (flatten)
                      (("2" (skolem 1 ("i_" "j_"))
                        (("2" (flatten)
                          (("2" (expand "bestRationalSigma" 1)
                            (("2" (assert)
                              (("2"
                                (rewrite
                                 "Sigma_alternative_definition")
                                (("2"
                                  (use
                                   "best_rational_interval_overapproximates")
                                  (("2"
                                    (lemma "Add_fundamental")
                                    (("2"
                                      (inst
                                       -1
                                       "F(i_)"
                                       "F(i_)"
                                       "bestRationalSigma(epsilon)(1 + i_, j_, F)"
                                       "Sigma(i_ + 1, j_, F)")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (lemma "Incl_trans")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (inst? -1 :where -3)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (inst -2 "1+i_" "j_")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    (bestRationalInterval const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (best_rational_interval_overapproximates formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Incl_trans formula-decl nil interval "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Sigma_alternative_definition formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (k skolem-const-decl "int" Riemann_integ_interval_approx_perf nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (Sigma def-decl "Interval" interval "interval_arith/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (bestRationalSigma def-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (extendedR___TCC1 0
  (extendedR___TCC1-1 nil 3781982069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (tr_Riemann_as_sum_TCC1 0
  (tr_Riemann_as_sum_TCC1-1 nil 3782068644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (subrange type-eq-decl nil subrange_type nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (tr_Riemann_as_sum 0
  (tr_Riemann_as_sum-1 nil 3781981586
   ("" (skeep 1 :but ("i"))
    (("" (induct "i")
      (("1" (expand "RiemannSum_R2I_tr_") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (expand "RiemannSum_R2I_tr_" 1 1)
          (("2" (replace -2 :hide? t :dir rl)
            (("2" (expand "bestRationalSigma" 1 2)
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skeep) (("3" (assert) nil nil)) nil)
       ("4" (assert) nil nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil subrange_type nil)
    (m skolem-const-decl "posnat" Riemann_integ_interval_approx_perf
     nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (RiemannSum_R2I_tr_ def-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf nil)
    (bestRationalSigma def-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/"))
   shostak))
 (tr_Riemann_inclusion 0
  (tr_Riemann_inclusion-3 "" 3782062330
   ("" (skeep)
    (("" (expand "RiemannSum_R2I_tr")
      (("" (lemma "tr_Riemann_as_sum")
        (("" (insteep -1 :but "i")
          (("" (inst -1 "2^m")
            (("" (rewrite "bestRationalSigma_one")
              (("1" (case "1 <= 2 ^ m")
                (("1" (assert)
                  (("1" (replace -2 :hide? t)
                    (("1"
                      (rewrite
                       "riemann_sum_r2i_alternative_definition")
                      (("1" (expand "SigmaSub")
                        (("1" (expand "restrict")
                          (("1" (expand "subrange?")
                            (("1"
                              (use "bestRationalSigma_includes_sigma")
                              (("1"
                                (lemma "Sigma_fundamental")
                                (("1"
                                  (inst
                                   -1
                                   "2^m"
                                   "LAMBDA (n_1: nat):
              IF 1 <= n_1 AND n_1 <= 2 ^ m THEN R(a, b, m, n_1, n, F)
              ELSE [|0|]
              ENDIF"
                                   "LAMBDA (k: nat):
              IF 1 <= k AND k <= 2 ^ m THEN R__(epsilon)(a, b, m, k, n, F)
              ELSE [|0|]
              ENDIF"
                                   "epsilon")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (lemma "Incl_trans")
                                      (("1"
                                        (inst? -1 :where 1)
                                        (("1"
                                          (inst? -1 :where -3)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (use "r___includes_r")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (use
                                                       "r_proper_on_f_locally_proper")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "expt_ge1") (("2" (assert) nil nil)) nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bestRationalSigma_one formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (expt_ge1 formula-decl nil exponentiation nil)
    (above nonempty-type-eq-decl nil integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R const-decl "Interval" Riemann_integ_interval_approx nil)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx nil)
    (riemann_sum_r2i_alternative_definition formula-decl nil
     Riemann_integ_interval_approx nil)
    (restrict const-decl "R" restrict nil)
    (bestRationalSigma_includes_sigma formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (m skolem-const-decl "posnat" Riemann_integ_interval_approx_perf
     nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (r_proper_on_f_locally_proper formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (r___includes_r formula-decl nil Riemann_integ_interval_approx_perf
     nil)
    (Incl_trans formula-decl nil interval "interval_arith/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Sigma def-decl "Interval" interval "interval_arith/")
    (bestRationalSigma def-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (Sigma_fundamental formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (subrange? const-decl "bool" Riemann_integ_interval_approx nil)
    (SigmaSub const-decl "Interval" Riemann_integ_interval_approx nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (subrange type-eq-decl nil subrange_type nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (tr_Riemann_as_sum formula-decl nil
     Riemann_integ_interval_approx_perf nil))
   shostak)
  (tr_Riemann_inclusion-2 "" 3782061415
   ("" (skeep)
    (("" (expand "RiemannSum_R2I_tr")
      (("" (use "tr_Riemann_inclusion_") nil nil)) nil))
    nil)
   nil shostak)
  (tr_Riemann_inclusion-1 nil 3781974413
   ("" (skeep)
    (("" (rewrite "tr_Riemann_equivalence" :dir rl)
      (("" (use "faster_Riemann_inclusion") nil nil)) nil))
    nil)
   ((RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (subrange type-eq-decl nil subrange_type nil))
   shostak))
 (tr_Riemann_correctness 0
  (tr_Riemann_correctness-1 nil 3781974371
   ("" (skeep)
    (("" (use "tr_Riemann_inclusion")
      (("" (use "Incl_Member")
        (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((tr_Riemann_inclusion formula-decl nil
     Riemann_integ_interval_approx_perf nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     nil)
    (locallyProper? const-decl "bool"
     Riemann_integ_interval_approx_perf nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (subrange type-eq-decl nil subrange_type nil)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx nil)
    (RiemannSum_R2I def-decl "Interval" Riemann_integ_interval_approx
     nil)
    (R const-decl "Interval" Riemann_integ_interval_approx nil)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf nil)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf nil)
    (Incl_Member formula-decl nil interval "interval_arith/"))
   shostak)))


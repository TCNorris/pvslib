%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% @Author Amer Tahat
%
% Acknowledgment: The author extends his gratitude to Cesar Munoz, Anthony
% Narkawicz, and Ali Ebnenasir for their valued comments during the development
% of this pvs theory.
%
% Copyright (C) 2016, Michigan Technological University and Amer Tahat.
%
% GNU LGPL information:
% ---------------------
%
% This code is free software: you can redistribute it and/or modify it under the
% terms of the GNU General Public License  as published by the Free Software
% Foundation. This code is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
% FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
% details.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
simple_riemann_examples 
: THEORY BEGIN

   IMPORTING Riemann@Riemann_integ_interval_approx 
   IMPORTING continuous_functions[real]
   IMPORTING structures@fun_preds_partial

X        : VAR StrictInterval
x        : VAR real 
n        : VAR nat
m        : VAR posnat 

Y:VAR Interval

%——–e.g.  Multiplication of 2 elementary functions: 

ExpCos(n)(Y):Interval = Mult(Exp(n)(Y),Cos(n)(Y))

expcos:[real->real]= exp*cos

expcos_cont_fun :lemma continuous?(expcos)
%|- expcos_cont_fun : PROOF
%|- (then (expand "expcos") (cont-prod exp_continuous cos_cont_fun))
%|- QED

ExpCos_inclusion:lemma x ## Y IMPLIES expcos(x) ## ExpCos(n)(Y)

ExpCos_bounds: lemma x##[|0,1|] =>  expcos(x) > 0

% A few applications for conts-numerical-Riemann: different parameters and/or functions.

expcos_test1:LEMMA integral(0,1,expcos) ## [|1.377 , 1.379|]
%|- expcos_test1 : PROOF
%|- (conts-numerical-Riemann ("ExpCos") ExpCos_inclusion expcos_cont_fun
%|-  "[|0, 1|]" "expcos" "12" "2")
%|- QED

%————conts-numerical-Riemann for atan at t:

%( This example on how to use numerical Riemann to approximate functions that are defined by means of Riemann integral)
% The method does not require a known anti-derivative.  
% This example explains another way to approximate arc-tan function using numerical Riemann strategy it does not use TAYLOR expansion.    

t1: JUDGEMENT posreal subtype_of real

atan_deriv_fun(x:real):real = 1/(1+x*x)    

%- The analysis lemmas needed to define Atan_Deriv(n)(Y):

atan_deriv_fun_bounds:lemma 0  < atan_deriv_fun(x) and atan_deriv_fun(x) <= 1

atan_deriv_strict_decreasing: lemma forall (x1,x2:{x0:real | 0 < x0}): x1 < x2  => atan_deriv_fun(x2) <  atan_deriv_fun(x1)

atan_deriv_strict_increasing: lemma forall (x1,x2:{x0:real | 0 > x0}): x1 < x2  => atan_deriv_fun(x2) >  atan_deriv_fun(x1)

%atan_deriv_fun continuty: 

atan_deriv_cont:lemma continuous?[real](atan_deriv_fun)

%- atan_deriv_fun_interval_bounding_function: 
 
  Atan_Deriv(n)(Y)
  : Interval 
  = COND
    0 < lb(Y) and 0 < ub(Y) and lb(Y)<ub(Y) -> [|1/(1+ub(Y)*ub(Y)),1/(1+lb(Y)*lb(Y))|],
    ub(Y) < 0 and lb(Y) < 0 and lb(Y)<ub(Y) -> [|1/(1+lb(Y)*lb(Y)),1/(1+ub(Y)*ub(Y))|],
    lb(Y)=ub(Y)                             -> [|0,1|], 
    else                                    -> [|min(atan_deriv_fun(lb(Y)),atan_deriv_fun(ub(Y))),1|]
  ENDCOND 


%atan_deriv_fun fundamental inclusion theory:

Atan_Deriv_inclusion: lemma x ## Y IMPLIES atan_deriv_fun(x) ## Atan_Deriv(n)(Y)% The proof is lengthy ~ 186 steps.

%  atan value is defined mathematically as integral(0,x,atan_deriv_fun). atan has significant applications in aeronautics. 
%  Below we can see the use of continuous-numerical-Riemann with different parameters in approximating its values  

atan_approx_at_1_test1: lemma  integral(0,1, atan_deriv_fun) ## [|0.7853, 0.7855 |]
%|- atan_approx_at_1_test1 : PROOF
%|- (conts-numerical-Riemann ("Atan_Deriv") Atan_Deriv_inclusion
%|-  atan_deriv_cont "[|0,1|]" "atan_deriv_fun" "13" "2")
%|- QED
%1.97sec. note m=12.

atan_approx_at_1_on_239:lemma integral(0,1/239, atan_deriv_fun) ## [|0.004184075997, 0.004184076007|]
%|- atan_approx_at_1_on_239 : PROOF
%|- (conts-numerical-Riemann ("Atan_Deriv") Atan_Deriv_inclusion
%|-  atan_deriv_cont "[|0,1/239|]" "atan_deriv_fun" "13" "2")
%|- QED
%2.78sec. 

atan_approx_at_1_on_5:lemma integral(0,1/5, atan_deriv_fun) ## [|0.19739509, 0.1973960299|]
%|- atan_approx_at_1_on_5 : PROOF
%|- (conts-numerical-Riemann ("Atan_Deriv") Atan_Deriv_inclusion
%|-  atan_deriv_cont "[|0,1/5|]" "atan_deriv_fun" "13" "2")
%|- QED
%3.24 sec  

atan_approx_at_1_on_30: lemma  integral(0,1/30, atan_deriv_fun) ## [|0.0332099587824719715, 0.03332099819 |] 
%|- atan_approx_at_1_on_30 : PROOF
%|- (conts-numerical-Riemann ("Atan_Deriv") Atan_Deriv_inclusion
%|-  atan_deriv_cont "[|0,1/30|]" "atan_deriv_fun" "13" "2")
%|- QED
% 1.89 sec.

atan_approx_at_1_on_230: lemma  integral(0,1/230, atan_deriv_fun) ## [|0.00434779868, 0.004347798696|]% ε <=1x10^⁻11 run time 3.15 sec.
%|- atan_approx_at_1_on_230 : PROOF
%|- (conts-numerical-Riemann ("Atan_Deriv") Atan_Deriv_inclusion
%|-  atan_deriv_cont "[|0,1/230|]" "atan_deriv_fun" "13" "2")
%|- QED

atan_approx_at_89_test1: lemma  integral(0,89, atan_deriv_fun) ## [|1.5486979,1.57042371|]
%|- atan_approx_at_89_test1 : PROOF
%|- (conts-numerical-Riemann ("Atan_Deriv") Atan_Deriv_inclusion
%|-  atan_deriv_cont "[|0,89|]" "atan_deriv_fun" "13" "2")
%|- QED
%2.25sec.m=13.

%————–More elementary functions:

% A few applications for conts-numerical-Riemann: different parameters and/or functions.

%——- 

% The mechanical but not autoamtic proof of following example (cos_test) required the total of 1000 proof command 
% (Including the proof of 16 lemmas and the definition of several supplementary functions).
% Now it's been revisited and proved by conts-numerical-Riemann in one line proof command. 
% Thanks to PVS strategy language.

cos_test:LEMMA integral(0,1,cos) ## [|0.841 , 0.843|] 
%|- cos_test : PROOF
%|- (conts-numerical-Riemann ("Cos") Cos_inclusion cos_cont_fun "[|0,1|]"
%|-  "cos" "9" "2")
%|- QED

cos_test1:LEMMA integral(0,1,cos) ## [|0.8414 , 0.8417|]
%|- cos_test1 : PROOF
%|- (conts-numerical-Riemann ("Cos") Cos_inclusion cos_cont_fun "[|0,1|]"
%|-  "cos" "12" "2")
%|- QED

cos_test5:LEMMA integral(0,1/230,cos) ## [|0.00434781236,0.00434781241|]
%|- cos_test5 : PROOF
%|- (conts-numerical-Riemann ("Cos") Cos_inclusion cos_cont_fun
%|-  "[|0,1/230|]" "cos" "13" "7")
%|- QED

sin_test1:LEMMA integral(0,1.4142135,sin) ## [|0.843 , 0.8449|]% use rational approx- for irrational values: example sqrt(2)~1.4142135. 
%|- sin_test1 : PROOF
%|- (conts-numerical-Riemann ("Sin") Sin_inclusion sin_cont_fun
%|-  "[|0, 1.4142135|]" "sin" "12" "3")
%|- QED

sin_test:LEMMA integral(0,1/30,sin) ## [|0.000555 , 0.000556|]
%|- sin_test : PROOF
%|- (conts-numerical-Riemann ("Sin") Sin_inclusion sin_cont_fun
%|-  "[|0,1/30|]" "sin" "13" "4")
%|- QED

sin_test2:LEMMA integral(0,2,sin) ## [|1.4158 , 1.4165|]
%|- sin_test2 : PROOF
%|- (conts-numerical-Riemann ("Sin") Sin_inclusion sin_cont_fun "[|0,2|]"
%|-  "sin" "12" "2")
%|- QED

sin_test4:LEMMA integral(-1.5,1,sin) ## [|-0.474 , -0.468|]
%|- sin_test4 : PROOF
%|- (conts-numerical-Riemann ("Sin") Sin_inclusion sin_cont_fun
%|-  "[|-1.5, 1|]" "sin" "12" "2")
%|- QED

exp_test3:LEMMA integral(0,3,exp) ## [|19.0 , 19.1|]
%|- exp_test3 : PROOF
%|- (conts-numerical-Riemann ("Exp") Exp_inclusion exp_continuous "[|0,3|]"
%|-  "exp" "12" "3")
%|- QED

END simple_riemann_examples

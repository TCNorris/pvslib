(KinematicPlan
 (plan_lin_ex1_TCC1 0
  (plan_lin_ex1_TCC1-1 nil 3604846138 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mk_v3 const-decl "Vect3" NavPoint3D nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (mk_navpoint const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex1 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex2 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex3 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex4 const-decl "NavPoint" NavPoint3D nil)
    (default const-decl "T" fseqs structures))
   nil
   (plan_lin_ex1 subtype
                 "(LAMBDA (i: naturalnumbers.nat): IF i = 0 THEN NavPoint3D.np_lin_ex1 ELSIF i = 1 THEN NavPoint3D.np_lin_ex2 ELSIF i = 2 THEN NavPoint3D.np_lin_ex3 ELSIF i = 3 THEN NavPoint3D.np_lin_ex4 ELSE fseqs[NavPoint].default ENDIF)"
                 "fseqs[NavPoint].barray(4)")))
 (plan_lin_ex1_TCC2 0
  (plan_lin_ex1_TCC2-1 nil 3604846138 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (linear? const-decl "bool" KinematicPlan nil)
    (default const-decl "T" fseqs structures)
    (np_lin_ex4 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex3 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex2 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex1 const-decl "NavPoint" NavPoint3D nil)
    (mk_navpoint const-decl "NavPoint" NavPoint3D nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (mk_v3 const-decl "Vect3" NavPoint3D nil))
   nil
   (plan_lin_ex1 subtype
                 "(# length := 4, seq := (LAMBDA (i: naturalnumbers.nat): IF i = 0 THEN NavPoint3D.np_lin_ex1 ELSIF i = 1 THEN NavPoint3D.np_lin_ex2 ELSIF i = 2 THEN NavPoint3D.np_lin_ex3 ELSIF i = 3 THEN NavPoint3D.np_lin_ex4 ELSE fseqs[NavPoint].default ENDIF) #)"
                 "(KinematicPlan.linear?)")))
 (getLastTime_TCC1 0
  (getLastTime_TCC1-1 nil 3603711790 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (getLastTime subtype "(number_fields.-)(KinematicPlan.p`length, 1)"
    "nat")))
 (getSegment_TCC1 0
  (getSegment_TCC1-1 nil 3604145964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (getSegment subtype "KinematicPlan.i" "nat")))
 (getSegment_TCC2 0
  (getSegment_TCC2-1 nil 3604145964 ("" (subtype-tcc) nil nil) nil nil
   (getSegment subtype "(number_fields.-)(KinematicPlan.p`length, 1)"
               "nat")))
 (getSegment_TCC3 0
  (getSegment_TCC3-1 nil 3604145964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (getSegment subtype "(number_fields.-)(1)"
               "{i: integers.int | booleans.AND((booleans.IMPLIES(((booleans.NOT)((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))))), i = (number_fields.-)(1))), (booleans.IMPLIES((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))), (booleans.AND(reals.<=(0, i), booleans.AND(reals.<=(i, KinematicPlan.n), booleans.AND(reals.<=(KinematicPlan.p`seq(i)`t, KinematicPlan.t), FORALL (j: naturalnumbers.below(KinematicPlan.p`length)): booleans.IMPLIES((booleans.AND(reals.<(i, j), reals.<=(j, KinematicPlan.n))), reals.<(KinematicPlan.t, KinematicPlan.p`seq(j)`t)))))))))}")))
 (getSegment_TCC4 0
  (getSegment_TCC4-1 nil 3604145964 ("" (subtype-tcc) nil nil) nil nil
   (getSegment subtype "(number_fields.-)(1)"
               "{i: integers.int | booleans.AND((booleans.IMPLIES(((booleans.NOT)((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))))), i = (number_fields.-)(1))), (booleans.IMPLIES((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))), (booleans.AND(reals.<=(0, i), booleans.AND(reals.<=(i, KinematicPlan.n), booleans.AND(reals.<=(KinematicPlan.p`seq(i)`t, KinematicPlan.t), FORALL (j: naturalnumbers.below(KinematicPlan.p`length)): booleans.IMPLIES((booleans.AND(reals.<(i, j), reals.<=(j, KinematicPlan.n))), reals.<(KinematicPlan.t, KinematicPlan.p`seq(j)`t)))))))))}")))
 (getSegment_TCC5 0
  (getSegment_TCC5-1 nil 3604145964 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (getSegment subtype "KinematicPlan.n"
               "{i: integers.int | booleans.AND((booleans.IMPLIES(((booleans.NOT)((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))))), i = (number_fields.-)(1))), (booleans.IMPLIES((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))), (booleans.AND(reals.<=(0, i), booleans.AND(reals.<=(i, KinematicPlan.n), booleans.AND(reals.<=(KinematicPlan.p`seq(i)`t, KinematicPlan.t), FORALL (j: naturalnumbers.below(KinematicPlan.p`length)): booleans.IMPLIES((booleans.AND(reals.<(i, j), reals.<=(j, KinematicPlan.n))), reals.<(KinematicPlan.t, KinematicPlan.p`seq(j)`t)))))))))}")))
 (getSegment_TCC6 0
  (getSegment_TCC6-1 nil 3604145964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (getSegment subtype "(number_fields.-)(KinematicPlan.n, 1)"
               "naturalnumbers.below(KinematicPlan.p`length)")))
 (getSegment_TCC7 0
  (getSegment_TCC7-1 nil 3604145964 ("" (termination-tcc) nil nil) nil
   nil
   (getSegment termination
               "KinematicPlan.getSegment(KinematicPlan.p, KinematicPlan.t, (number_fields.-)(KinematicPlan.n, 1))"
               "nil")))
 (getSegment_TCC8 0
  (getSegment_TCC8-1 nil 3604145964
   ("" (skeep)
    (("" (split 3)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (typepred "v(p, t, n - 1)")
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (getSegment subtype
               "KinematicPlan.getSegment(KinematicPlan.p, KinematicPlan.t, (number_fields.-)(KinematicPlan.n, 1))"
               "{i: integers.int | booleans.AND((booleans.IMPLIES(((booleans.NOT)((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))))), i = (number_fields.-)(1))), (booleans.IMPLIES((booleans.AND(reals.>=((number_fields.-)(KinematicPlan.p`length, 1), 0), booleans.AND(reals.<=(KinematicPlan.p`seq(0)`t, KinematicPlan.t), reals.<=(KinematicPlan.t, KinematicPlan.p`seq((number_fields.-)(KinematicPlan.p`length, 1))`t)))), (booleans.AND(reals.<=(0, i), booleans.AND(reals.<=(i, KinematicPlan.n), booleans.AND(reals.<=(KinematicPlan.p`seq(i)`t, KinematicPlan.t), FORALL (j: naturalnumbers.below(KinematicPlan.p`length)): booleans.IMPLIES((booleans.AND(reals.<(i, j), reals.<=(j, KinematicPlan.n))), reals.<(KinematicPlan.t, KinematicPlan.p`seq(j)`t)))))))))}")))
 (getSegment_test_TCC1 0
  (getSegment_test_TCC1-1 nil 3604846302 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plan_lin_ex1 const-decl "(linear?)" KinematicPlan nil)
    (default const-decl "T" fseqs structures)
    (np_lin_ex4 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex3 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex2 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex1 const-decl "NavPoint" NavPoint3D nil)
    (mk_navpoint const-decl "NavPoint" NavPoint3D nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (mk_v3 const-decl "Vect3" NavPoint3D nil))
   nil
   (getSegment_test subtype
    "(number_fields.-)(KinematicPlan.plan_lin_ex1`length, 1)"
    "naturalnumbers.below(KinematicPlan.plan_lin_ex1`length)")))
 (getSegment_test 0
  (getSegment_test-1 nil 3604846303 ("" (eval-formula) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (getSegment_TCC9 0
  (getSegment_TCC9-2 "" 3790107369
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (getSegment subtype "(number_fields.-)(KinematicPlan.p`length, 1)"
               "naturalnumbers.below(KinematicPlan.p`length)"))
  (getSegment_TCC9-1 nil 3604146067
   ("" (skeep)
    (("" (assert)
      (("" (typepred "v(p, t, n - 1)")
        (("" (assert)
          (("" (hide -1)
            (("" (flatten)
              (("" (assert)
                (("" (label "iggy" 3)
                  (("" (skeep)
                    (("" (copy -4)
                      (("" (inst - "j") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (getSegment subtype "(number_fields.-)(KinematicPlan.p`length, 1)"
               "naturalnumbers.below(KinematicPlan.p`length)")))
 (getSegment_def_found_TCC1 0
  (getSegment_def_found_TCC1-1 nil 3604145964
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (getSegment_def_found subtype
    "(number_fields.+)(KinematicPlan.i, 1)" "nat")))
 (getSegment_def_found 0
  (getSegment_def_found-2 "" 3790107371
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (expand "getSegment")
          (("" (case "p`length=0")
            (("1" (assert) (("1" (ground) nil nil)) nil)
             ("2" (assert)
              (("2" (hide 1)
                (("2" (invoke (case "NOT %1") (! 1 1))
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (inst + "i")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (typepred
                                 "getSegment(p, t, p`length - 1)")
                                (("1"
                                  (replace -4 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "i = n")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (inst - "i+1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (typepred
                               " getSegment(p, t, p`length - 1)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (typepred " getSegment(p, t, p`length - 1)")
                          (("2" (assert)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (typepred "p")
                                (("2"
                                  (skeep -3)
                                  (("2"
                                    (inst-cp - "j" "p`length-1")
                                    (("2"
                                      (inst-cp - "0" "j")
                                      (("2"
                                        (split +)
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (split -5)
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "j+1"
                                                 "p`length-1")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (invoke (name "AA" "%1") (! -1))
                    (("2" (replace -1)
                      (("2" (replace -2)
                        (("2" (hide -2)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (replace -3)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "i = j")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (typepred
                                           "getSegment(p, t, p`length - 1)")
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case "i < j")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "p")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j+1"
                                                               "i")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "int" KinematicPlan nil)
    (p skolem-const-decl "Plan" KinematicPlan nil)
    (getSegment def-decl "{i: int |
   LET lastn = p`length - 1,
       isvalidt =
         (lastn >= 0 AND p`seq(0)`t <= t AND t <= p`seq(p`length - 1)`t)
     IN
     ((NOT isvalidt) IMPLIES i = -1) AND
      (isvalidt IMPLIES
        (0 <= i AND
          i <= n AND
           p`seq(i)`t <= t AND
            FORALL (j: below(p`length)):
              (i < j AND j <= n) IMPLIES t < p`seq(j)`t))}"
                KinematicPlan nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak)
  (getSegment_def_found-1 nil 3604147377
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (expand "getSegment")
          (("" (case "p`length=0")
            (("1" (assert) (("1" (ground) nil nil)) nil)
             ("2" (assert)
              (("2" (hide 1)
                (("2" (invoke (case "NOT %1") (! 1 1))
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (inst + "i")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (typepred
                                 "getSegment(p, t, p`length - 1)")
                                (("1"
                                  (replace -4 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "i = n")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (inst - "i+1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (typepred
                               " getSegment(p, t, p`length - 1)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (typepred " getSegment(p, t, p`length - 1)")
                          (("2" (assert)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (typepred "p")
                                (("2"
                                  (skeep -3)
                                  (("2"
                                    (inst-cp - "j" "p`length-1")
                                    (("2"
                                      (inst-cp - "0" "j")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split +)
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (split -5)
                                            (("1" (ground) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "j+1"
                                                   "p`length-1")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (invoke (name "AA" "%1") (! -1))
                    (("2" (replace -1)
                      (("2" (replace -2)
                        (("2" (hide -2)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (replace -3)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "i = j")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (typepred
                                           "getSegment(p, t, p`length - 1)")
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case "i < j")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "p")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j+1"
                                                               "i")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil
    (getSegment def-decl "{i: int |
   LET lastn = p`length - 1,
       isvalidt =
         (lastn >= 0 AND p`seq(0)`t <= t AND t <= p`seq(p`length - 1)`t)
     IN
     ((NOT isvalidt) IMPLIES i = -1) AND
      (isvalidt IMPLIES
        (0 <= i AND
          i <= n AND
           p`seq(i)`t <= t AND
            FORALL (j: below(p`length)):
              (i < j AND j <= n) IMPLIES t < p`seq(j)`t))}"
                KinematicPlan nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (getSegment_at_tcp 0
  (getSegment_at_tcp-1 nil 3605879340
   ("" (skeep)
    (("" (lemma "getSegment_def_found")
      (("" (inst - "p" "p`seq(i)`t")
        (("" (assert)
          (("" (invoke (case "NOT %1") (! -1 1 2))
            (("1" (hide -1)
              (("1" (inst + "i")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (case "NOT i < p`length-1")
                      (("1" (assert) nil nil)
                       ("2" (hide 1)
                        (("2" (assert)
                          (("2" (typepred "p")
                            (("2" (inst - "i" "i+1")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (ground)
                    (("1" (typepred "p")
                      (("1" (inst - "i" "p`length-1")
                        (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (typepred "p")
                      (("2" (inst-cp - "i" "getSegment(p,p`seq(i)`t)")
                        (("2" (ground)
                          (("2"
                            (inst-cp - "getSegment(p,p`seq(i)`t)+1"
                             "i")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((getSegment_def_found formula-decl nil KinematicPlan nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (prevTCPType_TCC1 0
  (prevTCPType_TCC1-1 nil 3604850071 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil (prevTCPType subtype "KinematicPlan.k" "nat")))
 (prevTCPType_TCC2 0
  (prevTCPType_TCC2-1 nil 3604850071 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (prevTCPType subtype "KinematicPlan.i" "nat")))
 (prevTCPType_TCC3 0
  (prevTCPType_TCC3-1 nil 3604850071 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil (prevTCPType subtype "KinematicPlan.k" "nat")))
 (nextTCPType_TCC1 0
  (nextTCPType_TCC1-1 nil 3604850071 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil (nextTCPType subtype "KinematicPlan.k" "nat")))
 (nextTCPType_TCC2 0
  (nextTCPType_TCC2-1 nil 3604850071 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (nextTCPType subtype "KinematicPlan.i" "nat")))
 (nextTCPType_TCC3 0
  (nextTCPType_TCC3-1 nil 3604850071 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil (nextTCPType subtype "KinematicPlan.k" "nat")))
 (prevTCP_TCC1 0
  (prevTCP_TCC1-1 nil 3603634288 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (prevTCP subtype "real_defs.max(KinematicPlan.current, 0)"
    "naturalnumber")))
 (prevTCP_TCC2 0
  (prevTCP_TCC2-1 nil 3603634288 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil
   (prevTCP subtype "(number_fields.-)(1)"
    "KinematicPlan.prevTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (prevTCP_TCC3 0
  (prevTCP_TCC3-1 nil 3603634288 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (prevTCP subtype "KinematicPlan.current" "nat")))
 (prevTCP_TCC4 0
  (prevTCP_TCC4-1 nil 3603634288 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil
   (prevTCP subtype "KinematicPlan.current"
    "KinematicPlan.prevTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (prevTCP_TCC5 0
  (prevTCP_TCC5-1 nil 3603634288 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil
   (prevTCP subtype "(number_fields.-)(1)"
    "KinematicPlan.prevTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (prevTCP_TCC6 0
  (prevTCP_TCC6-3 nil 3603634454 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil
   (prevTCP termination
    "KinematicPlan.prevTCP(KinematicPlan.p, (number_fields.-)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
    "nil"))
  (prevTCP_TCC6-2 nil 3603634392
   ("" (skosimp*)
    (("" (prop)
      (("1" (skosimp*)
        (("1"
          (typepred "max
               [below[p!1`length],
                restrict
                    [[real, real], [below[p!1`length], below[p!1`length]],
                     boolean]
                    (<=)]
               (tcpTypeSet(p!1, j!1, BOT))")
          (("1" (assert) nil)))))
       ("2"
        (typepred "max
               [below[p!1`length],
                restrict
                    [[real, real], [below[p!1`length], below[p!1`length]],
                     boolean]
                    (<=)]
               (tcpTypeSet(p!1, j!1, BOT))")
        (("2" (assert) nil)))
       ("3"
        (typepred "max
               [below[p!1`length],
                restrict
                    [[real, real], [below[p!1`length], below[p!1`length]],
                     boolean]
                    (<=)]
               (tcpTypeSet(p!1, j!1, BOT))")
        (("3" (propax) nil)))
       ("4"
        (typepred "max
               [below[p!1`length],
                restrict
                    [[real, real], [below[p!1`length], below[p!1`length]],
                     boolean]
                    (<=)]
               (tcpTypeSet(p!1, j!1, BOT))")
        (("4" (expand "tcpTypeSet") (("4" (propax) nil)))))
       ("5" (skosimp*)
        (("5"
          (typepred "max
               [below[p!1`length],
                restrict
                    [[real, real], [below[p!1`length], below[p!1`length]],
                     boolean]
                    (<=)]
               (tcpTypeSet(p!1, j!1, BOT))")
          (("5"
            (name MAX "max
                    [below[p!1`length],
                     restrict
                         [[real, real], [below[p!1`length], below[p!1`length]],
                          boolean]
                         (<=)]
                    (tcpTypeSet(p!1, j!1, BOT))")
            (("5" (assert)
              (("5" (replace -1)
                (("5" (inst -4 "k!1")
                  (("5" (expand "tcpTypeSet")
                    (("5" (assert)
                      (("5" (expand "restrict")
                        (("5" (assert) nil))))))))))))))))))))))
    nil)
   nil nil
   (prevTCP termination
    "KinematicPlan.prevTCP(KinematicPlan.p, (number_fields.-)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
    "nil"))
  (prevTCP_TCC6-1 nil 3603634288 ("" (subtype-tcc) nil nil) nil nil
   (prevTCP termination
    "KinematicPlan.prevTCP(KinematicPlan.p, (number_fields.-)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
    "nil")))
 (prevTCP_TCC7 0
  (prevTCP_TCC7-1 nil 3604849139
   ("" (skeep)
    (("" (typepred "v(p, current - 1, ty1,ty2)")
      (("1" (split +)
        (("1" (flatten)
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst - "k") (("1" (ground) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (hide -1)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst - "k") (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 6) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (prevTCP subtype
    "KinematicPlan.prevTCP(KinematicPlan.p, (number_fields.-)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
    "KinematicPlan.prevTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (nextTCP_TCC1 0
  (nextTCP_TCC1-1 nil 3604849562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (nextTCP subtype
            "real_defs.max((number_fields.-)((number_fields.-)(KinematicPlan.p`length, 1), KinematicPlan.current), 0)"
            "naturalnumber")))
 (nextTCP_TCC2 0
  (nextTCP_TCC2-1 nil 3604849562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil
   (nextTCP subtype "(number_fields.-)(1)"
            "KinematicPlan.nextTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (nextTCP_TCC3 0
  (nextTCP_TCC3-1 nil 3604849562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil
   (nextTCP subtype "KinematicPlan.current"
            "KinematicPlan.nextTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (nextTCP_TCC4 0
  (nextTCP_TCC4-1 nil 3604849562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil))
   nil
   (nextTCP subtype "(number_fields.-)(1)"
            "KinematicPlan.nextTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (nextTCP_TCC5 0
  (nextTCP_TCC5-1 nil 3604849562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (nextTCP termination
            "KinematicPlan.nextTCP(KinematicPlan.p, (number_fields.+)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
            "nil")))
 (nextTCP_TCC6 0
  (nextTCP_TCC6-2 nil 3604850345
   ("" (skeep)
    (("" (typepred "v(p, current + 1, ty1,ty2)")
      (("1" (split +)
        (("1" (flatten)
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst - "k") (("1" (ground) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (hide -1)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst - "k") (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 6) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nextTCPType type-eq-decl nil KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (nextTCP subtype
            "KinematicPlan.nextTCP(KinematicPlan.p, (number_fields.+)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
            "KinematicPlan.nextTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)"))
  (nextTCP_TCC6-1 nil 3604849562 ("" (subtype-tcc) nil nil)
   ((Vect3 type-eq-decl nil vectors_3D_def vectors)
    (barray type-eq-decl nil fseqs structures))
   nil
   (nextTCP subtype
            "KinematicPlan.nextTCP(KinematicPlan.p, (number_fields.+)(KinematicPlan.current, 1), KinematicPlan.ty1, KinematicPlan.ty2)"
            "KinematicPlan.nextTCPType(KinematicPlan.p, KinematicPlan.current, KinematicPlan.ty1, KinematicPlan.ty2)")))
 (prevTCP_test 0
  (prevTCP_test-2 "" 3790107374 ("" (grind) nil nil)
   ((mk_v3 const-decl "Vect3" NavPoint3D nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (mk_navpoint const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex1 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex2 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex3 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex4 const-decl "NavPoint" NavPoint3D nil)
    (default const-decl "T" fseqs structures)
    (plan_lin_ex1 const-decl "(linear?)" KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (prevTCP_test-1 nil 3604847807
   ("" (grind)
    (("1" (inst - "0") nil nil)
     ("2" (invoke (name "A" "%1") (! 1 1 1 1))
      (("2" (replace -1)
        (("2" (case "tcpTypeSet(A,2,NONE)(3)")
          (("1" (hide -2)
            (("1"
              (typepred "max
          [below[4],
           restrict[[real, real], [below[4], below[4]], boolean](<=)]
          (tcpTypeSet(A, 2, NONE))")
              (("1" (inst - "3") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "tcpTypeSet" 1)
              (("2" (expand "A" 1) (("2" (propax) nil nil)) nil)) nil))
            nil)
           ("3" (hide-all-but 1)
            (("3" (expand "A") (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mk_v3 const-decl "Vect3" NavPoint3D nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (mk_navpoint const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex1 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex2 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex3 const-decl "NavPoint" NavPoint3D nil)
    (np_lin_ex4 const-decl "NavPoint" NavPoint3D nil)
    (default const-decl "T" fseqs structures)
    (plan_lin_ex1 const-decl "(linear?)" KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (nextTCP_test 0
  (nextTCP_test-1 nil 3604849797 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (inTurn_TCC1 0
  (inTurn_TCC1-1 nil 3605346854 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (EOT adt-constructor-decl "(EOT?)" NavPoint3D nil)
    (EOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BOT adt-constructor-decl "(BOT?)" NavPoint3D nil)
    (BOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil (inTurn subtype "KinematicPlan.lastj" "nat")))
 (turnRadius_TCC1 0
  (turnRadius_TCC1-1 nil 3605353166
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "prevBOTt(p,t)")
          (("" (replace -4 :dir rl)
            (("" (assert)
              (("" (expand "inTurn")
                (("" (ground)
                  ((""
                    (name "jj"
                          "prevTCP(p, getSegment(p, t), BOT, EOT)")
                    (("" (replace -1)
                      (("" (typepred "jj")
                        (("" (assert)
                          (("" (hide -1)
                            (("" (flatten)
                              ((""
                                (expand "isTurnEnd")
                                ((""
                                  (expand "eqOneTCPType?")
                                  ((""
                                    (assert)
                                    ((""
                                      (inst -6 "jj")
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prevBOTt const-decl "prevTCPType(p, getSegment(p, tt), BOT, BOT)"
     KinematicPlan nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (BOT adt-constructor-decl "(BOT?)" NavPoint3D nil)
    (BOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isTurnEnd const-decl "bool" NavPoint3D nil)
    (EOT adt-constructor-decl "(EOT?)" NavPoint3D nil)
    (EOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (inTurn const-decl "bool" KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (turnRadius subtype "KinematicPlan.bot" "nat")))
 (inGroundSpeedChange_TCC1 0
  (inGroundSpeedChange_TCC1-1 nil 3607079247 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (EGSC adt-constructor-decl "(EGSC?)" NavPoint3D nil)
    (EGSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BGSC adt-constructor-decl "(BGSC?)" NavPoint3D nil)
    (BGSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil (inGroundSpeedChange subtype "KinematicPlan.lastj" "nat")))
 (inVerticalSpeedChange_TCC1 0
  (inVerticalSpeedChange_TCC1-1 nil 3607079247
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (EVSC adt-constructor-decl "(EVSC?)" NavPoint3D nil)
    (EVSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BVSC adt-constructor-decl "(BVSC?)" NavPoint3D nil)
    (BVSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil (inVerticalSpeedChange subtype "KinematicPlan.lastj" "nat")))
 (inTurnPrevBOT 0
  (inTurnPrevBOT-1 nil 3604835839
   ("" (skeep)
    (("" (expand "prevBOT")
      (("" (expand "inTurn")
        (("" (lemma "getSegment_at_tcp")
          (("" (inst?)
            (("" (replace -1)
              (("" (assert)
                (("" (ground)
                  (("" (name "jj" "prevTCP(p, i, BOT, EOT)")
                    (("" (replace -1)
                      (("" (typepred "jj")
                        (("" (assert)
                          (("" (hide -1)
                            (("" (flatten)
                              ((""
                                (expand "eqOneTCPType?" -2)
                                ((""
                                  (assert)
                                  ((""
                                    (typepred
                                     "prevTCP(p, i, BOT, BOT)")
                                    ((""
                                      (assert)
                                      ((""
                                        (assert)
                                        ((""
                                          (inst - "jj")
                                          ((""
                                            (assert)
                                            ((""
                                              (expand
                                               "eqOneTCPType?"
                                               1)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand
                                                     "isTurnEnd")
                                                    ((""
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prevBOT const-decl "prevTCPType(p, current, BOT, BOT)"
     KinematicPlan nil)
    (getSegment_at_tcp formula-decl nil KinematicPlan nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isTurnEnd const-decl "bool" NavPoint3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (BOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BOT adt-constructor-decl "(BOT?)" NavPoint3D nil)
    (EOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (EOT adt-constructor-decl "(EOT?)" NavPoint3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (inTurn const-decl "bool" KinematicPlan nil))
   shostak))
 (gsAccel_TCC1 0
  (gsAccel_TCC1-2 nil 3607084259
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "prevGSCBegint(p,t)")
          (("" (replace -4 :dir rl)
            (("" (assert)
              (("" (expand "inGroundSpeedChange")
                (("" (ground)
                  ((""
                    (name "jj"
                          "prevTCP(p, getSegment(p, t), BGSC, EGSC)")
                    (("" (replace -1)
                      (("" (typepred "jj")
                        (("" (assert)
                          (("" (hide -1)
                            (("" (flatten)
                              ((""
                                (expand "isGSCEnd")
                                ((""
                                  (expand "eqOneTCPType?")
                                  ((""
                                    (assert)
                                    ((""
                                      (inst -6 "jj")
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prevGSCBegint const-decl
     "prevTCPType(p, getSegment(p, t), BGSC, BGSC)" KinematicPlan nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (BGSC adt-constructor-decl "(BGSC?)" NavPoint3D nil)
    (BGSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isGSCEnd const-decl "bool" NavPoint3D nil)
    (EGSC adt-constructor-decl "(EGSC?)" NavPoint3D nil)
    (EGSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (inGroundSpeedChange const-decl "bool" KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (gsAccel subtype "KinematicPlan.b" "nat"))
  (gsAccel_TCC1-1 nil 3607079247 ("" (subtype-tcc) nil nil) nil nil
   (gsAccel subtype "KinematicPlan.b" "nat")))
 (vsAccel_TCC1 0
  (vsAccel_TCC1-2 nil 3607084737
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "prevVSCBegint(p,t)")
          (("" (replace -4 :dir rl)
            (("" (assert)
              (("" (expand "inVerticalSpeedChange")
                (("" (ground)
                  ((""
                    (name "jj"
                          "prevTCP(p, getSegment(p, t), BVSC, EVSC)")
                    (("" (replace -1)
                      (("" (typepred "jj")
                        (("" (assert)
                          (("" (hide -1)
                            (("" (flatten)
                              ((""
                                (expand "isVSCEnd")
                                ((""
                                  (expand "eqOneTCPType?")
                                  ((""
                                    (assert)
                                    ((""
                                      (inst -6 "jj")
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prevVSCBegint const-decl
     "prevTCPType(p, getSegment(p, t), BVSC, BVSC)" KinematicPlan nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (BVSC adt-constructor-decl "(BVSC?)" NavPoint3D nil)
    (BVSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isVSCEnd const-decl "bool" NavPoint3D nil)
    (EVSC adt-constructor-decl "(EVSC?)" NavPoint3D nil)
    (EVSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (inVerticalSpeedChange const-decl "bool" KinematicPlan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (vsAccel subtype "KinematicPlan.b" "nat"))
  (vsAccel_TCC1-1 nil 3607079247 ("" (subtype-tcc) nil nil) nil nil
   (vsAccel subtype "KinematicPlan.b" "nat")))
 (pathDistance_TCC1 0
  (pathDistance_TCC1-1 nil 3603633205
   ("" (skosimp*)
    (("" (lemma "inTurnPrevBOT")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((inTurnPrevBOT formula-decl nil KinematicPlan nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil (pathDistance subtype "KinematicPlan.BOT" "nat")))
 (pathDistance_TCC2 0
  (pathDistance_TCC2-1 nil 3603633205
   ("" (skosimp*)
    (("" (lemma "inTurnPrevBOT")
      (("" (inst?)
        (("" (assert)
          (("" (replace -3)
            (("" (hide -3)
              (("" (assert)
                (("" (typepred "prevBOT(p!1, i!1)")
                  (("" (assert)
                    (("" (hide -1)
                      (("" (flatten)
                        (("" (expand "eqOneTCPType?")
                          (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inTurnPrevBOT formula-decl nil KinematicPlan nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prevBOT const-decl "prevTCPType(p, current, BOT, BOT)"
     KinematicPlan nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (BOT adt-constructor-decl "(BOT?)" NavPoint3D nil)
    (BOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (pathDistance subtype "KinematicPlan.p`seq(KinematicPlan.BOT)"
    "TCP_NavPoint")))
 (ValidTime?_TCC1 0
  (ValidTime?_TCC1-1 nil 3607085471 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (ValidTime? subtype "(number_fields.-)(KinematicPlan.p`length, 1)"
    "nat")))
 (accelZone_TCC1 0
  (accelZone_TCC1-1 nil 3607079247
   ("" (skeep)
    (("" (expand "getSegment")
      (("" (lift-if)
        (("" (typepred "t1")
          (("" (assert)
            (("" (ground)
              (("1" (expand "ValidTime?") (("1" (propax) nil nil)) nil)
               ("2" (expand "ValidTime?")
                (("2" (flatten)
                  (("2" (typepred "getSegment(p, t1, p`length - 1)")
                    (("2" (replace -3 :dir rl) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((getSegment const-decl "int" KinematicPlan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ValidTime? const-decl "bool" KinematicPlan nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (getSegment def-decl "{i: int |
   LET lastn = p`length - 1,
       isvalidt =
         (lastn >= 0 AND p`seq(0)`t <= t AND t <= p`seq(p`length - 1)`t)
     IN
     ((NOT isvalidt) IMPLIES i = -1) AND
      (isvalidt IMPLIES
        (0 <= i AND
          i <= n AND
           p`seq(i)`t <= t AND
            FORALL (j: below(p`length)):
              (i < j AND j <= n) IMPLIES t < p`seq(j)`t))}"
                KinematicPlan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (accelZone subtype "KinematicPlan.seg" "nat")))
 (accelZone_TCC2 0
  (accelZone_TCC2-1 nil 3607079247
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (expand "getSegment")
          (("" (ground)
            (("" (lift-if)
              (("" (ground)
                (("" (typepred "getSegment(p, t1, p`length - 1)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((getSegment const-decl "int" KinematicPlan nil)
    (getSegment def-decl "{i: int |
   LET lastn = p`length - 1,
       isvalidt =
         (lastn >= 0 AND p`seq(0)`t <= t AND t <= p`seq(p`length - 1)`t)
     IN
     ((NOT isvalidt) IMPLIES i = -1) AND
      (isvalidt IMPLIES
        (0 <= i AND
          i <= n AND
           p`seq(i)`t <= t AND
            FORALL (j: below(p`length)):
              (i < j AND j <= n) IMPLIES t < p`seq(j)`t))}"
                KinematicPlan nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ValidTime? const-decl "bool" KinematicPlan nil)
    (<= const-decl "bool" reals nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (barray type-eq-decl nil fseqs structures)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (TCPType type-decl nil NavPoint3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (accelZone subtype "(number_fields.+)(KinematicPlan.seg, 1)"
    "nat")))
 (accelZone_TCC3 0
  (accelZone_TCC3-1 nil 3607079247
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (skeep)
                  (("" (skeep)
                    (("" (skeep)
                      (("" (skeep)
                        (("" (skeep)
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (skeep)
                                ((""
                                  (skeep)
                                  ((""
                                    (typepred "prevBOTt(p, t1)")
                                    ((""
                                      (assert)
                                      ((""
                                        (replace -2)
                                        ((""
                                          (expand "inTurn")
                                          ((""
                                            (assert)
                                            ((""
                                              (expand "prevBOTt")
                                              ((""
                                                (expand "prevBOT")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (case
                                                     "prevTCP(p, getSegment(p, t1), BOT, EOT) < 0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "isTurnEnd(p`seq(prevTCP(p, getSegment(p, t1), BOT, EOT)))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -18)
                                                          (("2"
                                                            (expand
                                                             "isTurnEnd")
                                                            (("2"
                                                              (name
                                                               "k2"
                                                               "prevTCP(p, getSegment(p, t1), BOT, EOT)")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "k2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -3)
                                                                              (("2"
                                                                                (expand
                                                                                 "eqOneTCPType?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "k2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (inTurn const-decl "bool" KinematicPlan nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isTurnEnd const-decl "bool" NavPoint3D nil)
    (EOT adt-constructor-decl "(EOT?)" NavPoint3D nil)
    (EOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (prevBOT const-decl "prevTCPType(p, current, BOT, BOT)"
     KinematicPlan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (BOT? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BOT adt-constructor-decl "(BOT?)" NavPoint3D nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (prevBOTt const-decl "prevTCPType(p, getSegment(p, tt), BOT, BOT)"
     KinematicPlan nil)
    (ValidTime? const-decl "bool" KinematicPlan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (accelZone subtype
    "KinematicPlan.prevBOTt(KinematicPlan.p, KinematicPlan.t1)"
    "nat")))
 (accelZone_TCC4 0
  (accelZone_TCC4-2 nil 3610443833
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (skeep)
                  (("" (skeep)
                    (("" (skeep)
                      (("" (skeep)
                        (("" (skeep)
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (skeep)
                                ((""
                                  (skeep)
                                  ((""
                                    (skeep)
                                    ((""
                                      (skeep)
                                      ((""
                                        (skeep)
                                        ((""
                                          (skeep)
                                          ((""
                                            (skeep)
                                            ((""
                                              (skeep)
                                              ((""
                                                (typepred
                                                 "prevGSCBegint(p, t1)")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (replace -2)
                                                    ((""
                                                      (expand
                                                       "inGroundSpeedChange")
                                                      ((""
                                                        (assert)
                                                        ((""
                                                          (expand
                                                           "prevGSCBegint")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (case
                                                               "prevTCP(p, getSegment(p, t1), BGSC, EGSC) < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "isGSCEnd(p`seq(prevTCP(p, getSegment(p, t1), BGSC, EGSC)))")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -24)
                                                                  (("2"
                                                                    (expand
                                                                     "isGSCEnd")
                                                                    (("2"
                                                                      (name
                                                                       "k2"
                                                                       "prevTCP(p, getSegment(p, t1), BGSC, EGSC)")
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "k2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "eqOneTCPType?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "k2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (inGroundSpeedChange const-decl "bool" KinematicPlan nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (EGSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (EGSC adt-constructor-decl "(EGSC?)" NavPoint3D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isGSCEnd const-decl "bool" NavPoint3D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (BGSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BGSC adt-constructor-decl "(BGSC?)" NavPoint3D nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (prevGSCBegint const-decl
     "prevTCPType(p, getSegment(p, t), BGSC, BGSC)" KinematicPlan nil)
    (ValidTime? const-decl "bool" KinematicPlan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (accelZone subtype
    "KinematicPlan.prevGSCBegint(KinematicPlan.p, KinematicPlan.t1)"
    "nat"))
  (accelZone_TCC4-1 nil 3607079247
   ("" (skeep*) (("" (postpone) nil nil)) nil) nil nil
   (accelZone subtype
    "KinematicPlan.prevGSCBegint(KinematicPlan.p, KinematicPlan.t1)"
    "nat")))
 (accelZone_TCC5 0
  (accelZone_TCC5-3 nil 3610463855
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (skeep)
                  (("" (skeep)
                    (("" (skeep)
                      (("" (skeep)
                        (("" (skeep)
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (skeep)
                                ((""
                                  (skeep)
                                  ((""
                                    (skeep)
                                    ((""
                                      (skeep)
                                      ((""
                                        (skeep)
                                        ((""
                                          (skeep)
                                          ((""
                                            (skeep)
                                            ((""
                                              (skeep)
                                              ((""
                                                (skeep)
                                                ((""
                                                  (skeep)
                                                  ((""
                                                    (skeep)
                                                    ((""
                                                      (skeep)
                                                      ((""
                                                        (skeep)
                                                        ((""
                                                          (skeep)
                                                          ((""
                                                            (typepred
                                                             "prevVSCBegint(p, t1)")
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (replace
                                                                 -2)
                                                                ((""
                                                                  (expand
                                                                   "inVerticalSpeedChange")
                                                                  ((""
                                                                    (expand
                                                                     "prevVSCBegint")
                                                                    ((""
                                                                      (assert)
                                                                      ((""
                                                                        (case
                                                                         "prevTCP(p, getSegment(p, t1), BVSC, EVSC) < 0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "isVSCEnd(p`seq(prevTCP(p, getSegment(p, t1), BVSC, EVSC)))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -30)
                                                                            (("2"
                                                                              (expand
                                                                               "isVSCEnd")
                                                                              (("2"
                                                                                (name
                                                                                 "k2"
                                                                                 "prevTCP(p, getSegment(p, t1), BVSC, EVSC)")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "k2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "eqOneTCPType?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "k2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (inVerticalSpeedChange const-decl "bool" KinematicPlan nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (isVSCEnd const-decl "bool" NavPoint3D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (EVSC adt-constructor-decl "(EVSC?)" NavPoint3D nil)
    (EVSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (prevTCP def-decl "prevTCPType(p, current, ty1, ty2)" KinematicPlan
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (TCPType type-decl nil NavPoint3D nil)
    (NavPoint type-eq-decl nil NavPoint3D nil)
    (barray type-eq-decl nil fseqs structures)
    (prePlan type-eq-decl nil KinematicPlan nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Plan type-eq-decl nil KinematicPlan nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (getSegment const-decl "int" KinematicPlan nil)
    (eqOneTCPType? const-decl "bool" KinematicPlan nil)
    (BVSC? adt-recognizer-decl "[TCPType -> boolean]" NavPoint3D nil)
    (BVSC adt-constructor-decl "(BVSC?)" NavPoint3D nil)
    (prevTCPType type-eq-decl nil KinematicPlan nil)
    (prevVSCBegint const-decl
     "prevTCPType(p, getSegment(p, t), BVSC, BVSC)" KinematicPlan nil)
    (ValidTime? const-decl "bool" KinematicPlan nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (accelZone subtype
    "KinematicPlan.prevVSCBegint(KinematicPlan.p, KinematicPlan.t1)"
    "nat"))
  (accelZone_TCC5-2 nil 3610443844
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (skeep)
                  (("" (skeep)
                    (("" (skeep)
                      (("" (skeep)
                        (("" (skeep)
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (skeep)
                                ((""
                                  (skeep)
                                  ((""
                                    (typepred "prevBOTt(p, t1)")
                                    ((""
                                      (assert)
                                      ((""
                                        (replace -2)
                                        ((""
                                          (expand "inTurn")
                                          ((""
                                            (assert)
                                            ((""
                                              (expand "prevBOTt")
                                              ((""
                                                (expand "prevBOT")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (case
                                                     "prevTCP(p, getSegment(p, t1), BOT, EOT) < 0")
                                                    (("1" (assert) nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "isTurnEnd(p`seq(prevTCP(p, getSegment(p, t1), BOT, EOT)))")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (hide -18)
                                                          (("2"
                                                            (expand
                                                             "isTurnEnd")
                                                            (("2"
                                                              (name
                                                               "k2"
                                                               "prevTCP(p, getSegment(p, t1), BOT, EOT)")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "k2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -3)
                                                                              (("2"
                                                                                (expand
                                                                                 "eqOneTCPType?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "k2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil
   (accelZone subtype
    "KinematicPlan.prevVSCBegint(KinematicPlan.p, KinematicPlan.t1)"
    "nat"))
  (accelZone_TCC5-1 nil 3607079247
   ("" (assert) (("" (postpone) nil nil)) nil) nil nil
   (accelZone subtype
    "KinematicPlan.prevVSCBegint(KinematicPlan.p, KinematicPlan.t1)"
    "nat"))))


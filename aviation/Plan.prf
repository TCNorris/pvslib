(Plan
 (point_TCC1 0
  (point_TCC1-1 nil 3673796656 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (point subtype "Plan.i" "below[length[PlanPoint](p)]")))
 (ordered_lem 0
  (ordered_lem-2 "" 3790107385
   ("" (skosimp*)
    ((""
      (case "(FORALL (n:nat): n > 0 AND n < size(p!1) - i!1 IMPLIES time(p!1,i!1) < time(p!1,i!1+n) )")
      (("1" (inst - "j!1-i!1") (("1" (assert) nil nil) ("2" (assert) nil nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n" + "NAT_induction")
          (("2" (skosimp*)
            (("2" (inst - "j!2-1")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (expand "ordered?")
                    (("1" (assert)
                      (("1" (inst - "i!1 - 1 + j!2") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "j!2 = 1")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (expand "ordered?")
                            (("1" (assert)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ordered_lem-1 nil 3673796947
   ("" (skosimp*)
    ((""
      (case "(FORALL (n:nat): n > 0 AND n < size(p!1) - i!1 IMPLIES time(p!1,i!1) < time(p!1,i!1+n) )")
      (("1" (inst - "j!1-i!1") (("1" (assert) nil nil) ("2" (assert) nil nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n" + "NAT_induction")
          (("2" (skosimp*)
            (("2" (inst - "j!2-1")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (expand "ordered?")
                    (("1" (expand "list2finseq")
                      (("1" (assert)
                        (("1" (inst - "i!1 - 1 + j!2")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "j!2 = 1")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (expand "ordered?")
                            (("1" (assert)
                              (("1" (inst?)
                                (("1" (expand "list2finseq")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil)
    (PlanPoint type-eq-decl nil Plan nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i!1 skolem-const-decl "below[length(p!1)]" Plan nil)
    (j!1 skolem-const-decl "below[length(p!1)]" Plan nil)
    (p!1 skolem-const-decl "list[PlanPoint]" Plan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (j!2 skolem-const-decl "nat" Plan nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ordered? const-decl "bool" Plan nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (getIndexInRange_rec_TCC1 0
  (getIndexInRange_rec_TCC1-1 nil 3700310675 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Plan type-eq-decl nil Plan nil)
    (set type-eq-decl nil sets nil) (range const-decl "set[real]" Plan nil)
    (Range type-eq-decl nil Plan nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (getIndexInRange_rec subtype "(number_fields.-)(Plan.n, 1)"
    "below[length[PlanPoint](p)]")))
 (getIndexInRange_rec_TCC2 0
  (getIndexInRange_rec_TCC2-1 nil 3700310675 ("" (termination-tcc) nil nil)
   nil nil
   (getIndexInRange_rec termination
    "Plan.getIndexInRange_rec(Plan.p, Plan.t, (number_fields.-)(Plan.n, 1))"
    "nil")))
 (getIndexInRange_TCC1 0
  (getIndexInRange_TCC1-1 nil 3676800410
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (getIndexInRange subtype
    "(number_fields.-)(list_props[PlanPoint].length(Plan.p), 1)"
    "below[length[PlanPoint](p)]")))
 (getIndex_TCC1 0
  (getIndex_TCC1-1 nil 3673798235 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Plan type-eq-decl nil Plan nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (range const-decl "set[real]" Plan nil))
   nil (getIndex subtype "Plan.t" "Plan.Range(Plan.p)")))
 (findPrev_TCC1 0
  (findPrev_TCC1-1 nil 3690805658 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Plan type-eq-decl nil Plan nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil
   (findPrev termination
    "Plan.findPrev(Plan.p, (number_fields.-)(Plan.current, 1), Plan.pred)"
    "nil")))
 (turnDir_TCC1 0
  (turnDir_TCC1-1 nil 3702138373 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sign const-decl "Sign" sign reals)
    (data const-decl "TcpDataType" Plan nil)
    (ZERO const-decl "TcpDataType" TcpData nil)
    (INVALID const-decl "Position" Position nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (zero const-decl "LatLonAlt" LatLonAlt nil))
   nil
   (turnDir subtype "sign.sign(Plan.data(Plan.p, Plan.i)`radiusSigned)"
    "{i: integers.int | booleans.OR(i = (number_fields.-)(1), i = 1)}")))
 (pathDistanceNat_TCC1 0
  (pathDistanceNat_TCC1-1 nil 3698059835 ("" (subtype-tcc) nil nil) nil nil
   (pathDistanceNat subtype
    "(number_fields.-)(list_props[PlanPoint].length(Plan.p), 1)" "nat")))
 (pathDistanceNat_TCC2 0
  (pathDistanceNat_TCC2-1 nil 3698059835 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Plan type-eq-decl nil Plan nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (pathDistanceNat termination
    "Plan.pathDistanceNat(Plan.p, Plan.i, (number_fields.-)(list_props[PlanPoint].length(Plan.p), 1), Plan.linear)"
    "nil")))
 (pathDistanceNat_TCC3 0
  (pathDistanceNat_TCC3-1 nil 3698059835 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Plan type-eq-decl nil Plan nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (pathDistanceNat subtype "(number_fields.-)(Plan.j, 1)" "nat")))
 (pathDistanceNat_TCC4 0
  (pathDistanceNat_TCC4-1 nil 3698059835 ("" (termination-tcc) nil nil) nil
   nil
   (pathDistanceNat termination
    "Plan.pathDistanceNat(Plan.p, Plan.i, (number_fields.-)(Plan.j, 1), Plan.linear)"
    "nil")))
 (pathDistance4_TCC1 0
  (pathDistance4_TCC1-1 nil 3700310675 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Plan type-eq-decl nil Plan nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (pathDistance4 subtype "Plan.i" "nat")))
 (gsFinal_TCC1 0
  (gsFinal_TCC1-1 nil 3690805658 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (gsFinal subtype "(number_fields.+)(Plan.i, 1)" "nat")))
 (gsFinal_TCC2 0
  (gsFinal_TCC2-1 nil 3698059870
   ("" (skosimp*)
    (("" (hide -1 -3)
      (("" (replace -1)
        (("" (hide -1)
          (("" (assert)
            (("" (lift-if)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lemma "ordered_lem")
                      (("1" (inst - "p!1" "i!1" "i!1+1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_lem formula-decl nil Plan nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (Plan type-eq-decl nil Plan nil) (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (PlanPoint type-eq-decl nil Plan nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil (gsFinal subtype "Plan.dt" "nznum")))
 (gsOut_TCC1 0
  (gsOut_TCC1-1 nil 3690805658 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (gsOut subtype "Plan.j" "nat")))
 (gsOut_TCC2 0
  (gsOut_TCC2-1 nil 3719574818
   ("" (skosimp*)
    (("" (hide -2 -4)
      (("" (replace -2)
        (("" (hide -2)
          (("" (assert)
            (("" (lemma "ordered_lem")
              (("" (inst - "p!1" "i!1" "j!1") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_lem formula-decl nil Plan nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (Plan type-eq-decl nil Plan nil) (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (PlanPoint type-eq-decl nil Plan nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil (gsOut subtype "Plan.dt" "nznum")))
 (vsFinal_TCC1 0
  (vsFinal_TCC1-1 nil 3690805658
   ("" (skosimp*)
    (("" (assert)
      (("" (hide -4)
        (("" (lemma "ordered_lem")
          (("" (inst - "p!1" "i!1" "j!1")
            (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordered_lem formula-decl nil Plan nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (j!1 skolem-const-decl "int" Plan nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (PlanPoint type-eq-decl nil Plan nil) (list type-decl nil list_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ordered? const-decl "bool" Plan nil) (> const-decl "bool" reals nil)
    (Plan type-eq-decl nil Plan nil) (p!1 skolem-const-decl "Plan" Plan nil))
   nil (vsFinal subtype "Plan.dt" "nznum")))
 (vsOut_TCC1 0
  (vsOut_TCC1-1 nil 3690805658
   ("" (skosimp*)
    (("" (hide -1 -3)
      (("" (replace -1)
        (("" (hide -1)
          (("" (assert)
            (("" (lemma "ordered_lem")
              (("" (inst - "p!1" "i!1" "i!1+1") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_lem formula-decl nil Plan nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (Plan type-eq-decl nil Plan nil) (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (ordered? const-decl "bool" Plan nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (PlanPoint type-eq-decl nil Plan nil)
    (TcpDataType type-eq-decl nil TcpData nil)
    (NavPoint type-eq-decl nil NavPoint nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil (vsOut subtype "Plan.dt" "nznum"))))


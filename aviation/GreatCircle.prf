(GreatCircle
 (spherical_earth_radius_TCC1 0
  (spherical_earth_radius_TCC1-1 nil 3677317552 ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (angle_from_distance const-decl "real" GreatCircle nil))
   nil
   (spherical_earth_radius subtype "GreatCircle.angle_from_distance(1.0)"
    "nznum")))
 (angular_distance_prep 0
  (angular_distance_prep-1 nil 3702223703
   ("" (skosimp*)
    (("" (cancel-by 1 "2")
      (("" (hide (-1 1))
        (("" (expand "sqrt_safe")
          (("" (expand "max")
            (("" (assert)
              (("" (lift-if)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (hide -1)
                      (("1" (expand "asin_safe")
                        (("1" (expand "max")
                          (("1" (lift-if)
                            (("1" (rewrite "lt_min") (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "asin_safe")
                      (("2" (expand "max")
                        (("2" (lift-if 2)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1" (expand "min")
                                (("1" (lift-if -1)
                                  (("1" (split)
                                    (("1" (flatten) (("1" (assert) nil nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "asin_strict_increasing")
                                          (("2"
                                            (expand "strict_increasing?")
                                            (("2"
                                              (name-replace
                                               "ss"
                                               "sq(sin((lat1!1 - lat2!1) / 2)) +
               cos(lat1!1) * cos(lat2!1) * sq(sin((lon1!1 - lon2!1) / 2))")
                                              (("2"
                                                (inst -1 "0" "sqrt(ss)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case "sqrt(ss) = 0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (asin_safe const-decl "real_abs_le_pi2" trig_safe_ops trig)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (sin const-decl "real" sincos_def trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (lt_min formula-decl nil real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (atan_0 formula-decl nil atan trig) (sqrt_1 formula-decl nil sqrt reals)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (asin_strict_increasing formula-decl nil asin trig)
    (asin_0 formula-decl nil asin trig)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (ss skolem-const-decl "real" GreatCircle nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (asin_1 formula-decl nil asin trig)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (angular_distance_TCC1 0
  (angular_distance_TCC1-1 nil 3678456313
   ("" (lemma "angular_distance_prep") (("" (propax) nil nil)) nil)
   ((angular_distance_prep formula-decl nil GreatCircle nil)) nil
   (angular_distance subtype
    "number_fields.*(trig_safe_ops.asin_safe(reals_safe_ops.sqrt_safe((number_fields.+)(sq.sq(sincos_def.sin(number_fields./(((number_fields.-)(GreatCircle.lat1, GreatCircle.lat2)), 2))), number_fields.*(number_fields.*(sincos_def.cos(GreatCircle.lat1), sincos_def.cos(GreatCircle.lat2)), sq.sq(sincos_def.sin(number_fields./(((number_fields.-)(GreatCircle.lon1, GreatCircle.lon2)), 2))))))), 2.0)"
    "nnreal")))
 (distance_from_angle_TCC1 0
  (distance_from_angle_TCC1-1 nil 3678456313 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (spherical_earth_radius const-decl "real" GreatCircle nil)
    (angle_from_distance const-decl "real" GreatCircle nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil
   (distance_from_angle subtype
    "number_fields.*(((number_fields.+)(GreatCircle.spherical_earth_radius, GreatCircle.h)), GreatCircle.angle)"
    "nnreal")))
 (initial_course_impl2_TCC1 0
  (initial_course_impl2_TCC1-1 nil 3702223535 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Radians type-eq-decl nil units nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (EPS const-decl "posreal" GreatCircle nil)
    (/= const-decl "boolean" notequal nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig))
   nil
   (initial_course_impl2 subtype
    "(number_fields.*(sincos_def.sin(GreatCircle.d), sincos_def.cos(GreatCircle.lat1)))"
    "nznum")))
 (angle_between_old_TCC1 0
  (angle_between_old_TCC1-1 nil 3702381776 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (asin_safe const-decl "real_abs_le_pi2" trig_safe_ops trig)
    (angular_distance const-decl "nnreal" GreatCircle nil)
    (angular_distance const-decl "nnreal" GreatCircle nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil (angle_between_old subtype "GreatCircle.d" "nznum")))
 (velocity_initial_TCC1 0
  (velocity_initial_TCC1-1 nil 3677317552 ("" (subtype-tcc) nil nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (minDt const-decl "real" GreatCircle nil)
    (VERTICAL_ACCURACY const-decl "posreal" GreatCircle nil)
    (within_epsilon const-decl "boolean" GreatCircle nil)
    (almost_equals_alt const-decl "boolean" GreatCircle nil)
    (HORIZONTAL_ACCURACY const-decl "posreal" GreatCircle nil)
    (HORIZONTAL_ACCURACY_RAD const-decl "posreal" GreatCircle nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (within_epsilon const-decl "boolean" GreatCircle nil)
    (almost_equals_radian const-decl "boolean" GreatCircle nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (asin_safe const-decl "real_abs_le_pi2" trig_safe_ops trig)
    (angular_distance const-decl "nnreal" GreatCircle nil)
    (angular_distance const-decl "nnreal" GreatCircle nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil (velocity_initial subtype "GreatCircle.dt" "nznum")))
 (velocity_initial_TCC2 0
  (velocity_initial_TCC2-1 nil 3677317552 ("" (subtype-tcc) nil nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (minDt const-decl "real" GreatCircle nil)
    (HORIZONTAL_ACCURACY const-decl "posreal" GreatCircle nil)
    (HORIZONTAL_ACCURACY_RAD const-decl "posreal" GreatCircle nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (within_epsilon const-decl "boolean" GreatCircle nil)
    (almost_equals_radian const-decl "boolean" GreatCircle nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (asin_safe const-decl "real_abs_le_pi2" trig_safe_ops trig)
    (angular_distance const-decl "nnreal" GreatCircle nil)
    (angular_distance const-decl "nnreal" GreatCircle nil)
    (/= const-decl "boolean" notequal nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil (velocity_initial subtype "GreatCircle.dt" "nznum"))))


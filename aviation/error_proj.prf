(error_proj
 (tangent_error_basic 0
  (tangent_error_basic-1 nil 3676033462
   ("" (skeep*)
    (("" (expand "^")
      (("" (rewrite "vect2_scal")
        ((""
          (case "NOT vect2(qhat) - (1 / norm(qhat)) * vect2(qhat) = (1-1/norm(qhat))*vect2(qhat)")
          (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
           ("2" (replaces -1) (("2" (rewrite "norm_scal") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "Normalized" vectors_3D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (norm_scal formula-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (lift_to_surface_TCC1 0
  (lift_to_surface_TCC1-1 nil 3708858641
   ("" (subtype-tcc)
    (("" (grind)
      ((""
        (case "NOT sqrt(nzv!1`x * nzv!1`x *
            (R!1 /
              sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                    nzv!1`z * nzv!1`z))
            *
            (R!1 /
              sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                    nzv!1`z * nzv!1`z))
            +
            nzv!1`y * nzv!1`y *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
             *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
            +
            nzv!1`z * nzv!1`z *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
             *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))) = sqrt(sq(R!1/sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))*(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y + nzv!1`z * nzv!1`z))")
        (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
         ("2" (replaces -1 2)
          (("2"
            (case "NOT sq(R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
            * (nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y + nzv!1`z * nzv!1`z) = sq(R!1)")
            (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
             ("2" (replaces -1 2) (("2" (rewrite "sqrt_sq") nil nil))
              nil))
            nil))
          nil)
         ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (* const-decl "real" vectors_3D vectors))
   nil
   (lift_to_surface subtype
    "vectors_3D.*((number_fields./(error_proj.R, vectors_3D.norm(error_proj.nzv))), error_proj.nzv)"
    "{vv: vectors_3D.Nz_vect3 | vectors_3D.norm(vv) = error_proj.R}")))
 (norm_lem 0
  (norm_lem-1 nil 3708863209
   ("" (skeep)
    (("" (expand "last_two_proj_twist")
      (("" (assert)
        (("" (expand "norm")
          (("" (rewrite "sq_sqrt")
            (("" (rewrite "sq_sqrt")
              (("" (assert) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_two_proj_twist const-decl "Vect2" error_proj nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_3D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (norm_Rc_lt_const 0
  (norm_Rc_lt_const-1 nil 3708962887
   ("" (skeep)
    (("" (expand "on_cord?")
      (("" (skeep)
        (("" (replace -2 2)
          ((""
            (case "NOT (qhat1 + t * (qhat2 - qhat1)) = qhat1 + t*qhat2 - t*qhat1")
            (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
             ("2" (replaces -1 2)
              (("2"
                (case "NOT (# x := R, y := 0, z := 0 #) - (qhat1 + t * qhat2 - t * qhat1) = (# x := R, y := 0, z := 0 #) - qhat1 - t * qhat2 + t * qhat1")
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                 ("2" (replaces -1 2)
                  (("2"
                    (case "NOT (# x := R, y := 0, z := 0 #) -qhat1 - t * qhat2 + t * qhat1 = (# x := R, y := 0, z := 0 #) -(1 - t) * qhat1 - t * qhat2")
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (replaces -1 2)
                      (("2"
                        (case "NOT (# x := R, y := 0, z := 0 #) = (1-t)*(# x := R, y := 0, z := 0 #) + t*(# x := R, y := 0, z := 0 #)")
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (replaces -1 2)
                          (("2"
                            (case "NOT (1 - t) * (# x := R, y := 0, z := 0 #) +
            t * (# x := R, y := 0, z := 0 #)
            - (1 - t) * qhat1
            - t * qhat2 = (1-t)*((# x := R, y := 0, z := 0 #) - qhat1) + t*((# x := R, y := 0, z := 0 #) - qhat2)")
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (replaces -1 2)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "vectors_3D.norm_add_le")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (lemma "vectors_3D.norm_scal")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (replaces -1 -2)
                                          (("2"
                                            (lemma
                                             "vectors_3D.norm_scal")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (replaces -1 -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     " abs((1 - t)) * norm(((# x := R, y := 0, z := 0 #) - qhat1)) +
        abs(t) * norm(((# x := R, y := 0, z := 0 #) - qhat2)) <= const1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT abs((1 - t)) * const1 + abs(t) * const1 = const1")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces
                                                         -1
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3
                                                             2
                                                             3)
                                                            (("2"
                                                              (typepred
                                                               t)
                                                              (("2"
                                                                (mult-by
                                                                 -3
                                                                 "abs(1-t)")
                                                                (("2"
                                                                  (mult-by
                                                                   -4
                                                                   "abs(t)")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((on_cord? const-decl "bool" error_proj nil)
    (TRUE const-decl "bool" booleans nil)
    (norm_add_le formula-decl nil vectors_3D vectors)
    (norm_scal formula-decl nil vectors_3D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (* const-decl "real" vectors_3D vectors)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_3D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil) nil)
   shostak))
 (tri_ineq_Rc 0
  (tri_ineq_Rc-1 nil 3708968145
   ("" (skeep)
    (("" (case "NOT R = norm((# x := R, y := 0, z := 0 #) - c + c)")
      (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
       ("2"
        (name-replace "aa" "norm((# x := R, y := 0, z := 0 #) - c)")
        (("2" (replace -1 2)
          (("2" (expand "aa")
            (("2" (lemma "vectors_3D.norm_add_le")
              (("2" (inst - "(# x := R, y := 0, z := 0 #) - c" "c")
                (("2"
                  (case "NOT norm((# x := R, y := 0, z := 0 #) - c) + norm(c) - norm(c) = norm((# x := R, y := 0, z := 0 #) - c)")
                  (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                   ("2" (hide -4) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil) nil
    (+ const-decl "Vector" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_add_le formula-decl nil vectors_3D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors))
   shostak))
 (error_valid?_TCC1 0
  (error_valid?_TCC1-1 nil 3709282219 ("" (subtype-tcc) nil nil)
   ((Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqrt_0 formula-decl nil sqrt reals)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors) nil
    (zero const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (on_cord? const-decl "bool" error_proj nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (error_valid? subtype "error_proj.p" "Nz_vect3")))
 (error_valid_simple?_TCC1 0
  (error_valid_simple?_TCC1-1 nil 3709282219
   ("" (subtype-tcc)
    (("" (mult-ineq -5 -5)
      (("" (move-terms -1 l) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq reals))
   nil
   (error_valid_simple? subtype
    "(number_fields.-)(sq.sq(error_proj.R), sq.sq(error_proj.const1))"
    "nonneg_real")))
 (error_valid_simple?_TCC2 0
  (error_valid_simple?_TCC2-1 nil 3709282219
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   nil
   (error_valid_simple? subtype "2"
    "{i: integers.int | booleans.OR(error_proj.ERROR /= 0, reals.>=(i, 0))}")))
 (error_valid_simple_def 0
  (error_valid_simple_def-2 nil 3712415234
   ("" (skeep)
    (("" (expand "error_valid?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (expand "on_cord?")
            (("2" (skeep)
              (("2" (expand "error_valid_simple?")
                (("2" (flatten)
                  (("2" (inst - "c")
                    (("2"
                      (case "c`x >= sqrt(sq(R) - sq(const1)) AND c`x <= R AND sqv(c) <= sq(R)")
                      (("1" (replace -1 -12)
                        (("1" (flatten)
                          (("1" (expand "lift_to_surface")
                            (("1"
                              (case "NOT (R / norm(c)) * c - c = (R / norm(c) - 1) * c")
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (expand "last_two_proj_twist")
                                  (("2"
                                    (case
                                     "NOT (# x := ((R / norm(c) - 1) * c)`y,
                                                 y := -((R / norm(c) - 1) * c)`z #) = (R / norm(c) - 1) *  (# x := c`y,
                                                 y := -c`z #)")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (case
                                         "NOT ERROR ^ 2 = sq(ERROR)")
                                        (("1"
                                          (hide-all-but 1)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (expand
                                             "sphere_to_2D_plane")
                                            (("2"
                                              (expand "Equator_map")
                                              (("2"
                                                (expand
                                                 "vect3_orthonorm_toy")
                                                (("2"
                                                  (expand
                                                   "vect3_orthonorm_toz")
                                                  (("2"
                                                    (expand
                                                     "vect3_orthog_toy")
                                                    (("2"
                                                      (expand
                                                       "vect3_orthog_toz")
                                                      (("2"
                                                        (expand
                                                         "cross")
                                                        (("2"
                                                          (expand
                                                           "vect3_orthog_toy")
                                                          (("2"
                                                            (expand
                                                             "^"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "sqrt_le")
                                                                (("2"
                                                                  (expand
                                                                   "norm"
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "NOT (# x
                                     := ((# x := 0, y := -R, z := 0 #) * c) *
                                         (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #))))
                                         * (R / sqrt(sqv(c))),
                                   y
                                     := -(((# x := 0, y := 0, z := R * -R #) * c) *
                                           (1 /
                                             sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                           * (R / sqrt(sqv(c)))) #)
                                 -
                                 (# x
                                      := (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #)))) *
                                          ((# x := 0, y := -R, z := 0 #) * c),
                                    y
                                      := -((1 /
                                             sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                            * ((# x := 0, y := 0, z := R * -R #) * c)) #) = -(R / norm(c) - 1) * (# x := c`y, y := -c`z #)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (case
                                                                           "NOT -R * -R * R * R = sq(R)*sq(R)")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "sqrt_times")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "sqrt_sq")
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT -((1 / (R * R)) * (c`z * -R * R)) = c`z")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT  -(c`z * (1 / (R * R)) * (R / sqrt(c`x * c`x + c`y * c`y + c`z * c`z))
                                  * -R
                                  * R)
                                - c`z = c`z * (R/sqrt(c`x * c`x + c`y * c`y + c`z * c`z)-1)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "NOT -R * -R = sq(R)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "sqrt_sq")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (case
                                                                         "NOT sqv(-(R / norm(c) - 1) * (# x := c`y, y := -c`z #)) = sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))"
                                                                             "sq(ERROR)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (hide -11 2)
                          (("1" (case "NOT c`x = (1-t)*q1`x + t*q2`x")
                            (("1" (hide -1 -2 -3 -4 -5 -6 2)
                              (("1" (grind) nil nil)) nil)
                             ("2" (lemma "sqrt_gt_0")
                              (("2"
                                (inst - "sq(R) - sq(const1)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "q1`x>=sqrt(sq(R) - sq(const1))")
                                    (("1"
                                      (case
                                       "q2`x>=sqrt(sq(R) - sq(const1))")
                                      (("1"
                                        (replace -13 1)
                                        (("1"
                                          (mult-by -1 "t")
                                          (("1"
                                            (mult-by -2 "1-t")
                                            (("1"
                                              (hide-all-but (-1 -2 1))
                                              (("1"
                                                (grind :exclude "sqrt")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-7 -8 -10 1))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (grind :exclude "sq")
                                            (("2"
                                              (rewrite "sq" :dir rl)
                                              (("2"
                                                (rewrite "sq" :dir rl)
                                                (("2"
                                                  (rewrite
                                                   "sq"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "sq"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (metit *)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-4 -5 -8 1))
                                      (("2"
                                        (grind :exclude "sq")
                                        (("2"
                                          (rewrite "sq" :dir rl)
                                          (("2"
                                            (rewrite "sq" :dir rl)
                                            (("2"
                                              (rewrite "sq" :dir rl)
                                              (("2"
                                                (rewrite "sq" :dir rl)
                                                (("2"
                                                  (metit *)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (grind)
                                      (("2"
                                        (typepred const1)
                                        (("2"
                                          (typepred R)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (reveal -11)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (lemma "sqrt_gt_0")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "R * R - const1 * const1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (mult-ineq
                                                             -1
                                                             -1)
                                                            (("2"
                                                              (move-terms
                                                               -1
                                                               l)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (mult-ineq -1 -1)
                                                      (("2"
                                                        (move-terms
                                                         -1
                                                         l)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred R)
                                    (("2"
                                      (typepred const1)
                                      (("2"
                                        (reveal -11)
                                        (("2"
                                          (mult-ineq -1 -1)
                                          (("2"
                                            (move-terms -1 l)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -11)
                          (("2"
                            (case "NOT FORALL (vvv:Vect3): norm(vvv)=R IMPLIES vvv`x<=R")
                            (("1" (hide-all-but 1)
                              (("1"
                                (skeep*)
                                (("1"
                                  (rewrite "sq_eq" -1 :dir rl)
                                  (("1"
                                    (rewrite "sq_norm")
                                    (("1"
                                      (case
                                       "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))")
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (mult-ineq 1 1)
                                        (("2"
                                          (flip-ineq -1)
                                          (("2"
                                            (case "NOT R * R = sq(R)")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (replaces -1 1)
                                              (("2"
                                                (case
                                                 "NOT vvv`x * vvv`x = sq(vvv`x)")
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replaces -1 1)
                                                  (("2"
                                                    (replace -1 -2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst-cp - "q1")
                              (("2"
                                (inst - "q2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -10 1)
                                    (("2"
                                      (hide-all-but (-1 -2 -3 -5 -9 1))
                                      (("2"
                                        (typepred "t")
                                        (("2"
                                          (grind)
                                          (("2" (metit *) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (move-terms 1 l 1)
                          (("3" (hide -11)
                            (("3"
                              (case "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))")
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (replaces -1 1)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (move-terms 1 r 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "sqv")
                                        (("2"
                                          (expand "*" 1 2)
                                          (("2"
                                            (case
                                             "NOT R * R = norm(q1)*norm(q2)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (replace -9 1)
                                                (("2"
                                                  (case
                                                   "NOT q1 + t * (q2 - q1) = (1 - t) * q1 + t * q2")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1 1)
                                                    (("2"
                                                      (lemma
                                                       "vectors_3D.dot_sq_norm")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "((1 - t) * q1 + t * q2)")
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "vectors_3D.norm_add_le")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (lemma
                                                                 "vectors_3D.norm_scal")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replaces
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (lemma
                                                                       "vectors_3D.norm_scal")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "t"
                                                                         "q2")
                                                                        (("2"
                                                                          (replaces
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -6
                                                                               -1)
                                                                              (("2"
                                                                                (case
                                                                                 "NOT abs((1 - t)) * R + abs(t) * R = R")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1
                                                                                   -2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4
                                                                                     1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       1)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT R * R = sq(R)")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "sq_le")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "norm((1 - t) * q1 + t * q2)"
                                                                                               "R")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -11 2)
                        (("3" (mult-ineq -10 -10)
                          (("3" (move-terms -1 l)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_3D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (on_cord? const-decl "bool" error_proj nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (R skolem-const-decl "posreal" error_proj nil)
    (const1 skolem-const-decl "posreal" error_proj nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sq_norm formula-decl nil vectors_3D vectors)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (sq_eq formula-decl nil sq reals)
    (norm_add_le formula-decl nil vectors_3D vectors)
    (norm_scal formula-decl nil vectors_3D vectors)
    (sq_le formula-decl nil sq reals)
    (dot_sq_norm formula-decl nil vectors_3D vectors)
    (lift_to_surface const-decl "{vv: Nz_vect3 | norm(vv) = R}"
     error_proj nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (sphere_to_2D_plane const-decl "Vect2" vect3_basis vectors)
    (vect3_orthonorm_toy const-decl "Normalized" vect3_basis vectors)
    (vect3_orthog_toy const-decl "Vect3" vect3_basis vectors)
    (cross const-decl "Vector" cross_3D vectors)
    (^ const-decl "Normalized" vectors_3D vectors)
    (sqrt_le formula-decl nil sqrt reals)
    (- const-decl "Vector" vectors_2D vectors)
    (sqrt_sq formula-decl nil sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_times formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (dot_scal_left formula-decl nil vectors_3D vectors)
    (dot_scal_canon formula-decl nil vectors_3D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect3_orthog_toz const-decl "Vect3" vect3_basis vectors)
    (vect3_orthonorm_toz const-decl "Normalized" vect3_basis vectors)
    (Equator_map const-decl "Vect3" vect3_basis vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (error_valid? const-decl "bool" error_proj nil))
   nil))
 (error_valid_simple_edgebound_def 0
  (error_valid_simple_edgebound_def-3 nil 3786475131
   ("" (skeep)
    (("" (expand "error_valid_edgebound?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (expand "on_cord?")
            (("2" (skeep)
              (("2" (expand "error_valid_simple_edgebound?")
                (("2" (flatten)
                  (("2" (inst - "c")
                    (("2"
                      (case "c`x >= sqrt(sq(R) - sq(const1)) AND c`x <= R AND sqv(c) <= sq(R) AND sqv(c)>=sq(innerrad)")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "lift_to_surface")
                            (("1"
                              (case "NOT (R / norm(c)) * c - c = (R / norm(c) - 1) * c")
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (expand "last_two_proj_twist")
                                  (("2"
                                    (case
                                     "NOT (# x := ((R / norm(c) - 1) * c)`y,
                                                                                        y := -((R / norm(c) - 1) * c)`z #) = (R / norm(c) - 1) *  (# x := c`y,
                                                                                        y := -c`z #)")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (case
                                         "NOT ERROR ^ 2 = sq(ERROR)")
                                        (("1"
                                          (hide-all-but 1)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (expand
                                             "sphere_to_2D_plane")
                                            (("2"
                                              (expand "Equator_map")
                                              (("2"
                                                (expand
                                                 "vect3_orthonorm_toy")
                                                (("2"
                                                  (expand
                                                   "vect3_orthonorm_toz")
                                                  (("2"
                                                    (expand
                                                     "vect3_orthog_toy")
                                                    (("2"
                                                      (expand
                                                       "vect3_orthog_toz")
                                                      (("2"
                                                        (expand
                                                         "cross")
                                                        (("2"
                                                          (expand
                                                           "vect3_orthog_toy")
                                                          (("2"
                                                            (expand
                                                             "^"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "sqrt_le")
                                                                (("2"
                                                                  (expand
                                                                   "norm"
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "NOT (# x
                                                                                        := ((# x := 0, y := -R, z := 0 #) * c) *
                                                                                            (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #))))
                                                                                            * (R / sqrt(sqv(c))),
                                                                                      y
                                                                                        := -(((# x := 0, y := 0, z := R * -R #) * c) *
                                                                                              (1 /
                                                                                                sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                                                                              * (R / sqrt(sqv(c)))) #)
                                                                                    -
                                                                                    (# x
                                                                                         := (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #)))) *
                                                                                             ((# x := 0, y := -R, z := 0 #) * c),
                                                                                       y
                                                                                         := -((1 /
                                                                                                sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                                                                               * ((# x := 0, y := 0, z := R * -R #) * c)) #) = -(R / norm(c) - 1) * (# x := c`y, y := -c`z #)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (case
                                                                           "NOT -R * -R * R * R = sq(R)*sq(R)")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "sqrt_times")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "sqrt_sq")
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT -((1 / (R * R)) * (c`z * -R * R)) = c`z")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT  -(c`z * (1 / (R * R)) * (R / sqrt(c`x * c`x + c`y * c`y + c`z * c`z))
                                                                                                             * -R
                                                                                                             * R)
                                                                                                           - c`z = c`z * (R/sqrt(c`x * c`x + c`y * c`y + c`z * c`z)-1)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "NOT -R * -R = sq(R)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "sqrt_sq")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (case
                                                                         "NOT sqv(-(R / norm(c) - 1) * (# x := c`y, y := -c`z #)) = sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))"
                                                                             "sq(ERROR)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (hide -12 2)
                          (("1" (case "NOT c`x = (1-t)*q1`x + t*q2`x")
                            (("1" (hide -1 -2 -3 -4 -5 -6 2)
                              (("1" (grind) nil nil)) nil)
                             ("2" (lemma "sqrt_gt_0")
                              (("2"
                                (inst - "sq(R) - sq(const1)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "q1`x>=sqrt(sq(R) - sq(const1))")
                                    (("1"
                                      (case
                                       "q2`x>=sqrt(sq(R) - sq(const1))")
                                      (("1"
                                        (replace -14 1)
                                        (("1"
                                          (mult-by -1 "t")
                                          (("1"
                                            (mult-by -2 "1-t")
                                            (("1"
                                              (hide-all-but (-1 -2 1))
                                              (("1"
                                                (grind :exclude "sqrt")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-7 -8 -10 1))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (grind :exclude "sq")
                                            (("2"
                                              (rewrite "sq" :dir rl)
                                              (("2"
                                                (rewrite "sq" :dir rl)
                                                (("2"
                                                  (rewrite
                                                   "sq"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "sq"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (metit *)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-4 -5 -8 1))
                                      (("2"
                                        (grind :exclude "sq")
                                        (("2"
                                          (rewrite "sq" :dir rl)
                                          (("2"
                                            (rewrite "sq" :dir rl)
                                            (("2"
                                              (rewrite "sq" :dir rl)
                                              (("2"
                                                (rewrite "sq" :dir rl)
                                                (("2"
                                                  (metit *)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "sqrt_gt_0")
                                    (("2"
                                      (inst
                                       -
                                       "R * R - const1 * const1")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but (-1 1))
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "sq_lt")
                                            (("2"
                                              (inst - "const1" "R")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "sq_lt")
                                          (("2"
                                            (inst - "const1" "R")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "const1" "R")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -12)
                          (("2"
                            (case "NOT FORALL (vvv:Vect3): norm(vvv)=R IMPLIES vvv`x<=R")
                            (("1" (hide-all-but 1)
                              (("1"
                                (skeep*)
                                (("1"
                                  (rewrite "sq_eq" -1 :dir rl)
                                  (("1"
                                    (rewrite "sq_norm")
                                    (("1"
                                      (case
                                       "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))")
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (mult-ineq 1 1)
                                        (("2"
                                          (flip-ineq -1)
                                          (("2"
                                            (case "NOT R * R = sq(R)")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (replaces -1 1)
                                              (("2"
                                                (case
                                                 "NOT vvv`x * vvv`x = sq(vvv`x)")
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replaces -1 1)
                                                  (("2"
                                                    (replace -1 -2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst-cp - "q1")
                              (("2"
                                (inst - "q2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -11 1)
                                    (("2"
                                      (hide-all-but
                                       (-1 -2 -3 -5 -10 1))
                                      (("2"
                                        (typepred "t")
                                        (("2"
                                          (grind)
                                          (("2" (metit *) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (move-terms 1 l 1)
                          (("3" (hide -12)
                            (("3"
                              (case "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))")
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (replaces -1 1)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (move-terms 1 r 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "sqv")
                                        (("2"
                                          (expand "*" 1 2)
                                          (("2"
                                            (case
                                             "NOT R * R = norm(q1)*norm(q2)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (replace -10 1)
                                                (("2"
                                                  (case
                                                   "NOT q1 + t * (q2 - q1) = (1 - t) * q1 + t * q2")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1 1)
                                                    (("2"
                                                      (lemma
                                                       "vectors_3D.dot_sq_norm")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "((1 - t) * q1 + t * q2)")
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "vectors_3D.norm_add_le")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (lemma
                                                                 "vectors_3D.norm_scal")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replaces
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (lemma
                                                                       "vectors_3D.norm_scal")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "t"
                                                                         "q2")
                                                                        (("2"
                                                                          (replaces
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -6
                                                                               -1)
                                                                              (("2"
                                                                                (case
                                                                                 "NOT abs((1 - t)) * R + abs(t) * R = R")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1
                                                                                   -2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4
                                                                                     1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       1)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT R * R = sq(R)")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "sq_le")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "norm((1 - t) * q1 + t * q2)"
                                                                                               "R")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (name "aa" "sqv(q2-q1)")
                            (("4" (name "bb" "2*(q1*(q2-q1))")
                              (("4"
                                (name "cc" "sqv(q1)")
                                (("4"
                                  (name "f" "quadratic(aa,bb,cc)")
                                  (("4"
                                    (case
                                     "NOT FORALL (tt:real): sqv(q1+tt*(q2-q1))=f(tt)")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1"
                                        (expand "f")
                                        (("1"
                                          (expand "aa")
                                          (("1"
                                            (expand "bb")
                                            (("1"
                                              (expand "cc")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst-cp - "t")
                                      (("2"
                                        (inst-cp - "1/2")
                                        (("2"
                                          (case
                                           "f(t)>=f(1/2) AND sqv((1/2)*q1+(1/2)*q2)>=sq(innerrad)")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "q1 + 1 / 2 * (q2 - q1) = (1 / 2) * q1 + (1 / 2) * q2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split 1)
                                            (("1"
                                              (lemma "quad_min")
                                              (("1"
                                                (case "aa>0")
                                                (("1"
                                                  (inst
                                                   -
                                                   "aa"
                                                   "bb"
                                                   "cc")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (expand
                                                         "is_minimum?")
                                                        (("1"
                                                          (case
                                                           "-bb/(2*aa)=1/2")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (cross-mult
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "bb"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "aa"
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "sqv_sub")
                                                                  (("2"
                                                                    (rewrite
                                                                     "dot_sub_right")
                                                                    (("2"
                                                                      (case
                                                                       "sqv(q1)=q1*q1")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "sq(norm(q1))=sq(norm(q2))")
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_norm")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sq_norm")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "sqv"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "NOT aa=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "aa" -1)
                                                    (("2"
                                                      (rewrite
                                                       "sqv_eq_0")
                                                      (("2"
                                                        (rewrite
                                                         "sub_eq_zero")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "aa=0 AND bb=0")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "f"
                                                                 2)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (hide
                                                                       -)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "bb"
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "sqv_add" 1)
                                              (("2"
                                                (rewrite "sqv_scal")
                                                (("2"
                                                  (rewrite "sqv_scal")
                                                  (("2"
                                                    (expand "sq" 1 1)
                                                    (("2"
                                                      (expand "sq" 1 1)
                                                      (("2"
                                                        (lemma "sq_le")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "norm(q1-q2)"
                                                           "edgelen")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "sq_norm")
                                                              (("2"
                                                                (rewrite
                                                                 "sqv_sub")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "sq_div")
                                                                    (("2"
                                                                      (case-replace
                                                                       "sq(2)=4")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "sqv(q1)=sq(R) AND sqv(q2)=sq(R)")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "sq(norm(q1))=sq(R) AND sq(norm(q2))=sq(R)")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sq_norm")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "sq_norm")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "sq"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (lemma "sq_lt")
                        (("3" (inst - "const1" "R")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_3D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (on_cord? const-decl "bool" error_proj nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple_edgebound? const-decl "bool" error_proj nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (R skolem-const-decl "posreal" error_proj nil)
    (const1 skolem-const-decl "posreal" error_proj nil)
    (sq_lt formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sq_norm formula-decl nil vectors_3D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (sq_eq formula-decl nil sq reals)
    (norm_add_le formula-decl nil vectors_3D vectors)
    (norm_scal formula-decl nil vectors_3D vectors)
    (sq_le formula-decl nil sq reals)
    (dot_sq_norm formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f skolem-const-decl "[real -> real]" error_proj nil)
    (bb skolem-const-decl "real" error_proj nil)
    (cc skolem-const-decl "posreal" error_proj nil)
    (aa skolem-const-decl "nnreal" error_proj nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (is_minimum? const-decl "bool" quad_minmax reals)
    (div_cancel3 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (dot_sub_right formula-decl nil vectors_3D vectors)
    (sqv_sub formula-decl nil vectors_3D vectors)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sub_eq_zero formula-decl nil vectors_3D vectors)
    (sub_eq_args formula-decl nil vectors_3D vectors)
    (dot_zero_right formula-decl nil vectors_3D vectors)
    (sqv_eq_0 formula-decl nil vectors_3D vectors)
    (quad_min formula-decl nil quad_minmax reals)
    (sqv_scal formula-decl nil vectors_3D vectors)
    (sq_div formula-decl nil sq reals)
    (dot_scal_right formula-decl nil vectors_3D vectors)
    (scal_assoc formula-decl nil vectors_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (sqv_add formula-decl nil vectors_3D vectors)
    (quadratic const-decl "real" quadratic reals)
    (lift_to_surface const-decl "{vv: Nz_vect3 | norm(vv) = R}"
     error_proj nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (sphere_to_2D_plane const-decl "Vect2" vect3_basis vectors)
    (vect3_orthonorm_toy const-decl "Normalized" vect3_basis vectors)
    (vect3_orthog_toy const-decl "Vect3" vect3_basis vectors)
    (cross const-decl "Vector" cross_3D vectors)
    (^ const-decl "Normalized" vectors_3D vectors)
    (sqrt_le formula-decl nil sqrt reals)
    (- const-decl "Vector" vectors_2D vectors)
    (sqrt_sq formula-decl nil sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_times formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (dot_scal_left formula-decl nil vectors_3D vectors)
    (dot_scal_canon formula-decl nil vectors_3D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (vect3_orthog_toz const-decl "Vect3" vect3_basis vectors)
    (vect3_orthonorm_toz const-decl "Normalized" vect3_basis vectors)
    (Equator_map const-decl "Vect3" vect3_basis vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (error_valid_edgebound? const-decl "bool" error_proj nil))
   nil))
 (sphere_to_2D_plane_error_reduction 0
  (sphere_to_2D_plane_error_reduction-2 nil 3709301209
   ("" (skeep*)
    ((""
      (case "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)")
      (("1" (hide-all-but 1)
        (("1"
          (grind :exclude
           ("vect3_orthonorm_tox" "vect3_orthonorm_toy"
            "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane"))
          nil nil))
        nil)
       ("2" (label "emlem" -1)
        (("2" (expand "error_valid?")
          (("2" (assert)
            (("2" (flatten)
              (("2" (name "VR" "mk_vect3(R,0,0)")
                (("2" (replace -1)
                  (("2" (skeep*)
                    (("2" (case "p=zero")
                      (("1" (replace -1) (("1" (assert) nil nil)) nil)
                       ("2" (case "NOT VR = Equator_map(p)(p)")
                        (("1" (expand "Equator_map" 1)
                          (("1" (expand "vect3_orthonorm_tox")
                            (("1" (expand "vect3_orthonorm_toy")
                              (("1"
                                (expand "vect3_orthonorm_toz")
                                (("1"
                                  (expand "vect3_orthog_toy")
                                  (("1"
                                    (expand "vect3_orthog_toz")
                                    (("1"
                                      (replace -1 1 :dir rl)
                                      (("1"
                                        (expand "vect3_orthog_toy")
                                        (("1"
                                          (expand "cross")
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (expand "*")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-5 1))
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (rewrite
                                                       "sq_eq"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (label "VRdef" -1)
                          (("2" (expand "on_cord?")
                            (("2" (skeep*)
                              (("2"
                                (name "Q1" "Equator_map(p)(q1)")
                                (("2"
                                  (name "Q2" "Equator_map(p)(q2)")
                                  (("2"
                                    (name "CC" "Q1+t*(Q2-Q1)")
                                    (("2"
                                      (inst -8 "Q1" "Q2" "CC")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name
                                           "w1"
                                           "vect3_orthonorm_tox(p)")
                                          (("1"
                                            (name
                                             "w2"
                                             "vect3_orthonorm_toy(p)")
                                            (("1"
                                              (name
                                               "w3"
                                               "vect3_orthonorm_toz(p)")
                                              (("1"
                                                (case
                                                 "orthonormal?(w1,w2,w3)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (lemma
                                                         "basis_dot")
                                                        (("1"
                                                          (expand
                                                           "Equator_map"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             1
                                                             4)
                                                            (("1"
                                                              (lemma
                                                               "orthonormal_basis")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "w1"
                                                                 "w2"
                                                                 "w3"
                                                                 "ww")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "w1"
                                                                   "w2"
                                                                   "w3"
                                                                   "aa")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "w1"
                                                                       "w2"
                                                                       "w3"
                                                                       "aa*w1"
                                                                       "aa*w2"
                                                                       "aa*w3"
                                                                       "ww*w1"
                                                                       "ww*w2"
                                                                       "ww*w3")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -6)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "ww*aa=aa*ww")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                      (("1"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (expand
                                                             "sphere_to_2D_plane")
                                                            (("1"
                                                              (expand
                                                               "Equator_map")
                                                              (("1"
                                                                (lemma
                                                                 "VR")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (name
                                                                       "AY"
                                                                       "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (name
                                                                           "AZ"
                                                                           "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "vect3_orthonorm_toz"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vect3_orthog_toz")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vect3_orthonorm_toy"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "vect3_orthog_toy")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cross"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R*R")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               +)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     +
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       +
                                                                                                       6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "w2")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "w3")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (insteep)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_eq"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_norm")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (expand
                                                                 "sphere_to_2D_plane")
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   ("vect3_orthonorm_tox"
                                                                    "vect3_orthonorm_toy"
                                                                    "vect3_orthonorm_toz"))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst-cp
                                                             -
                                                             "p"
                                                             "lift_to_surface(R,c)"
                                                             "c")
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "VR"
                                                                 "lift_to_surface(R,CC)"
                                                                 "CC")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (rewrite
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "emlem"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff")
                                                                                  (("1"
                                                                                    (case
                                                                                     "CC = Equator_map(p)(c)")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "lift_to_surface")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "Equator_map_norm")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Equator_map")
                                                                                                  (("1"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("vect3_orthonorm_tox"
                                                                                                      "vect3_orthonorm_toy"
                                                                                                      "vect3_orthonorm_toz"
                                                                                                      "norm"
                                                                                                      "sphere_to_2D_plane"))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -26
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "CC"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Q1"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Q2"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 ("vect3_orthonorm_tox"
                                                                                                  "vect3_orthonorm_toy"
                                                                                                  "vect3_orthonorm_toz"
                                                                                                  "norm"
                                                                                                  "sphere_to_2D_plane"))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("3"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("4"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("4"
                                                                            (rewrite
                                                                             -4)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("5"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("6"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("6"
                                                                            (copy
                                                                             "emlem")
                                                                            (("6"
                                                                              (inst
                                                                               -
                                                                               "q1"
                                                                               "p"
                                                                               "p")
                                                                              (("6"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("7"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("7"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("7"
                                                                            (copy
                                                                             "emlem")
                                                                            (("7"
                                                                              (inst
                                                                               -
                                                                               "q2"
                                                                               "p"
                                                                               "p")
                                                                              (("7"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("7"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("8"
                                                                        (inst
                                                                         +
                                                                         "t")
                                                                        (("8"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "Q1*VR>0 AND Q2*VR>0")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "CC*VR>0")
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "CC"
                                                                           1)
                                                                          (("2"
                                                                            (mult-by
                                                                             -1
                                                                             "1-t")
                                                                            (("1"
                                                                              (mult-by
                                                                               -2
                                                                               "t")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "t=0")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "t=1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "t=1")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -3
                                                                                      2))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "VRdef"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "Q2"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            (("2"
                                                                              (rewrite
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (replace
                                                                   -12
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replace
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -2 -3 1))
                                                  (("2"
                                                    (lemma
                                                     "vect3_orthonorm_basis")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (replace
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "orthonormal?")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (hide
                                                                         (-4
                                                                          -5
                                                                          -6))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             -7)
                                                                            (("2"
                                                                              (reveal
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "vect3_orthonorm_tox")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "^(p)")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "w2")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (replace
                                                                             -2)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (flatten)
                                                                        (("4"
                                                                          (typepred
                                                                           "w3")
                                                                          (("4"
                                                                            (replace
                                                                             -2)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case "Q1*VR>0 AND Q2*VR>0")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "CC*VR>0")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "CC" 1)
                                                (("2"
                                                  (mult-by -1 "1-t")
                                                  (("1"
                                                    (mult-by -2 "t")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 1))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "t=0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "t=1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "t=1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -3 2))
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace "VRdef" 1)
                                            (("2"
                                              (expand "Q1" 1)
                                              (("2"
                                                (expand "Q2" 1)
                                                (("2"
                                                  (name
                                                   "w1"
                                                   "vect3_orthonorm_tox(p)")
                                                  (("2"
                                                    (name
                                                     "w2"
                                                     "vect3_orthonorm_toy(p)")
                                                    (("2"
                                                      (name
                                                       "w3"
                                                       "vect3_orthonorm_toz(p)")
                                                      (("2"
                                                        (case
                                                         "orthonormal?(w1,w2,w3)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (lemma
                                                                 "basis_dot")
                                                                (("1"
                                                                  (expand
                                                                   "Equator_map"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     4)
                                                                    (("1"
                                                                      (lemma
                                                                       "orthonormal_basis")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -
                                                                         "w1"
                                                                         "w2"
                                                                         "w3"
                                                                         "ww")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "w1"
                                                                           "w2"
                                                                           "w3"
                                                                           "aa")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "w1"
                                                                               "w2"
                                                                               "w3"
                                                                               "aa*w1"
                                                                               "aa*w2"
                                                                               "aa*w3"
                                                                               "ww*w1"
                                                                               "ww*w2"
                                                                               "ww*w3")
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "ww*aa=aa*ww")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -3
                                                            1))
                                                          (("2"
                                                            (lemma
                                                             "vect3_orthonorm_basis")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "orthonormal?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 (-4
                                                                                  -5
                                                                                  -6))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     -7)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vect3_orthonorm_tox")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "^(p)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (typepred
                                                                                 "w2")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "w3")
                                                                                  (("4"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "Q2")
                                        (("3"
                                          (lemma "Equator_map_norm")
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (replace -2)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand "Q1" 1)
                                        (("4"
                                          (lemma "Equator_map_norm")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (replace -2)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (Equator_map const-decl "Vect3" vect3_basis vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (error_valid? const-decl "bool" error_proj nil)
    (norm_zero formula-decl nil vectors_3D vectors) nil nil nil
    (Normalized type-eq-decl nil vectors_3D vectors)
    (orthogonal? const-decl "bool" basis_3D vectors)
    (Nz_vector type-eq-decl nil vectors_3D vectors)
    (vect3_orthonorm_basis formula-decl nil vect3_basis vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sphere_to_2D_plane const-decl "Vect2" vect3_basis vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_square formula-decl nil sqrt reals) nil
    (* const-decl "real" vectors_2D vectors) nil
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    nil nil
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (scal_1 formula-decl nil vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (dot_zero_left formula-decl nil vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Equator_map_norm formula-decl nil vect3_basis vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (lift_to_surface const-decl "{vv: Nz_vect3 | norm(vv) = R}"
     error_proj nil)
    (sq_norm formula-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (orthonormal_basis formula-decl nil basis_3D vectors)
    (basis_dot formula-decl nil basis_3D vectors)
    (orthonormal? const-decl "bool" basis_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (on_cord? const-decl "bool" error_proj nil)
    (vect3_orthonorm_toy const-decl "Normalized" vect3_basis vectors)
    (vect3_orthog_toy const-decl "Vect3" vect3_basis vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "Vector" cross_3D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors_3D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_eq formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "Normalized" vectors_3D vectors)
    (vect3_orthog_toz const-decl "Vect3" vect3_basis vectors)
    (vect3_orthonorm_toz const-decl "Normalized" vect3_basis vectors)
    (vect3_orthonorm_tox const-decl "Normalized" vect3_basis vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (sphere_to_2D_plane_error_reduction-1 nil 3709299988
   ("" (skeep*)
    ((""
      (case "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)")
      (("1" (hide-all-but 1)
        (("1"
          (grind :exclude
           ("vect3_orthonorm_tox" "vect3_orthonorm_toy"
            "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane"))
          nil)))
       ("2" (label "emlem" -1)
        (("2" (expand "error_valid?")
          (("2" (assert)
            (("2" (flatten)
              (("2" (name "VR" "(# x := R, y := 0, z := 0 #)")
                (("2" (replace -1)
                  (("2" (skeep*)
                    (("2" (case "p=zero")
                      (("1" (replace -1) (("1" (assert) nil)))
                       ("2" (case "NOT VR = Equator_map(p)(p)")
                        (("1" (expand "Equator_map" 1)
                          (("1" (expand "vect3_orthonorm_tox")
                            (("1" (expand "vect3_orthonorm_toy")
                              (("1"
                                (expand "vect3_orthonorm_toz")
                                (("1"
                                  (expand "vect3_orthog_toy")
                                  (("1"
                                    (expand "vect3_orthog_toz")
                                    (("1"
                                      (replace -1 1 :dir rl)
                                      (("1"
                                        (expand "vect3_orthog_toy")
                                        (("1"
                                          (expand "cross")
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (expand "*")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-5 1))
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (rewrite
                                                       "sq_eq"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))))
                         ("2" (label "VRdef" -1)
                          (("2" (expand "on_cord?")
                            (("2" (skeep*)
                              (("2"
                                (name "Q1" "Equator_map(p)(q1)")
                                (("2"
                                  (name "Q2" "Equator_map(p)(q2)")
                                  (("2"
                                    (name "CC" "Q1+t*(Q2-Q1)")
                                    (("2"
                                      (inst -8 "Q1" "Q2" "CC")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name
                                           "w1"
                                           "vect3_orthonorm_tox(p)")
                                          (("2"
                                            (name
                                             "w2"
                                             "vect3_orthonorm_toy(p)")
                                            (("2"
                                              (name
                                               "w3"
                                               "vect3_orthonorm_toz(p)")
                                              (("2"
                                                (case
                                                 "orthonormal?(w1,w2,w3)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (lemma
                                                         "basis_dot")
                                                        (("1"
                                                          (expand
                                                           "Equator_map"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             1
                                                             4)
                                                            (("1"
                                                              (lemma
                                                               "orthonormal_basis")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "w1"
                                                                 "w2"
                                                                 "w3"
                                                                 "ww")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "w1"
                                                                   "w2"
                                                                   "w3"
                                                                   "aa")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "w1"
                                                                       "w2"
                                                                       "w3"
                                                                       "aa*w1"
                                                                       "aa*w2"
                                                                       "aa*w3"
                                                                       "ww*w1"
                                                                       "ww*w2"
                                                                       "ww*w3")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -6)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "ww*aa=aa*ww")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil)))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (case
                                                       "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                      (("1"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (expand
                                                             "sphere_to_2D_plane")
                                                            (("1"
                                                              (expand
                                                               "Equator_map")
                                                              (("1"
                                                                (lemma
                                                                 "VR")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (name
                                                                       "AY"
                                                                       "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (name
                                                                           "AZ"
                                                                           "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "vect3_orthonorm_toz"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vect3_orthog_toz")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vect3_orthonorm_toy"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "vect3_orthog_toy")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cross"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil)))))))
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R*R")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               +)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     +
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       +
                                                                                                       6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "-")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "w2")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "w3")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (case
                                                         "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (insteep)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_eq"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_norm")
                                                                    nil)))))))))))
                                                         ("2"
                                                          (case
                                                           "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (expand
                                                                 "sphere_to_2D_plane")
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   ("vect3_orthonorm_tox"
                                                                    "vect3_orthonorm_toy"
                                                                    "vect3_orthonorm_toz"))
                                                                  nil)))))))
                                                           ("2"
                                                            (inst-cp
                                                             -
                                                             "p"
                                                             "lift_to_surface(R,c)"
                                                             "c")
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "VR"
                                                                 "lift_to_surface(R,CC)"
                                                                 "CC")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (rewrite
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "emlem"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff")
                                                                                  (("1"
                                                                                    (case
                                                                                     "CC = Equator_map(p)(c)")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "lift_to_surface")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "Equator_map_norm")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Equator_map")
                                                                                                  (("1"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("vect3_orthonorm_tox"
                                                                                                      "vect3_orthonorm_toy"
                                                                                                      "vect3_orthonorm_toz"
                                                                                                      "norm"
                                                                                                      "sphere_to_2D_plane"))
                                                                                                    nil)))))))))))))))
                                                                                     ("2"
                                                                                      (replace
                                                                                       -26
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "CC"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Q1"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Q2"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 ("vect3_orthonorm_tox"
                                                                                                  "vect3_orthonorm_toy"
                                                                                                  "vect3_orthonorm_toz"
                                                                                                  "norm"
                                                                                                  "sphere_to_2D_plane"))
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))
                                                                       ("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            nil)))))
                                                                       ("3"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("3"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil)))
                                                                       ("4"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("4"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("4"
                                                                            (rewrite
                                                                             -4)
                                                                            nil)))))
                                                                       ("5"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("5"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil)))
                                                                       ("6"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("6"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("6"
                                                                            (copy
                                                                             "emlem")
                                                                            (("6"
                                                                              (inst
                                                                               -
                                                                               "q1"
                                                                               "p"
                                                                               "p")
                                                                              (("6"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil)))))))))))
                                                                       ("7"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("7"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("7"
                                                                            (copy
                                                                             "emlem")
                                                                            (("7"
                                                                              (inst
                                                                               -
                                                                               "q1"
                                                                               "p"
                                                                               "p")
                                                                              (("7"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("7"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil)))))))))))
                                                                       ("8"
                                                                        (case
                                                                         "CC*VR>0")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "CC"
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "Q1*VR>0 AND Q2*VR>0")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (case
                                                                                   "t=0")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (case
                                                                                     "t=1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "Q2+zero = Q1+(Q2-Q1)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil)))))))))
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "1-t")
                                                                                      (("2"
                                                                                        (mult-by
                                                                                         -2
                                                                                         "t")
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -2
                                                                                            3))
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (replace
                                                                                 "VRdef"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "Q1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "Q2"
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       -4)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         -4)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))
                                                                       ("9"
                                                                        (inst
                                                                         +
                                                                         "t")
                                                                        (("9"
                                                                          (assert)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "Q1*VR>0 AND Q2*VR>0")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "CC*VR>0")
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))
                                                                         ("2"
                                                                          (expand
                                                                           "CC"
                                                                           1)
                                                                          (("2"
                                                                            (mult-by
                                                                             -1
                                                                             "1-t")
                                                                            (("1"
                                                                              (mult-by
                                                                               -2
                                                                               "t")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("2"
                                                                                (case
                                                                                 "t=0")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (case
                                                                                   "t=1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (case
                                                                               "t=1")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -3
                                                                                      2))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil)))))))
                                                                               ("2"
                                                                                (assert)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (replace
                                                                       "VRdef"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "Q2"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            (("2"
                                                                              (rewrite
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))))))))))))))
                                                                 ("3"
                                                                  (replace
                                                                   -12
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("3"
                                                        (replace
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -2 -3 1))
                                                  (("2"
                                                    (lemma
                                                     "vect3_orthonorm_basis")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (replace
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "orthonormal?")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (hide
                                                                         (-4
                                                                          -5
                                                                          -6))
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             -7)
                                                                            (("2"
                                                                              (reveal
                                                                               +)
                                                                              (("2"
                                                                                (hide
                                                                                 3)
                                                                                (("2"
                                                                                  (expand
                                                                                   "vect3_orthonorm_tox")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "^(p)")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("3"
                                                                        (typepred
                                                                         "w2")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (replace
                                                                             -2)
                                                                            (("3"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("4"
                                                                        (flatten)
                                                                        (("4"
                                                                          (typepred
                                                                           "w3")
                                                                          (("4"
                                                                            (replace
                                                                             -2)
                                                                            (("4"
                                                                              (assert)
                                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (sphere_to_2D_plane_error_reduction_edgebound 0
  (sphere_to_2D_plane_error_reduction_edgebound-2 nil 3712485625
   ("" (skeep*)
    ((""
      (case "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)")
      (("1" (hide-all-but 1)
        (("1"
          (grind :exclude
           ("vect3_orthonorm_tox" "vect3_orthonorm_toy"
            "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane"))
          nil nil))
        nil)
       ("2" (label "emlem" -1)
        (("2" (expand "error_valid_edgebound?")
          (("2" (assert)
            (("2" (flatten)
              (("2" (name "VR" "mk_vect3(R,0,0)")
                (("2" (replace -1)
                  (("2" (skeep*)
                    (("2" (case "p=zero")
                      (("1" (replace -1) (("1" (assert) nil nil)) nil)
                       ("2" (case "NOT VR = Equator_map(p)(p)")
                        (("1" (expand "Equator_map" 1)
                          (("1" (expand "vect3_orthonorm_tox")
                            (("1" (expand "vect3_orthonorm_toy")
                              (("1"
                                (expand "vect3_orthonorm_toz")
                                (("1"
                                  (expand "vect3_orthog_toy")
                                  (("1"
                                    (expand "vect3_orthog_toz")
                                    (("1"
                                      (replace -1 1 :dir rl)
                                      (("1"
                                        (expand "vect3_orthog_toy")
                                        (("1"
                                          (expand "cross")
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (expand "*")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-5 1))
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (rewrite
                                                       "sq_eq"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (label "VRdef" -1)
                          (("2" (expand "on_cord?")
                            (("2" (skeep*)
                              (("2"
                                (name "Q1" "Equator_map(p)(q1)")
                                (("2"
                                  (name "Q2" "Equator_map(p)(q2)")
                                  (("2"
                                    (name "CC" "Q1+t*(Q2-Q1)")
                                    (("2"
                                      (inst -8 "Q1" "Q2" "CC")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name
                                           "w1"
                                           "vect3_orthonorm_tox(p)")
                                          (("1"
                                            (name
                                             "w2"
                                             "vect3_orthonorm_toy(p)")
                                            (("1"
                                              (name
                                               "w3"
                                               "vect3_orthonorm_toz(p)")
                                              (("1"
                                                (case
                                                 "orthonormal?(w1,w2,w3)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (lemma
                                                         "basis_dot")
                                                        (("1"
                                                          (expand
                                                           "Equator_map"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             1
                                                             4)
                                                            (("1"
                                                              (lemma
                                                               "orthonormal_basis")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "w1"
                                                                 "w2"
                                                                 "w3"
                                                                 "ww")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "w1"
                                                                   "w2"
                                                                   "w3"
                                                                   "aa")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "w1"
                                                                       "w2"
                                                                       "w3"
                                                                       "aa*w1"
                                                                       "aa*w2"
                                                                       "aa*w3"
                                                                       "ww*w1"
                                                                       "ww*w2"
                                                                       "ww*w3")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -6)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "ww*aa=aa*ww")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                      (("1"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (expand
                                                             "sphere_to_2D_plane")
                                                            (("1"
                                                              (expand
                                                               "Equator_map")
                                                              (("1"
                                                                (lemma
                                                                 "VR")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (name
                                                                       "AY"
                                                                       "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (name
                                                                           "AZ"
                                                                           "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "vect3_orthonorm_toz"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vect3_orthog_toz")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vect3_orthonorm_toy"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "vect3_orthog_toy")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cross"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R*R")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               +)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     +
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       +
                                                                                                       6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "w2")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "w3")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (insteep)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_eq"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_norm")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (expand
                                                                 "sphere_to_2D_plane")
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   ("vect3_orthonorm_tox"
                                                                    "vect3_orthonorm_toy"
                                                                    "vect3_orthonorm_toz"))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst-cp
                                                             -
                                                             "p"
                                                             "lift_to_surface(R,c)"
                                                             "c")
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "VR"
                                                                 "lift_to_surface(R,CC)"
                                                                 "CC")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (rewrite
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "emlem"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff")
                                                                                  (("1"
                                                                                    (case
                                                                                     "CC = Equator_map(p)(c)")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "lift_to_surface")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "Equator_map_norm")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Equator_map")
                                                                                                  (("1"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("vect3_orthonorm_tox"
                                                                                                      "vect3_orthonorm_toy"
                                                                                                      "vect3_orthonorm_toz"
                                                                                                      "norm"
                                                                                                      "sphere_to_2D_plane"))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -27
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "CC"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Q1"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Q2"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 ("vect3_orthonorm_tox"
                                                                                                  "vect3_orthonorm_toy"
                                                                                                  "vect3_orthonorm_toz"
                                                                                                  "norm"
                                                                                                  "sphere_to_2D_plane"))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("3"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("4"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("4"
                                                                            (rewrite
                                                                             -4)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("5"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("6"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("6"
                                                                            (copy
                                                                             "emlem")
                                                                            (("6"
                                                                              (inst
                                                                               -
                                                                               "q1"
                                                                               "p"
                                                                               "p")
                                                                              (("6"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("7"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("7"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("7"
                                                                            (copy
                                                                             "emlem")
                                                                            (("7"
                                                                              (inst
                                                                               -
                                                                               "q2"
                                                                               "p"
                                                                               "p")
                                                                              (("7"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("7"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("8"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("8"
                                                                          (expand
                                                                           "Q2"
                                                                           1)
                                                                          (("8"
                                                                            (copy
                                                                             "emlem")
                                                                            (("8"
                                                                              (inst
                                                                               -
                                                                               "q1"
                                                                               "q2"
                                                                               "p")
                                                                              (("8"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("8"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("9"
                                                                        (inst
                                                                         +
                                                                         "t")
                                                                        (("9"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "Q1*VR>0 AND Q2*VR>0")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "CC*VR>0")
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "CC"
                                                                           1)
                                                                          (("2"
                                                                            (mult-by
                                                                             -1
                                                                             "1-t")
                                                                            (("1"
                                                                              (mult-by
                                                                               -2
                                                                               "t")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "t=0")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "t=1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "t=1")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -3
                                                                                      2))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "VRdef"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "Q2"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            (("2"
                                                                              (rewrite
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (replace
                                                                   -12
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replace
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -2 -3 1))
                                                  (("2"
                                                    (lemma
                                                     "vect3_orthonorm_basis")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (replace
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "orthonormal?")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (hide
                                                                         (-4
                                                                          -5
                                                                          -6))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             -7)
                                                                            (("2"
                                                                              (reveal
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "vect3_orthonorm_tox")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "^(p)")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "w2")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (replace
                                                                             -2)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (flatten)
                                                                        (("4"
                                                                          (typepred
                                                                           "w3")
                                                                          (("4"
                                                                            (replace
                                                                             -2)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case "Q1*VR>0 AND Q2*VR>0")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "CC*VR>0")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "CC" 1)
                                                (("2"
                                                  (mult-by -1 "1-t")
                                                  (("1"
                                                    (mult-by -2 "t")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 1))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "t=0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "t=1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "t=1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -3 2))
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace "VRdef" 1)
                                            (("2"
                                              (expand "Q1" 1)
                                              (("2"
                                                (expand "Q2" 1)
                                                (("2"
                                                  (name
                                                   "w1"
                                                   "vect3_orthonorm_tox(p)")
                                                  (("2"
                                                    (name
                                                     "w2"
                                                     "vect3_orthonorm_toy(p)")
                                                    (("2"
                                                      (name
                                                       "w3"
                                                       "vect3_orthonorm_toz(p)")
                                                      (("2"
                                                        (case
                                                         "orthonormal?(w1,w2,w3)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (lemma
                                                                 "basis_dot")
                                                                (("1"
                                                                  (expand
                                                                   "Equator_map"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     4)
                                                                    (("1"
                                                                      (lemma
                                                                       "orthonormal_basis")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -
                                                                         "w1"
                                                                         "w2"
                                                                         "w3"
                                                                         "ww")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "w1"
                                                                           "w2"
                                                                           "w3"
                                                                           "aa")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "w1"
                                                                               "w2"
                                                                               "w3"
                                                                               "aa*w1"
                                                                               "aa*w2"
                                                                               "aa*w3"
                                                                               "ww*w1"
                                                                               "ww*w2"
                                                                               "ww*w3")
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "ww*aa=aa*ww")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -3
                                                            1))
                                                          (("2"
                                                            (lemma
                                                             "vect3_orthonorm_basis")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "orthonormal?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 (-4
                                                                                  -5
                                                                                  -6))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     -7)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vect3_orthonorm_tox")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "^(p)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (typepred
                                                                                 "w2")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "w3")
                                                                                  (("4"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "Q2")
                                        (("3"
                                          (lemma "Equator_map_norm")
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (replace -2)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand "Q1" 1)
                                        (("4"
                                          (lemma "Equator_map_norm")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (replace -2)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (Equator_map const-decl "Vect3" vect3_basis vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (zero const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (error_valid_edgebound? const-decl "bool" error_proj nil)
    (norm_zero formula-decl nil vectors_3D vectors) nil nil nil
    (Normalized type-eq-decl nil vectors_3D vectors)
    (orthogonal? const-decl "bool" basis_3D vectors)
    (Nz_vector type-eq-decl nil vectors_3D vectors)
    (vect3_orthonorm_basis formula-decl nil vect3_basis vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sphere_to_2D_plane const-decl "Vect2" vect3_basis vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_square formula-decl nil sqrt reals) nil
    (* const-decl "real" vectors_2D vectors) nil
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    nil nil
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (scal_1 formula-decl nil vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (dot_zero_left formula-decl nil vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Equator_map_norm formula-decl nil vect3_basis vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (lift_to_surface const-decl "{vv: Nz_vect3 | norm(vv) = R}"
     error_proj nil)
    (sq_norm formula-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (orthonormal_basis formula-decl nil basis_3D vectors)
    (basis_dot formula-decl nil basis_3D vectors)
    (orthonormal? const-decl "bool" basis_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (on_cord? const-decl "bool" error_proj nil)
    (vect3_orthonorm_toy const-decl "Normalized" vect3_basis vectors)
    (vect3_orthog_toy const-decl "Vect3" vect3_basis vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "Vector" cross_3D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors_3D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_eq formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "Normalized" vectors_3D vectors)
    (vect3_orthog_toz const-decl "Vect3" vect3_basis vectors)
    (vect3_orthonorm_toz const-decl "Normalized" vect3_basis vectors)
    (vect3_orthonorm_tox const-decl "Normalized" vect3_basis vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (sphere_to_2D_plane_error_reduction_edgebound-1 nil 3712485464
   ("" (skeep*)
    ((""
      (case "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)")
      (("1" (hide-all-but 1)
        (("1"
          (grind :exclude
           ("vect3_orthonorm_tox" "vect3_orthonorm_toy"
            "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane"))
          nil)))
       ("2" (label "emlem" -1)
        (("2" (expand "error_valid?")
          (("2" (assert)
            (("2" (flatten)
              (("2" (name "VR" "mk_vect3(R,0,0)")
                (("2" (replace -1)
                  (("2" (skeep*)
                    (("2" (case "p=zero")
                      (("1" (replace -1) (("1" (assert) nil)))
                       ("2" (case "NOT VR = Equator_map(p)(p)")
                        (("1" (expand "Equator_map" 1)
                          (("1" (expand "vect3_orthonorm_tox")
                            (("1" (expand "vect3_orthonorm_toy")
                              (("1"
                                (expand "vect3_orthonorm_toz")
                                (("1"
                                  (expand "vect3_orthog_toy")
                                  (("1"
                                    (expand "vect3_orthog_toz")
                                    (("1"
                                      (replace -1 1 :dir rl)
                                      (("1"
                                        (expand "vect3_orthog_toy")
                                        (("1"
                                          (expand "cross")
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (expand "*")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-5 1))
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (rewrite
                                                       "sq_eq"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))))
                         ("2" (label "VRdef" -1)
                          (("2" (expand "on_cord?")
                            (("2" (skeep*)
                              (("2"
                                (name "Q1" "Equator_map(p)(q1)")
                                (("2"
                                  (name "Q2" "Equator_map(p)(q2)")
                                  (("2"
                                    (name "CC" "Q1+t*(Q2-Q1)")
                                    (("2"
                                      (inst -8 "Q1" "Q2" "CC")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name
                                           "w1"
                                           "vect3_orthonorm_tox(p)")
                                          (("1"
                                            (name
                                             "w2"
                                             "vect3_orthonorm_toy(p)")
                                            (("1"
                                              (name
                                               "w3"
                                               "vect3_orthonorm_toz(p)")
                                              (("1"
                                                (case
                                                 "orthonormal?(w1,w2,w3)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (lemma
                                                         "basis_dot")
                                                        (("1"
                                                          (expand
                                                           "Equator_map"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             1
                                                             4)
                                                            (("1"
                                                              (lemma
                                                               "orthonormal_basis")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "w1"
                                                                 "w2"
                                                                 "w3"
                                                                 "ww")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "w1"
                                                                   "w2"
                                                                   "w3"
                                                                   "aa")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "w1"
                                                                       "w2"
                                                                       "w3"
                                                                       "aa*w1"
                                                                       "aa*w2"
                                                                       "aa*w3"
                                                                       "ww*w1"
                                                                       "ww*w2"
                                                                       "ww*w3")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -6)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "ww*aa=aa*ww")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil)))))))))
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil)))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (case
                                                       "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                      (("1"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (expand
                                                             "sphere_to_2D_plane")
                                                            (("1"
                                                              (expand
                                                               "Equator_map")
                                                              (("1"
                                                                (lemma
                                                                 "VR")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (name
                                                                       "AY"
                                                                       "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (name
                                                                           "AZ"
                                                                           "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "vect3_orthonorm_toz"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vect3_orthog_toz")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vect3_orthonorm_toy"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "vect3_orthog_toy")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cross"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil)))))))
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "sqrt_sq")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "R*R")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sq")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               +)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     +
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       +
                                                                                                       6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "w2")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "w3")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (case
                                                         "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (insteep)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_eq"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_norm")
                                                                    nil)))))))))))
                                                         ("2"
                                                          (case
                                                           "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (expand
                                                                 "sphere_to_2D_plane")
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   ("vect3_orthonorm_tox"
                                                                    "vect3_orthonorm_toy"
                                                                    "vect3_orthonorm_toz"))
                                                                  nil)))))))
                                                           ("2"
                                                            (inst-cp
                                                             -
                                                             "p"
                                                             "lift_to_surface(R,c)"
                                                             "c")
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "VR"
                                                                 "lift_to_surface(R,CC)"
                                                                 "CC")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (rewrite
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "emlem"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff")
                                                                                  (("1"
                                                                                    (case
                                                                                     "CC = Equator_map(p)(c)")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "lift_to_surface")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "Equator_map_norm")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Equator_map")
                                                                                                  (("1"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("vect3_orthonorm_tox"
                                                                                                      "vect3_orthonorm_toy"
                                                                                                      "vect3_orthonorm_toz"
                                                                                                      "norm"
                                                                                                      "sphere_to_2D_plane"))
                                                                                                    nil)))))))))))))))
                                                                                     ("2"
                                                                                      (replace
                                                                                       -26
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "CC"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Q1"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Q2"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 ("vect3_orthonorm_tox"
                                                                                                  "vect3_orthonorm_toy"
                                                                                                  "vect3_orthonorm_toz"
                                                                                                  "norm"
                                                                                                  "sphere_to_2D_plane"))
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))
                                                                       ("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            nil)))))
                                                                       ("3"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("3"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil)))
                                                                       ("4"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("4"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("4"
                                                                            (rewrite
                                                                             -4)
                                                                            nil)))))
                                                                       ("5"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("5"
                                                                          (rewrite
                                                                           "Equator_map_norm")
                                                                          nil)))
                                                                       ("6"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("6"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("6"
                                                                            (copy
                                                                             "emlem")
                                                                            (("6"
                                                                              (inst
                                                                               -
                                                                               "q1"
                                                                               "p"
                                                                               "p")
                                                                              (("6"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil)))))))))))
                                                                       ("7"
                                                                        (expand
                                                                         "Q2"
                                                                         1)
                                                                        (("7"
                                                                          (replace
                                                                           "VRdef"
                                                                           1)
                                                                          (("7"
                                                                            (copy
                                                                             "emlem")
                                                                            (("7"
                                                                              (inst
                                                                               -
                                                                               "q2"
                                                                               "p"
                                                                               "p")
                                                                              (("7"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("7"
                                                                                  (rewrite
                                                                                   "Equator_map_norm")
                                                                                  nil)))))))))))
                                                                       ("8"
                                                                        (inst
                                                                         +
                                                                         "t")
                                                                        (("8"
                                                                          (assert)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "Q1*VR>0 AND Q2*VR>0")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "CC*VR>0")
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))
                                                                         ("2"
                                                                          (expand
                                                                           "CC"
                                                                           1)
                                                                          (("2"
                                                                            (mult-by
                                                                             -1
                                                                             "1-t")
                                                                            (("1"
                                                                              (mult-by
                                                                               -2
                                                                               "t")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("2"
                                                                                (case
                                                                                 "t=0")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (case
                                                                                   "t=1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (case
                                                                               "t=1")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -3
                                                                                      2))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil)))))))
                                                                               ("2"
                                                                                (assert)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (replace
                                                                       "VRdef"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "Q1"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "Q2"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -4)
                                                                            (("2"
                                                                              (rewrite
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))))))))))))))
                                                                 ("3"
                                                                  (replace
                                                                   -12
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil)))))))))))))))
                                                       ("3"
                                                        (replace
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -2 -3 1))
                                                  (("2"
                                                    (lemma
                                                     "vect3_orthonorm_basis")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (replace
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "orthonormal?")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (hide
                                                                         (-4
                                                                          -5
                                                                          -6))
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             -7)
                                                                            (("2"
                                                                              (reveal
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "vect3_orthonorm_tox")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "^(p)")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))))))))))))))
                                                                       ("3"
                                                                        (typepred
                                                                         "w2")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (replace
                                                                             -2)
                                                                            (("3"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("4"
                                                                        (flatten)
                                                                        (("4"
                                                                          (typepred
                                                                           "w3")
                                                                          (("4"
                                                                            (replace
                                                                             -2)
                                                                            (("4"
                                                                              (assert)
                                                                              nil)))))))))))))))))))))))))))))))))))))))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case "Q1*VR>0 AND Q2*VR>0")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "CC*VR>0")
                                              (("1"
                                                (replace -4)
                                                (("1" (assert) nil)))
                                               ("2"
                                                (expand "CC" 1)
                                                (("2"
                                                  (mult-by -1 "1-t")
                                                  (("1"
                                                    (mult-by -2 "t")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 1))
                                                      (("1"
                                                        (grind)
                                                        nil)))
                                                     ("2"
                                                      (case "t=0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (case "t=1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            nil)))
                                                         ("2"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (case "t=1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -3 2))
                                                          (("1"
                                                            (grind)
                                                            nil)))))))
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (replace "VRdef" 1)
                                            (("2"
                                              (expand "Q1" 1)
                                              (("2"
                                                (expand "Q2" 1)
                                                (("2"
                                                  (name
                                                   "w1"
                                                   "vect3_orthonorm_tox(p)")
                                                  (("2"
                                                    (name
                                                     "w2"
                                                     "vect3_orthonorm_toy(p)")
                                                    (("2"
                                                      (name
                                                       "w3"
                                                       "vect3_orthonorm_toz(p)")
                                                      (("2"
                                                        (case
                                                         "orthonormal?(w1,w2,w3)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa")
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (lemma
                                                                 "basis_dot")
                                                                (("1"
                                                                  (expand
                                                                   "Equator_map"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     4)
                                                                    (("1"
                                                                      (lemma
                                                                       "orthonormal_basis")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -
                                                                         "w1"
                                                                         "w2"
                                                                         "w3"
                                                                         "ww")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "w1"
                                                                           "w2"
                                                                           "w3"
                                                                           "aa")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "w1"
                                                                               "w2"
                                                                               "w3"
                                                                               "aa*w1"
                                                                               "aa*w2"
                                                                               "aa*w3"
                                                                               "ww*w1"
                                                                               "ww*w2"
                                                                               "ww*w3")
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "ww*aa=aa*ww")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil)))))))))
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))
                                                             ("2"
                                                              (rewrite
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -3
                                                            1))
                                                          (("2"
                                                            (lemma
                                                             "vect3_orthonorm_basis")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "orthonormal?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 (-4
                                                                                  -5
                                                                                  -6))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     -7)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vect3_orthonorm_tox")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "^(p)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))))))))))
                                                                               ("3"
                                                                                (typepred
                                                                                 "w2")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil)))))))
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "w3")
                                                                                  (("4"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))
                                       ("3"
                                        (expand "Q2")
                                        (("3"
                                          (lemma "Equator_map_norm")
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (replace -2)
                                                  (("3"
                                                    (assert)
                                                    nil)))))))))))))
                                       ("4"
                                        (expand "Q1" 1)
                                        (("4"
                                          (lemma "Equator_map_norm")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (replace -2)
                                                (("4"
                                                  (assert)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (sphere_to_2D_plane_error_simple_27780 0
  (sphere_to_2D_plane_error_simple_27780-3 nil 3709298941
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                             LET const1 = 27780, ERROR = 0.11 IN
                               c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                IMPLIES
                                sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                 ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                             z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil)
  (sphere_to_2D_plane_error_simple_27780-2 nil 3709298698
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                             LET const1 = 27780, ERROR = 0.11 IN
                               c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                IMPLIES
                                sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                 ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil)))))
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil)))
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                             z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil)))))))
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2"
                                                (grind)
                                                nil)))))))))))))))))))))))))))))))))))))))))))
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil)))))))))))))))
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil))))))
    nil)
   nil nil)
  (sphere_to_2D_plane_error_simple_27780-1 nil 3709298674
   ("" (postpone) nil nil) nil shostak))
 (sphere_to_2D_plane_error_simple_1852 0
  (sphere_to_2D_plane_error_simple_1852-1 nil 3709302665
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                           LET const1 = 1852, ERROR = 0.0001 IN
                                             c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                              c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                              IMPLIES
                                              sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                               ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                       y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                       z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_3704 0
  (sphere_to_2D_plane_error_simple_3704-1 nil 3709303050
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                         LET const1 = 3704, ERROR = 0.0003 IN
                                                           c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                            c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                            IMPLIES
                                                            sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                             ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                 y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                 z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_5556 0
  (sphere_to_2D_plane_error_simple_5556-1 nil 3709303298
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                       LET const1 = 5556, ERROR = 0.0009 IN
                                                                         c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                          c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                          IMPLIES
                                                                          sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                           ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                           y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                           z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_7408 0
  (sphere_to_2D_plane_error_simple_7408-1 nil 3709303600
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                                            LET const1 = 7408, ERROR = 0.002 IN
                                                                                              c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                                               c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                                               IMPLIES
                                                                                               sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                                                ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                  y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                  z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_9260 0
  (sphere_to_2D_plane_error_simple_9260-1 nil 3709303942
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                                                          LET const1 = 9260, ERROR = 0.004 IN
                                                                                                            c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                                                             c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                                                             IMPLIES
                                                                                                             sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                                                              ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                            y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                            z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_11112 0
  (sphere_to_2D_plane_error_simple_11112-1 nil 3709304118
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                                                                        LET const1 = 11112, ERROR = 0.007 IN
                                                                                                                          c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                                                                           c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                                                                           IMPLIES
                                                                                                                           sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                                                                            ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                      y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                      z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_12964 0
  (sphere_to_2D_plane_error_simple_12964-1 nil 3709304442
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 12964, ERROR = 0.011 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                             z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_14816 0
  (sphere_to_2D_plane_error_simple_14816-1 nil 3709305915
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 14816, ERROR = 0.016 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                       y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                       z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_16668 0
  (sphere_to_2D_plane_error_simple_16668-1 nil 3709306110
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 16668, ERROR = 0.022 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                 y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                 z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_18520 0
  (sphere_to_2D_plane_error_simple_18520-1 nil 3709306317
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 18520, ERROR = 0.031 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                           y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                           z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_20372 0
  (sphere_to_2D_plane_error_simple_20372-1 nil 3709306527
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 20372, ERROR = 0.041 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                     y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                     z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_22224 0
  (sphere_to_2D_plane_error_simple_22224-1 nil 3709306750
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 22224, ERROR = 0.053 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                               y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                               z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_24076 0
  (sphere_to_2D_plane_error_simple_24076-1 nil 3709306967
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 24076, ERROR = 0.067 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_25928 0
  (sphere_to_2D_plane_error_simple_25928-1 nil 3709307216
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 25928, ERROR = 0.083 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_37040 0
  (sphere_to_2D_plane_error_simple_37040-1 nil 3709308672
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 37040, ERROR = 0.25 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_46300 0
  (sphere_to_2D_plane_error_simple_46300-1 nil 3709309105
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 46300, ERROR = 0.49 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_55560 0
  (sphere_to_2D_plane_error_simple_55560-1 nil 3709309325
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 55560, ERROR = 0.83 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_64820 0
  (sphere_to_2D_plane_error_simple_64820-1 nil 3709309559
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 64820, ERROR = 1.3 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_74080 0
  (sphere_to_2D_plane_error_simple_74080-1 nil 3709309867
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 74080, ERROR = 1.95 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_83340 0
  (sphere_to_2D_plane_error_simple_83340-1 nil 3709310070
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 83340, ERROR = 2.85 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_92600 0
  (sphere_to_2D_plane_error_simple_92600-1 nil 3709310265
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 92600, ERROR = 3.79 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_111120 0
  (sphere_to_2D_plane_error_simple_111120-2 nil 3709311913
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 111120, ERROR = 6.51 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil)
  (sphere_to_2D_plane_error_simple_111120-1 nil 3709311899
   ("" (postpone) nil nil) nil shostak))
 (sphere_to_2D_plane_error_simple_129640 0
  (sphere_to_2D_plane_error_simple_129640-1 nil 3709312371
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 129640, ERROR = 10.45 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_148160 0
  (sphere_to_2D_plane_error_simple_148160-1 nil 3709312821
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 148160, ERROR = 15.45 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_166680 0
  (sphere_to_2D_plane_error_simple_166680-1 nil 3709313049
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 166680, ERROR = 22 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_185200 0
  (sphere_to_2D_plane_error_simple_185200-1 nil 3709313355
   (""
    (case "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 185200, ERROR = 30.5 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2")
    (("1" (hide 2) (("1" (grind) (("1" (metit *) nil nil)) nil)) nil)
     ("2" (skoletin)
      (("2" (skoletin)
        (("2" (skeep*)
          (("2" (lemma "sphere_to_2D_plane_error_reduction")
            (("2" (inst - "R_earth" "const1" "ERROR")
              (("2" (split -)
                (("1" (inst - "p") (("1" (assert) nil nil)) nil)
                 ("2" (lemma "error_valid_simple_def")
                  (("2" (inst?)
                    (("2" (inst - "p")
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (hide 2)
                            (("2" (expand "error_valid_simple?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "R_earth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst
                                         -
                                         "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred
                                                     "sqrt(sq(c`y)+sq(c`z))")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "sqrt(sq(c`y)+sq(c`z))")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (lemma "vectors_3D.norm_eq_0")
          (("3" (inst?)
            (("3" (assert)
              (("3" (replaces -1)
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (error_valid? const-decl "bool" error_proj nil)
    (error_valid_simple_def formula-decl nil error_proj nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (error_valid_simple? const-decl "bool" error_proj nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sphere_to_2D_plane_error_reduction formula-decl nil error_proj
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (last_two_proj_twist const-decl "Vect2" error_proj nil) nil
    (* const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (sphere_to_2D_plane_error_simple_185200_27780 0
  (sphere_to_2D_plane_error_simple_185200_27780-2 nil 3712484003
   ("" (skoletin)
    (("" (skoletin)
      (("" (skoletin)
        (("" (skeep)
          (("" (lemma "sphere_to_2D_plane_error_reduction_edgebound")
            (("" (inst - "R_earth" "const1" "ERROR" "edgelen")
              (("" (assert)
                (("" (split -)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "error_valid_simple_edgebound_def")
                      (("2" (inst?)
                        (("2"
                          (inst - "(# x := R_earth, y := 0, z := 0 #)"
                           "sqrt(sq(R_earth)-sq(edgelen / 2))")
                          (("1" (assert)
                            (("1" (assert)
                              (("1"
                                (split 1)
                                (("1"
                                  (expand "R_earth")
                                  (("1"
                                    (hide-all-but 1)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (lemma "sq_eq")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (rewrite "sq_sqrt")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand
                                     "error_valid_simple_edgebound?")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "R_earth")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "NOT FORALL (c: Vect3):c`z=0 IMPLIES
        c`x >= sqrt(sq(R_earth) - sq(const1)) AND
         c`x <= R_earth AND
          sqv(c) <= sq(R_earth) AND sqv(c) >= sq(R_earth) - sq(edgelen / 2)
         IMPLIES
         sqv(last_two_proj_twist(((R_earth / (norm(c))) * c) - c)) <=
          ERROR ^ 2")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (metit *)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep*)
                                              (("2"
                                                (inst
                                                 -
                                                 "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (case
                                                       "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (typepred
                                                             "sqrt(sq(c`y)+sq(c`z))")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (typepred
                                                             "sqrt(sq(c`y)+sq(c`z))")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "sqrt(sq(c`y)+sq(c`z))")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (grind)
                                                        (("3"
                                                          (typepred
                                                           "sqrt(sq(c`y)+sq(c`z))")
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (lemma
                                                   "vectors_3D.norm_eq_0")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (skeep*)
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil)
                           ("3" (hide 2) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((error_valid_simple_edgebound_def formula-decl nil error_proj nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals) nil
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_eq_0 formula-decl nil vectors_3D vectors)
    (comp_zero_x formula-decl nil vectors_3D vectors)
    (sqv_zero formula-decl nil vectors_3D vectors)
    (comp_zero_z formula-decl nil vectors_3D vectors)
    (norm_zero formula-decl nil vectors_3D vectors)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (zero const-decl "Vector" vectors_3D vectors)
    (Nz_vect3 type-eq-decl nil vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (expt def-decl "real" exponentiation nil)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector" vectors_3D vectors) nil
    (last_two_proj_twist const-decl "Vect2" error_proj nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (error_valid_simple_edgebound? const-decl "bool" error_proj nil)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (* const-decl "real" vectors_3D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_3D vectors)
    (sq_eq formula-decl nil sq reals)
    (nz_norm_gt_0 application-judgement "posreal" vectors_3D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sphere_to_2D_plane_error_reduction_edgebound formula-decl nil
     error_proj nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (R_earth const-decl "posreal" error_proj nil)
    (error_valid_edgebound? const-decl "bool" error_proj nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (sphere_to_2D_plane_error_simple_185200_27780-1 nil 3712332984
   ("" (assert) (("" (postpone) nil nil)) nil) nil nil)))


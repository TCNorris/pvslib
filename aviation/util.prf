(util
 (util_turnDelta_TCC1 0
  (util_turnDelta_TCC1-1 nil 3569326947
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "to2pi")
          (("" (expand "abs")
            (("" (case "a-b<0")
              (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (util_turnDelta subtype
    "(number_fields.-)(number_fields.*(2, pi_def.pi), util.delta)"
    "nnreal_le_pi")))
 (cos_util_turnDelta 0
  (cos_util_turnDelta-1 nil 3603634197
   ("" (skeep)
    (("" (expand "util_turnDelta")
      (("" (lift-if)
        (("" (ground)
          (("1" (case "FORALL (aa:real): cos(abs(aa)) = cos(aa)")
            (("1" (rewrite -1)
              (("1" (hide -1)
                (("1" (rewrite "cos_minus")
                  (("1" (rewrite "cos_minus")
                    (("1" (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                      (("1" (rewrite -1)
                        (("1" (rewrite -1)
                          (("1"
                            (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                            (("1" (rewrite -1) (("1" (rewrite -1) nil nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep)
                                (("2" (expand "to2pi")
                                  (("2" (lemma "sin_period")
                                    (("2"
                                      (inst - "aa" "-floor(aa / (2 * pi))")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (expand "to2pi")
                            (("2" (lemma "cos_period")
                              (("2" (inst - "aa" "-floor(aa / (2 * pi))")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skeep)
                (("2" (expand "abs")
                  (("2" (lift-if)
                    (("2" (ground) (("2" (rewrite "cos_neg") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "cos_period")
            (("2" (inst - "- abs(to2pi(alpha) - to2pi(beta))" "1")
              (("2" (assert)
                (("2" (replaces -1 :dir rl)
                  (("2" (rewrite "cos_neg")
                    (("2" (case "FORALL (aa:real): cos(abs(aa)) = cos(aa)")
                      (("1" (rewrite -1)
                        (("1" (rewrite "cos_minus")
                          (("1" (rewrite "cos_minus")
                            (("1"
                              (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                              (("1" (rewrite -1)
                                (("1" (rewrite -1)
                                  (("1"
                                    (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                                    (("1" (rewrite -1)
                                      (("1" (rewrite -1) nil nil)) nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "to2pi")
                                          (("2"
                                            (lemma "sin_period")
                                            (("2"
                                              (inst
                                               -
                                               "aa"
                                               "-floor(aa / (2 * pi))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (skeep)
                                  (("2" (expand "to2pi")
                                    (("2" (lemma "cos_period")
                                      (("2"
                                        (inst - "aa" "-floor(aa / (2 * pi))")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (expand "abs")
                            (("2" (lift-if)
                              (("2" (ground)
                                (("2" (rewrite "cos_neg") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (util_turnDelta const-decl "nnreal_le_pi" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_neg formula-decl nil sincos_def trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil) (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (cos_minus formula-decl nil sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sin_period formula-decl nil sincos trig)
    (sin const-decl "real" sincos_def trig)
    (cos_period formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil))
   shostak))
 (sin_util_turnDelta 0
  (sin_util_turnDelta-1 nil 3603635295
   ("" (skeep)
    (("" (assert)
      (("" (expand "det")
        (("" (case "NOT sin(util_turnDelta(alpha, beta))>=0")
          (("1" (hide 2)
            (("1" (typepred "util_turnDelta(alpha,beta)")
              (("1" (assert)
                (("1" (lemma "sin_ge_0")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "util_turnDelta")
            (("2" (expand "abs")
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                                (("1" (label "c1" -1)
                                  (("1"
                                    (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                                    (("1" (label "s1" -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite "sin_neg")
                                          (("1"
                                            (rewrite "sin_minus")
                                            (("1"
                                              (rewrite "s1")
                                              (("1"
                                                (rewrite "s1")
                                                (("1"
                                                  (rewrite "c1")
                                                  (("1"
                                                    (rewrite "c1")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sin_neg")
                                          (("2"
                                            (rewrite "sin_minus")
                                            (("2"
                                              (rewrite "s1")
                                              (("2"
                                                (rewrite "s1")
                                                (("2"
                                                  (rewrite "c1")
                                                  (("2"
                                                    (rewrite "c1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "sin_plus")
                                          (("3"
                                            (inst
                                             -
                                             "2*pi"
                                             "to2pi(alpha) - to2pi(beta)")
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (rewrite "sin_2pi")
                                                (("3"
                                                  (rewrite "cos_2pi")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite "sin_minus")
                                                      (("3"
                                                        (rewrite "s1")
                                                        (("3"
                                                          (rewrite "s1")
                                                          (("3"
                                                            (rewrite "c1")
                                                            (("3"
                                                              (rewrite "c1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma "sin_plus")
                                          (("4"
                                            (inst
                                             -
                                             "2*pi"
                                             "to2pi(alpha) - to2pi(beta)")
                                            (("4"
                                              (replaces -1)
                                              (("4"
                                                (rewrite "sin_2pi")
                                                (("4"
                                                  (rewrite "cos_2pi")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite "sin_minus")
                                                      (("4"
                                                        (rewrite "s1")
                                                        (("4"
                                                          (rewrite "s1")
                                                          (("4"
                                                            (rewrite "c1")
                                                            (("4"
                                                              (rewrite "c1")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (rewrite "sin_minus")
                                          (("5"
                                            (rewrite "s1")
                                            (("5"
                                              (rewrite "s1")
                                              (("5"
                                                (rewrite "c1")
                                                (("5"
                                                  (rewrite "c1")
                                                  (("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (rewrite "sin_minus")
                                          (("6"
                                            (rewrite "s1")
                                            (("6"
                                              (rewrite "s1")
                                              (("6"
                                                (rewrite "c1")
                                                (("6"
                                                  (rewrite "c1")
                                                  (("6" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (rewrite "sin_plus")
                                          (("7"
                                            (rewrite "sin_2pi")
                                            (("7"
                                              (rewrite "cos_2pi")
                                              (("7"
                                                (assert)
                                                (("7"
                                                  (rewrite "sin_minus")
                                                  (("7"
                                                    (rewrite "s1")
                                                    (("7"
                                                      (rewrite "s1")
                                                      (("7"
                                                        (rewrite "c1")
                                                        (("7"
                                                          (rewrite "c1")
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("8"
                                          (rewrite "sin_plus")
                                          (("8"
                                            (rewrite "sin_2pi")
                                            (("8"
                                              (rewrite "cos_2pi")
                                              (("8"
                                                (assert)
                                                (("8"
                                                  (rewrite "sin_minus")
                                                  (("8"
                                                    (rewrite "s1")
                                                    (("8"
                                                      (rewrite "s1")
                                                      (("8"
                                                        (rewrite "c1")
                                                        (("8"
                                                          (rewrite "c1")
                                                          (("8"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "to2pi")
                                            (("2"
                                              (lemma "sin_period")
                                              (("2"
                                                (inst
                                                 -
                                                 "aa"
                                                 "-floor(aa / (2 * pi))")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skeep)
                                    (("2" (expand "to2pi")
                                      (("2"
                                        (lemma "cos_period")
                                        (("2"
                                          (inst
                                           -
                                           "aa"
                                           "-floor(aa / (2 * pi))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (util_turnDelta const-decl "nnreal_le_pi" util nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sin const-decl "real" sincos_def trig) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_ge_0 formula-decl nil trig_ineq trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_period formula-decl nil sincos trig)
    (sin_period formula-decl nil sincos trig)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (sin_plus formula-decl nil sincos trig)
    (TRUE const-decl "bool" booleans nil)
    (cos_2pi formula-decl nil sincos trig)
    (sin_2pi formula-decl nil sincos trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_neg formula-decl nil sincos_def trig)
    (sin_minus formula-decl nil sincos trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (util_turnDelta_TCC2 0
  (util_turnDelta_TCC2-1 nil 3610203985 ("" (subtype-tcc) nil nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig))
   nil (util_turnDelta subtype "0" "nnreal_le_2pi")))
 (util_turnDelta_TCC3 0
  (util_turnDelta_TCC3-1 nil 3610203985 ("" (subtype-tcc) nil nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig))
   nil (util_turnDelta subtype "util.td" "nnreal_le_2pi")))
 (util_turnDelta_TCC4 0
  (util_turnDelta_TCC4-1 nil 3721912508 ("" (subtype-tcc) nil nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig))
   nil
   (util_turnDelta subtype
    "(number_fields.-)(number_fields.*(2, pi_def.pi), util.td)"
    "nnreal_le_2pi")))
 (mkAlt_TCC1 0
  (mkAlt_TCC1-1 nil 3607084869 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)) nil
   (mkAlt subtype "util.s WITH [z := util.z]"
    "{vv: vectors_3D_def.Vect3 | booleans.AND(vect_3D_2D.vect2(vv) = vect_3D_2D.vect2(util.s), vv`z = util.z)}")))
 (Vect3_TCC1 0
  (Vect3_TCC1-1 nil 3607084869
   ("" (skeep)
    (("" (decompose-equality 1) (("1" (grind) nil nil) ("2" (grind) nil nil))
      nil))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (Vect3 subtype "(# x := util.w`x, y := util.w`y, z := util.z #)"
    "{vv: vectors_3D_def.Vect3 | booleans.AND(vect_3D_2D.vect2(vv) = util.w, vv`z = util.z)}")))
 (Hat_TCC1 0
  (Hat_TCC1-1 nil 3610203985
   ("" (skeep)
    (("" (assert)
      (("" (ground)
        (("" (lemma "vectors_2D.norm_eq_0")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil (Hat subtype "vectors_2D.norm(util.w)" "nznum")))
 (Hat_TCC2 0
  (Hat_TCC2-1 nil 3610203985
   ("" (skeep)
    (("" (assert)
      (("" (lemma "vectors_2D.norm_eq_0")
        (("" (inst - "w") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((norm_zero formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors))
   nil
   (Hat subtype "vectors_2D.zero"
    "{v: vectors_2D_def.Vect2 | booleans.AND((booleans.IFF(v = vectors_2D.zero, util.w = vectors_2D.zero)), (booleans.IFF(util.w /= vectors_2D.zero, (booleans.AND(vectors_2D.norm(v) = 1, v = vectors_2D.*((number_fields./(1, vectors_2D.norm(util.w))), util.w))))))}")))
 (Hat_TCC3 0
  (Hat_TCC3-1 nil 3610204324 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (Hat subtype "util.n" "nznum")))
 (Hat_TCC4 0
  (Hat_TCC4-1 nil 3610204324
   ("" (skeep)
    (("" (assert)
      (("" (split)
        (("1" (ground)
          (("1" (case "NOT vectors_2D.zero`x = w`x/n")
            (("1" (replaces -1 :dir rl)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (case "NOT vectors_2D.zero`y = w`y/n")
              (("1" (replace -2 :dir rl)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)) nil)
               ("2" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "w`x=vectors_2D.zero`x AND w`y=vectors_2D.zero`y")
            (("1" (flatten)
              (("1" (replaces -1)
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (decompose-equality -1) nil nil))
            nil))
          nil)
         ("3" (flatten)
          (("3" (split)
            (("1" (rewrite "sq_eq" :dir rl)
              (("1" (rewrite "sq_norm")
                (("1" (replaces -1)
                  (("1" (rewrite "sqv_sos")
                    (("1" (expand "sos")
                      (("1" (expand "Vect2")
                        (("1" (expand "norm")
                          (("1" (rewrite "sq_div")
                            (("1" (rewrite "sq_div")
                              (("1" (assert)
                                (("1" (mult-by 1 "sqv(w)")
                                  (("1" (real-props) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1 :dir rl) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("4" (flatten) (("4" (replaces -3) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm_zero formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "Vector" vectors_2D vectors)
    (sq_eq formula-decl nil sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_1 formula-decl nil sq reals)
    (sos const-decl "nnreal" vectors_2D vectors)
    (sq_sqrt formula-decl nil sqrt reals)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_distributes formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_div formula-decl nil sq reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqv_sos formula-decl nil vectors_2D vectors)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sqrt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (Vect2 const-decl "{vv: Vect2 | vv`x = x AND vv`y = y}" util nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil))
   nil
   (Hat subtype
    "util.Vect2(number_fields./(util.w`x, util.n), number_fields./(util.w`y, util.n))"
    "{v: vectors_2D_def.Vect2 | booleans.AND((booleans.IFF(v = vectors_2D.zero, util.w = vectors_2D.zero)), (booleans.IFF(util.w /= vectors_2D.zero, (booleans.AND(vectors_2D.norm(v) = 1, v = vectors_2D.*((number_fields./(1, vectors_2D.norm(util.w))), util.w))))))}")))
 (cos_turnDelta 0
  (cos_turnDelta-1 nil 3719597396
   ("" (skeep)
    (("" (expand "turnDelta")
      (("" (lift-if)
        (("" (ground)
          (("1" (case "FORALL (aa:real): cos(abs(aa)) = cos(aa)")
            (("1" (rewrite -1)
              (("1" (hide -1)
                (("1" (rewrite "cos_minus")
                  (("1" (rewrite "cos_minus")
                    (("1" (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                      (("1" (rewrite -1)
                        (("1" (rewrite -1)
                          (("1"
                            (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                            (("1" (rewrite -1) (("1" (rewrite -1) nil nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep)
                                (("2" (expand "to2pi")
                                  (("2" (lemma "sin_period")
                                    (("2"
                                      (inst - "aa" "-floor(aa / (2 * pi))")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (expand "to2pi")
                            (("2" (lemma "cos_period")
                              (("2" (inst - "aa" "-floor(aa / (2 * pi))")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skeep)
                (("2" (expand "abs")
                  (("2" (lift-if)
                    (("2" (ground) (("2" (rewrite "cos_neg") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "cos_period")
            (("2" (inst - "- abs(to2pi(alpha) - to2pi(beta))" "1")
              (("2" (assert)
                (("2" (replaces -1 :dir rl)
                  (("2" (rewrite "cos_neg")
                    (("2" (case "FORALL (aa:real): cos(abs(aa)) = cos(aa)")
                      (("1" (rewrite -1)
                        (("1" (rewrite "cos_minus")
                          (("1" (rewrite "cos_minus")
                            (("1"
                              (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                              (("1" (rewrite -1)
                                (("1" (rewrite -1)
                                  (("1"
                                    (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                                    (("1" (rewrite -1)
                                      (("1" (rewrite -1) nil nil)) nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "to2pi")
                                          (("2"
                                            (lemma "sin_period")
                                            (("2"
                                              (inst
                                               -
                                               "aa"
                                               "-floor(aa / (2 * pi))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (skeep)
                                  (("2" (expand "to2pi")
                                    (("2" (lemma "cos_period")
                                      (("2"
                                        (inst - "aa" "-floor(aa / (2 * pi))")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (expand "abs")
                            (("2" (lift-if)
                              (("2" (ground)
                                (("2" (rewrite "cos_neg") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (turnDelta const-decl "nnreal_le_pi" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_neg formula-decl nil sincos_def trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil) (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (cos_minus formula-decl nil sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sin_period formula-decl nil sincos trig)
    (sin const-decl "real" sincos_def trig)
    (cos_period formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil))
   shostak))
 (sin_turnDelta 0
  (sin_turnDelta-1 nil 3719597426
   ("" (skeep)
    (("" (assert)
      (("" (expand "det")
        (("" (case "NOT sin(turnDelta(alpha, beta))>=0")
          (("1" (hide 2)
            (("1" (typepred "turnDelta(alpha,beta)")
              (("1" (assert)
                (("1" (lemma "sin_ge_0")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "turnDelta")
            (("2" (expand "abs")
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                                (("1" (label "c1" -1)
                                  (("1"
                                    (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                                    (("1" (label "s1" -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite "sin_neg")
                                          (("1"
                                            (rewrite "sin_minus")
                                            (("1"
                                              (rewrite "s1")
                                              (("1"
                                                (rewrite "s1")
                                                (("1"
                                                  (rewrite "c1")
                                                  (("1"
                                                    (rewrite "c1")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sin_neg")
                                          (("2"
                                            (rewrite "sin_minus")
                                            (("2"
                                              (rewrite "s1")
                                              (("2"
                                                (rewrite "s1")
                                                (("2"
                                                  (rewrite "c1")
                                                  (("2"
                                                    (rewrite "c1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "sin_plus")
                                          (("3"
                                            (inst
                                             -
                                             "2*pi"
                                             "to2pi(alpha) - to2pi(beta)")
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (rewrite "sin_2pi")
                                                (("3"
                                                  (rewrite "cos_2pi")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite "sin_minus")
                                                      (("3"
                                                        (rewrite "s1")
                                                        (("3"
                                                          (rewrite "s1")
                                                          (("3"
                                                            (rewrite "c1")
                                                            (("3"
                                                              (rewrite "c1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma "sin_plus")
                                          (("4"
                                            (inst
                                             -
                                             "2*pi"
                                             "to2pi(alpha) - to2pi(beta)")
                                            (("4"
                                              (replaces -1)
                                              (("4"
                                                (rewrite "sin_2pi")
                                                (("4"
                                                  (rewrite "cos_2pi")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite "sin_minus")
                                                      (("4"
                                                        (rewrite "s1")
                                                        (("4"
                                                          (rewrite "s1")
                                                          (("4"
                                                            (rewrite "c1")
                                                            (("4"
                                                              (rewrite "c1")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (rewrite "sin_minus")
                                          (("5"
                                            (rewrite "s1")
                                            (("5"
                                              (rewrite "s1")
                                              (("5"
                                                (rewrite "c1")
                                                (("5"
                                                  (rewrite "c1")
                                                  (("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (rewrite "sin_minus")
                                          (("6"
                                            (rewrite "s1")
                                            (("6"
                                              (rewrite "s1")
                                              (("6"
                                                (rewrite "c1")
                                                (("6"
                                                  (rewrite "c1")
                                                  (("6" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (rewrite "sin_plus")
                                          (("7"
                                            (rewrite "sin_2pi")
                                            (("7"
                                              (rewrite "cos_2pi")
                                              (("7"
                                                (assert)
                                                (("7"
                                                  (rewrite "sin_minus")
                                                  (("7"
                                                    (rewrite "s1")
                                                    (("7"
                                                      (rewrite "s1")
                                                      (("7"
                                                        (rewrite "c1")
                                                        (("7"
                                                          (rewrite "c1")
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("8"
                                          (rewrite "sin_plus")
                                          (("8"
                                            (rewrite "sin_2pi")
                                            (("8"
                                              (rewrite "cos_2pi")
                                              (("8"
                                                (assert)
                                                (("8"
                                                  (rewrite "sin_minus")
                                                  (("8"
                                                    (rewrite "s1")
                                                    (("8"
                                                      (rewrite "s1")
                                                      (("8"
                                                        (rewrite "c1")
                                                        (("8"
                                                          (rewrite "c1")
                                                          (("8"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "to2pi")
                                            (("2"
                                              (lemma "sin_period")
                                              (("2"
                                                (inst
                                                 -
                                                 "aa"
                                                 "-floor(aa / (2 * pi))")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skeep)
                                    (("2" (expand "to2pi")
                                      (("2"
                                        (lemma "cos_period")
                                        (("2"
                                          (inst
                                           -
                                           "aa"
                                           "-floor(aa / (2 * pi))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (turnDelta const-decl "nnreal_le_pi" util nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sin const-decl "real" sincos_def trig) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_ge_0 formula-decl nil trig_ineq trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_period formula-decl nil sincos trig)
    (sin_period formula-decl nil sincos trig)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (sin_plus formula-decl nil sincos trig)
    (TRUE const-decl "bool" booleans nil)
    (cos_2pi formula-decl nil sincos trig)
    (sin_2pi formula-decl nil sincos trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_neg formula-decl nil sincos_def trig)
    (sin_minus formula-decl nil sincos trig)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))


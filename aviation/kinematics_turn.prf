(kinematics_turn
 (linear_preserves_gs 0
  (linear_preserves_gs-1 nil 3578135450
   ("" (skosimp*) (("" (expand "linear_traj") (("" (propax) nil nil)) nil))
    nil)
   ((linear_traj const-decl "svpair" kinematics_turn nil)) shostak))
 (linear_preserves_vs 0
  (linear_preserves_vs-1 nil 3578135535
   ("" (skosimp*) (("" (expand "linear_traj") (("" (propax) nil nil)) nil))
    nil)
   ((linear_traj const-decl "svpair" kinematics_turn nil)) shostak))
 (linear_preserves_track_TCC1 0
  (linear_preserves_track_TCC1-1 nil 3578135599
   ("" (skosimp*)
    (("" (typepred "sv0!1`vel")
      (("" (expand "linear_traj") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (nzh_svpair type-eq-decl nil util nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (linear_traj const-decl "svpair" kinematics_turn nil))
   nil
   (linear_preserves_track subtype
    "kinematics_turn.linear_traj(kinematics_turn.sv0, kinematics_turn.t1)`vel"
    "nzhVect3")))
 (linear_preserves_track 0
  (linear_preserves_track-1 nil 3578135571
   ("" (skosimp*) (("" (expand "linear_traj") (("" (propax) nil nil)) nil))
    nil)
   ((linear_traj const-decl "svpair" kinematics_turn nil)) shostak))
 (turnRadius_TCC1 0
  (turnRadius_TCC1-1 nil 3568737705
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (flatten)
        (("" (lemma "cos_eq_0")
          (("" (inst?)
            (("" (assert)
              (("" (skosimp*)
                (("" (typepred "abs(bank!1)")
                  (("" (name-replace AA "abs(bank!1)")
                    (("" (case "i!1 < 0")
                      (("1" (cancel-by -6 "pi") nil nil)
                       ("2" (assert)
                        (("2" (case "i!1 = 0")
                          (("1" (assert) nil nil)
                           ("2" (hide -1 -2 -3 -4 -6)
                            (("2" (replace -1)
                              (("2" (hide -1)
                                (("2" (mult-by 3 "2")
                                  (("2" (assert)
                                    (("2" (assert)
                                      (("2"
                                        (grind-reals)
                                        (("2"
                                          (mult-by 2 "2*pi")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (cos_eq_0 formula-decl nil sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (turnRadius subtype "real_defs.abs(kinematics_turn.bank)"
    "(trig_basic.Tan?)")))
 (turnRadius_TCC2 0
  (turnRadius_TCC2-1 nil 3568737705
   ("" (skosimp*)
    (("" (case "abs(bank!1) > 0")
      (("1" (assert)
        (("1" (mult-cases -2)
          (("1" (lemma "tan_gt_0")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Tan? const-decl "bool" trig_basic trig)
    (tan const-decl "real" trig_basic trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tan_gt_0 formula-decl nil trig_ineq trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (turnRadius subtype
    "(number_fields.*(kinematics_turn.g, trig_basic.tan(real_defs.abs(kinematics_turn.bank))))"
    "nznum")))
 (turnRadius_TCC3 0
  (turnRadius_TCC3-1 nil 3568737705
   ("" (skeep)
    (("" (split)
      (("1" (cross-mult 1)
        (("1" (grind-reals)
          (("1" (lemma "tan_gt_0")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (cross-mult 1)
        (("2" (grind-reals)
          (("2" (lemma "tan_gt_0")
            (("2" (inst?) (("2" (grind-reals) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (zero_times1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (tan_gt_0 formula-decl nil trig_ineq trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Tan? const-decl "bool" trig_basic trig)
    (tan const-decl "real" trig_basic trig)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil))
   nil
   (turnRadius subtype
    "number_fields./(sq.sq(kinematics_turn.speed), (number_fields.*(kinematics_turn.g, trig_basic.tan(real_defs.abs(kinematics_turn.bank)))))"
    "posreal")))
 (turnRadius_TCC4 0
  (turnRadius_TCC4-1 nil 3569842357
   ("" (skeep)
    (("" (mult-cases -1)
      (("" (lemma "tan_gt_0")
        (("" (inst?)
          (("" (lemma "tan_eq_0") (("" (inst?) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tan const-decl "real" trig_basic trig)
    (Tan? const-decl "bool" trig_basic trig)
    (gn const-decl "posreal" util nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tan_eq_0 formula-decl nil trig_basic trig)
    (tan_gt_0 formula-decl nil trig_ineq trig))
   nil
   (turnRadius subtype
    "(number_fields.*(util.gn, trig_basic.tan(real_defs.abs(kinematics_turn.bank))))"
    "nznum")))
 (turnRadius_TCC5 0
  (turnRadius_TCC5-1 nil 3569842357
   ("" (skeep)
    (("" (case "abs(bank)>0")
      (("1" (lemma "tan_gt_0")
        (("1" (inst?) (("1" (grind-reals) nil nil)) nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pos_div_ge formula-decl nil real_props nil)
    (neg_times_ge formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (tan_gt_0 formula-decl nil trig_ineq trig))
   nil
   (turnRadius subtype
    "number_fields./(sq.sq(kinematics_turn.speed), (number_fields.*(util.gn, trig_basic.tan(real_defs.abs(kinematics_turn.bank)))))"
    "posreal")))
 (speedOfTurn_TCC1 0
  (speedOfTurn_TCC1-1 nil 3568998205
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (flatten)
        (("" (lemma "cos_eq_0")
          (("" (inst?)
            (("" (assert)
              (("" (skosimp*)
                (("" (typepred "abs(bank!1)")
                  (("" (name-replace ab "abs(bank!1)")
                    (("" (case "i!1 < 0")
                      (("1" (cancel-by -5 "pi") nil nil)
                       ("2" (case "i!1 = 0")
                        (("1" (assert) nil nil)
                         ("2" (replace -4)
                          (("2" (assert)
                            (("2" (mult-by 2 "pi") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (cos_eq_0 formula-decl nil sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil) (> const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (speedOfTurn subtype "real_defs.abs(kinematics_turn.bank)"
    "(trig_basic.Tan?)")))
 (speedOfTurn_TCC2 0
  (speedOfTurn_TCC2-1 nil 3568998205
   ("" (skosimp*)
    (("" (assert)
      (("" (mult-cases 2)
        (("" (mult-cases 2)
          (("" (typepred "abs(bank!1)")
            (("" (name-replace ab "abs(bank!1)")
              (("" (assert)
                (("" (case "ab>0")
                  (("1" (lemma "tan_gt_0")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (assert)
                    (("2" (case "ab=0")
                      (("1" (replace -1 3)
                        (("1" (lemma "tan_0") (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tan_gt_0 formula-decl nil trig_ineq trig)
    (tan_0 formula-decl nil trig_basic trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos_times_ge formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Tan? const-decl "bool" trig_basic trig)
    (tan const-decl "real" trig_basic trig) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (gn const-decl "posreal" util nil))
   nil
   (speedOfTurn subtype
    "number_fields.*(number_fields.*(util.gn, trig_basic.tan(real_defs.abs(kinematics_turn.bank))), kinematics_turn.R)"
    "nonneg_real")))
 (turnRate_TCC1 0
  (turnRate_TCC1-1 nil 3569070955 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil (turnRate subtype "kinematics_turn.bank" "nzreal")))
 (bankAngle_TCC1 0
  (bankAngle_TCC1-1 nil 3569070955
   ("" (skeep)
    (("" (lemma "atan_gt_0")
      (("" (inst?)
        (("" (assert) (("" (flatten) (("" (grind-reals) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((atan_gt_0 formula-decl nil atan trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gn const-decl "posreal" util nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (bankAngle subtype
    "atan.atan(number_fields./(sq.sq(kinematics_turn.speed), (number_fields.*(kinematics_turn.R, util.gn))))"
    "posreal_lt_pi2")))
 (bank_radius 0
  (bank_radius-1 nil 3569609444
   ("" (skosimp*) (("" (expand "bankAngle") (("" (propax) nil nil)) nil)) nil)
   ((bankAngle const-decl "posreal_lt_pi2" kinematics_turn nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (bank_speed_TCC1 0
  (bank_speed_TCC1-1 nil 3576861522
   ("" (skosimp*)
    (("" (expand "speedOfTurn")
      (("" (lift-if)
        (("" (ground)
          (("" (typepred "bank!1")
            (("" (hide -1)
              (("" (lemma "tan_gt_0")
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "sqrt_eq_0")
                      (("" (inst?)
                        (("" (split -1)
                          (("1" (replace -1)
                            (("1" (mult-cases -1)
                              (("1" (mult-cases -1) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (speedOfTurn const-decl "nnreal" kinematics_turn nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (zero_times3 formula-decl nil real_props nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Tan? const-decl "bool" trig_basic trig)
    (tan const-decl "real" trig_basic trig) (gn const-decl "posreal" util nil)
    (tan_gt_0 formula-decl nil trig_ineq trig)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil (bank_speed subtype "kinematics_turn.s" "posreal")))
 (bank_speed 0
  (bank_speed-1 nil 3576861689
   ("" (skosimp*)
    (("" (expand "speedOfTurn")
      (("" (assert) (("" (expand "bankAngle") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (speedOfTurn const-decl "nnreal" kinematics_turn nil)
    (bankAngle const-decl "posreal_lt_pi2" kinematics_turn nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (delta_clockwise 0
  (delta_clockwise-3 " " 3578843421
   ("" (skosimp*)
    (("" (case "alpha!1 < 2*pi*floor(beta!1/(2*pi))")
      (("1" (lemma "to2pi_near_sep")
        (("1" (inst -1 "alpha!1" "beta!1")
          (("1" (swap-rel -4)
            (("1" (expand "TURN_RIGHT")
              (("1" (expand "util_turnDelta")
                (("1" (expand "util_turnDelta")
                  (("1" (expand "abs")
                    (("1" (expand "util_clockwise")
                      (("1"
                        (name-replace "pfb"
                         "2 * pi * floor(beta!1 / (2 * pi))")
                        (("1" (assert)
                          (("1" (expand "abs") (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "to2pi_near_same")
        (("2" (inst -1 "alpha!1" "beta!1")
          (("2" (expand "TURN_RIGHT")
            (("2" (expand "util_turnDelta")
              (("2" (expand "util_turnDelta")
                (("2" (expand "util_clockwise")
                  (("2" (expand "abs")
                    (("2"
                      (name-replace "pfb" "2 * pi * floor(beta!1 / (2 * pi))")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (TURN_RIGHT const-decl "boolean" util nil)
    (util_clockwise const-decl "bool" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (util_turnDelta const-decl "nnreal_le_pi" util nil)
    (util_turnDelta const-decl "nnreal_le_2pi" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (to2pi_near_sep formula-decl nil to2pi trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (to2pi_near_same formula-decl nil to2pi trig))
   shostak)
  (delta_clockwise-2 "()" 3570906535
   ("" (skosimp*)
    (("" (expand "TURN_RIGHT")
      (("" (expand "util_turnDelta")
        (("" (expand "util_clockwise")
          (("" (expand "util_turnDelta")
            (("" (typepred "to2pi(alpha!1)")
              (("" (typepred "to2pi(beta!1)")
                (("" (typepred "abs(to2pi(alpha!1) - to2pi(beta!1))")
                  (("" (assert)
                    (("" (move-terms -9 L 1)
                      (("" (permute-terms -9 (2 3))
                        (("" (case "to2pi(alpha!1)>to2pi(beta!1)")
                          (("1" (expand "abs")
                            (("1" (assert)
                              (("1"
                                (case "to2pi(alpha!1) - to2pi(beta!1) <= pi")
                                (("1" (assert)
                                  (("1" (lemma "to2pi_neg")
                                    (("1"
                                      (inst -1 "to2pi(beta!1)-to2pi(alpha!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "to2pi_to2pi_sub")
                                          (("1"
                                            (inst
                                             -1
                                             "alpha!1"
                                             "to2pi(beta!1)")
                                            (("1"
                                              (lemma "to2pi_pos")
                                              (("1"
                                                (inst
                                                 -1
                                                 "to2pi(alpha!1)-to2pi(beta!1)")
                                                (("1"
                                                  (assert)
                                                  (("1" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (delta_clockwise-1 nil 3569847751
   ("" (skeep) (("" (expand "util_turnDelta") (("" (postpone) nil nil)) nil))
    nil)
   nil shostak))
 (turnTime_TCC1 0
  (turnTime_TCC1-1 nil 3569326947 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (nnreal_le_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (ground_speed const-decl "nnreal" track_3D nil)
    (track const-decl "nnreal_lt_2pi" track_3D nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (turnTime subtype "kinematics_turn.omega" "nznum")))
 (turnTime_TCC2 0
  (turnTime_TCC2-1 nil 3569843856 ("" (subtype-tcc) nil nil)
   ((real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (ground_speed const-decl "nnreal" track_3D nil)
    (track const-decl "nnreal_lt_2pi" track_3D nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil (turnTime subtype "kinematics_turn.omega" "nznum")))
 (turnTimeAlt_TCC1 0
  (turnTimeAlt_TCC1-1 nil 3639900982 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil (turnTimeAlt subtype "kinematics_turn.omega" "nznum")))
 (turnTimeAlt_def 0
  (turnTimeAlt_def-1 nil 3639900983
   ("" (skeep)
    (("" (expand "turnTime")
      (("" (expand "turnTimeAlt") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (turnTime const-decl "nnreal" kinematics_turn nil)
    (turnTimeAlt const-decl "nnreal" kinematics_turn nil))
   shostak))
 (turnOmega_TCC1 0
  (turnOmega_TCC1-1 nil 3610359934 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (ground_speed const-decl "nnreal" track_3D nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (turnOmega subtype "kinematics_turn.omega" "nznum")))
 (turnOmega_start 0
  (turnOmega_start-1 nil 3635095332
   ("" (skeep)
    (("" (typepred (v0))
      (("" (expand "turnOmega")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (ground) nil nil)
             ("2" (flatten)
              (("2" (case "vect2(v0)`x=0 AND vect2(v0)`y=0")
                (("1" (hide (1 2))
                  (("1" (grind) (("1" (decompose-equality 1) nil nil)) nil))
                  nil)
                 ("2" (expand "trk")
                  (("2" (replaces 1)
                    (("2" (rewrite "track.sin_track")
                      (("2" (rewrite "track.cos_track")
                        (("2" (expand "ground_speed")
                          (("2" (split 2)
                            (("1" (decompose-equality 1) nil nil)
                             ("2" (decompose-equality 1)
                              (("1" (expand "vect2")
                                (("1" (cross-mult) nil nil)) nil)
                               ("2" (cross-mult)
                                (("2" (expand "vect2")
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (sin_track formula-decl nil track nil)
    (ground_speed_nzv application-judgement "posreal" track_3D nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ground_speed const-decl "nnreal" track_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (cos_track formula-decl nil track nil)
    (TRUE const-decl "bool" booleans nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (scal_0 formula-decl nil vectors_3D vectors)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (turnOmega const-decl "[Vect3, Vect3]" kinematics_turn nil))
   shostak))
 (turnOmegaAT_TCC1 0
  (turnOmegaAT_TCC1-1 nil 3635687028 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors))
   nil
   (turnOmegaAT subtype "vect_3D_2D.vect2(kinematics_turn.v0)" "Nz_vect2")))
 (turnOmegaAT_TCC2 0
  (turnOmegaAT_TCC2-1 nil 3635687028 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (add_track const-decl
     "{w: Vect2 | w = trkgs2vect(track(v) + theta, norm(v))}" track nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_real_is_real application-judgement "real" reals nil))
   nil (turnOmegaAT subtype "kinematics_turn.omega" "nznum")))
 (turnOmega_equal 0
  (turnOmega_equal-2 nil 3708426211
   ("" (skeep)
    (("" (expand "turnOmega")
      (("" (expand "turnOmegaAT")
        (("" (lift-if 1)
          (("" (ground)
            (("" (typepred "add_track(vect2(v0), omega * t)")
              (("" (replaces -1)
                (("" (expand "trkgs2vect")
                  (("" (simplify 2)
                    (("" (expand "ground_speed")
                      (("" (case-replace "trk(vect2(v0)) = track(vect2(v0))")
                        (("1" (rewrite "track.cos_track")
                          (("1" (rewrite "track.sin_track")
                            (("1" (ground)
                              (("1" (field 1)
                                (("1" (expand "vect2" 1 1)
                                  (("1" (ground) (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (field 1)
                                (("2" (expand "vect2" 1 2)
                                  (("2" (grind) nil nil)) nil))
                                nil)
                               ("3" (grind) nil nil) ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred (v0))
                          (("2" (expand "trk")
                            (("2" (lift-if 1)
                              (("2" (split 1)
                                (("1" (flatten)
                                  (("1" (hide 4)
                                    (("1" (expand "zero")
                                      (("1"
                                        (ground)
                                        (("1" (decompose-equality 2) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (ground_speed_nzv application-judgement "posreal" track_3D nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (turnOmega const-decl "[Vect3, Vect3]" kinematics_turn nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (add_track const-decl
     "{w: Vect2 | w = trkgs2vect(track(v) + theta, norm(v))}" track nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ground_speed const-decl "nnreal" track_3D nil)
    (cos_track formula-decl nil track nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (atan2 const-decl "real" atan2 trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (sin const-decl "real" sincos_def trig)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin_track formula-decl nil track nil)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (TRUE const-decl "bool" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (turnOmegaAT const-decl "[Vect3, Vect3]" kinematics_turn nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (turnOmega_equal-1 nil 3635687091
   ("" (skeep)
    (("" (expand "turnOmega")
      (("" (expand "turnOmegaAT")
        (("" (lift-if 1)
          (("" (ground)
            (("" (typepred "add_track(vect2(v0), omega * t)")
              (("" (replaces -1)
                (("" (expand "trkgs2vect")
                  (("" (simplify 2)
                    (("" (expand "ground_speed")
                      (("" (case-replace "trk(vect2(v0)) = track(vect2(v0))")
                        (("1" (rewrite "cos_track")
                          (("1" (rewrite "sin_track")
                            (("1" (ground)
                              (("1" (field 1)
                                (("1" (expand "vect2" 1 1)
                                  (("1" (ground) (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (field 1)
                                (("2" (expand "vect2" 1 2)
                                  (("2" (grind) nil nil)) nil))
                                nil)
                               ("3" (grind) nil nil) ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred (v0))
                          (("2" (expand "trk")
                            (("2" (lift-if 1)
                              (("2" (split 1)
                                (("1" (flatten)
                                  (("1" (hide 4)
                                    (("1" (expand "zero")
                                      (("1"
                                        (ground)
                                        (("1" (decompose-equality 2) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ground_speed_nzv application-judgement "posreal" track_3D nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (add_track const-decl
     "{w: Vect2 | w = trkgs2vect(track(v) + theta, norm(v))}" track nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (ground_speed const-decl "nnreal" track_3D nil)
    (cos_track formula-decl nil track nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Integral const-decl "real" integral_def analysis)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (atan2 const-decl "real" atan2 trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (* const-decl "Vector" vectors_2D vectors)
    (sin const-decl "real" sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (sin_track formula-decl nil track nil)
    (trk const-decl "nnreal_lt_2pi" track nil))
   nil))
 (center_test_3 0
  (center_test_3-1 nil 3603618218
   ("" (expand "center")
    (("" (expand "zero")
      (("" (rewrite "cos_pi4")
        (("" (rewrite "sin_pi4") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (sin_pi4 formula-decl nil trig_values trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (npreal_div_posreal_is_npreal application-judgement "npreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_pi4 formula-decl nil trig_values trig)
    (center const-decl "Vect2" kinematics_turn nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (center_test_4 0
  (center_test_4-1 nil 3603618290
   ("" (expand "zero")
    (("" (expand "center")
      (("" (rewrite "cos_pi4")
        (("" (rewrite "sin_pi4") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (center const-decl "Vect2" kinematics_turn nil)
    (sin_pi4 formula-decl nil trig_values trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (npreal_div_posreal_is_npreal application-judgement "npreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_pi4 formula-decl nil trig_values trig)
    (zero const-decl "Vector" vectors_2D vectors))
   shostak))
 (center_test_TCC1 0
  (center_test_TCC1-1 nil 3603613458
   ("" (expand "zero") (("" (grind) nil nil)) nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors))
   nil (center_test subtype "(# x := 0, y := 1, z := 0 #)" "nzhVect3")))
 (center_test 0
  (center_test-1 nil 3603613459
   ("" (expand "center")
    (("" (expand "ground_speed")
      (("" (expand "trk")
        ((""
          (case "vect2((# x := 0, y := 1, z := 0 #))`x = 0 AND
              vect2((# x := 0, y := 1, z := 0 #))`y = 0")
          (("1" (hide +) (("1" (grind) nil nil)) nil)
           ("2" (replaces 1)
            (("2" (grind)
              (("1" (rewrite "sin_0") (("1" (assert) nil nil)) nil)
               ("2" (rewrite "cos_0") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ground_speed const-decl "nnreal" track_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (track const-decl "nnreal_lt_2pi" track nil)
    (atan2 const-decl "real" atan2 trig) (atan_0 formula-decl nil atan trig)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_0 formula-decl nil sincos_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_0 formula-decl nil sincos_def trig)
    (TRUE const-decl "bool" booleans nil)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (center const-decl "Vect2" kinematics_turn nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (center_test2 0
  (center_test2-1 nil 3603613601
   ("" (expand "center")
    (("" (expand "ground_speed")
      (("" (expand "trk")
        ((""
          (case "vect2((# x := 0, y := 1, z := 0 #))`x = 0 AND
                     vect2((# x := 0, y := 1, z := 0 #))`y = 0")
          (("1" (hide +) (("1" (grind) nil nil)) nil)
           ("2" (rewrite "cos_0")
            (("2" (rewrite "sin_0")
              (("2" (assert)
                (("2" (grind)
                  (("1" (rewrite "sin_0") (("1" (assert) nil nil)) nil)
                   ("2" (rewrite "cos_0") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ground_speed const-decl "nnreal" track_3D nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (sin_0 formula-decl nil sincos_def trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (atan2 const-decl "real" atan2 trig) (atan_0 formula-decl nil atan trig)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_0 formula-decl nil sincos_def trig)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (center const-decl "Vect2" kinematics_turn nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (turnOmega_thm 0
  (turnOmega_thm-1 nil 3601310254
   ("" (skosimp*)
    (("" (rewrite "dist_norm")
      (("" (expand "turnOmega")
        (("" (expand "vect2")
          (("" (expand "center")
            (("" (expand "-")
              (("" (expand "vect2")
                (("" (name-replace "v" "groundSpeed(v0!1) / omega!1")
                  (("" (assert)
                    (("" (name-replace "trk" "track(v0!1)")
                      ((""
                        (case-replace
                         "cos(trk) * v - cos(trk + omega!1 * t!1) * v -  v * cos(trk) = - cos(trk + omega!1 * t!1) * v ")
                        (("1" (hide -1)
                          (("1"
                            (case-replace
                             "sin(trk + omega!1 * t!1) * v - sin(trk) * v + v * sin(trk) = sin(trk + omega!1 * t!1) * v ")
                            (("1" (name "A" "trk + omega!1 * t!1")
                              (("1" (replace -1)
                                (("1" (hide -1 -2)
                                  (("1" (lemma "sqv_eq_norm_eq")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (expand "sqv")
                                            (("1"
                                              (expand "*")
                                              (("1"
                                                (expand "sq")
                                                (("1"
                                                  (lemma "sin2_cos2")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (expand "sq")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dist_norm formula-decl nil distance_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (turnOmega const-decl "[Vect3, Vect3]" kinematics_turn nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (center const-decl "Vect2" kinematics_turn nil)
    (- const-decl "Vector" vectors_2D vectors)
    (ground_speed const-decl "nnreal" track_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (track const-decl "nnreal_lt_2pi" track_3D nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos const-decl "real" sincos_def trig) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (* const-decl "real" vectors_2D vectors)
    (sin2_cos2 formula-decl nil sincos_def trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq_abs formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_eq_norm_eq formula-decl nil vectors_2D vectors)
    (sin const-decl "real" sincos_def trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (ground_speed_nzv application-judgement "posreal" track_3D nil))
   shostak))
 (turnOmega_vel 0
  (turnOmega_vel-1 nil 3630761663
   ("" (skeep)
    (("" (split)
      (("1" (expand "turnOmega")
        (("1" (expand "ground_speed")
          (("1" (lemma "vectors_2D.norm_scal")
            (("1"
              (inst - "norm(vect2(v0))" "(# x := sin(trk(v0) + omega * t),
                        y := cos(trk(v0) + omega * t) #)")
              (("1" (expand "vect2" + 1)
                (("1" (expand "*" -1)
                  (("1" (replaces -1)
                    (("1" (expand "abs")
                      (("1" (assert)
                        (("1" (typepred "norm(vect2(v0))")
                          (("1" (assert)
                            (("1" (lemma "sin2_cos2")
                              (("1" (inst?)
                                (("1" (grind :exclude ("sin" "cos" "vect2"))
                                  nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "turnOmega")
        (("2" (expand "center")
          (("2" (expand "vect2" + 1)
            (("2" (expand "-")
              (("2" (assert)
                (("2" (expand "vect2")
                  (("2" (expand "*") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ground_speed const-decl "nnreal" track_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (sin const-decl "real" sincos_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin2_cos2 formula-decl nil sincos_def trig)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (track const-decl "nnreal_lt_2pi" track nil)
    (atan2 const-decl "real" atan2 trig)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (TRUE const-decl "bool" booleans nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (turnOmega const-decl "[Vect3, Vect3]" kinematics_turn nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (ground_speed_nzv application-judgement "posreal" track_3D nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (center const-decl "Vect2" kinematics_turn nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (turnOmega_TCC2 0
  (turnOmega_TCC2-1 nil 3610359934 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (groundSpeed const-decl "nnreal" Velocity nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (turnOmega subtype "kinematics_turn.omega" "nznum")))
 (turnOmega_test 0
  (turnOmega_test-1 nil 3603612980
   ("" (expand "turnOmega")
    (("" (rewrite "cos_plus")
      (("" (rewrite "sin_plus")
        (("" (expand "trk")
          (("" (assert)
            (("" (case "norm((# x := 0, y := 1 #)) = 1")
              (("1" (expand "groundSpeed")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (rewrite "cos_pi")
                      (("1" (assert)
                        (("1" (rewrite "sin_pi")
                          (("1" (assert)
                            (("1" (grind :exclude "cos")
                              (("1" (rewrite "sin_0") (("1" (assert) nil nil))
                                nil)
                               ("2" (rewrite "cos_0") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "norm")
                  (("2" (expand "sqv")
                    (("2" (expand "*") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_plus formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (cos_pi formula-decl nil sincos trig)
    (sin_pi formula-decl nil sincos trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (atan2 const-decl "real" atan2 trig) (atan_0 formula-decl nil atan trig)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_0 formula-decl nil sincos_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_0 formula-decl nil sincos_def trig)
    (groundSpeed const-decl "nnreal" Velocity nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_plus formula-decl nil sincos trig)
    (turnOmega const-decl "[Vect2, Vect2]" kinematics_turn nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (turnOmega_test2 0
  (turnOmega_test2-1 nil 3603613337
   ("" (expand "turnOmega")
    (("" (rewrite "cos_plus")
      (("" (rewrite "sin_plus")
        (("" (expand "trk")
          (("" (assert)
            (("" (case "norm((# x := 0, y := 1 #)) = 1")
              (("1" (expand "groundSpeed")
                (("1" (replace -1)
                  (("1" (rewrite "cos_neg")
                    (("1" (rewrite "sin_neg")
                      (("1" (assert)
                        (("1" (rewrite "cos_pi")
                          (("1" (assert)
                            (("1" (rewrite "sin_pi")
                              (("1" (assert)
                                (("1" (grind)
                                  (("1" (rewrite "sin_0")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (rewrite "cos_0")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_plus formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sin_neg formula-decl nil sincos_def trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_pi formula-decl nil sincos trig)
    (sin_pi formula-decl nil sincos trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (atan2 const-decl "real" atan2 trig) (atan_0 formula-decl nil atan trig)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_0 formula-decl nil sincos_def trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_0 formula-decl nil sincos_def trig)
    (cos_neg formula-decl nil sincos_def trig)
    (groundSpeed const-decl "nnreal" Velocity nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_plus formula-decl nil sincos trig)
    (turnOmega const-decl "[Vect2, Vect2]" kinematics_turn nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (turnOmega_test3 0
  (turnOmega_test3-2 nil 3603617506
   ("" (expand "turnOmega")
    (("" (rewrite "cos_plus")
      (("" (rewrite "sin_plus")
        (("" (expand "trk")
          (("" (assert)
            (("" (case "norm((# x := 0, y := 1 #)) = 1")
              (("1" (expand "groundSpeed")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (rewrite "cos_pi2")
                      (("1" (rewrite "sin_pi2")
                        (("1" (assert)
                          (("1" (grind :exclude ("cos" "sin"))
                            (("1" (rewrite "cos_0")
                              (("1" (rewrite "sin_0") (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "cos_0")
                              (("2" (rewrite "sin_0") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_plus formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (cos_pi2 formula-decl nil sincos trig)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_0 formula-decl nil sincos_def trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_0 formula-decl nil sincos_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals) (atan_0 formula-decl nil atan trig)
    (atan2 const-decl "real" atan2 trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (sin_pi2 formula-decl nil sincos trig)
    (groundSpeed const-decl "nnreal" Velocity nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_plus formula-decl nil sincos trig)
    (turnOmega const-decl "[Vect2, Vect2]" kinematics_turn nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil)
  (turnOmega_test3-1 nil 3603617495 ("" (postpone) nil nil) nil shostak))
 (turnOmega_test4 0
  (turnOmega_test4-1 nil 3603617602
   ("" (expand "turnOmega")
    (("" (rewrite "cos_plus")
      (("" (rewrite "sin_plus")
        (("" (expand "trk")
          (("" (assert)
            (("" (case "norm((# x := 0, y := 1 #)) = 1")
              (("1" (expand "groundSpeed")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (lemma "cos_neg")
                      (("1" (inst - "pi/2")
                        (("1" (replaces -1)
                          (("1" (lemma "sin_neg")
                            (("1" (inst - "pi/2")
                              (("1" (replaces -1)
                                (("1" (rewrite "cos_pi2")
                                  (("1" (rewrite "sin_pi2")
                                    (("1" (assert)
                                      (("1"
                                        (grind :exclude ("cos" "sin"))
                                        (("1"
                                          (rewrite "sin_0")
                                          (("1"
                                            (rewrite "cos_0")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "cos_0")
                                          (("2"
                                            (rewrite "sin_0")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_plus formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (trk const-decl "nnreal_lt_2pi" track nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (cos_neg formula-decl nil sincos_def trig)
    (TRUE const-decl "bool" booleans nil)
    (cos_pi2 formula-decl nil sincos trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_0 formula-decl nil sincos_def trig)
    (cos_0 formula-decl nil sincos_def trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals) (atan_0 formula-decl nil atan trig)
    (atan2 const-decl "real" atan2 trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (sin_pi2 formula-decl nil sincos trig)
    (sin_neg formula-decl nil sincos_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (groundSpeed const-decl "nnreal" Velocity nil)
    (npreal_div_posreal_is_npreal application-judgement "npreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_plus formula-decl nil sincos trig)
    (turnOmega const-decl "[Vect2, Vect2]" kinematics_turn nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil)))


(kinematics_vs_accel
 (vsConstAccelGoalPos_TCC1 0
  (vsConstAccelGoalPos_TCC1-2 "" 3790106820
   ("" (skeep*)
    (("" (expand "vsConstAccelTime")
      (("" (hide -2)
        (("" (typepred "accel")
          (("" (hide -1)
            (("" (typepred "abs(v0`z - goalVs)")
              (("" (hide -2 -3)
                (("" (name-replace "av" "abs(v0`z - goalVs)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (vsConstAccelGoalPos subtype "kinematics_vs_accel.goalt" "nnreal"))
  (vsConstAccelGoalPos_TCC1-1 nil 3579452170
   ("" (skeep*)
    (("" (expand "vsConstAccelTime")
      (("" (hide -2)
        (("" (typepred "accel")
          (("" (hide -1)
            (("" (typepred "abs(v0`z - goalVs)")
              (("" (hide -2 -3)
                (("" (name-replace "av" "abs(v0`z - goalVs)")
                  (("" (replace -3)
                    (("" (hide -3) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (vsConstAccelTime const-decl "real" kinematics_vs_accel nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (vsConstAccelGoalPos subtype "kinematics_vs_accel.goalt" "nnreal")))
 (equals_integral 0
  (equals_integral-1 nil 3611656745
   ("" (skosimp*)
    (("" (expand "vsAccelUntilVelocity")
      (("" (expand "vsAccelUntil_Vel")
        ((""
          (case "v0!1`z +
                    vsSign(v0!1, goalVs!1) *
                     min(t!1, vsConstAccelTime(v0!1, goalVs!1, accel!1))
                     * accel!1 = IF (goalVs!1 - v0!1`z) / accel!1 >= 0
                      THEN velo(v0!1`z, (goalVs!1 - v0!1`z) / accel!1,
                                accel!1)
                               (t!1)
                    ELSE velo(v0!1`z, -(goalVs!1 - v0!1`z) / accel!1,
                              -accel!1)
                             (t!1)
                    ENDIF")
          (("1" (ground) (("1" (grind) nil nil)) nil)
           ("2" (hide 2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "vsSign")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (lemma "L1")
                          (("1" (expand "min")
                            (("1"
                              (case-replace
                               "vsConstAccelTime(v0!1, goalVs!1, accel!1) = (goalVs!1 - v0!1`z) / accel!1")
                              (("1"
                                (inst -2 "v0!1`z"
                                 "(goalVs!1 - v0!1`z) / accel!1" "t!1"
                                 "max((goalVs!1 - v0!1`z) / accel!1, t!1)"
                                 "accel!1")
                                (("1" (prop)
                                  (("1" (replace -1)
                                    (("1" (lift-if)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (expand "vsConstAccelTime")
                                (("2" (hide (-1 2))
                                  (("2" (expand "abs") (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (move-terms 1 L 1)
                          (("2" (div-by 1 "accel!1") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "vsSign")
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (move-terms 1 L 1)
                          (("1" (move-terms -1 L 1)
                            (("1" (div-by -1 "accel!1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (lemma "L1")
                          (("2" (expand "min")
                            (("2"
                              (case-replace
                               "vsConstAccelTime(v0!1, goalVs!1, accel!1)=-(goalVs!1 - v0!1`z) / accel!1")
                              (("1"
                                (inst -2 "v0!1`z"
                                 "-(goalVs!1 - v0!1`z) / accel!1" "t!1"
                                 "max(-(goalVs!1 - v0!1`z) / accel!1, t!1)"
                                 "-accel!1")
                                (("1" (prop)
                                  (("1" (replace -1)
                                    (("1" (lift-if)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (expand "vsConstAccelTime")
                                (("2" (expand "abs") (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (flatten) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (vsAccelUntilVelocity const-decl "Vect3" kinematics_vs_accel nil)
    (velo const-decl "real" vsAccel nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vsConstAccelTime const-decl "real" kinematics_vs_accel nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vsSign const-decl "Sign" kinematics_vs_accel nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (accel const-decl "[real -> real]" vsAccel nil)
    (Integral const-decl "real" integral_def analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (L1 formula-decl nil vsAccel nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (vsAccelUntil_Vel const-decl "Vect3" vsAccel nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (equals_integral_pos 0
  (equals_integral_pos-1 nil 3611934916
   ("" (skosimp*)
    (("" (expand "vsAccelUntilPos")
      (("" (expand "vsAccelUntil_Pos")
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "vsConstAccelPos")
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "vsConstAccelTime")
                        (("1" (expand "abs")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (lemma "L2")
                                (("1"
                                  (inst -1 "v0!1`z" "s0!1`z"
                                   "(goalVs!1 - v0!1`z) / accel!1" "t!1"
                                   "(goalVs!1 - v0!1`z) / accel!1" "accel!1")
                                  (("1" (prop)
                                    (("1" (replace -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "sq")
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "expt")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "vsSign")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (grind)
                                                                (("2"
                                                                  (cross-mult
                                                                   -4)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil)
                                     ("4" (assert) nil nil)
                                     ("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "vsConstAccelTime")
                      (("2" (expand "abs")
                        (("2" (lift-if)
                          (("2" (flatten)
                            (("2" (prop)
                              (("1" (assert) nil nil)
                               ("2" (lemma "L2")
                                (("2"
                                  (inst -1 "v0!1`z" "s0!1`z"
                                   "-(goalVs!1 - v0!1`z) / accel!1" "t!1"
                                   "-(goalVs!1 - v0!1`z) / accel!1"
                                   "-accel!1")
                                  (("2" (prop)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "vsSign")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (move-terms -1 R 1)
                                                      (("1"
                                                        (div-by -1 "accel!1")
                                                        (("1"
                                                          (typepred (t!1))
                                                          (("1"
                                                            (split-ineq -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil)
                                     ("4" (assert) nil nil)
                                     ("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "linear_pos")
                (("2" (split)
                  (("1" (expand "vsConstAccelGoalPos")
                    (("1" (expand "vsConstAccelPos") (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (expand "vsConstAccelGoalPos")
                    (("2" (expand "vsConstAccelPos") (("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (expand "vsConstAccelGoalPos")
                    (("3" (expand "vsConstAccelPos")
                      (("3" (lift-if)
                        (("3" (split)
                          (("1"
                            (case-replace
                             "(goalVs!1 - v0!1`z) / accel!1 = vsConstAccelTime(v0!1, goalVs!1, accel!1)")
                            (("1" (lemma "L2")
                              (("1"
                                (inst -1 "v0!1`z" "s0!1`z"
                                 "vsConstAccelTime(v0!1, goalVs!1, accel!1)"
                                 "t!1" "t!1" "accel!1")
                                (("1" (prop)
                                  (("1" (replace -1)
                                    (("1" (hide -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "vsSign")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (prop)
                                                  (("1" (grind) nil nil)
                                                   ("2"
                                                    (replace -1 :dir rl)
                                                    (("2"
                                                      (cross-mult -2)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (expand "vsConstAccelTime")
                                (("2" (expand "abs")
                                  (("2" (lift-if 3)
                                    (("2" (split 3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 3)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "vsSign")
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (lemma "L2")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "v0!1`z"
                                                         "s0!1`z"
                                                         "(goalVs!1 - v0!1`z) / accel!1"
                                                         "t!1"
                                                         "t!1"
                                                         "accel!1")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (lift-if -1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "vsConstAccelTime")
                              (("2" (expand "abs")
                                (("2" (lift-if 2)
                                  (("2" (prop)
                                    (("1" (assert) nil nil)
                                     ("2" (expand "vsSign")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (split-ineq -1)
                                            (("1"
                                              (lemma "L2")
                                              (("1"
                                                (inst
                                                 -1
                                                 "v0!1`z"
                                                 "s0!1`z"
                                                 "-(goalVs!1 - v0!1`z) / accel!1"
                                                 "t!1"
                                                 "t!1"
                                                 "-accel!1")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lift-if -1)
                                                    (("1"
                                                      (prop)
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil)
                                                   ("3" (assert) nil nil)
                                                   ("4" (assert) nil nil)
                                                   ("5" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (move-terms -1 R 1)
                                              (("2"
                                                (div-by -1 "accel!1")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "L2")
                                            (("2"
                                              (inst
                                               -1
                                               "v0!1`z"
                                               "s0!1`z"
                                               "-(goalVs!1 - v0!1`z) / accel!1"
                                               "t!1"
                                               "t!1"
                                               "-accel!1")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3" (assert) nil nil)
                                                 ("4" (assert) nil nil)
                                                 ("5" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vsAccelUntilPos const-decl "Vect3" kinematics_vs_accel nil)
    (vsConstAccelGoalPos const-decl "Vect3" kinematics_vs_accel nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (linear_pos const-decl "Vect3" util nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (Integral const-decl "real" integral_def analysis)
    (posit const-decl "real" vsAccel nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (vsSign const-decl "Sign" kinematics_vs_accel nil)
    (expt def-decl "real" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (L2 formula-decl nil vsAccel nil)
    (vsConstAccelTime const-decl "real" kinematics_vs_accel nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (vsConstAccelPos const-decl "Vect3" kinematics_vs_accel nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (vsAccelUntil_Pos const-decl "Vect3" vsAccel nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (reach_goalVs 0
  (reach_goalVs-1 nil 3618848047
   ("" (skeep)
    (("" (expand "vsAccelUntilVelocity")
      (("" (flatten)
        (("" (expand "min")
          (("" (lift-if 1)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "vsConstAccelTime")
                  (("1" (expand "vsSign")
                    (("1" (expand "abs")
                      (("1" (grind)
                        (("1" (cross-mult -1) nil nil)
                         ("2" (cross-mult -1) nil nil)
                         ("3" (split-ineq -2)
                          (("3" (both-sides "-" "goalVs" -2)
                            (("3" (div-by -2 "accel") (("3" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "vsConstAccelTime")
                  (("2" (expand "vsSign")
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten) (("1" (ground) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (vsAccelUntilVelocity const-decl "Vect3" kinematics_vs_accel nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (vsConstAccelTime const-decl "real" kinematics_vs_accel nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vsSign const-decl "Sign" kinematics_vs_accel nil))
   shostak))
 (gamma_TCC1 0
  (gamma_TCC1-1 nil 3612194345 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (gamma subtype "3"
    "{i: integers.int | booleans.OR(kinematics_vs_accel.t /= 0, reals.>=(i, 0))}")))
 (gamma_TCC2 0
  (gamma_TCC2-1 nil 3612194345 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil (gamma subtype "kinematics_vs_accel.Tr" "nznum")))
 (vsAccelUntilWithRampUp_TCC1 0
  (vsAccelUntilWithRampUp_TCC1-1 nil 3612194345 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (gamma const-decl "real" kinematics_vs_accel nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (vsAccelUntilWithRampUp subtype "2"
    "{i: integers.int | booleans.OR(kinematics_vs_accel.t /= 0, reals.>=(i, 0))}")))
 (vsAccelUntilWithRampUp_TCC2 0
  (vsAccelUntilWithRampUp_TCC2-1 nil 3612194345 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (gamma const-decl "real" kinematics_vs_accel nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (vsAccelUntilWithRampUp subtype "2"
    "{i: integers.int | booleans.OR(kinematics_vs_accel.t /= 0, reals.>=(i, 0))}")))
 (equals_integral_AUWRU 0
  (equals_integral_AUWRU-1 nil 3612633095
   ("" (skosimp*)
    (("" (expand "vsAccelUntilWithRampUp")
      (("" (lift-if)
        (("" (lemma "Integral_AUWRU_pos")
          (("" (lemma "Integral_AUWRU_vel")
            (("" (case "abs(goalVs!1 - v0!1`z) <= (vsAccel!1 / 2) * tRamp!1")
              (("1" (prop)
                (("1" (lemma "Integral_case1_vel")
                  (("1" (lemma "Integral_case1_pos")
                    (("1"
                      (inst -7 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1"
                       "tRamp!1" "t!1")
                      (("1"
                        (inst -1 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1"
                         "tRamp!1" "t!1")
                        (("1"
                          (inst -2 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1"
                           "t!1")
                          (("1"
                            (inst -6 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1"
                             "t!1")
                            (("1" (lift-if)
                              (("1" (prop)
                                (("1" (expand "linear_pos")
                                  (("1" (expand "vsAUWRU")
                                    (("1" (expand "mk_vect3")
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (skoletin -5)
                                            (("1"
                                              (lift-if -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (expand "gamma")
                                                      (("1"
                                                        (expand "vsSign")
                                                        (("1"
                                                          (expand "Sign")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split-ineq -8)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (expand "gamma")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand "deltaV")
                                                            (("2"
                                                              (expand
                                                               "vsSign")
                                                              (("2"
                                                                (expand
                                                                 "Sign")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -4)
                                          (("2"
                                            (skoletin -6)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if -1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (expand "vsSign")
                                                        (("1"
                                                          (expand "Sign")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split-ineq -8)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand "vsSign")
                                                            (("2"
                                                              (expand "abs")
                                                              (("2"
                                                                (decompose-equality
                                                                 2)
                                                                (("1"
                                                                  (lift-if 1)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "linear_pos")
                  (("2" (expand "vsAUWRU")
                    (("2" (expand "mk_vect3")
                      (("2" (split 2)
                        (("1"
                          (inst -4 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1"
                           "tRamp!1" "t!1")
                          (("1" (lift-if -4)
                            (("1" (lemma "Integral_case1_pos")
                              (("1"
                                (inst -1 "s0!1`z" "v0!1`z" "goalVs!1"
                                 "vsAccel!1" "tRamp!1" "t!1")
                                (("1" (skoletin)
                                  (("1" (prop)
                                    (("1" (replace -2)
                                      (("1"
                                        (hide (-7 -6 -5 -2))
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "deltaV")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (expand "gamma")
                                                (("2"
                                                  (expand "vsSign")
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (expand "deltaV")
                                                      (("2"
                                                        (expand "Sign")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (expand "split_fun2")
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "gamma")
                                              (("1"
                                                (expand "vsSign")
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (expand "Sign")
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "gamma")
                                              (("2"
                                                (expand "vsSign")
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (expand "Sign")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "gamma")
                                              (("3"
                                                (expand "vsSign")
                                                (("3"
                                                  (expand "abs")
                                                  (("3"
                                                    (expand "Sign")
                                                    (("3" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (decompose-equality 1)
                          (("2" (hide -4)
                            (("2"
                              (inst -3 "v0!1`z" "goalVs!1" "vsAccel!1"
                               "tRamp!1" "t!1")
                              (("2" (lift-if -3)
                                (("2" (prop)
                                  (("1" (replace -2)
                                    (("1" (lemma "Integral_case1_vel")
                                      (("1"
                                        (inst
                                         -1
                                         "v0!1`z"
                                         "goalVs!1"
                                         "vsAccel!1"
                                         "tRamp!1"
                                         "t!1")
                                        (("1"
                                          (skoletin)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "deltaV")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1")
                (("2"
                  (inst -2 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1"
                   "t!1")
                  (("2" (expand "vsAUWRU")
                    (("2" (replace -2)
                      (("2" (replace -1)
                        (("2" (hide -)
                          (("2" (lift-if)
                            (("2" (lift-if)
                              (("2" (lift-if)
                                (("2" (lift-if)
                                  (("2" (lift-if)
                                    (("2" (expand "split_fun2")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (expand "mk_vect3")
                                            (("2"
                                              (expand "vsSign")
                                              (("2"
                                                (expand "Sign")
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (decompose-equality
                                                             2)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             3)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (decompose-equality)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (decompose-equality)
                                                            (("4"
                                                              (grind)
                                                              (("4"
                                                                (split-ineq
                                                                 -2)
                                                                (("4"
                                                                  (grind)
                                                                  (("4"
                                                                    (cross-mult)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (cross-mult)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (split-ineq -2)
                                                            (("6"
                                                              (decompose-equality)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("7"
                                                            (decompose-equality)
                                                            nil
                                                            nil)
                                                           ("8"
                                                            (decompose-equality)
                                                            nil
                                                            nil)
                                                           ("9"
                                                            (grind)
                                                            (("9"
                                                              (split-ineq -1)
                                                              (("9"
                                                                (grind)
                                                                (("9"
                                                                  (cross-mult
                                                                   4)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("10"
                                                            (decompose-equality)
                                                            (("10"
                                                              (split-ineq -1)
                                                              (("10"
                                                                (cross-mult 5)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("11"
                                                            (decompose-equality
                                                             4)
                                                            nil
                                                            nil)
                                                           ("12"
                                                            (decompose-equality)
                                                            nil
                                                            nil)
                                                           ("13"
                                                            (decompose-equality)
                                                            nil
                                                            nil)
                                                           ("14"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (vsAccelUntilWithRampUp const-decl "[Vect3, Vect3]" kinematics_vs_accel
     nil)
    (Integral_AUWRU_pos formula-decl nil vsAccel nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deltaV skolem-const-decl
     "{n: nonneg_real | n >= goalVs!1 - v0!1`z AND n >= -(goalVs!1 - v0!1`z)}"
     kinematics_vs_accel nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (deltaV skolem-const-decl
     "{n: nonneg_real | n >= goalVs!1 - v0!1`z AND n >= -(goalVs!1 - v0!1`z)}"
     kinematics_vs_accel nil)
    (Integral_case1_vel formula-decl nil vsAccel nil)
    (nnreal type-eq-decl nil real_types nil)
    (split_fun2 const-decl "[T -> real]" integral_split_fun analysis)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (linear_pos const-decl "Vect3" util nil)
    (mk_vect3 macro-decl "Vect3" vectors_3D_def vectors)
    (vsAccel!1 skolem-const-decl "posreal" kinematics_vs_accel nil)
    (tRamp!1 skolem-const-decl "posreal" kinematics_vs_accel nil)
    (v0!1 skolem-const-decl "Vect3" kinematics_vs_accel nil)
    (goalVs!1 skolem-const-decl "real" kinematics_vs_accel nil)
    (sign_not_zero application-judgement "nzreal" vsAccel nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vsAUWRU_pos const-decl "real" vsAccel nil)
    (expt def-decl "real" exponentiation nil)
    (vsAUWRU_case1_vel const-decl "real" vsAccel nil)
    (vsAUWRU_vel const-decl "real" vsAccel nil)
    (Integral const-decl "real" integral_def analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (deltaV skolem-const-decl
     "{n: nonneg_real | n >= goalVs!1 - v0!1`z AND n >= -(goalVs!1 - v0!1`z)}"
     kinematics_vs_accel nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gamma const-decl "real" kinematics_vs_accel nil)
    (vsSign const-decl "Sign" kinematics_vs_accel nil)
    (^ const-decl "real" exponentiation nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Sign const-decl "real" vsAccel nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (vsAUWRU_case1_pos const-decl "real" vsAccel nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (vsAUWRU const-decl "[Vect3, Vect3]" vsAccel nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Integral_case1_pos formula-decl nil vsAccel nil)
    (rho const-decl "real" kinematics_vs_accel nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (Integral_AUWRU_vel formula-decl nil vsAccel nil))
   shostak))
 (reach_goal_AUWRU 0
  (reach_goal_AUWRU-1 nil 3624976695
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (skoletin)
          (("" (prop)
            (("" (expand "vsAccelUntilWithRampUp")
              (("" (lift-if 1)
                (("" (split 1)
                  (("1" (lift-if -2)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (ground)
                              (("1" (expand "deltaV")
                                (("1" (replace -3)
                                  (("1" (split-ineq -1)
                                    (("1" (lemma "sq_sqrt")
                                      (("1"
                                        (inst
                                         -1
                                         "2 * (abs(goalVs - v0`z) * tRamp) / vsAccel")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (expand "sq")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lift-if -2)
                      (("2" (split -2)
                        (("1" (flatten) (("1" (ground) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (split 3)
                            (("1" (flatten)
                              (("1" (replaces -2)
                                (("1" (flip-ineq 2)
                                  (("1" (cross-mult -3)
                                    (("1" (div-by -3 "vsAccel")
                                      (("1"
                                        (simplify -3)
                                        (("1"
                                          (cancel-by -1 "vsAccel")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (split 2)
                                (("1" (flatten)
                                  (("1" (ground) (("1" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (vsSign const-decl "Sign" kinematics_vs_accel nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (vsAccelUntilWithRampUp const-decl "[Vect3, Vect3]" kinematics_vs_accel
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (expt def-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (deltaV skolem-const-decl
     "{n: nonneg_real | n >= goalVs - v0`z AND n >= -(goalVs - v0`z)}"
     kinematics_vs_accel nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak))
 (vsAccelPos_TCC1 0
  (vsAccelPos_TCC1-1 nil 3607084872 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (vsAccelPos subtype
    "(# x := (number_fields.+)(kinematics_vs_accel.so3`x, number_fields.*(kinematics_vs_accel.t, kinematics_vs_accel.vo3`x)), y := (number_fields.+)(kinematics_vs_accel.so3`y, number_fields.*(kinematics_vs_accel.t, kinematics_vs_accel.vo3`y)), z := (number_fields.+)((number_fields.+)(kinematics_vs_accel.so3`z, number_fields.*(kinematics_vs_accel.vo3`z, kinematics_vs_accel.t)), number_fields.*(number_fields.*(number_fields.*((number_fields./(5, 10)), kinematics_vs_accel.a), kinematics_vs_accel.t), kinematics_vs_accel.t)) #)"
    "{w: vectors_3D_def.Vect3 | booleans.AND(vect_3D_2D.vect2(w) = (vectors_2D.+)(vect_3D_2D.vect2(kinematics_vs_accel.so3), vectors_2D.*(kinematics_vs_accel.t, vect_3D_2D.vect2(kinematics_vs_accel.vo3))), w`z = (number_fields.+)((number_fields.+)(kinematics_vs_accel.so3`z, number_fields.*(kinematics_vs_accel.vo3`z, kinematics_vs_accel.t)), number_fields.*(1/2, number_fields.*(number_fields.*(kinematics_vs_accel.a, kinematics_vs_accel.t), kinematics_vs_accel.t))))}")))
 (vsAccel_TCC1 0
  (vsAccel_TCC1-1 nil 3607084872 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (vsAccelPos const-decl "{w: Vect3 |
   vect2(w) = vect2(so3) + t * vect2(vo3) AND
    w`z = so3`z + vo3`z * t + 0.5 * a * t * t}" kinematics_vs_accel nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vsAccel subtype "(kinematics_vs_accel.pres, kinematics_vs_accel.vres)"
    "{w: [vectors_3D_def.Vect3, vectors_3D_def.Vect3] | booleans.AND(vect_3D_2D.vect2(w`1) = (vectors_2D.+)(vect_3D_2D.vect2(kinematics_vs_accel.so), vectors_2D.*(kinematics_vs_accel.t, vect_3D_2D.vect2(kinematics_vs_accel.vo))), booleans.AND(w`1`z = (number_fields.+)((number_fields.+)(kinematics_vs_accel.so`z, number_fields.*(kinematics_vs_accel.vo`z, kinematics_vs_accel.t)), number_fields.*(1/2, number_fields.*(number_fields.*(kinematics_vs_accel.a, kinematics_vs_accel.t), kinematics_vs_accel.t))), booleans.AND(vect_3D_2D.vect2(w`2) = vect_3D_2D.vect2(kinematics_vs_accel.vo), w`2`z = (number_fields.+)(kinematics_vs_accel.vo`z, number_fields.*(kinematics_vs_accel.a, kinematics_vs_accel.t)))))}"))))


Kinematics: THEORY
BEGIN

  IMPORTING vectors@vectors_3D, Velocity
  IMPORTING trig@pi_def
  
  % /** 
  %  * Position/Velocity after turning (does not compute altitude!!)
  %  * 
  %  * Note: will be used in a context where altitude is computing subsequently
  %  * 
  %  * @param so          starting position
  %  * @param center      center of turn
  %  * @param R           radius
  %  * @param d           distance into turn (sign indicates direction)
  %  * @return Position/Velocity after turning distance d
  %  */

  % horizontal distance
  distanceH(v1: Vect3, v2: Vect3): real = 
     norm(vect2(v2)-vect2(v1))

  mkZ(v: Vect3, z: real): Vect3 = (v`x, v`y, z)

  % /**
  %  * Calculates position after t time units in direction and magnitude of velocity v
  %  * @param v    velocity
  %  * @param t    time
  %  * @return the new position
  %  */
  linear(s: Vect3, v: Vect3, t: real): Vect3  =
     (s`x+v`x*t, s`y+v`y*t, s`z+v`z*t)


  % /**
  %  * Calculates position after moving distance d in the direction "track"
  %  * @param track   the direction
  %  * @param d       distance
  %  * @return the new position (horizontal only)
  %  */
  linearByDist2D(s: Vect3, track: real, d: real): Vect3 = 
      (s`x+d*sin(track), s`y+d*cos(track), s`z)

  % /** 
  %  * Position/Velocity after turning (does not compute altitude!!)
  %  * 
  %  * Note: will be used in a context where altitude is computing subsequently
  %  * 
  %  * @param so          starting position
  %  * @param center      center of turn
  %  * @param d           distance into turn (sign indicates direction)
  %  * @return Position/Velocity after turning distance d
  %  */
  turnByDist2D(so: Vect3, center: Vect3, dir: int, d: real, gsAtd: real): [Vect3, Velocity] = 
     LET R = distanceH(so, center) IN
     IF R = 0 THEN (so, INVALID)
     ELSE
        LET 
          alpha = dir*d/R,
          trkFromCenter = Velocity.track(center, so),
          nTrk = trkFromCenter + alpha,
          sn = mkZ(linearByDist2D(center, nTrk, R), 0.0),
          finalTrk = nTrk + dir*pi/2,
          vn = Velocity.mkTrkGsVs(finalTrk,gsAtd, 0.0)
        IN
          (sn,vn)
     ENDIF

END Kinematics

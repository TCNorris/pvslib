(Velocity
 (trkVel_TCC1 0
  (trkVel_TCC1-1 nil 3719606848 ("" (subtype-tcc) nil nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (trkVel subtype "0" "gt_npi_le_pi")))
 (trkVel_TCC2 0
  (trkVel_TCC2-1 nil 3719606848
   ("" (skeep)
    (("" (expand "vect2")
      (("" (decompose-equality -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Velocity type-eq-decl nil Velocity nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (trkVel subtype "Velocity.v" "nzhVect3")))
 (groundSpeed_nzv 0
  (groundSpeed_nzv-2 nil 3719599000
   ("" (skosimp*)
    (("" (typepred "v!1")
      (("" (flatten)
        (("" (expand "groundSpeed")
          (("" (lemma "vectors_2D.norm_eq_0")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (groundSpeed const-decl "nnreal" Velocity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors))
   nil (groundSpeed_nzv subtype "Velocity.groundSpeed(Velocity.v)" "posreal"))
  (groundSpeed_nzv-1 nil 3719598958 ("" (judgement-tcc) nil nil) nil nil
   (groundSpeed_nzv subtype "Velocity.groundSpeed(Velocity.v)" "posreal")))
 (trk_is_pi2 0
  (trk_is_pi2-3 nil 3719606956
   ("" (skeep*)
    (("" (expand "trkVel")
      (("" (expand "track")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (expand "atan2")
                    (("" (expand "from_2pi_to_pi") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (trkVel const-decl "gt_npi_le_pi" Velocity nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (from_2pi_to_pi const-decl
     "{x: gt_npi_le_pi | cos(x) = cos(r) AND sin(x) = sin(r)}" to2pi trig)
    (atan2 const-decl "real" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (track const-decl "nnreal_lt_2pi" track_3D nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (trk_is_pi2-2 nil 3603702662
   ("" (skeep*)
    (("" (expand "trk")
      (("" (expand "track")
        (("" (expand "vect2")
          (("" (assert)
            (("" (replace -1)
              (("" (hide -1)
                (("" (replace -1)
                  (("" (hide -1)
                    (("" (expand "atan2")
                      (("" (expand "from_2pi_to_pi") (("" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (atan2 const-decl "real" atan2 trig)
    (track const-decl "nnreal_lt_2pi" track_3D nil))
   nil)
  (trk_is_pi2-1 nil 3603702616 ("" (postpone) nil nil) nil shostak))
 (trk_track 0
  (trk_track-2 nil 3719606980
   ("" (skeep*)
    (("" (expand "trkVel")
      (("" (lift-if)
        (("" (ground)
          (("" (hide 1)
            (("" (apply-extensionality 1 :hide? t)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trkVel const-decl "gt_npi_le_pi" Velocity nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Velocity type-eq-decl nil Velocity nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil)
  (trk_track-1 nil 3603700846
   ("" (skeep*)
    (("" (expand "trk")
      (("" (lift-if)
        (("" (ground)
          (("" (hide 1)
            (("" (apply-extensionality 1 :hide? t)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors))
   shostak))
 (mkGs_TCC1 0
  (mkGs_TCC1-1 nil 3695462166 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (gs const-decl "nnreal" Velocity nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (mkGs subtype "Velocity.gs(Velocity.v)" "nznum")))
 (mkTrkGsVs_nonzero 0
  (mkTrkGsVs_nonzero-3 nil 3719599103
   ("" (skeep)
    (("" (expand "mkTrkGsVs")
      (("" (expand "vect2")
        (("" (lemma "trkgs2vectz_nonzero")
          (("" (expand "trkgs2vectz")
            (("" (inst? -1)
              (("" (inst? -1) (("" (expand "*") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mkTrkGsVs const-decl "Velocity" Velocity nil)
    (trkgs2vectz_nonzero judgement-tcc nil track nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (trkgs2vectz const-decl "Vect2" track nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors))
   nil
   (mkTrkGsVs_nonzero subtype
    "Velocity.mkTrkGsVs(Velocity.trk, Velocity.gsp, Velocity.vs)" "nzhVect3"))
  (mkTrkGsVs_nonzero-2 nil 3719599061
   ("" (skeep)
    (("" (expand "mkTrkGsVs")
      (("" (expand "vect2")
        (("" (lemma "trkgs2vect_nonzero")
          (("" (inst - "gsp" "trk")
            (("" (expand "trkgs2vect")
              (("" (expand "*") (("" (assert) nil))))))))))))))
    nil)
   nil nil
   (mkTrkGsVs_nonzero subtype
    "Velocity.mkTrkGsVs(Velocity.trk, Velocity.gsp, Velocity.vs)" "nzhVect3"))
  (mkTrkGsVs_nonzero-1 nil 3719598958 ("" (judgement-tcc) nil nil) nil nil
   (mkTrkGsVs_nonzero subtype
    "Velocity.mkTrkGsVs(Velocity.trk, Velocity.gsp, Velocity.vs)"
    "nzhVect3")))
 (track_mktrk 0
  (track_mktrk-1 nil 3719599555
   ("" (skeep)
    (("" (expand "track")
      (("" (expand "mkTrkGsVs")
        (("" (lemma "atan2_scal") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((track const-decl "nnreal_lt_2pi" track_3D nil)
    (atan2_scal formula-decl nil to2pi trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (mkTrkGsVs const-decl "Velocity" Velocity nil))
   nil))
 (mkTrkGsVs_def 0
  (mkTrkGsVs_def-1 nil 3719599624
   ("" (skeep)
    (("" (expand "trk")
      (("" (lift-if)
        (("" (case "vect2(v)`x = 0 AND vect2(v)`y = 0")
          (("1" (hide +)
            (("1" (flatten)
              (("1" (expand "gs")
                (("1" (expand "vect2")
                  (("1" (expand "norm")
                    (("1" (expand "sqv")
                      (("1" (expand "*")
                        (("1" (replaces -1)
                          (("1" (replaces -1) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace 1)
            (("2" (lemma "trkgs2vect_id")
              (("2" (inst - "v")
                (("2" (expand "gs")
                  (("2" (expand "mkTrkGsVs")
                    (("2" (expand "trkgs2vect")
                      (("2" (expand "*" -1)
                        (("2" (decompose-equality -1)
                          (("2" (decompose-equality 2)
                            (("1" (expand "vect2" -1 3)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "vect2" -2 3)
                              (("2" (propax) nil nil)) nil)
                             ("3" (expand "vs" 1) (("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk const-decl "nnreal_lt_2pi" track nil)
    (Velocity type-eq-decl nil Velocity nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil) (sqrt_0 formula-decl nil sqrt reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (gs const-decl "nnreal" Velocity nil)
    (trkgs2vect_id formula-decl nil track nil)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sin const-decl "real" sincos_def trig) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (vs const-decl "real" Velocity nil)
    (* const-decl "Vector" vectors_2D vectors)
    (mkTrkGsVs const-decl "Velocity" Velocity nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors))
   nil))
 (Hat_TCC1 0
  (Hat_TCC1-1 nil 3690715148 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (* const-decl "real" vectors_3D vectors)
    (sqv const-decl "nnreal" vectors_3D vectors)
    (norm const-decl "nnreal" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil (Hat subtype "Velocity.n" "nznum"))))


track : THEORY
BEGIN 

  IMPORTING trig@to2pi, vectors@vectors_2D, vectors@det_2D,
  	    trig@trig_inverses 

   trk        : VAR real
   s,v,vi,nvo : VAR Nz_vect2
   gsp        : VAR posreal
   gs         : VAR nnreal

  %% gs may be zero
  trkgs2vectz(trk,gs) : Vect2 =
    gs*(sin(trk),cos(trk))

  trkgs2vectz_nonzero: JUDGEMENT
    trkgs2vectz(trk,gsp) HAS_TYPE Nz_vect2

  %% gsp is not zero zero
  trkgs2vect(trk,gsp) : Nz_vect2 =
    gsp*(sin(trk),cos(trk))

  trkgs2vectz_eq : LEMMA
    trkgs2vectz(trk,gsp) = trkgs2vect(trk,gsp)

  track(v) : nnreal_lt_2pi =
    atan2(v`y,v`x)

  sin_track : LEMMA
    sin(track(v)) = v`x/norm(v)

  cos_track : LEMMA
    cos(track(v)) = v`y/norm(v)

  norm_id : LEMMA
    norm(trkgs2vect(trk,gsp)) = gsp

  track_id : LEMMA
    track(trkgs2vect(trk,gsp)) = to2pi(trk)

  trkgs2vectz_id : LEMMA
    trkgs2vectz(track(v),norm(v)) = v

  trkgs2vect_id : LEMMA
    trkgs2vect(track(v),norm(v)) = v

  track_scal: LEMMA FORALL (c:posreal):
    track(c*v) = track(v)

  %% ordered eps=1 
  ordered_eps_1 : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) > det(vi,s) IFF
     0 < to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) < beta)

  ordered_det_ge : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) >= det(vi,s) IFF
     0 <= to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) <= beta)

  ordered_eps_neg_1 : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) < det(vi,s) IFF
     beta < to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) < 2*pi)

  %% ordered within eps = 1
  ordered_eps_1_dot_gt_0 : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) > det(vi,s) AND nvo*s > 0 IFF
     0 < to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) < beta/2)

  ordered_eps_1_dot_ge_0 : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) > det(vi,s) AND nvo*s >= 0 IFF
     0 < to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) <= beta/2)

  ordered_eps_1_dot_lt_0 : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) > det(vi,s) AND nvo*s < 0 IFF
     beta/2 < to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) < beta)

  ordered_eps_1_dot_le_0 : LEMMA
    abs(det(vi,s)/(norm(nvo)*norm(s))) <= 1 IMPLIES
    LET phi   = track(s),
        psi   = asin(det(vi,s)/(norm(nvo)*norm(s))),
        alpha = phi+psi,
        beta  = pi-2*psi IN
    (det(nvo,s) > det(vi,s) AND nvo*s <= 0 IFF
     beta/2 <= to2pi(track(nvo)-alpha) AND to2pi(track(nvo)-alpha) < beta)

  %% ordered within eps = -1

  % In J, the track is defined for all v not just nonzero v.
  % The kinematic functions call trk, which just calls track.
  % trk is defined below, differently than in J, but the same
  % signature and equivalent defs. This is similar to the definition
  % for velocities. These definitions should all be cleaned
  % to match more closely with the J.

  trk(vv:Vect2): nnreal_lt_2pi =
    IF vv`x = 0 AND vv`y = 0 THEN 0
    ELSE track(vv) ENDIF

 
  add_track(v, (theta:real)): {w: Vect2 | w=trkgs2vect(track(v)+theta, norm(v))} = 
   LET sin_theta = sin(theta), 
       cos_theta = cos(theta) IN 
   ( v`x*cos_theta + v`y*sin_theta, -v`x*sin_theta+v`y*cos_theta)

END track

(track
 (trkgs2vectz_nonzero 0
  (trkgs2vectz_nonzero-2 nil 3785321846
   ("" (skeep)
    (("" (expand "trkgs2vectz")
      (("" (lemma "sin2_cos2")
        (("" (lemma "sqv_zero")
          (("" (replaces -3 -1 :dir rl)
            (("" (rewrite "sqv_sos")
              (("" (expand "sos")
                (("" (assert)
                  (("" (expand "*")
                    (("" (rewrite "sq_times")
                      (("" (rewrite "sq_times")
                        (("" (lemma "sq_eq_0")
                          (("" (inst?)
                            (("" (case "NOT sq(gsp)>0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -2)
                                (("2"
                                  (inst - "trk")
                                  (("2"
                                    (mult-by -3 "sq(gsp)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trkgs2vectz const-decl "Vect2" track nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sqv_sos formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sin const-decl "real" sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_times formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_eq_0 formula-decl nil sq reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (sos const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sin2_cos2 formula-decl nil sincos_def trig))
   nil
   (trkgs2vectz_nonzero subtype
    "track.trkgs2vectz(track.trk, track.gsp)" "Nz_vect2")))
 (trkgs2vect_TCC1 0
  (trkgs2vect_TCC1-1 nil 3785321552
   ("" (skeep)
    (("" (lemma "trkgs2vectz_nonzero")
      (("" (insteep)
        (("" (expand "trkgs2vectz") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((trkgs2vectz_nonzero judgement-tcc nil track nil)
    (trkgs2vectz const-decl "Vect2" track nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil
   (trkgs2vect subtype
    "vectors_2D.*(track.gsp, (# x := sincos_def.sin(track.trk), y := sincos_def.cos(track.trk) #))"
    "Nz_vect2")))
 (trkgs2vectz_eq 0
  (trkgs2vectz_eq-1 nil 3785321789
   ("" (skeep)
    (("" (expand "trkgs2vectz")
      (("" (expand "trkgs2vect") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((trkgs2vectz const-decl "Vect2" track nil)
    (trkgs2vect const-decl "Nz_vect2" track nil))
   shostak))
 (track_TCC1 0
  (track_TCC1-1 nil 3460312047
   ("" (skeep)
    (("" (typepred "v")
      (("" (flatten) (("" (decompose-equality 1) nil nil)) nil)) nil))
    nil)
   ((Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors))
   nil
   (track subtype "track.v`x"
    "{z: reals.real | booleans.=>(track.v`y = 0, z /= 0)}")))
 (sin_track 0
  (sin_track-1 nil 3460330771
   ("" (skeep)
    (("" (expand "track")
      (("" (rewrite "sin_atan2")
        (("1" (lift-if)
          (("1" (ground)
            (("1" (field 1)
              (("1" (both-sides-f 1 "sq")
                (("1" (rewrite "sq_norm")
                  (("1" (rewrite "sqv_sos")
                    (("1" (expand "sos")
                      (("1" (replaces -2) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "sq_eq") nil nil))
                nil))
              nil)
             ("2" (field 2)
              (("2" (neg-formula 2)
                (("2" (both-sides-f 2 "sq")
                  (("1" (rewrite "sq_norm")
                    (("1" (rewrite "sq_neg")
                      (("1" (rewrite "sqv_sos")
                        (("1" (expand "sos")
                          (("1" (replaces -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "sq_eq") nil nil))
                  nil))
                nil))
              nil)
             ("3" (field)
              (("3" (cancel-by 1 "v`x")
                (("3" (both-sides-f 2 "sq")
                  (("1" (rewrite "sq_norm")
                    (("1" (rewrite "sq_times")
                      (("1" (rewrite "sq_div")
                        (("1" (real-props)
                          (("1" (rewrite "sqv_sos")
                            (("1" (expand "sos")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "sq_eq")
                    (("2" (mult-cases 1) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (field 2)
              (("4" (cancel-by 2 "v`x")
                (("4" (neg-formula 3)
                  (("4" (both-sides-f 3 "sq")
                    (("1" (rewrite "sq_norm")
                      (("1" (rewrite "sq_neg")
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_div")
                            (("1" (real-props)
                              (("1"
                                (rewrite "sqv_sos")
                                (("1"
                                  (expand "sos")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "sq_eq")
                      (("2" (neg-formula 1 :auto-step (grind-reals))
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "v")
            (("2" (flatten) (("2" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((track const-decl "nnreal_lt_2pi" track nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors) nil nil nil
    (both_sides_times_neg_ge1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (neg_times_ge formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nonzero_times3 formula-decl nil real_props nil) nil nil nil nil
    (sq_times formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (div_cancel1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_div formula-decl nil sq reals)
    (pos_times_ge formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    nil (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sq_neg formula-decl nil sq reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_eq formula-decl nil sq reals)
    (sq_norm formula-decl nil vectors_2D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sos const-decl "nnreal" vectors_2D vectors)
    (sq_0 formula-decl nil sq reals)
    (sqv_sos formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_atan2 formula-decl nil atan2 trig))
   nil))
 (cos_track 0
  (cos_track-2 nil 3602107493
   ("" (skeep)
    (("" (expand "track")
      (("" (rewrite "cos_atan2")
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (field 1)
                    (("1" (both-sides-f 1 "sq")
                      (("1" (rewrite "sq_norm")
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_div")
                            (("1" (real-props)
                              (("1"
                                (rewrite "sqv_sos")
                                (("1"
                                  (expand "sos")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "sq_eq")
                        (("2" (mult-cases 1) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (field 2)
                    (("2" (neg-formula 2)
                      (("2" (both-sides-f 2 "sq")
                        (("1" (rewrite "sq_norm")
                          (("1" (rewrite "sq_neg")
                            (("1" (rewrite "sq_times")
                              (("1"
                                (rewrite "sq_div")
                                (("1"
                                  (real-props)
                                  (("1"
                                    (rewrite "sqv_sos")
                                    (("1"
                                      (expand "sos")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sq_eq")
                          (("2"
                            (neg-formula 1 :auto-step (grind-reals))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "v")
            (("2" (flatten) (("2" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((track const-decl "nnreal_lt_2pi" track nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_neg_ge1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (neg_times_ge formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (sq_neg formula-decl nil sq reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    nil nil (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_times formula-decl nil sq reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (div_cancel1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sos const-decl "nnreal" vectors_2D vectors)
    (sqv_sos formula-decl nil vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_div formula-decl nil sq reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sq_norm formula-decl nil vectors_2D vectors)
    (pos_times_ge formula-decl nil real_props nil)
    (sq_eq formula-decl nil sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_atan2 formula-decl nil atan2 trig))
   nil)
  (cos_track-1 nil 3460312258
   ("" (skeep)
    (("" (expand "track")
      (("" (rewrite "cos_atan2")
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (field 1)
                    (("1" (both-sides-f 1 "sq")
                      (("1" (rewrite "sq_norm")
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_div")
                            (("1" (real-props)
                              (("1" (rewrite "sqv_sq") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "sq_eq")
                        (("2" (mult-cases 1) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (field 2)
                    (("2" (neg-formula 2)
                      (("2" (both-sides-f 2 "sq")
                        (("1" (rewrite "sq_norm")
                          (("1" (rewrite "sq_neg")
                            (("1" (rewrite "sq_times")
                              (("1"
                                (rewrite "sq_div")
                                (("1"
                                  (real-props)
                                  (("1" (rewrite "sqv_sq") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sq_eq")
                          (("2"
                            (neg-formula 1 :auto-step (grind-reals))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "v")
            (("2" (flatten) (("2" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (sq_neg formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_times formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq_div formula-decl nil sq reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sq_eq formula-decl nil sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cos_atan2 formula-decl nil atan2 trig))
   nil))
 (norm_id 0
  (norm_id-2 nil 3602107517
   ("" (skeep)
    (("" (expand "trkgs2vect")
      (("" (expand "norm")
        (("" (rewrite "sqv_scal")
          (("" (sq-simp)
            (("" (rewrite "sqv_sos")
              (("" (expand "sos")
                (("" (lemma "sin2_cos2")
                  (("" (inst?)
                    (("" (replaces -1) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trkgs2vect const-decl "Nz_vect2" track nil)
    (sqv_scal formula-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sin const-decl "real" sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqv_sos formula-decl nil vectors_2D vectors)
    (sin2_cos2 formula-decl nil sincos_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_1 formula-decl nil sqrt reals)
    (sos const-decl "nnreal" vectors_2D vectors)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_times formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (norm const-decl "nnreal" vectors_2D vectors))
   nil)
  (norm_id-1 nil 3464478912
   ("" (skeep)
    (("" (expand "trkgs2vect")
      (("" (expand "norm")
        (("" (rewrite "sqv_scal")
          (("" (rewrite "sqv_sq")
            (("" (lemma "sin2_cos2")
              (("" (inst?)
                (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqv_scal formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors))
   shostak))
 (track_id 0
  (track_id-1 nil 3460311988
   ("" (skeep)
    (("" (expand "trkgs2vect")
      (("" (expand "track")
        (("" (expand "*")
          (("" (lemma "atan2_cancel_pos")
            (("" (inst -1 "gsp" "cos(trk)" "sin(trk)")
              (("" (split -1)
                (("1" (replaces -1)
                  (("1" (lemma "atan2_cos_sin")
                    (("1" (inst -1 "to2pi(trk)")
                      (("1" (rewrite "cos_id_to2pi")
                        (("1" (rewrite "sin_id_to2pi") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (flatten)
                    (("2" (lemma "sin2_cos2")
                      (("2" (inst? -1)
                        (("2" (replaces (-2 -3))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trkgs2vect const-decl "Nz_vect2" track nil)
    (* const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cos const-decl "real" sincos_def trig)
    (sin const-decl "real" sincos_def trig)
    (sin2_cos2 formula-decl nil sincos_def trig)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_0 formula-decl nil sq reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (TRUE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (sin_id_to2pi formula-decl nil to2pi trig)
    (cos_id_to2pi formula-decl nil to2pi trig)
    (atan2_cos_sin formula-decl nil atan2 trig)
    (atan2_cancel_pos formula-decl nil atan2 trig)
    (track const-decl "nnreal_lt_2pi" track nil))
   nil))
 (trkgs2vectz_id 0
  (trkgs2vectz_id-1 nil 3785321675
   ("" (skeep)
    (("" (expand "trkgs2vectz")
      (("" (expand "*")
        (("" (rewrite "sin_track")
          (("" (rewrite "cos_track")
            (("" (decompose-equality 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trkgs2vectz const-decl "Vect2" track nil)
    (sin_track formula-decl nil track nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_track formula-decl nil track nil)
    (* const-decl "Vector" vectors_2D vectors))
   nil))
 (trkgs2vect_id 0
  (trkgs2vect_id-1 nil 3460330284
   ("" (skeep)
    (("" (rewrite "trkgs2vectz_eq" :dir rl)
      (("" (rewrite "trkgs2vectz_id") nil nil)) nil))
    nil)
   ((nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (trkgs2vectz_eq formula-decl nil track nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (trkgs2vectz_nonzero application-judgement "Nz_vect2" track nil)
    (trkgs2vectz_id formula-decl nil track nil))
   shostak))
 (track_scal 0
  (track_scal-1 nil 3603705319
   ("" (skeep)
    (("" (expand "track")
      (("" (expand "atan2")
        (("" (lift-if)
          (("" (lift-if)
            (("" (lift-if)
              (("" (lift-if)
                (("" (rewrite "vx_scal")
                  (("" (rewrite "vy_scal")
                    (("" (assert)
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (assert)
                            (("" (ground)
                              (("1"
                                (mult-by 1 "c")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (mult-by 1 "c")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (mult-by -1 "c")
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (mult-by 1 "c")
                                (("4" (assert) nil nil))
                                nil)
                               ("5"
                                (mult-by -2 "c")
                                (("5" (assert) nil nil))
                                nil)
                               ("6"
                                (mult-by -1 "c")
                                (("6" (assert) nil nil))
                                nil)
                               ("7"
                                (mult-by 1 "c")
                                (("7" (assert) nil nil))
                                nil)
                               ("8"
                                (mult-by -2 "c")
                                (("8" (assert) nil nil))
                                nil)
                               ("9"
                                (mult-by -1 "c")
                                (("9" (assert) nil nil))
                                nil)
                               ("10"
                                (mult-by -1 "c")
                                (("10" (assert) nil nil))
                                nil)
                               ("11"
                                (mult-by -2 "c")
                                (("11" (assert) nil nil))
                                nil)
                               ("12"
                                (mult-by -1 "c")
                                (("12" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((track const-decl "nnreal_lt_2pi" track nil)
    (vx_scal formula-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (vy_scal formula-decl nil vectors_2D vectors)
    (atan2 const-decl "real" atan2 trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (ordered_eps_1_TCC1 0
  (ordered_eps_1_TCC1-1 nil 3461513175 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (ordered_eps_1 subtype
    "number_fields./(det_2D.det(track.vi, track.s), (number_fields.*(vectors_2D.norm(track.nvo), vectors_2D.norm(track.s))))"
    "real_abs_le1")))
 (ordered_eps_1 0
  (ordered_eps_1-2 "" 3505030827
   ("" (skeep)
    (("" (skoletin* 1)
      ((""
        (case-replace
         "det(nvo,s) = norm(nvo)*norm(s)*sin(track(nvo)-track(s))")
        (("1" (hide -1)
          (("1"
            (case-replace
             "norm(nvo) * norm(s) * sin(track(nvo) - track(s)) > det(vi, s) IFF
                             sin(track(nvo) - track(s)) > det(vi, s) / (norm(nvo)*norm(s))")
            (("1" (hide -1)
              (("1" (both-sides-f -3 "sin")
                (("1" (rewrite "sin_asin")
                  (("1" (replaces -1 :dir rl)
                    (("1" (lemma "sin_gt_to2pi")
                      (("1" (inst -1 "track(nvo)-track(s)" "psi")
                        (("1" (assert)
                          (("1" (replaces -1)
                            (("1"
                              (case-replace
                               "psi < to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 AND
                                            to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 < pi - psi IFF 0 < to2pi(track(nvo) - track(s) - psi) AND
                                            to2pi(track(nvo) - track(s) - psi) < pi - 2*psi")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replaces (-1 -2 -3))
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi < 0")
                                  (("1"
                                    (case
                                     "psi < to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2")
                                    (("1"
                                      (hide 1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (case
                                       "to2pi(track(nvo) - track(s) - psi) < pi - 2 * psi")
                                      (("1"
                                        (hide 1 2)
                                        (("1"
                                          (lemma "to2pi_neg")
                                          (("1"
                                            (inst
                                             -1
                                             "to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi")
                                            (("1"
                                              (lemma "to2pi_to2pi")
                                              (("1"
                                                (inst
                                                 -1
                                                 "track(nvo) + pi / 2 - track(s)"
                                                 "-pi/2 - psi")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace
                                     "psi < to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 AND
                                                                   to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 < pi - psi IFF 0 < to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi AND  to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi < pi - 2*psi")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "to2pi_id")
                                        (("1"
                                          (inst
                                           -1
                                           "to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi")
                                          (("1"
                                            (lemma "to2pi_to2pi")
                                            (("1"
                                              (inst
                                               -1
                                               "track(nvo) + pi / 2 - track(s)"
                                               "-pi/2 - psi")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide-all-but 1)
                (("2" (grind-reals)
                  (("1" (mult-by 1 "(norm(nvo) * norm(s))")
                    (("1" (assert) nil nil)) nil)
                   ("2" (mult-by -1 "(norm(nvo) * norm(s))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "trkgs2vect_id")
            (("2" (inst-cp -1 "nvo")
              (("2" (inst -1 "s")
                (("2" (expand "trkgs2vect")
                  (("2" (rewrite "sin_minus")
                    (("2" (name-replace "ts" "track(s)")
                      (("2" (name-replace "tnvo" "track(nvo)")
                        (("2" (expand "det")
                          (("2" (name-replace "nnvo" "norm(nvo)")
                            (("2" (name-replace "ns" "norm(s)")
                              (("2"
                                (replaces (-1 -2) :dir rl)
                                (("2"
                                  (expand "*")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (* const-decl "Vector" vectors_2D vectors)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_minus formula-decl nil sincos trig)
    (trkgs2vect_id formula-decl nil track nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (sin_asin formula-decl nil trig_inverses trig)
    (sin_gt_to2pi formula-decl nil to2pi trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (to2pi_neg formula-decl nil to2pi trig)
    (to2pi_to2pi formula-decl nil to2pi trig)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil (to2pi_id formula-decl nil to2pi trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (sin const-decl "real" sincos_def trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (ordered_det_ge 0
  (ordered_det_ge-1 nil 3461513312
   ("" (skeep)
    (("" (skoletin* 1)
      ((""
        (case-replace
         "det(nvo,s) = norm(nvo)*norm(s)*sin(track(nvo)-track(s))")
        (("1" (hide -1)
          (("1"
            (case-replace
             "norm(nvo) * norm(s) * sin(track(nvo) - track(s)) >= det(vi, s) IFF
                             sin(track(nvo) - track(s)) >= det(vi, s) / (norm(nvo)*norm(s))")
            (("1" (hide -1)
              (("1" (both-sides-f -3 "sin")
                (("1" (rewrite "sin_asin")
                  (("1" (replaces -1 :dir rl)
                    (("1" (lemma "sin_ge_to2pi")
                      (("1" (inst -1 "track(nvo)-track(s)" "psi")
                        (("1" (assert)
                          (("1" (replaces -1)
                            (("1"
                              (case-replace
                               "psi <= to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 AND
                                            to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 <= pi - psi IFF 0 <= to2pi(track(nvo) - track(s) - psi) AND
                                            to2pi(track(nvo) - track(s) - psi) <= pi - 2*psi")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replaces (-1 -2 -3))
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi < 0")
                                  (("1"
                                    (case
                                     "psi <= to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2")
                                    (("1"
                                      (hide 1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (case
                                       "to2pi(track(nvo) - track(s) - psi) <= pi - 2 * psi")
                                      (("1"
                                        (hide 1 2)
                                        (("1"
                                          (lemma "to2pi_neg")
                                          (("1"
                                            (inst
                                             -1
                                             "to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi")
                                            (("1"
                                              (lemma "to2pi_to2pi")
                                              (("1"
                                                (inst
                                                 -1
                                                 "track(nvo) + pi / 2 - track(s)"
                                                 "-pi/2 - psi")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace
                                     "psi <= to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 AND
                                                                   to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 <= pi - psi IFF 0 <= to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi AND  to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi <= pi - 2*psi")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "to2pi_id")
                                        (("1"
                                          (inst
                                           -1
                                           "to2pi(track(nvo) + pi / 2 - track(s)) - pi / 2 - psi")
                                          (("1"
                                            (lemma "to2pi_to2pi")
                                            (("1"
                                              (inst
                                               -1
                                               "track(nvo) + pi / 2 - track(s)"
                                               "-pi/2 - psi")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind-reals) nil nil)) nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "trkgs2vect_id")
            (("2" (inst-cp -1 "nvo")
              (("2" (inst -1 "s")
                (("2" (expand "trkgs2vect")
                  (("2" (rewrite "sin_minus")
                    (("2" (name-replace "ts" "track(s)")
                      (("2" (name-replace "tnvo" "track(nvo)")
                        (("2" (expand "det")
                          (("2" (name-replace "nnvo" "norm(nvo)")
                            (("2" (name-replace "ns" "norm(s)")
                              (("2"
                                (replaces (-1 -2) :dir rl)
                                (("2"
                                  (expand "*")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_minus formula-decl nil sincos trig)
    (trkgs2vect_id formula-decl nil track nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (sin_asin formula-decl nil trig_inverses trig)
    (sin_ge_to2pi formula-decl nil to2pi trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (to2pi_neg formula-decl nil to2pi trig)
    (to2pi_to2pi formula-decl nil to2pi trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil (to2pi_id formula-decl nil to2pi trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (sin const-decl "real" sincos_def trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (ordered_eps_neg_1 0
  (ordered_eps_neg_1-1 nil 3460980839
   ("" (skeep)
    (("" (lemma "ordered_det_ge")
      (("" (inst -1 "nvo" "s" "vi")
        (("" (ground) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((ordered_det_ge formula-decl nil track nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (ordered_eps_1_dot_gt_0 0
  (ordered_eps_1_dot_gt_0-1 nil 3461500351
   ("" (skeep)
    (("" (skoletin* 1)
      ((""
        (case-replace
         "nvo*s = norm(nvo)*norm(s)*cos(track(nvo)-track(s))")
        (("1" (hide -1)
          (("1"
            (case-replace
             "norm(nvo) * norm(s) * cos(track(nvo) - track(s)) > 0 IFF cos(track(nvo) - track(s)) > 0")
            (("1" (hide -1)
              (("1" (lemma "cos_pos_to2pi")
                (("1" (inst?)
                  (("1" (replaces -1)
                    (("1"
                      (case-replace
                       "-pi / 2 < to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 AND
                                             to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 < pi / 2 IFF -pi / 2 - psi < to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi AND
                                             to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi < pi/2 - psi")
                      (("1" (hide -1)
                        (("1"
                          (case "to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi >= 0")
                          (("1" (lemma "to2pi_id")
                            (("1"
                              (inst -1
                               "to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi")
                              (("1"
                                (replaces -1 :dir rl)
                                (("1"
                                  (lemma "to2pi_to2pi")
                                  (("1"
                                    (inst
                                     -1
                                     "track(nvo) - track(s) + pi / 2"
                                     "-pi/2 - psi")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (lemma "ordered_eps_1")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces -5 :dir rl)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (name-replace
                                                             "xx"
                                                             "to2pi(track(nvo) - phi - psi)")
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (replaces
                                                                 -2)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "beta <= 3*pi/2 - psi")
                            (("1" (lemma "to2pi_neg")
                              (("1"
                                (inst
                                 -1
                                 "to2pi(track(nvo) + pi / 2 - phi) - pi / 2 - psi")
                                (("1"
                                  (lemma "to2pi_to2pi")
                                  (("1"
                                    (inst
                                     -1
                                     "track(nvo) + pi / 2 - phi"
                                     "-pi/2 -psi")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "ordered_eps_1")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "nvo")
                (("2" (flatten)
                  (("2" (typepred "s")
                    (("2" (flatten)
                      (("2" (ground)
                        (("1" (mult-cases -1)
                          (("1" (mult-cases -1) nil nil)) nil)
                         ("2" (mult-cases 1)
                          (("2" (mult-cases 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (rewrite "cos_minus")
            (("2" (rewrite "cos_track")
              (("2" (rewrite "cos_track")
                (("2" (rewrite "sin_track")
                  (("2" (rewrite "sin_track") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (* const-decl "real" vectors_2D vectors)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_track formula-decl nil track nil)
    (sin_track formula-decl nil track nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_minus formula-decl nil sincos trig)
    (pos_times_gt formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil (to2pi_to2pi formula-decl nil to2pi trig)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ordered_eps_1 formula-decl nil track nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (to2pi_id formula-decl nil to2pi trig)
    (to2pi_neg formula-decl nil to2pi trig)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_pos_to2pi formula-decl nil to2pi trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (ordered_eps_1_dot_ge_0 0
  (ordered_eps_1_dot_ge_0-1 nil 3461500391
   ("" (skeep)
    (("" (skoletin* 1)
      ((""
        (case-replace
         "nvo*s = norm(nvo)*norm(s)*cos(track(nvo)-track(s))")
        (("1" (hide -1)
          (("1"
            (case-replace
             "norm(nvo) * norm(s) * cos(track(nvo) - track(s)) >= 0 IFF cos(track(nvo) - track(s)) >= 0")
            (("1" (hide -1)
              (("1" (lemma "cos_nneg_to2pi")
                (("1" (inst?)
                  (("1" (replaces -1)
                    (("1"
                      (case-replace
                       "-pi / 2 <= to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 AND
                                             to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 <= pi / 2 IFF -pi / 2 - psi <= to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi AND
                                             to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi <= pi/2 - psi")
                      (("1" (hide -1)
                        (("1"
                          (case "to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi >= 0")
                          (("1" (lemma "to2pi_id")
                            (("1"
                              (inst -1
                               "to2pi(track(nvo) - track(s) + pi / 2) - pi / 2 - psi")
                              (("1"
                                (replaces -1 :dir rl)
                                (("1"
                                  (lemma "to2pi_to2pi")
                                  (("1"
                                    (inst
                                     -1
                                     "track(nvo) - track(s) + pi / 2"
                                     "-pi/2 - psi")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (lemma "ordered_eps_1")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces -5 :dir rl)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (name-replace
                                                             "xx"
                                                             "to2pi(track(nvo) - phi - psi)")
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (replaces
                                                                 -2)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "beta <= 3*pi/2 - psi")
                            (("1" (lemma "to2pi_neg")
                              (("1"
                                (inst
                                 -1
                                 "to2pi(track(nvo) + pi / 2 - phi) - pi / 2 - psi")
                                (("1"
                                  (lemma "to2pi_to2pi")
                                  (("1"
                                    (inst
                                     -1
                                     "track(nvo) + pi / 2 - phi"
                                     "-pi/2 -psi")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (lemma "ordered_eps_1")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "nvo")
                (("2" (flatten)
                  (("2" (typepred "s")
                    (("2" (flatten)
                      (("2" (ground)
                        (("1" (mult-cases -1)
                          (("1" (mult-cases -1) nil nil)) nil)
                         ("2" (mult-cases 1)
                          (("2" (mult-cases 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (rewrite "cos_minus")
            (("2" (rewrite "cos_track")
              (("2" (rewrite "cos_track")
                (("2" (rewrite "sin_track")
                  (("2" (rewrite "sin_track") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (* const-decl "real" vectors_2D vectors)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_track formula-decl nil track nil)
    (sin_track formula-decl nil track nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_minus formula-decl nil sincos trig)
    (pos_times_ge formula-decl nil real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil (to2pi_to2pi formula-decl nil to2pi trig)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ordered_eps_1 formula-decl nil track nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (to2pi_id formula-decl nil to2pi trig)
    (to2pi_neg formula-decl nil to2pi trig)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_nneg_to2pi formula-decl nil to2pi trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (ordered_eps_1_dot_lt_0 0
  (ordered_eps_1_dot_lt_0-1 nil 3461500509
   ("" (skeep)
    (("" (skoletin* 1)
      (("" (lemma "ordered_eps_1")
        (("" (inst?)
          (("" (assert)
            (("" (lemma "ordered_eps_1_dot_ge_0")
              (("" (inst -1 "nvo" "s" "vi") (("" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (* const-decl "real" vectors_2D vectors)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ordered_eps_1_dot_ge_0 formula-decl nil track nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordered_eps_1 formula-decl nil track nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (ordered_eps_1_dot_le_0 0
  (ordered_eps_1_dot_le_0-1 nil 3461500584
   ("" (skeep)
    (("" (skoletin* 1)
      (("" (lemma "ordered_eps_1")
        (("" (inst?)
          (("" (assert)
            (("" (lemma "ordered_eps_1_dot_gt_0")
              (("" (inst -1 "nvo" "s" "vi") (("" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (track const-decl "nnreal_lt_2pi" track nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (* const-decl "real" vectors_2D vectors)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ordered_eps_1_dot_gt_0 formula-decl nil track nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordered_eps_1 formula-decl nil track nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (trk_TCC1 0
  (trk_TCC1-1 nil 3610211218
   ("" (skeep) (("" (lemma "pi_bnds") (("" (ground) nil nil)) nil))
    nil)
   ((pi_bnds formula-decl nil atan trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil (trk subtype "0" "nnreal_lt_2pi")))
 (trk_TCC2 0
  (trk_TCC2-1 nil 3610211218 ("" (subtype-tcc) nil nil)
   ((comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil))
   nil (trk subtype "track.vv" "Nz_vect2")))
 (add_track_TCC1 0
  (add_track_TCC1-1 nil 3635604374
   ("" (skeep)
    (("" (typepred (v))
      (("" (expand "trkgs2vect")
        (("" (rewrite "sin_plus")
          (("" (rewrite "cos_plus")
            (("" (typepred "track(v)")
              (("" (rewrite "cos_track")
                (("" (rewrite "sin_track")
                  (("" (expand "*" 1 5) (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_plus formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (track const-decl "nnreal_lt_2pi" track nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_track formula-decl nil track nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (cos_track formula-decl nil track nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_plus formula-decl nil sincos trig)
    (trkgs2vect const-decl "Nz_vect2" track nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil
   (add_track subtype
    "(# x := (LET sin_theta = sincos_def.sin(track.theta), cos_theta = sincos_def.cos(track.theta) IN ((number_fields.+)(number_fields.*(track.v`x, track.cos_theta), number_fields.*(track.v`y, track.sin_theta)), (number_fields.+)(number_fields.*((number_fields.-)(track.v`x), track.sin_theta), number_fields.*(track.v`y, track.cos_theta))))`1, y := (LET sin_theta = sincos_def.sin(track.theta), cos_theta = sincos_def.cos(track.theta) IN ((number_fields.+)(number_fields.*(track.v`x, track.cos_theta), number_fields.*(track.v`y, track.sin_theta)), (number_fields.+)(number_fields.*((number_fields.-)(track.v`x), track.sin_theta), number_fields.*(track.v`y, track.cos_theta))))`2 #)"
    "{w: vectors_2D_def.Vect2 | w = track.trkgs2vect((number_fields.+)(track.theta, track.track(track.v)), vectors_2D.norm(track.v))}"))))


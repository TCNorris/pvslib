(track_3D
 (nzhVect3_TCC1 0
  (nzhVect3_TCC1-1 nil 3601828459
   ("" (inst 1 "(# x := 1, y := 1, z := 1 #)")
    (("" (expand "vect2")
      (("" (flatten) (("" (rewrite "comps_eq") nil nil)) nil)) nil))
    nil)
   ((comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comps_eq formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (nzhVect3 existence ""
    "{v: vectors_3D_def.Vect3 | vect_3D_2D.vect2(v) /= vectors_2D.zero}")))
 (track_TCC1 0
  (track_TCC1-1 nil 3460312047
   ("" (skeep)
    (("" (typepred "v")
      (("" (flatten)
        (("" (apply-extensionality 1 :hide? t)
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors))
   nil
   (track subtype "track_3D.v`x"
    "{z: reals.real | booleans.=>(track_3D.v`y = 0, z /= 0)}")))
 (ground_speed_nzv 0
  (ground_speed_nzv-1 nil 3601828727
   ("" (skosimp*)
    (("" (expand "ground_speed")
      (("" (assert)
        (("" (typepred "v!1")
          (("" (flatten)
            (("" (lemma "vectors_2D.norm_eq_0")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ground_speed const-decl "nnreal" track_3D nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ground_speed_nzv subtype "track_3D.ground_speed(track_3D.v)" "posreal")))
 (sin_track 0
  (sin_track-1 nil 3460330771
   ("" (skosimp*)
    (("" (lemma "sin_track")
      (("" (expand "track")
        (("" (expand "ground_speed")
          (("" (inst -1 "vect2(v!1)")
            (("" (expand "vect2") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_track formula-decl nil track nil)
    (ground_speed const-decl "nnreal" track_3D nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (track const-decl "nnreal_lt_2pi" track nil)
    (track const-decl "nnreal_lt_2pi" track_3D nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors))
   nil))
 (cos_track 0
  (cos_track-2 nil 3601894188
   ("" (skosimp*)
    (("" (lemma "cos_track")
      (("" (expand "track")
        (("" (expand "ground_speed")
          (("" (inst -1 "vect2(v!1)")
            (("" (expand "vect2") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_track formula-decl nil track nil)
    (ground_speed const-decl "nnreal" track_3D nil)
    (nzhVect3 nonempty-type-eq-decl nil track_3D nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (track const-decl "nnreal_lt_2pi" track nil)
    (track const-decl "nnreal_lt_2pi" track_3D nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors))
   nil)
  (cos_track-1 nil 3460312258
   ("" (skeep)
    (("" (expand "track")
      (("" (rewrite "cos_atan2")
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (field 1)
                    (("1" (both-sides-f 1 "sq")
                      (("1" (rewrite "sq_norm")
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_div")
                            (("1" (real-props)
                              (("1" (rewrite "sqv_sq") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "sq_eq") (("2" (mult-cases 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (field 2)
                    (("2" (neg-formula 2)
                      (("2" (both-sides-f 2 "sq")
                        (("1" (rewrite "sq_norm")
                          (("1" (rewrite "sq_neg")
                            (("1" (rewrite "sq_times")
                              (("1" (rewrite "sq_div")
                                (("1" (real-props)
                                  (("1" (rewrite "sqv_sq") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sq_eq")
                          (("2" (neg-formula 1 :auto-step (grind-reals)) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "v")
            (("2" (flatten) (("2" (decompose-equality 1) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (sq_neg formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_times formula-decl nil sq reals) (sq_sqrt formula-decl nil sqrt reals)
    (sq_div formula-decl nil sq reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sq_eq formula-decl nil sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cos_atan2 formula-decl nil atan2 trig))
   nil)))


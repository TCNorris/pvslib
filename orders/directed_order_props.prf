(directed_order_props
 (directed_is_lub_set 0
  (directed_is_lub_set-1 nil 3352698192
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "lub_set?")
        (("" (typepred "<=")
          (("" (expand "directed_complete_partial_order?")
            (("" (flatten)
              (("" (expand "directed_complete?")
                (("" (expand "directed?") (("" (inst - "x!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directed type-eq-decl nil directed_order_props nil)
    (directed? const-decl "bool" directed_order_props nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (T formal-type-decl nil directed_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders nil)
    (<= formal-const-decl "(directed_complete_partial_order?[T])"
        directed_order_props nil)
    (x!1 skolem-const-decl "directed" directed_order_props nil)
    (partial_order? const-decl "bool" orders nil)
    (directed? const-decl "bool" directed_orders nil)
    (directed_complete? const-decl "bool" directed_orders nil)
    (lub_set? const-decl "bool" bounded_order_props nil))
   nil
   (directed_is_lub_set subtype "directed_order_props.x"
    "(bounded_order_props[directed_order_props.T, directed_order_props.<=].lub_set?)")))
 (directed_singleton 0
  (directed_singleton-1 nil 3352695420
   ("" (expand "singleton")
    (("" (expand "directed?")
      (("" (expand "directed?")
        (("" (skosimp*)
          (("" (inst + "x!1")
            (("" (lemma "partial_order_reflexive" ("x" "x!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directed? const-decl "bool" directed_order_props nil)
    (<= formal-const-decl "(directed_complete_partial_order?[T])"
        directed_order_props nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (partial_order_reflexive formula-decl nil partial_order_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil directed_order_props nil)
    (directed? const-decl "bool" directed_orders nil)
    (singleton const-decl "(singleton?)" sets nil))
   nil
   (directed_singleton subtype
    "sets[directed_order_props.T].singleton(directed_order_props.x)"
    "directed")))
 (intersection_directed_upper 0
  (intersection_directed_upper-1 nil 3352695648
   ("" (skosimp)
    (("" (typepred "U!1")
      (("" (typepred "D!1")
        (("" (expand "directed?")
          (("" (expand "directed?")
            (("" (skosimp*)
              (("" (expand "intersection")
                (("" (expand "member")
                  (("" (flatten)
                    (("" (inst - "x!1" "y!1")
                      (("" (assert)
                        (("" (skosimp)
                          (("" (typepred "z!1")
                            (("" (expand "upper_set?")
                              (("" (inst - "x!1" "z!1")
                                (("" (expand "member")
                                  (("" (assert)
                                    (("" (inst + "z!1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upper_set nonempty-type-eq-decl nil partial_order_props nil)
    (upper_set? const-decl "bool" partial_order_props nil)
    (<= formal-const-decl "(directed_complete_partial_order?[T])"
        directed_order_props nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders nil)
    (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil)
    (T formal-type-decl nil directed_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (z!1 skolem-const-decl "(D!1)" directed_order_props nil)
    (D!1 skolem-const-decl "directed" directed_order_props nil)
    (U!1 skolem-const-decl "upper_set[T, <=]" directed_order_props nil)
    (intersection const-decl "set" sets nil)
    (directed? const-decl "bool" directed_orders nil)
    (directed type-eq-decl nil directed_order_props nil)
    (directed? const-decl "bool" directed_order_props nil)
    (nonempty? const-decl "bool" sets nil))
   shostak))
 (split_directed_lower 0
  (split_directed_lower-1 nil 3352695791
   ("" (skosimp)
    (("" (expand "member")
      (("" (typepred "L!1")
        (("" (typepred "D!1")
          (("" (expand "lower_set?")
            (("" (expand "directed?")
              (("" (expand "directed?")
                (("" (expand "member")
                  (("" (inst - "x!1" "y!1")
                    (("" (assert)
                      (("" (skosimp)
                        (("" (case "L!1(z!1)")
                          (("1" (inst - "z!1" "y!1") (("1" (assert) nil nil))
                            nil)
                           ("2" (inst + "z!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (directed? const-decl "bool" directed_order_props nil)
    (directed type-eq-decl nil directed_order_props nil)
    (directed? const-decl "bool" directed_orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil directed_order_props nil)
    (set type-eq-decl nil sets nil) (pred type-eq-decl nil defined_types nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders nil)
    (<= formal-const-decl "(directed_complete_partial_order?[T])"
        directed_order_props nil)
    (lower_set? const-decl "bool" partial_order_props nil)
    (lower_set nonempty-type-eq-decl nil partial_order_props nil))
   shostak))
 (directed_union_lower 0
  (directed_union_lower-1 nil 3352695995
   ("" (skosimp)
    (("" (typepred "L1!1")
      (("" (typepred "L2!1")
        (("" (typepred "D!1")
          (("" (name "D1" "difference(D!1,L1!1)")
            (("" (name "D2" "difference(D!1,L2!1)")
              (("" (case "nonempty?(D1)")
                (("1" (case "nonempty?(D2)")
                  (("1" (expand "nonempty?")
                    (("1" (expand "empty?")
                      (("1" (expand "member")
                        (("1" (skolem 1 ("y"))
                          (("1" (skolem 1 ("x"))
                            (("1" (expand "D2")
                              (("1" (expand "D1")
                                (("1" (hide -3 -4)
                                  (("1" (expand "difference")
                                    (("1" (expand "member")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "lower_set?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "directed?")
                                              (("1"
                                                (expand "directed?")
                                                (("1"
                                                  (inst - "x" "y")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem! -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (typepred "z!1")
                                                          (("1"
                                                            (expand "union")
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (inst-cp
                                                                   -8
                                                                   "z!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -9)
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "z!1"
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -7
                                                                         "z!1"
                                                                         "y")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "D2")
                    (("2" (hide-all-but (1 3))
                      (("2" (expand "difference")
                        (("2" (expand "nonempty?")
                          (("2" (expand "empty?")
                            (("2" (expand "subset?")
                              (("2" (expand "member")
                                (("2" (skosimp*)
                                  (("2" (inst - "x!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "D1")
                  (("2" (hide-all-but (1 2 -3))
                    (("2" (expand "nonempty?")
                      (("2" (expand "difference")
                        (("2" (expand "empty?")
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2" (skosimp*)
                                (("2" (inst - "x!2") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lower_set nonempty-type-eq-decl nil partial_order_props nil)
    (lower_set? const-decl "bool" partial_order_props nil)
    (<= formal-const-decl "(directed_complete_partial_order?[T])"
        directed_order_props nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders nil)
    (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil)
    (T formal-type-decl nil directed_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (directed? const-decl "bool" directed_order_props nil)
    (directed type-eq-decl nil directed_order_props nil)
    (empty? const-decl "bool" sets nil)
    (D2 skolem-const-decl "set[T]" directed_order_props nil)
    (subset? const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union_lower_set application-judgement "lower_set[T, <=]"
     directed_order_props nil)
    (directed? const-decl "bool" directed_orders nil)
    (D1 skolem-const-decl "set[T]" directed_order_props nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (difference const-decl "set" sets nil))
   shostak)))


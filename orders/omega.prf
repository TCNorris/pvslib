(omega
 (gt_n_TCC1 0
  (gt_n_TCC1-1 nil 3643446453 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (gt_n subtype "(number_fields.-)(omega.n, 1)" "nat")))
 (gt_n_decomp_TCC1 0
  (gt_n_decomp_TCC1-1 nil 3644318968 ("" (subtype-tcc) nil nil) nil nil
   (gt_n_decomp subtype "(number_fields.-)(omega.n, 1)" "nat")))
 (gt_n_decomp 0
  (gt_n_decomp-2 nil 3644324511
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "gt_n" -1)
          (("1" (skeep)
            (("1" (expand "gt_n")
              (("1" (inst 1 "c") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (expand "gt_n" -2)
            (("2" (skeep -2)
              (("2" (inst -1 "c" "b" "lt!1")
                (("2" (assert)
                  (("2" (skolem -1 "c_")
                    (("2" (flatten)
                      (("2" (inst 1 "c_")
                        (("2" (assert)
                          (("2" (expand "gt_n" 1)
                            (("2" (inst 1 "c") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (gt_n inductive-decl "bool" omega nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil omega nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (gt_n_decomp-1 nil 3644318973
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "gt_n" -1)
          (("1" (skeep)
            (("1" (expand "gt_n")
              (("1" (inst 1 "c") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (expand "gt_n" -2)
            (("2" (skeep -2)
              (("2" (inst -1 "c" "b" "<")
                (("2" (assert)
                  (("2" (skolem -1 "c_")
                    (("2" (flatten)
                      (("2" (inst 1 "c_")
                        (("2" (assert)
                          (("2" (expand "gt_n" 1)
                            (("2" (inst 1 "c") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (gt_n_extension 0
  (gt_n_extension-2 nil 3644324493
   ("" (induct "m")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (case "n=ja")
          (("1" (replaces -1)
            (("1" (hide -3)
              (("1" (use "gt_n_decomp")
                (("1" (assert)
                  (("1" (skeep -1) (("1" (inst? 1) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "a" "lt!1" "n")
            (("2" (replace 2 -1)
              (("2" (use "gt_n_decomp")
                (("2" (assert)
                  (("2" (skeep -1) (("2" (inst? 2) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (gt_n_decomp formula-decl nil omega nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (< const-decl "bool" reals nil) (gt_n inductive-decl "bool" omega nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil omega nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (gt_n_extension-1 nil 3644317901
   ("" (induct "m")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (case "n=ja")
          (("1" (replaces -1)
            (("1" (hide -3)
              (("1" (use "gt_n_decomp")
                (("1" (assert)
                  (("1" (skeep -1) (("1" (inst? 1) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "a" "<" "n")
            (("2" (replace 2 -1)
              (("2" (use "gt_n_decomp")
                (("2" (assert)
                  (("2" (skeep -1) (("2" (inst? 2) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (infinite_branch 0
  (infinite_branch-4 nil 3644324288
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | lt!1(a_,a)): EXISTS(n:above(0)): FORALL(b): NOT gt_n(lt!1)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "lt!1")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|lt!1(y,a)): min({n_:above(0)|FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1"
                    (name "max_ns"
                          "finite_sets_minmax[above(0), LAMBDA (s: [above(0), above(0)]): <=(s)].max(ns)")
                    (("1"
                      (case "FORALL(a_:T | lt!1(a_,a)): FORALL(b): NOT gt_n(lt!1)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1" (assert)
                                (("1" (skolem -7 "x_a")
                                  (("1" (inst -2 "x_a")
                                    (("1" (inst -2 "b_max")
                                      (("1" (flatten) nil nil)) nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -5 -6 -7 -1)
                                (("2" (typepred "max_ns")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2"
                            (name "min_n_i"
                                  "min({n: above(0) | FORALL (b): NOT gt_n(lt!1)(n)(a_i, b)})")
                            (("1" (inst -4 "min_n_i")
                              (("1" (split -4)
                                (("1" (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -4 1))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "lt!1"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1" (inst? -2) nil nil))
                                                nil)
                                               ("2"
                                                (skeep 3)
                                                (("2" (inst? 1) nil nil))
                                                nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 -1))
                                  (("2" (expand "ns")
                                    (("2" (inst 1 "a_i") nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -9 "a_i")
                              (("2" (hide-all-but (1 -9))
                                (("2" (expand "nonempty?")
                                  (("2" (expand "empty?")
                                    (("2" (expand "member")
                                      (("2"
                                        (skeep -2)
                                        (("2" (inst -1 "n") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (assert)
                      (("3" (expand "ns" -1)
                        (("3" (expand "empty?")
                          (("3" (expand "member")
                            (("3" (inst -5 "1")
                              (("3" (skolem -5 "a_i")
                                (("3" (expand "gt_n" -5)
                                  (("3" (inst -6 "a_i")
                                    (("3" (skeep -6)
                                      (("3"
                                        (inst
                                         -1
                                         "min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(a_i, b)})")
                                        (("1" (inst 1 "a_i") nil nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2" (inst -1 "n") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1))
                    (("2" (expand "ns")
                      (("2" (expand "is_finite")
                        (("2" (skeep)
                          (("2"
                            (inst 1 "N"
                             "LAMBDA(n:above(0)|EXISTS (y: T | lt!1(y,a)):
                                       min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = n):
                   f(epsilon({y:T| lt!1(y,a) AND min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)})=n }))")
                            (("1" (expand "injective?")
                              (("1" (skeep)
                                (("1" (inst? -2 :where -1)
                                  (("1" (assert)
                                    (("1" (hide -1)
                                      (("1"
                                        (use "epsilon_ax[T]")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (name-replace
                                               "ep1"
                                               "epsilon({y: T |
                                                  lt!1(y,a) AND
                                                   min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = x1})")
                                              (("1"
                                                (use "epsilon_ax[T]")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "ep2"
                                                       "epsilon({y: T |
                                                              lt!1(y,a) AND
                                                               min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = x2})")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (reveal -7)
                                                        (("2"
                                                          (hide-all-but
                                                           (1 -1))
                                                          (("2"
                                                            (skolem 1 "a_i")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a_i")
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (skeep -2)
                                                      (("2"
                                                        (inst 1 "y")
                                                        (("2"
                                                          (typepred "y")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -7)
                                                  (("2"
                                                    (hide-all-but (1 -1))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "y")
                                                        (("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst -3 "n")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal -6)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -1 "y")
                                                      (("2"
                                                        (expand "nonempty?")
                                                        (("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst -3 "n")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "x1")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "y")
                                                  (("2"
                                                    (typepred "y")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal -6)
                                          (("2"
                                            (hide-all-but (1 -1))
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "y")
                                                (("2"
                                                  (expand "nonempty?")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "n")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (reveal -4)
                                    (("2" (hide-all-but (1 -1))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "y")
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -3 "n")
                                                  (("2"
                                                    (expand "member")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (use "epsilon_ax[T]")
                                (("1" (split -1)
                                  (("1" (flatten) nil nil)
                                   ("2" (hide 2)
                                    (("2" (typepred "n")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "y")
                                          (("2"
                                            (typepred "y")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (reveal -4)
                                  (("2" (hide-all-but (1 -1))
                                    (("2" (skeep)
                                      (("2"
                                        (inst -1 "y")
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3" (reveal -3)
                                (("3" (inst -1 "y")
                                  (("3" (expand "nonempty?")
                                    (("3" (expand "empty?")
                                      (("3"
                                        (expand "member")
                                        (("3"
                                          (skeep)
                                          (("3" (inst -3 "n!1") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4" (reveal -3)
                                (("4" (expand "nonempty?")
                                  (("4" (expand "empty?")
                                    (("4" (expand "member")
                                      (("4"
                                        (inst -1 "y")
                                        (("4"
                                          (skeep)
                                          (("4" (inst -2 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 "a_i")
                  (("2" (inst -3 "a_i")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep -4)
                          (("2" (inst -1 "n")
                            (("2" (expand "member") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "a_")
          (("2" (typepred "a_")
            (("2" (assert)
              (("2" (skeep)
                (("2" (inst 1 "n")
                  (("2" (skeep) (("2" (inst 1 "b") nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (gt_n inductive-decl "bool" omega nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_branching? const-decl "bool" omega nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil omega nil)
    (is_finite const-decl "bool" finite_sets nil)
    (a_i skolem-const-decl "T" omega nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (x_a skolem-const-decl "T" omega nil)
    (lt!1 skolem-const-decl "{lt: (finite_branching?) |
   FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a, b)}" omega nil)
    (a skolem-const-decl "T" omega nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (member const-decl "bool" sets nil)
    (ns skolem-const-decl "[above(0) -> boolean]" omega nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_n_extension formula-decl nil omega nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (total_order? const-decl "bool" orders nil)
    (max const-decl "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}"
         finite_sets_minmax finite_sets)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (y skolem-const-decl "T" omega nil) (y skolem-const-decl "T" omega nil)
    (injective? const-decl "bool" functions nil)
    (y skolem-const-decl "T" omega nil) (y skolem-const-decl "T" omega nil)
    (a_i skolem-const-decl "T" omega nil) (y skolem-const-decl "T" omega nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (y skolem-const-decl "T" omega nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (epsilon const-decl "T" epsilons nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (infinite_branch-3 nil 3644320794
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | a_ < a): EXISTS(n:above(0)): FORALL(b): NOT gt_n(<)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "<")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|y<a): min({n_:above(0)|FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1" (name "max_ns" "fset_props[above(0)].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | a_ < a): FORALL(b): NOT gt_n(<)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1" (assert)
                                (("1" (skolem -7 "x_a")
                                  (("1" (inst -2 "x_a")
                                    (("1" (inst -2 "b_max")
                                      (("1" (flatten) nil nil)) nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -5 -6 -7 -1)
                                (("2" (typepred "max_ns")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(<)(n)(a_i, b)})")
                              (("1" (inst -4 "min_n_i")
                                (("1" (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -7))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "<"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1" (inst? -2) nil nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2" (inst? 1) nil nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 -1))
                                  (("2" (expand "ns")
                                    (("2" (inst 1 "a_i") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -9 "a_i")
                                (("2" (hide-all-but (1 -9))
                                  (("2" (expand "nonempty?")
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep -2)
                                          (("2" (inst -1 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict")
                      (("2"
                        (typepred
                         "fset_props[above(0)].max_fs(ns, LAMBDA (s: [above(0), above(0)]): <(s))")
                        (("1" (propax) nil nil)
                         ("2" (assert)
                          (("2" (expand "ns" -1)
                            (("2" (expand "empty?")
                              (("2" (expand "member")
                                (("2" (hide 1)
                                  (("2" (inst -5 "1")
                                    (("2" (skolem -5 "a_i")
                                      (("2"
                                        (expand "gt_n" -5)
                                        (("2"
                                          (inst -6 "a_i")
                                          (("2"
                                            (skeep -6)
                                            (("2"
                                              (inst
                                               -1
                                               "min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(a_i, b)})")
                                              (("1" (inst 1 "a_i") nil nil)
                                               ("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst -1 "n")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (expand "ns" -1)
                        (("3" (expand "empty?")
                          (("3" (expand "member")
                            (("3" (inst -5 "1")
                              (("3" (skolem -5 "a_i")
                                (("3" (expand "gt_n" -5)
                                  (("3" (inst -6 "a_i")
                                    (("3" (skeep -6)
                                      (("3"
                                        (inst
                                         -1
                                         "min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(a_i, b)})")
                                        (("1" (inst 1 "a_i") nil nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2" (inst -1 "n") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1))
                    (("2" (expand "ns")
                      (("2" (expand "is_finite")
                        (("2" (skeep)
                          (("2"
                            (inst 1 "N"
                             "LAMBDA(n:above(0)|EXISTS (y: T | y < a):
                       min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n):
   f(epsilon({y:T| y<a AND min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)})=n }))")
                            (("1" (expand "injective?")
                              (("1" (skeep)
                                (("1" (inst? -2 :where -1)
                                  (("1" (assert)
                                    (("1" (hide -1)
                                      (("1"
                                        (use "epsilon_ax[T]")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (name-replace
                                               "ep1"
                                               "epsilon({y: T |
                  y < a AND
                   min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)}) = x1})")
                                              (("1"
                                                (use "epsilon_ax[T]")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "ep2"
                                                       "epsilon({y: T |
                  y < a AND
                   min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)}) = x2})")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (reveal -7)
                                                        (("2"
                                                          (hide-all-but
                                                           (1 -1))
                                                          (("2"
                                                            (skolem 1 "a_i")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a_i")
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (skeep -2)
                                                      (("2"
                                                        (inst 1 "y")
                                                        (("2"
                                                          (typepred "y")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -7)
                                                  (("2"
                                                    (hide-all-but (1 -1))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "y")
                                                        (("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst -3 "n")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal -6)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -1 "y")
                                                      (("2"
                                                        (expand "nonempty?")
                                                        (("2"
                                                          (expand "empty?")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst -3 "n")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "x1")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "y")
                                                  (("2"
                                                    (typepred "y")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal -6)
                                          (("2"
                                            (hide-all-but (1 -1))
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "y")
                                                (("2"
                                                  (expand "nonempty?")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "n")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (reveal -4)
                                    (("2" (hide-all-but (1 -1))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "y")
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -3 "n")
                                                  (("2"
                                                    (expand "member")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (use "epsilon_ax[T]")
                                (("1" (split -1)
                                  (("1" (flatten) nil nil)
                                   ("2" (hide 2)
                                    (("2" (typepred "n")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "y")
                                          (("2"
                                            (typepred "y")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (reveal -4)
                                  (("2" (hide-all-but (1 -1))
                                    (("2" (skeep)
                                      (("2"
                                        (inst -1 "y")
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3" (reveal -3)
                                (("3" (inst -1 "y")
                                  (("3" (expand "nonempty?")
                                    (("3" (expand "empty?")
                                      (("3"
                                        (expand "member")
                                        (("3"
                                          (skeep)
                                          (("3" (inst -3 "n!1") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4" (reveal -3)
                                (("4" (expand "nonempty?")
                                  (("4" (expand "empty?")
                                    (("4" (expand "member")
                                      (("4"
                                        (inst -1 "y")
                                        (("4"
                                          (skeep)
                                          (("4" (inst -2 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 "a_i")
                  (("2" (inst -3 "a_i")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep -4)
                          (("2" (inst -1 "n")
                            (("2" (expand "member") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "a_")
          (("2" (typepred "a_")
            (("2" (assert)
              (("2" (skeep)
                (("2" (inst 1 "n")
                  (("2" (skeep) (("2" (inst 1 "b") nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (infinite_branch-2 nil 3644320426
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | a_ < a): EXISTS(n:above(0)): FORALL(b): NOT gt_n(<)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "<")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|y<a): min({n_:above(0)|FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1" (name "max_ns" "fset_props[nat].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | a_ < a): FORALL(b): NOT gt_n(<)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1" (assert)
                                (("1" (skolem -7 "x_a")
                                  (("1" (inst -2 "x_a")
                                    (("1" (inst -2 "b_max")
                                      (("1" (flatten) nil nil)) nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -5 -6 -7 -1)
                                (("2" (typepred "max_ns")
                                  (("2" (assert) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(<)(n)(a_i, b)})")
                              (("1" (inst -3 "min_n_i")
                                (("1" (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -6))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "<"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1" (inst? -2) nil nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2" (inst? 1) nil nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 -1))
                                  (("2" (expand "ns")
                                    (("2" (inst 1 "a_i") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -8 "a_i")
                                (("2" (hide-all-but (1 -8))
                                  (("2" (expand "nonempty?")
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep -2)
                                          (("2" (inst -1 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict")
                      (("2"
                        (typepred
                         "fset_props[nat].max_fs(ns, LAMBDA (s: [nat, nat]): <(s))")
                        (("1" (propax) nil nil) ("2" (postpone) nil nil))
                        nil))
                      nil)
                     ("3" (postpone) nil nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -3 "y")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep)
                          (("2" (inst -1 "n")
                            (("2" (expand "member") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (infinite_branch-1 nil 3644273114
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | a_ < a): EXISTS(n:above(0)): FORALL(b): NOT gt_n(<)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "<")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|y<a): min({n_:nat|FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1" (name "max_ns" "fset_props[nat].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | a_ < a): FORALL(b): NOT gt_n(<)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1" (assert)
                                (("1" (skolem -7 "x_a")
                                  (("1" (inst -2 "x_a")
                                    (("1" (inst -2 "b_max")
                                      (("1" (flatten) nil nil)) nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -5 -6 -7 -1)
                                (("2" (typepred "max_ns")
                                  (("2" (assert) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(<)(n)(a_i, b)})")
                              (("1" (inst -3 "min_n_i")
                                (("1" (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -6))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "<"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1" (inst? -2) nil nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2" (inst? 1) nil nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 -1))
                                  (("2" (expand "ns")
                                    (("2" (inst 1 "a_i")
                                      (("2" (postpone) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -3 "y")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep)
                          (("2" (inst -1 "n")
                            (("2" (expand "member") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (seq_gt_TCC1 0
  (seq_gt_TCC1-1 nil 3644269319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil omega nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_branching? const-decl "bool" omega nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" omega nil))
   nil
   (seq_gt subtype "omega.a"
    "{b: omega.T | FORALL (n: integers.above(0)): EXISTS (b_: omega.T): omega.gt_n(omega.lt)(n)(b, b_)}")))
 (seq_gt_TCC2 0
  (seq_gt_TCC2-1 nil 3644269319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil omega nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_branching? const-decl "bool" omega nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" omega nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (seq_gt subtype "(number_fields.-)(omega.n, 1)" "nat")))
 (seq_gt_TCC3 0
  (seq_gt_TCC3-1 nil 3644269319 ("" (termination-tcc) nil nil) nil nil
   (seq_gt termination
    "omega.seq_gt(omega.a)(omega.lt)((number_fields.-)(omega.n, 1))" "nil")))
 (seq_gt_TCC4 0
  (seq_gt_TCC4-1 nil 3644269319
   ("" (skeep*)
    (("" (use "epsilon_ax[T]")
      (("1" (split -1)
        (("1" (flatten) (("1" (inst -2 "n_1") nil nil)) nil)
         ("2" (hide 3)
          (("2" (lemma "infinite_branch")
            (("2" (inst -1 "v(a)(lt!1)(n - 1)" "lt!1")
              (("1" (typepred "v(a)(lt!1)(n - 1)")
                (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((T formal-type-decl nil omega nil)
    (epsilon_ax formula-decl nil epsilons nil) (< const-decl "bool" reals nil)
    (gt_n inductive-decl "bool" omega nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (finite_branching? const-decl "bool" omega nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" omega nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (a skolem-const-decl "T" omega nil)
    (lt!1 skolem-const-decl "{lt: (finite_branching?) |
   FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a, b)}" omega nil)
    (v skolem-const-decl "[a1: T ->
   [lt11:
      {lt: (finite_branching?) |
         FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a1, b)} ->
      [{z: nat | z < n} ->
         {b: T |
            FORALL (n: above(0)): EXISTS (b_: T): gt_n(lt11)(n)(b, b_)}]]]"
     omega nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (infinite_branch formula-decl nil omega nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (seq_gt subtype
    "epsilons[omega.T].epsilon({b: omega.T | booleans.AND(omega.lt(b, omega.seq_gt(omega.a)(omega.lt)((number_fields.-)(omega.n, 1))), FORALL (n: integers.above(0)): EXISTS (b_: omega.T): omega.gt_n(omega.lt)(n)(b, b_))})"
    "{b: omega.T | FORALL (n: integers.above(0)): EXISTS (b_: omega.T): omega.gt_n(omega.lt)(n)(b, b_)}")))
 (seq_gt_dec 0
  (seq_gt_dec-2 nil 3644323938
   ("" (skeep*)
    (("" (expand "seq_gt" 1 1)
      (("" (use "epsilon_ax[T]")
        (("" (split -1)
          (("1" (flatten) nil nil)
           ("2" (hide 2)
            (("2" (lemma "infinite_branch")
              (("2" (inst -1 "seq_gt(a)(lt!1)(n)" "lt!1")
                (("2" (typepred "seq_gt(a)(lt!1)(n)") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_gt def-decl
     "{b: T | FORALL (n: above(0)): EXISTS (b_: T): gt_n(lt)(n)(b, b_)}" omega
     nil)
    (infinite_branch formula-decl nil omega nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n skolem-const-decl "nat" omega nil)
    (lt!1 skolem-const-decl "{lt: (finite_branching?) |
   FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a, b)}" omega nil)
    (a skolem-const-decl "T" omega nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_branching? const-decl "bool" omega nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" omega nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (T formal-type-decl nil omega nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (seq_gt_dec-1 nil 3644270231
   ("" (skeep*)
    (("" (expand "seq_gt" 1 1)
      (("" (use "epsilon_ax[T]")
        (("" (split -1)
          (("1" (flatten) nil nil)
           ("2" (hide 2)
            (("2" (lemma "infinite_branch")
              (("2" (inst -1 "seq_gt(a)(<)(n)" "<")
                (("2" (typepred "seq_gt(a)(<)(n)") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bottom 0
  (seq_gt "" 3644269995
   ("" (skeep)
    (("" (case "(FORALL (n:above(0)): EXISTS (b): gt_n(lt)(n)(a, b))")
      (("1" (hide 1)
        (("1" (typepred "lt")
          (("1" (use "no_infinite_descending_sequence")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (expand "empty?")
                  (("1" (expand "member")
                    (("1" (expand "descending?")
                      (("1" (inst -1 "seq_gt(a)(lt)")
                        (("1" (skeep) (("1" (use "seq_gt_dec") nil nil)) nil)
                         ("2" (split 1)
                          (("1" (hide-all-but 1)
                            (("1" (expand "finite_branching?")
                              (("1" (use "lt_no_desc_inf_branch") nil nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "n") (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((lt formal-const-decl "(well_founded?[T])" omega nil)
    (well_founded? const-decl "bool" orders nil)
    (gt_n inductive-decl "bool" omega nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil omega nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (descending? const-decl "bool" monotone_sequences nil)
    (lt_no_desc_inf_branch formula-decl nil omega nil)
    (seq_gt_dec formula-decl nil omega nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (sequence type-eq-decl nil sequences nil)
    (seq_gt def-decl
     "{b: T | FORALL (n: above(0)): EXISTS (b_: T): gt_n(lt)(n)(b, b_)}" omega
     nil)
    (a skolem-const-decl "T" omega nil)
    (finite_branching? const-decl "bool" omega nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness nil))
   shostak)
  (bottom-2 nil 3643647842
   ("" (skeep)
    (("" (case "(FORALL (n:above(0)): EXISTS (b): gt_n(n)(a, b))")
      (("1" (hide 1)
        (("1" (use "lt__wf")
          (("1" (replace -2 -1)
            (("1" (use "no_infinite_descending_sequence")
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (expand "descending?")
                        (("1"
                          (inst -1
                           "LAMBDA(n:nat): epsilon({b_:T | (EXISTS(m:nat):gt_n(m)(a,b_)) AND level_(a)(b_)=n+1})")
                          (("1" (skolem 1 "n")
                            (("1" (assert)
                              (("1" (use "epsilon_ax[T]")
                                (("1" (split -1)
                                  (("1"
                                    (name-replace "e2" "epsilon({b_: T |
                                   (EXISTS (m: nat): gt_n(m)(a, b_)) AND
                                    level_(a)(b_) = 2 + n})")
                                    (("1" (use "epsilon_ax[T]")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (name-replace
                                           "e1"
                                           "epsilon({b_: T |
                                         (EXISTS (m: nat): gt_n(m)(a, b_)) AND
                                          level_(a)(b_) = 1 + n})")
                                          (("1"
                                            (expand "lt_")
                                            (("1"
                                              (split 1)
                                              (("1" (flatten) nil nil)
                                               ("2" (flatten) nil nil)
                                               ("3"
                                                (flatten)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "each_level")
                                          (("2"
                                            (replace -3 -1)
                                            (("2"
                                              (inst -1 "1+n")
                                              (("2"
                                                (skeep -1)
                                                (("2"
                                                  (inst 1 "b")
                                                  (("2"
                                                    (assert)
                                                    (("2" (inst?) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (use "each_level")
                                    (("2" (replace -2 -1)
                                      (("2"
                                        (inst -1 "2+n")
                                        (("2"
                                          (skeep -1)
                                          (("2"
                                            (inst 1 "b")
                                            (("2"
                                              (assert)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "n") (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((no_infinite_descending_sequence formula-decl nil well_foundedness nil)
    (descending? const-decl "bool" monotone_sequences nil))
   nil)
  (bottom-1 nil 3643647818 ("" (postpone) nil nil) nil shostak))
 (Omega_TCC1 0
  (Omega_TCC1-1 nil 3643402145
   ("" (skeep)
    (("" (use "bottom")
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (expand "member")
            (("" (skeep) (("" (inst -2 "n") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bottom formula-decl nil omega nil) (T formal-type-decl nil omega nil)
    (empty? const-decl "bool" sets nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (Omega subtype
    "{n: integers.above(0) | FORALL (b): (booleans.NOT)(omega.gt_n(omega.lt)(n)(omega.a, omega.b))}"
    "(sets[integers.above(0)].nonempty?)")))
 (omega_prev_TCC1 0
  (omega_prev_TCC1-1 nil 3647254163 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (T formal-type-decl nil omega nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Omega const-decl "nat" omega nil))
   nil
   (omega_prev subtype "(number_fields.-)(omega.Omega(omega.y), 1)" "nat")))
 (omega_prev 0
  (omega_prev-1 nil 3647254474
   ("" (skeep :preds? t)
    (("" (expand "Omega")
      (("" (typepred "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(y, b)})")
        (("1"
          (inst -3
           "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(y, b)}) - 1")
          (("1" (assert) (("1" (skeep 1) (("1" (inst 1 "b_1") nil nil)) nil))
            nil)
           ("2" (assert) nil nil)
           ("3" (use "bottom")
            (("3" (hide 2)
              (("3" (expand "nonempty?")
                (("3" (expand "empty?")
                  (("3" (expand "member") (("3" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "bottom")
          (("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (skeep -1) (("2" (inst -2 "n") nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Omega const-decl "nat" omega nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (y skolem-const-decl "{y: T | Omega(y) > 1}" omega nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (bottom formula-decl nil omega nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (T formal-type-decl nil omega nil)
    (pred type-eq-decl nil defined_types nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" omega nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[T])" omega nil))
   shostak))
 (gt_n_omega 0
  (gt_n_omega-1 nil 3647196281
   ("" (skeep :preds? t)
    (("" (use "omega_prev")
      (("" (case "n=Omega(y)-1")
        (("1" (replaces -1) nil nil)
         ("2" (skeep)
          (("2" (lemma "gt_n_extension")
            (("2" (inst -1 "y" "lt" "n" "Omega(y)-1")
              (("2" (assert)
                (("2" (split -1)
                  (("1" (propax) nil nil) ("2" (inst 1 "z") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((omega_prev formula-decl nil omega nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (Omega const-decl "nat" omega nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil omega nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt formal-const-decl "(well_founded?[T])" omega nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_n_extension formula-decl nil omega nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (omega_increasing 0
  (omega_increasing-1 nil 3647191866
   ("" (skeep :preds? t)
    (("" (case "Omega(y) >= Omega(x)")
      (("1" (hide 1)
        (("1" (case "EXISTS(d:nat): Omega(y) = Omega(x) + d")
          (("1" (skeep)
            (("1" (lemma "gt_n_omega")
              (("1" (inst -1 "Omega(y) - d -1" "y")
                (("1" (skeep)
                  (("1" (replaces -2)
                    (("1" (assert)
                      (("1" (case "gt_n(lt)(Omega(x))(x, z)")
                        (("1" (hide-all-but -1)
                          (("1" (expand "Omega")
                            (("1"
                              (typepred
                               "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(x, b)})")
                              (("1" (grind) nil nil)
                               ("2" (hide -1)
                                (("2" (use " bottom")
                                  (("2" (skeep)
                                    (("2" (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst -2 "n")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "gt_n" 1)
                          (("2" (flatten)
                            (("2" (split 1)
                              (("1" (grind) nil nil)
                               ("2" (split 2)
                                (("1" (case "Omega(x)=1")
                                  (("1" (replaces -1)
                                    (("1" (assert)
                                      (("1"
                                        (expand "gt_n")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2" (inst 1 "y") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (hide -1)
                      (("2" (case "Omega(x) = 1")
                        (("1" (expand "Omega")
                          (("1" (hide 1)
                            (("1"
                              (typepred
                               "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(x, b)})")
                              (("1" (replaces -4)
                                (("1" (expand "gt_n")
                                  (("1" (inst? -2) nil nil)) nil))
                                nil)
                               ("2" (use "bottom")
                                (("2" (expand "nonempty?")
                                  (("2" (expand "empty?")
                                    (("2" (expand "member")
                                      (("2"
                                        (skeep -1)
                                        (("2" (inst -2 "n") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "Omega(y)-Omega(x)")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((lt formal-const-decl "(well_founded?[T])" omega nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Omega const-decl "nat" omega nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil omega nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (gt_n_omega formula-decl nil omega nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (bottom formula-decl nil omega nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil) (gt_n inductive-decl "bool" omega nil)
    (TRUE const-decl "bool" booleans nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (d skolem-const-decl "nat" omega nil)
    (y skolem-const-decl "{y: T | lt(y, x)}" omega nil)
    (x skolem-const-decl "T" omega nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak)))


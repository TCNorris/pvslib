(converse_zorn
 (converse_zorn 0
  (converse_zorn-1 nil 3315006945
   ("" (lemma "zorn")
    (("" (prop)
      (("1" (skolem!)
        (("1" (inst? +)
          (("1" (expand* "maximal?" "minimal?" "member" "converse") nil nil))
          nil))
        nil)
       ("2" (skolem-typepred)
        (("2" (inst - "ch!1")
          (("1"
            (expand* "bounded_below?" "lower_bound?" "bounded_above?"
             "upper_bound?" "converse")
            nil nil)
           ("2"
            (expand* "chain?" "total_order?" "partial_order?" "preorder?"
             "restrict" "dichotomous?" "converse")
            (("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minimal? const-decl "bool" minmax_orders nil)
    (maximal? const-decl "bool" minmax_orders nil)
    (ch!1 skolem-const-decl "chain[T, converse(<=)]" converse_zorn nil)
    (upper_bound? const-decl "bool" bounded_orders nil)
    (bounded_above? const-decl "bool" bounded_orders nil)
    (lower_bound? const-decl "bool" bounded_orders nil)
    (bounded_below? const-decl "bool" bounded_orders nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (restrict const-decl "R" restrict nil)
    (dichotomous? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (chain nonempty-type-eq-decl nil chain nil)
    (chain? const-decl "bool" chain nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zorn formula-decl nil zorn nil)
    (T formal-type-decl nil converse_zorn nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (partial_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(partial_order?[T])" converse_zorn nil))
   shostak)))


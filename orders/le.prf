(le
 (le_total_order 0
  (le_total_order-1 nil 3756557172
   ("" (typepred "lt")
    (("" (expand "strict_total_order?")
      (("" (expand "total_order?")
        (("" (flatten)
          (("" (expand "partial_order?")
            (("" (expand "preorder?")
              (("" (expand "strict_order?")
                (("" (flatten)
                  (("" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (expand "transitive?")
                      (("2" (skeep)
                        (("2" (expand "le")
                          (("2" (expand "trichotomous?")
                            (("2" (inst -4 "z" "y")
                              (("2"
                                (split -4)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (inst -4 "y" "z" "x")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (grind) nil nil)
                     ("4" (expand "dichotomous?")
                      (("4" (skeep)
                        (("4" (expand "le")
                          (("4" (expand "transitive?")
                            (("4" (inst -4 "y" "x" "y")
                              (("4"
                                (assert)
                                (("4"
                                  (expand "irreflexive?")
                                  (("4" (inst -3 "y") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil)
    (le const-decl "bool" le nil)
    (reflexive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Number formal-nonempty-type-decl nil le nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt formal-const-decl "(strict_total_order?[Number])" le nil))
   shostak))
 (le_def 0
  (le_def-1 nil 3756555176
   ("" (skeep)
    (("" (expand "le")
      (("" (typepred "lt")
        (("" (grind)
          (("1" (typepred "lt")
            (("1" (assert)
              (("1" (flatten)
                (("1" (inst -2 "y" "x" "y") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "lt")
            (("2" (assert)
              (("2" (flatten)
                (("2" (inst -3 "x" "y") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le const-decl "bool" le nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Number formal-nonempty-type-decl nil le nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt formal-const-decl "(strict_total_order?[Number])" le nil))
   shostak)))


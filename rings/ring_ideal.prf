(ring_ideal
 (fullset_is_ring 0
  (fullset_is_ring-1 nil 3725292198 ("" (postpone) nil nil) nil
   shostak))
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3793737437
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_ideal nil)) nil))
 (left_ideal_equiv 0
  (left_ideal_equiv-1 nil 3720365692
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "left_ideal?")
          (("1" (flatten)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (inst -3 "x!1" "y!1")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "left_swallow?")
                                (("1"
                                  (inst -6 "r!1" "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "left_ideal?")
          (("2" (split 1)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (prop)
                  (("1" (skosimp)
                    (("1" (split)
                      (("1" (inst -3 "x!1" "y!1" "y!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "y!1")
                          (("2" (expand "subset?")
                            (("2" (inst -3 "y!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -3 "y!1" "x!1" "x!1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "x!1")
                          (("2" (expand "subset?")
                            (("2" (inst -3 "x!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "left_swallow?")
              (("2" (skosimp)
                (("2" (inst -3 "x!1" "x!1" "r!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_ideal? const-decl "bool" ring_ideal_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negate_is_right_inv formula-decl nil ring "algebra/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" ring_ideal nil)
    (I!1 skolem-const-decl "set[T]" ring_ideal nil)
    (y!1 skolem-const-decl "(I!1)" ring_ideal nil)
    (x!1 skolem-const-decl "(I!1)" ring_ideal nil))
   shostak))
 (right_ideal_equiv 0
  (right_ideal_equiv-1 nil 3720367273
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "right_ideal?")
          (("1" (flatten)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (inst -3 "x!1" "y!1")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "right_swallow?")
                                (("1"
                                  (inst -6 "r!1" "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "right_ideal?")
          (("2" (split)
            (("1" (lemma "subring_equiv")
              (("1" (inst -1 "R!1" "I!1")
                (("1" (prop)
                  (("1" (skosimp)
                    (("1" (inst -3 "x!1" "y!1" "y!1")
                      (("1" (typepred "y!1")
                        (("1" (expand "subset?")
                          (("1" (inst -3 "y!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "right_swallow?")
              (("2" (skosimp)
                (("2" (inst -3 "x!1" "x!1" "r!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_ideal? const-decl "bool" ring_ideal_def nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (negate_is_right_inv formula-decl nil ring "algebra/")
    (y!1 skolem-const-decl "(I!1)" ring_ideal nil)
    (I!1 skolem-const-decl "set[T]" ring_ideal nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" ring_ideal nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (ideal_equiv 0
  (ideal_equiv-1 nil 3747065634
   ("" (skosimp)
    (("" (lemma "right_ideal_equiv")
      (("" (lemma "left_ideal_equiv")
        (("" (inst -2 "I!1" "R!1")
          (("" (inst -1 "I!1" "R!1")
            (("" (expand "ideal?")
              (("" (prop)
                (("1" (hide-all-but (-6 -10 1))
                  (("1" (skosimp)
                    (("1" (inst -1 "x!1" "y!1" "r!1")
                      (("1" (inst -2 "x!1" "y!1" "r!1")
                        (("1" (flatten) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 2))
                  (("2" (skosimp)
                    (("2" (inst -1 "x!1" "y!1" "r!1")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but (-3 2))
                  (("3" (skosimp)
                    (("3" (inst -1 "x!1" "y!1" "r!1")
                      (("3" (flatten) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide-all-but (-3 2))
                  (("4" (skosimp)
                    (("4" (inst -1 "x!1" "y!1" "r!1")
                      (("4" (flatten) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide-all-but (-3 2))
                  (("5" (skosimp)
                    (("5" (inst -1 "x!1" "y!1" "r!1")
                      (("5" (flatten) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ideal? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (left_ideal_equiv formula-decl nil ring_ideal nil))
   shostak))
 (self_ideal 0
  (self_ideal-1 nil 3777885551
   ("" (skosimp)
    (("" (rewrite "ideal_equiv")
      (("" (case "subring?(R!1,R!1)")
        (("1" (rewrite "subring_equiv")
          (("1" (flatten)
            (("1" (assert)
              (("1" (skosimp)
                (("1" (hide -1 -2)
                  (("1" (split)
                    (("1" (inst -1 "x!1" "y!1")
                      (("1" (assert) nil nil)) nil)
                     ("2" (inst -1 "x!1" "r!1")
                      (("2" (assert) nil nil)) nil)
                     ("3" (inst -1 "r!1" "x!1")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "subring?")
            (("2" (expand "subset?") (("2" (skosimp) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subring? const-decl "bool" ring_def "algebra/"))
   shostak))
 (zero_ideal 0
  (zero_ideal-1 nil 3782143562
   ("" (skeep)
    (("" (rewrite "ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "zero")
              (("1" (expand "member")
                (("1" (expand "singleton") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep)
            (("2" (expand "member")
              (("2" (expand "singleton")
                (("2" (replaces -1)
                  (("2" (lemma "zero_is_member_R")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "singleton")
            (("3" (typepred "x" "y")
              (("3" (expand "singleton")
                (("3" (replaces -1)
                  (("3" (replaces -1) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (negate_zero formula-decl nil ring "algebra/")
    (plus_zero formula-decl nil ring "algebra/")
    (zero_times formula-decl nil ring "algebra/")
    (times_zero formula-decl nil ring "algebra/")
    (subset? const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (ideal_transitive_TCC1 0
  (ideal_transitive_TCC1-1 nil 3749914196 ("" (subtype-tcc) nil nil)
   ((ring nonempty-type-eq-decl nil ring "algebra/")
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (plus_zero formula-decl nil ring "algebra/")
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (left_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (right_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (subring? const-decl "bool" ring_def "algebra/")
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil))
   nil))
 (ideal_transitive 0
  (ideal_transitive-1 nil 3749914204
   ("" (skosimp)
    (("" (rewrite "ideal_equiv" 1)
      (("" (rewrite "ideal_equiv" -2)
        (("" (flatten)
          (("" (assert)
            (("" (hide -2 -3 -5)
              (("" (skosimp)
                (("" (inst -2 "x!1" "y!1" "r!1")
                  (("" (hide 2)
                    (("" (expand "subring?")
                      (("" (flatten)
                        (("" (hide -2)
                          (("" (expand "subset?")
                            (("" (inst -1 "r!1")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (r!1 skolem-const-decl "(H!1)" ring_ideal nil)
    (H!1 skolem-const-decl "set[T]" ring_ideal nil)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" ring_ideal nil)
    (subring? const-decl "bool" ring_def "algebra/")
    (subset? const-decl "bool" sets nil))
   shostak))
 (intersection_subring_ideal_TCC1 0
  (intersection_subring_ideal_TCC1-1 nil 3750672161
   ("" (subtype-tcc) nil nil)
   ((ring nonempty-type-eq-decl nil ring "algebra/")
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (plus_zero formula-decl nil ring "algebra/")
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (left_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (right_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (subring? const-decl "bool" ring_def "algebra/")
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil))
   nil))
 (intersection_subring_ideal 0
  (intersection_subring_ideal-1 nil 3750672162
   ("" (skosimp)
    (("" (copy -1)
      (("" (copy -3)
        (("" (expand "ideal?" -1)
          (("" (expand "left_ideal?")
            (("" (expand "subring?" (-1 -2))
              (("" (flatten)
                (("" (hide -1 -3 -4 -5)
                  (("" (rewrite "subring_equiv")
                    (("" (rewrite "ideal_equiv")
                      (("" (rewrite "ideal_equiv")
                        (("" (flatten)
                          (("" (split)
                            (("1" (hide-all-but (-1 -2 1))
                              (("1"
                                (expand "nonempty?")
                                (("1"
                                  (expand "empty?")
                                  (("1"
                                    (inst -1 "zero")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (expand "intersection")
                                        (("1"
                                          (rewrite "zero_is_member_R")
                                          (("1"
                                            (rewrite
                                             "zero_is_member_R")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -)
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "intersection")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -1 -2 -3 -6 -7)
                              (("3"
                                (copy -2)
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (typepred "x!1" "y!1" "r!1")
                                    (("3"
                                      (expand "intersection" (-1 -2))
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "subset?")
                                          (("3"
                                            (inst -7 "r!1")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 -9
                                                 "x!1"
                                                 "y!1"
                                                 "r!1")
                                                (("3"
                                                  (inst -8 "x!1" "y!1")
                                                  (("3"
                                                    (inst-cp
                                                     -6
                                                     "x!1"
                                                     "r!1")
                                                    (("3"
                                                      (inst
                                                       -6
                                                       "r!1"
                                                       "x!1")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (expand
                                                           "intersection")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def "algebra/")
    (ideal_equiv formula-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (nonempty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (zero formal-const-decl "T" ring_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_ideal nil)
    (T formal-nonempty-type-decl nil ring_ideal nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil))
   shostak)))


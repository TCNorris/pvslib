(chinese_remainder_theorem_Z
 (IMP_quotient_rings_with_one_TCC1 0
  (IMP_quotient_rings_with_one_TCC1-1 nil 3784753247
   (""
    (expand* "ring_with_one?" "ring?" "abelian_group?" "group?"
     "monoid?" "monad?" "identity?" "inv_exists?" "commutative?"
     "associative?" "star_closed?" "left_distributive?"
     "right_distributive?" "member" "restrict" "fullset")
    (("" (skosimp)
      (("" (inst 1 "-x!1")
        (("1" (assert) nil nil)
         ("2" (expand "fullset") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((x!1 skolem-const-decl "(fullset[int])" chinese_remainder_theorem_Z
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (right_distributive? const-decl "bool" operator_defs_more algebra)
    (restrict const-decl "R" restrict nil)
    (fullset const-decl "set" sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (left_distributive? const-decl "bool" operator_defs_more algebra)
    (associative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (group? const-decl "bool" group_def algebra)
    (ring? const-decl "bool" ring_def algebra))
   nil
   (IMP_quotient_rings_with_one assuming
    "quotient_rings_with_one[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].quotient_rings_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[quotient_rings_with_one.T, quotient_rings_with_one.+, quotient_rings_with_one.*, quotient_rings_with_one.zero, quotient_rings_with_one.one].ring_with_one?(sets[quotient_rings_with_one.T].fullset)")))
 (IMP_comaximal_finseqs_ideals_TCC1 0
  (IMP_comaximal_finseqs_ideals_TCC1-3 nil 3793457914
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    ((""
      (expand* "ring?" "abelian_group?" "group?" "monoid?" "monad?"
       "identity?" "inv_exists?" "commutative?" "associative?"
       "star_closed?" "left_distributive?" "right_distributive?"
       "member" "restrict" "fullset")
      (("" (skosimp)
        (("" (inst 1 "-x!1")
          (("1" (assert) nil nil)
           ("2" (expand "fullset") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((abelian_group? const-decl "bool" group_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (right_distributive? const-decl "bool" operator_defs_more algebra)
    (restrict const-decl "R" restrict nil)
    (fullset const-decl "set" sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (left_distributive? const-decl "bool" operator_defs_more algebra)
    (associative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (group? const-decl "bool" group_def algebra)
    (ring? const-decl "bool" ring_def algebra)
    (minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "(fullset[int])" chinese_remainder_theorem_Z
     nil))
   nil
   (IMP_comaximal_finseqs_ideals assuming
    "comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].comaximal_finseqs_ideals"
    "fullset_is_ring: ASSUMPTION ring_def[comaximal_finseqs_ideals.T, comaximal_finseqs_ideals.+, comaximal_finseqs_ideals.*, comaximal_finseqs_ideals.zero].ring?(sets[comaximal_finseqs_ideals.T].fullset)"))
  (IMP_comaximal_finseqs_ideals_TCC1-2 nil 3793457644
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    ((""
      (expand* "ring?" "abelian_group?" "group?" "monoid?" "monad?"
       "identity?" "inv_exists?" "commutative?" "associative?"
       "star_closed?" "left_distributive?" "right_distributive?"
       "member" "restrict" "fullset")
      (("" (skosimp)
        (("" (inst 1 "-x!1")
          (("1" (assert) nil nil)
           ("2" (expand "fullset") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((abelian_group? const-decl "bool" group_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (commutative? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (right_distributive? const-decl "bool" operator_defs_more algebra)
    (restrict const-decl "R" restrict nil)
    (fullset const-decl "set" sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (member const-decl "bool" sets nil)
    (left_distributive? const-decl "bool" operator_defs_more algebra)
    (associative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (group? const-decl "bool" group_def algebra)
    (ring? const-decl "bool" ring_def algebra)
    (minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (IMP_comaximal_finseqs_ideals assuming
    "comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].comaximal_finseqs_ideals"
    "fullset_is_ring: ASSUMPTION ring_def[comaximal_finseqs_ideals.T, comaximal_finseqs_ideals.+, comaximal_finseqs_ideals.*, comaximal_finseqs_ideals.zero].ring?(sets[comaximal_finseqs_ideals.T].fullset)"))
  (IMP_comaximal_finseqs_ideals_TCC1-1 nil 3793456439
   ("" (assuming-tcc) nil nil) nil nil
   (IMP_comaximal_finseqs_ideals assuming
    "comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].comaximal_finseqs_ideals"
    "fullset_is_ring: ASSUMPTION ring_def[comaximal_finseqs_ideals.T, comaximal_finseqs_ideals.+, comaximal_finseqs_ideals.*, comaximal_finseqs_ideals.zero].ring?(sets[comaximal_finseqs_ideals.T].fullset)")))
 (fs_rel_primes_TCC1 0
  (fs_rel_primes_TCC1-1 nil 3784648549 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (fs_rel_primes subtype
    "finite_sequences[posnat].finseq_appl(chinese_remainder_theorem_Z.fsn)(chinese_remainder_theorem_Z.j)"
    "{jj: integers.int | booleans.=>(finite_sequences[posnat].finseq_appl(chinese_remainder_theorem_Z.fsn)(chinese_remainder_theorem_Z.i) = 0, jj /= 0)}")))
 (nZ_add_TCC1 0
  (nZ_add_TCC1-1 nil 3761772339
   ("" (skeep)
    (("" (typepred "x" "y")
      (("" (expand "nZ")
        (("" (skosimp*)
          (("" (inst 1 "k!1 + k!2")
            (("" (replaces -1)
              (("" (replaces -1)
                ((""
                  (stop-rewrite "plus_zero" "zero_plus" "one_right"
                   "one_left" "right_identity" "left_identity")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (nZ_add subtype
    "(number_fields.+)(chinese_remainder_theorem_Z.x, chinese_remainder_theorem_Z.y)"
    "(chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))")))
 (Z_ring 0
  (Z_ring-1 nil 3761769882
   ("" (lemma "IMP_quotient_rings_TCC1") (("" (propax) nil nil)) nil)
   ((IMP_quotient_rings_TCC1 assuming-tcc nil comaximal_finseqs_ideals
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (Z1_is_Z 0
  (Z1_is_Z-1 nil 3784647924
   ("" (decompose-equality 1)
    (("" (iff)
      (("" (prop)
        (("1" (expand "nZ")
          (("1" (skosimp)
            (("1" (assert)
              (("1" (expand "Z")
                (("1" (expand "fullset") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "Z")
          (("2" (expand "fullset")
            (("2" (expand "nZ") (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (Z_commutative_ring_w_one 0
  (Z_commutative_ring_w_one-2 nil 3794218998
   ("" (expand "commutative_ring_with_one?")
    (("" (expand "ring_with_one?")
      (("" (expand "Z")
        (("" (expand "fullset")
          (("" (split)
            (("1" (expand "monoid?")
              (("1" (split)
                (("1" (expand "monad?")
                  (("1" (split)
                    (("1" (expand "star_closed?")
                      (("1" (skosimp)
                        (("1" (expand "member")
                          (("1" (propax) nil)))))))
                     ("2" (expand "member") (("2" (propax) nil)))
                     ("3" (expand "identity?")
                      (("3" (expand "restrict")
                        (("3" (propax) nil)))))))))
                 ("2" (expand "associative?")
                  (("2" (expand "restrict") (("2" (propax) nil)))))))))
             ("2" (expand "commutative?")
              (("2" (expand "restrict")
                (("2" (propax) nil))))))))))))))
    nil)
   nil nil)
  (Z_commutative_ring_w_one-1 nil 3784591186
   ("" (expand "commutative_ring_with_one?")
    (("" (expand "ring_with_one?")
      (("" (expand "Z")
        (("" (expand "fullset")
          (("" (split)
            (("1" (expand "monoid?")
              (("1" (split)
                (("1" (expand "monad?")
                  (("1" (split)
                    (("1" (expand "star_closed?")
                      (("1" (skosimp)
                        (("1" (expand "member")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "member") (("2" (propax) nil nil))
                      nil)
                     ("3" (expand "identity?")
                      (("3" (expand "restrict")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "associative?")
                  (("2" (expand "restrict") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "commutative?")
              (("2" (expand "restrict") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (fullset const-decl "set" sets nil)
    (commutative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (associative? const-decl "bool" operator_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (monad? const-decl "bool" monad_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (member const-decl "bool" sets nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     algebra))
   shostak))
 (nZ_ideal 0
  (nZ_ideal-1 nil 3761644406
   ("" (skosimp)
    (("" (case "subring?(nZ(n!1), Z)")
      (("1" (expand "ideal?")
        (("1" (prop)
          (("1" (expand "left_ideal?")
            (("1" (prop)
              (("1" (hide -1)
                (("1" (expand "left_swallow?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (typepred "x!1")
                        (("1" (expand "nZ")
                          (("1" (skosimp)
                            (("1" (inst 1 "r!1*k!1")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "associative_mult")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "right_ideal?")
            (("2" (prop)
              (("2" (hide -1)
                (("2" (expand "right_swallow?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (typepred "x!1")
                        (("2" (expand "nZ")
                          (("2" (skosimp)
                            (("2" (inst 1 "k!1*r!1")
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "subring?")
          (("2" (prop)
            (("1" (expand "subset?")
              (("1" (skosimp)
                (("1" (expand "member")
                  (("1" (expand* "Z" "nZ" "fullset") nil nil)) nil))
                nil))
              nil)
             ("2" (expand "ring?")
              (("2" (prop)
                (("1" (expand "abelian_group?")
                  (("1" (prop)
                    (("1" (expand "group?")
                      (("1" (prop)
                        (("1" (expand "monoid?")
                          (("1" (prop)
                            (("1" (expand "monad?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "star_closed?")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (typepred "x!1" "y!1")
                                        (("1"
                                          (expand "nZ")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst 1 "k!1 + k!2")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "distributive")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "n!1"
                                                       "k!1"
                                                       "k!2")
                                                      (("1"
                                                        (stop-rewrite
                                                         "plus_zero"
                                                         "zero_plus"
                                                         "one_right"
                                                         "one_left"
                                                         "right_identity"
                                                         "left_identity")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "member")
                                  (("2"
                                    (expand "nZ")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "identity?")
                                  (("3"
                                    (expand "restrict")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "associative?")
                              (("2"
                                (expand "restrict")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "inv_exists?")
                          (("2" (skosimp)
                            (("2" (inst 1 "-x!1")
                              (("1"
                                (lemma "inverse_add")
                                (("1"
                                  (inst?)
                                  (("1" (prop) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x!1")
                                (("2"
                                  (expand "nZ")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst 1 "-k!1")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "mult_neg")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (replace -1 1 rl)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma
                                                   "both_sides_times2")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lemma
                                                         "expt_m1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "^")
                                                            (("1"
                                                              (expand
                                                               "power")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "commutative?")
                      (("2" (expand "restrict")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "star_closed?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (typepred "x!1" "y!1")
                        (("2" (expand "nZ")
                          (("2" (skosimp*)
                            (("2" (inst 1 "n!1*k!1*k!2")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (lemma "associative_mult")
                                    (("2"
                                      (inst?)
                                      (("2" (replaces -1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "associative?")
                  (("3" (expand "restrict") (("3" (propax) nil nil))
                    nil))
                  nil)
                 ("4" (expand "left_distributive?")
                  (("4" (expand "restrict") (("4" (propax) nil nil))
                    nil))
                  nil)
                 ("5" (expand "right_distributive?")
                  (("5" (expand "restrict") (("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (subring? const-decl "bool" ring_def algebra)
    (ring? const-decl "bool" ring_def algebra)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (associative_mult formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (right_distributive? const-decl "bool" operator_defs_more algebra)
    (left_distributive? const-decl "bool" operator_defs_more algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def algebra)
    (inv_exists? const-decl "bool" group_def algebra)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (inverse_add formula-decl nil number_fields nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (both_sides_times2 formula-decl nil real_props nil)
    (negate_zero formula-decl nil ring algebra)
    (expt_m1 formula-decl nil group algebra)
    (^ const-decl "T" group algebra)
    (power_0 formula-decl nil monoid algebra)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (power def-decl "T" monoid_def algebra)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (zero_times formula-decl nil ring algebra)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (distributive formula-decl nil number_fields nil)
    (subset? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (Zn_finite_set 0
  (Zn_finite_set-1 nil 3761747231
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp*)
      (("" (expand "is_finite")
        ((""
          (inst 1 "n!1"
           "(LAMBDA (A:(Z(n!1))): rem(n!1)(lc_gen(Z,nZ(n!1))(A)))")
          (("1" (expand "injective?")
            (("1" (skosimp*)
              (("1" (typepred "x1!1" "x2!1")
                (("1" (expand "Z")
                  (("1" (expand "/")
                    (("1" (expand "coset?")
                      (("1" (flatten)
                        (("1" (hide (-2 -4))
                          (("1" (expand "left_coset?")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma "lcos_eq2")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (rewrite "same_remainder")
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma "lc_gen_eq")
                                                  (("1"
                                                    (copy -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "nZ(n!1)"
                                                       "fullset[int]"
                                                       "a!1")
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "nZ(n!1)"
                                                         "fullset[int]"
                                                         "a!2")
                                                        (("1"
                                                          (lemma
                                                           "nZ_ideal")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (typepred
                                                               "a!1"
                                                               "a!2")
                                                              (("1"
                                                                (expand
                                                                 "Z")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -2
                                                                            -3))
                                                                          (("1"
                                                                            (typepred
                                                                             "h!1"
                                                                             "h!2")
                                                                            (("1"
                                                                              (expand
                                                                               "nZ")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "nZ_add(n!1)(n!1 * x!1,n!1 * k!1) - n!1 * k!2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nZ_add")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nZ_add")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nZ")
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "k!1 - k!2 + x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "nZ")
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "k!1")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "nZ")
                                                                                          (("4"
                                                                                            (inst
                                                                                             1
                                                                                             "x!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-1 -2 2))
                                                          (("2"
                                                            (lemma
                                                             "Z_ring")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         (-1 -2 2))
                                                        (("2"
                                                          (lemma
                                                           "Z_ring")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 2))
                                          (("2"
                                            (lemma "nZ_ideal")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (expand
                                                         "ring?")
                                                        (("2"
                                                          (expand
                                                           "abelian_group?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "left_coset?")
              (("2" (typepred "A!1")
                (("2" (expand "Z")
                  (("2" (expand "/")
                    (("2" (expand "coset?")
                      (("2" (prop)
                        (("2" (hide -2)
                          (("2" (expand "left_coset?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" chinese_remainder_theorem_Z nil)
    (setofsets type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (lc_gen_eq formula-decl nil ring_cosets_lemmas nil)
    (Z_ring formula-decl nil chinese_remainder_theorem_Z nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_add const-decl "(nZ(n))" chinese_remainder_theorem_Z nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (same_remainder formula-decl nil modulo_arithmetic nil)
    (fullset const-decl "set" sets nil)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (Zn_card_n_TCC1 0
  (Zn_card_n_TCC1-1 nil 3761747229
   ("" (lemma "Zn_finite_set") (("" (propax) nil nil)) nil)
   ((Zn_finite_set formula-decl nil chinese_remainder_theorem_Z nil))
   nil
   (Zn_card_n subtype
    "chinese_remainder_theorem_Z.Z(chinese_remainder_theorem_Z.n)"
    "finite_set[setof[int]]")))
 (Zn_card_n 0
  (Zn_card_n-1 nil 3761779979
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (lemma "card_bij[set[int]]")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              ((""
                (inst 1
                 "(LAMBDA (A:(Z(n!1))): rem(n!1)(lc_gen(fullset[int],nZ(n!1))(A)))")
                (("1" (expand "bijective?")
                  (("1" (prop)
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (typepred "x1!1" "x2!1")
                          (("1" (expand "Z")
                            (("1" (expand "/")
                              (("1"
                                (expand "coset?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide (-2 -4))
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma "lcos_eq2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "same_remainder")
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (lemma
                                                             "lc_gen_eq")
                                                            (("1"
                                                              (copy -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "nZ(n!1)"
                                                                 "fullset[int]"
                                                                 "a!1")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "nZ(n!1)"
                                                                   "fullset[int]"
                                                                   "a!2")
                                                                  (("1"
                                                                    (lemma
                                                                     "nZ_ideal")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (typepred
                                                                         "a!1"
                                                                         "a!2")
                                                                        (("1"
                                                                          (expand
                                                                           "Z")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2
                                                                                      -3))
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "h!1"
                                                                                       "h!2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nZ")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "nZ_add(n!1)(n!1 * x!1,n!1 * k!1) - n!1 * k!2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nZ_add")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nZ_add")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nZ")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "k!1 - k!2 + x!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "nZ")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "k!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "nZ")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "x!1")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-1
                                                                      -2
                                                                      2))
                                                                    (("2"
                                                                      (lemma
                                                                       "Z_ring")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    2))
                                                                  (("2"
                                                                    (lemma
                                                                     "Z_ring")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 2))
                                                    (("2"
                                                      (lemma
                                                       "nZ_ideal")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "ideal?")
                                                          (("2"
                                                            (expand
                                                             "left_ideal?")
                                                            (("2"
                                                              (expand
                                                               "subring?")
                                                              (("2"
                                                                (expand
                                                                 "ring?")
                                                                (("2"
                                                                  (expand
                                                                   "abelian_group?")
                                                                  (("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (lemma "lc_gen_eq")
                          (("2"
                            (inst -1 "nZ(n!1)" "fullset[int]" "y!1")
                            (("1" (lemma "nZ_ideal")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "Z")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "rem_def")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide (-1 2 3))
                                                  (("1"
                                                    (typepred "h!1")
                                                    (("1"
                                                      (expand "nZ")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "k!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "Z")
                                            (("2"
                                              (expand "/")
                                              (("2"
                                                (lemma
                                                 "lcoset_iff_coset")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (hide (-1 1 3))
                                                      (("2"
                                                        (expand
                                                         "left_coset?")
                                                        (("2"
                                                          (inst
                                                           1
                                                           "y!1")
                                                          (("2"
                                                            (expand
                                                             "Z")
                                                            (("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-1 2))
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "Z_ring")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "A!1")
                    (("2" (expand "Z")
                      (("2" (expand "/")
                        (("2" (expand "coset?")
                          (("2" (expand "Z") (("2" (prop) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" chinese_remainder_theorem_Z nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (TRUE const-decl "bool" booleans nil)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (same_remainder formula-decl nil modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (nZ_add const-decl "(nZ(n))" chinese_remainder_theorem_Z nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (Z_ring formula-decl nil chinese_remainder_theorem_Z nil)
    (lc_gen_eq formula-decl nil ring_cosets_lemmas nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (coset? const-decl "bool" cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (card_bij formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (Zn_commutative_ring_w_one_TCC1 0
  (Zn_commutative_ring_w_one_TCC1-1 nil 3783329543
   ("" (skosimp)
    (("" (inst 1 "nZ(n!1)")
      (("" (lemma "ideal_is_coset")
        (("" (inst?)
          (("" (hide 2)
            (("" (lemma "nZ_ideal") (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (coset type-eq-decl nil cosets_def nil)
    (n!1 skolem-const-decl "posnat" chinese_remainder_theorem_Z nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (Zn_commutative_ring_w_one existence ""
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))")))
 (Zn_commutative_ring_w_one_TCC2 0
  (Zn_commutative_ring_w_one_TCC2-1 nil 3783329543
   ("" (skosimp)
    (("" (typepred "x1!1`1" "x1!1`2")
      (("" (lemma "coset_add")
        (("" (inst?)
          (("1" (inst -1 "x1!1`1" "x1!1`2") (("1" (assert) nil nil))
            nil)
           ("2" (hide (- 2))
            (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (n!1 skolem-const-decl "posnat" chinese_remainder_theorem_Z nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (coset_add formula-decl nil quotient_rings nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "quotient_ring_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].add(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))]")))
 (Zn_commutative_ring_w_one_TCC3 0
  (Zn_commutative_ring_w_one_TCC3-1 nil 3783329543
   ("" (skosimp)
    (("" (typepred "x1!1`1" "x1!1`2")
      (("" (lemma "coset_product")
        (("" (inst?)
          (("1" (inst -1 "x1!1`1" "x1!1`2") (("1" (assert) nil nil))
            nil)
           ("2" (hide (- 2))
            (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset type-eq-decl nil cosets_def nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (n!1 skolem-const-decl "posnat" chinese_remainder_theorem_Z nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (coset_product formula-decl nil quotient_rings nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "quotient_ring_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))]")))
 (Zn_commutative_ring_w_one_TCC4 0
  (Zn_commutative_ring_w_one_TCC4-1 nil 3783329543
   ("" (skosimp)
    (("" (lemma "ideal_is_coset")
      (("" (inst?)
        (("" (hide 2)
          (("" (lemma "nZ_ideal") (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (n!1 skolem-const-decl "posnat" chinese_remainder_theorem_Z nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))")))
 (Zn_commutative_ring_w_one_TCC5 0
  (Zn_commutative_ring_w_one_TCC5-1 nil 3783329543
   ("" (skosimp)
    (("" (expand "coset?")
      (("" (split)
        (("1" (expand "left_coset?")
          (("1" (inst?)
            (("1" (expand "Z")
              (("1" (expand "fullset") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "lcoset_iff_rcoset")
          (("2" (inst?)
            (("2" (assert)
              (("2" (hide 2)
                (("2" (expand "left_coset?")
                  (("2" (inst?)
                    (("2" (expand "Z")
                      (("2" (expand "fullset") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_rcoset formula-decl nil ring_cosets_lemmas nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "set[T]" cosets_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(chinese_remainder_theorem_Z.n))")))
 (Zn_commutative_ring_w_one 0
  (Zn_commutative_ring_w_one-1 nil 3783329974
   ("" (skeep)
    (("" (expand "commutative_ring_with_one?")
      (("" (split)
        (("1" (lemma "quotient_ring_with_one")
          (("1" (expand "Z")
            (("1" (inst -1 "Z" "nZ(n)")
              (("1" (hide 2) (("1" (rewrite "nZ_ideal") nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "ring_with_one?")
                  (("2" (expand "monoid?")
                    (("2" (expand "monad?")
                      (("2" (split)
                        (("1" (expand "star_closed?")
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil)
                         ("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "commutative?")
          (("2" (skeep)
            (("2" (expand "restrict")
              (("2" (expand "product")
                (("2" (expand "lproduct") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring_with_one? const-decl "bool" ring_with_one_def
     algebra)
    (commutative? const-decl "bool" operator_defs nil)
    (lproduct const-decl "set[T]" quotient_ring_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (product const-decl "set[T]" quotient_ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (monad? const-decl "bool" monad_def algebra)
    (associative? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad algebra)
    (identity? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (Z const-decl "setofsets[int]" chinese_remainder_theorem_Z nil))
   shostak))
 (equal_cosets_div 0
  (equal_cosets_div-1 nil 3761830890
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp*)
      (("" (prop)
        (("1" (lemma "lcos_eq")
          (("1" (inst -1 "nZ(n!1)" "b!1" "a!1")
            (("1" (prop)
              (("1" (skosimp)
                (("1" (typepred "h!1")
                  (("1" (hide -3)
                    (("1" (expand "nZ")
                      (("1" (skosimp)
                        (("1" (replaces -1)
                          (("1" (expand "divides")
                            (("1" (inst 1 "k!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (assert) nil nil)) nil)
               ("3" (hide (-1 2))
                (("3" (expand "nZ")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "divides")
          (("2" (skosimp)
            (("2" (lemma "divby")
              (("2" (inst?)
                (("2" (prop)
                  (("2" (hide (-2 -3))
                    (("2" (lemma "lcos_eq2")
                      (("2" (inst -1 "nZ(n!1)" "b!1" "a!1")
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (replaces -1)
                              (("2"
                                (inst?)
                                (("2"
                                  (expand "nZ")
                                  (("2"
                                    (inst 1 "x!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide (-1 2))
                            (("3" (lemma "nZ_ideal")
                              (("3"
                                (inst?)
                                (("3"
                                  (expand "ideal?")
                                  (("3"
                                    (expand "left_ideal?")
                                    (("3"
                                      (expand "subring?")
                                      (("3"
                                        (expand "ring?")
                                        (("3"
                                          (expand "abelian_group?")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divby formula-decl nil group algebra)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ring? const-decl "bool" ring_def algebra)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcos_eq formula-decl nil ring_cosets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (zero_times formula-decl nil ring algebra)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (nZ_mZ_sum_TCC1 0
  (nZ_mZ_sum_TCC1-1 nil 3784643953 ("" (subtype-tcc) nil nil) nil nil
   (nZ_mZ_sum subtype "chinese_remainder_theorem_Z.m"
    "{jj: integers.int | booleans.=>(chinese_remainder_theorem_Z.n = 0, jj /= 0)}")))
 (nZ_mZ_sum 0
  (nZ_mZ_sum-1 nil 3784643993
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (prop)
            (("1" (expand "sum")
              (("1" (skosimp)
                (("1" (typepred "h!1" "k!1")
                  (("1" (expand "nZ")
                    (("1" (lemma "gcd_divides")
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (expand "divides")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -3)
                                (("1"
                                  (replaces -3)
                                  (("1"
                                    (replace -1 -3)
                                    (("1"
                                      (name-replace
                                       "temp1"
                                       "gcd(n!1, m!1) * x!2 * k!2")
                                      (("1"
                                        (replace -2 -3)
                                        (("1"
                                          (expand "temp1")
                                          (("1"
                                            (hide (-1 -2))
                                            (("1"
                                              (lemma "distributive")
                                              (("1"
                                                (inst
                                                 -1
                                                 "gcd(n!1, m!1)"
                                                 "k!2 * x!2"
                                                 "k!3 * x!3")
                                                (("1"
                                                  (replace -1 -2 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "(k!2 * x!2 + k!3 * x!3)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sum")
              (("2" (expand "nZ")
                (("2" (skosimp)
                  (("2" (lemma "gcd_factors")
                    (("2" (inst?)
                      (("2" (prop)
                        (("1" (skosimp)
                          (("1" (replaces -1)
                            (("1" (lemma "distributive")
                              (("1"
                                (inst?)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (rewrite "associative_mult")
                                    (("1"
                                      (rewrite "associative_mult")
                                      (("1"
                                        (inst
                                         1
                                         "ip!1 * k!1 * n!1"
                                         "jp!1 * k!1 * m!1")
                                        (("1"
                                          (expand "nZ")
                                          (("1"
                                            (inst 1 "jp!1 * k!1")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "nZ")
                                            (("2"
                                              (inst 1 "ip!1 * k!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((associative_mult formula-decl nil number_fields nil)
    (gcd_factors formula-decl nil gcd ints)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gcd_divides formula-decl nil gcd ints)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (distributive formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sum const-decl "set[T]" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (nZ_mZ_comaximal 0
  (nZ_mZ_comaximal-2 nil 3793215851
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (prop)
        (("1" (lemma "rel_prime_lem")
          (("1" (inst?)
            (("1" (assert)
              (("1" (hide 2)
                (("1" (lemma "comaximal_ideals_equiv")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (hide -4)
                          (("1" (expand "nZ")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (inst 1 "k!2" "k!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-1 2))
                      (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil))
                        nil))
                      nil)
                     ("3" (hide (-1 2))
                      (("3" (lemma "nZ_ideal") (("3" (inst?) nil nil))
                        nil))
                      nil)
                     ("4" (hide (-1 2))
                      (("4" (lemma "Z_commutative_ring_w_one")
                        (("4" (expand "commutative_ring_with_one?")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "comaximal_ideals?")
          (("2" (expand "rel_prime")
            (("2" (split)
              (("1" (lemma "nZ_ideal") (("1" (inst?) nil nil)) nil)
               ("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil)
               ("3" (lemma "nZ_mZ_sum")
                (("3" (inst?)
                  (("3" (replaces -2)
                    (("3" (rewrite "Z1_is_Z") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comaximal_ideals? const-decl "bool" comaximal_finseqs_ideals nil)
    (Z1_is_Z formula-decl nil chinese_remainder_theorem_Z nil)
    (nZ_mZ_sum formula-decl nil chinese_remainder_theorem_Z nil)
    (rel_prime const-decl "bool" gcd ints)
    (rel_prime_lem formula-decl nil gcd ints)
    (int_times_int_is_int application-judgement "int" integers nil)
    (comaximal_ideals_equiv formula-decl nil comaximal_finseqs_ideals
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     algebra)
    (Z_commutative_ring_w_one formula-decl nil
     chinese_remainder_theorem_Z nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (member const-decl "bool" sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (nZ_mZ_comaximal-1 nil 3784646736
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (prop)
        (("1" (lemma "rel_prime_lem")
          (("1" (inst?)
            (("1" (assert)
              (("1" (hide 2)
                (("1" (lemma "comaximal_ideals_equiv")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (hide -4)
                          (("1" (expand "nZ")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (inst 1 "k!2" "k!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-1 2))
                      (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil))
                        nil))
                      nil)
                     ("3" (hide (-1 2))
                      (("3" (lemma "nZ_ideal") (("3" (inst?) nil nil))
                        nil))
                      nil)
                     ("4" (hide (-1 2))
                      (("4" (lemma "Z_commutative_ring_w_one")
                        (("4" (expand "commutative_ring_with_one?")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "comaximal_ideals?")
          (("2" (expand "rel_prime")
            (("2" (split)
              (("1" (lemma "nZ_ideal") (("1" (inst?) nil nil)) nil)
               ("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil)
               ("3" (lemma "nZ_mZ_sum")
                (("3" (inst?)
                  (("3" (replaces -2)
                    (("3" (rewrite "Z1_is_Z") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comaximal_ideals? const-decl "bool" comaximal_finseqs_ideals nil)
    (Z1_is_Z formula-decl nil chinese_remainder_theorem_Z nil)
    (nZ_mZ_sum formula-decl nil chinese_remainder_theorem_Z nil)
    (rel_prime const-decl "bool" gcd ints)
    (rel_prime_lem formula-decl nil gcd ints)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (comaximal_ideals_equiv formula-decl nil comaximal_finseqs_ideals
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     algebra)
    (Z_commutative_ring_w_one formula-decl nil
     chinese_remainder_theorem_Z nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (member const-decl "bool" sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nZ_mZ_intersection_TCC1 0
  (nZ_mZ_intersection_TCC1-1 nil 3784486919
   ("" (skeep)
    (("" (split)
      (("1" (lemma "gcd_divides")
        (("1" (inst -1 "n" "m")
          (("1" (prop)
            (("1" (expand "divides")
              (("1" (skeep)
                (("1" (hide -2)
                  (("1" (replace -1 -2)
                    (("1" (case "lcm = x * m")
                      (("1" (assert) nil nil)
                       ("2"
                        (case-replace
                         "gcd(n, m) * x * m = (x * m) * gcd(n, m)")
                        (("1" (rewrite "times_div1" :dir rl)
                          (("1"
                            (case "gcd(n, m) = gcd(gcd(n, m) * x, m)")
                            (("1" (replace -1 -4 rl)
                              (("1"
                                (rewrite "div_simp")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "n" "m") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divides const-decl "bool" divides nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad algebra)
    (div_simp formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (gcd_divides formula-decl nil gcd ints)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nZ_mZ_intersection subtype "chinese_remainder_theorem_Z.lcm"
    "posnat")))
 (nZ_mZ_intersection 0
  (nZ_mZ_intersection-1 nil 3784486920
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (skoletin* 1)
        (("" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (flatten)
                    (("1" (expand "nZ")
                      (("1" (skosimp*)
                        (("1" (lemma "lcm_div")
                          (("1"
                            (inst -1 "n!1" "m!1" "x!1" "gcd(n!1, m!1)")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replace -4 -1 rl)
                                      (("1"
                                        (inst 1 "x!2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-3 2))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (inst 1 "k!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide (-3 2))
                                  (("3"
                                    (expand "divides")
                                    (("3"
                                      (inst 1 "k!2")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "intersection")
                (("2" (expand "member")
                  (("2" (expand "nZ")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (split)
                          (("1" (inst 1 "(m!1 / gcd(n!1, m!1)) * k!1")
                            (("1" (assert) nil nil)
                             ("2" (rewrite "closed_times")
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "div_by_gcd_prep")
                                  (("2"
                                    (rewrite "gcd_sym")
                                    (("2"
                                      (inst -1 "m!1" "n!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "div_by_gcd_prep")
                                      (("2"
                                        (inst -1 "n!1" "m!1")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst
                                             1
                                             "k!1   * (n!1 / gcd(n!1, m!1) )")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (name-replace
                                                 "ndgcd"
                                                 "n!1 / gcd(n!1, m!1)")
                                                (("2"
                                                  (typepred "k!1")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (rewrite
                                                       "closed_times")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "gcd_sym")
            (("2" (lemma "div_by_gcd_prep")
              (("2" (case "lcm_1 = n!1 * ( m!1 / gcd(m!1, n!1))")
                (("1" (hide -3)
                  (("1" (replaces -1)
                    (("1" (inst -1 "m!1" "n!1")
                      (("1" (prop)
                        (("1" (hide -2 -3)
                          (("1" (rewrite "closed_times") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (lcm_div formula-decl nil prop_primes_extra nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (closed_times formula-decl nil integers nil)
    (div_by_gcd_prep formula-decl nil gcd_fractions ints)
    (posint nonempty-type-eq-decl nil integers nil)
    (gcd_sym formula-decl nil gcd ints)
    (times_div1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (intersection const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (>= const-decl "bool" reals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (nZ_mZ_rel_prime_intersection 0
  (nZ_mZ_rel_prime_intersection-1 nil 3784488139
   ("" (skosimp)
    (("" (expand "rel_prime")
      (("" (lemma "nZ_mZ_intersection")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((rel_prime const-decl "bool" gcd ints)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nZ_mZ_intersection formula-decl nil chinese_remainder_theorem_Z
     nil))
   shostak))
 (Intersection_add_first 0
  (Intersection_add_first-1 nil 3784545237
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (prop)
            (("1" (expand "intersection")
              (("1" (expand "member")
                (("1" (expand "Intersection")
                  (("1" (split)
                    (("1" (inst -1 "A!1")
                      (("1" (expand "seq2set")
                        (("1" (expand "finseq_appl")
                          (("1" (inst 1 "0")
                            (("1" (expand "add_first")
                              (("1"
                                (expand "insert?")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "add_first")
                              (("2"
                                (expand "insert?")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (typepred "a!1")
                        (("2" (expand "seq2set")
                          (("2" (expand "finseq_appl")
                            (("2" (skosimp)
                              (("2"
                                (inst -2 "a!1")
                                (("2"
                                  (expand "seq2set")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (inst 1 "kk!1+1")
                                        (("1"
                                          (expand "add_first")
                                          (("1"
                                            (expand "insert?")
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "add_first")
                                          (("2"
                                            (expand "insert?")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "intersection")
              (("2" (expand "member")
                (("2" (expand "Intersection")
                  (("2" (flatten)
                    (("2" (skosimp)
                      (("2" (inst -2 "a!1")
                        (("2" (typepred "a!1")
                          (("2" (expand "seq2set")
                            (("2" (skosimp)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (expand "add_first")
                                  (("2"
                                    (expand "insert?")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (inst 2 "kk!1-1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (intersection const-decl "set" sets nil)
    (add_first const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Intersection const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil))
   shostak))
 (nZ_fs_intersection 0
  (nZ_fs_intersection-1 nil 3784488652
   ("" (expand "finseq_appl")
    (("" (measure-induct+ "length(fsn)" "fsn")
      (("" (case "length(x!1) = 1")
        (("1" (hide (-2 1))
          (("1" (replace -1 1)
            (("1" (decompose-equality 1)
              (("1" (iff)
                (("1" (prop)
                  (("1" (expand "Intersection")
                    (("1" (expand "product")
                      (("1" (expand "product_rec")
                        (("1" (inst -1 "nZ(seq(x!1)(0))")
                          (("1" (expand "seq2set")
                            (("1" (expand "finseq_appl")
                              (("1" (inst 1 "0") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "Intersection")
                    (("2" (skosimp)
                      (("2" (expand "product")
                        (("2" (expand "product_rec")
                          (("2" (typepred "a!1")
                            (("2" (expand "seq2set")
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "finseq_appl")
                                  (("2"
                                    (typepred "kk!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (typepred "x!2") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (name-replace "fsnZ!1" "(# length := length(x!1),
                                                                                                      seq
                                                                                                        := LAMBDA (i: below[length(x!1)]):
                                                                                                             nZ(x!1`seq(i)) #)")
          (("2" (lemma "Intersection_add_first")
            (("2" (inst -1 "fsnZ!1(0)" "rest[set[int]](fsnZ!1)")
              (("1" (expand "finseq_appl")
                (("1" (lemma "seq_first_rest[set[int]]")
                  (("1" (inst?)
                    (("1" (expand "first")
                      (("1" (expand "finseq_appl")
                        (("1" (prop)
                          (("1" (replace -1 -2 rl)
                            (("1" (replace -2 3)
                              (("1"
                                (hide (-1 -2))
                                (("1"
                                  (inst -1 "rest(x!1)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (case-replace
                                       "(# length := length(rest(x!1)),
                                                                                                                                                seq
                                                                                                                                                  := LAMBDA (i: below[length(rest(x!1))]):
                                                                                                                                                       nZ(rest(x!1)`seq(i)) #) = rest[set[int]](fsnZ!1)"
                                       :hide?
                                       T)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "fsnZ!1")
                                          (("1"
                                            (lemma
                                             "nZ_mZ_rel_prime_intersection")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "seq_first_rest_1[posnat]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "first")
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (name-replace
                                                                 "Temp!1"
                                                                 "nZ(x!1`seq(0) * product(rest(x!1)))")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     "Temp!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "product_mult")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "#(x!1`seq(0))"
                                                                         "rest(x!1)")
                                                                        (("1"
                                                                          (expand
                                                                           "product"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 (-2
                                                                                  -3
                                                                                  +))
                                                                                (("1"
                                                                                  (expand
                                                                                   "#")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "product_rec")
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "#"
                                                                                       -2
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "#")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 4)
                                                  (("2"
                                                    (expand
                                                     "fs_rel_primes")
                                                    (("2"
                                                      (lemma
                                                       "fs_rel_prime_i")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "0")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "delete_rest[posnat]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "fs_rel_prime?")
                                                                  (("2"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (- 4))
                                        (("2"
                                          (expand "fsnZ!1")
                                          (("2"
                                            (decompose-equality 1)
                                            (("1"
                                              (expand "rest")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "rest")
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide (- 4))
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (expand "fsnZ!1")
                                            (("3"
                                              (prop)
                                              (("1"
                                                (expand "rest")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "rest")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "^")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-2 3))
                                      (("2"
                                        (expand "rest")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "min")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 4)
                                      (("3"
                                        (expand "fs_rel_primes")
                                        (("3"
                                          (expand "finseq_appl")
                                          (("3"
                                            (skosimp)
                                            (("3"
                                              (expand "rest")
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (prop)
                                                  (("3"
                                                    (expand "^")
                                                    (("3"
                                                      (lift-if)
                                                      (("3"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (inst?)
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (hide 3)
                                                              (("3"
                                                                (rewrite
                                                                 "both_sides_plus2")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide (- 4))
                                      (("4"
                                        (expand "rest")
                                        (("4"
                                          (expand "^")
                                          (("4"
                                            (expand "min")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-2 -3 -4 3))
                            (("2" (expand "fsnZ!1")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (- 4))
                (("2" (expand "fsnZ!1") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (product const-decl "posnat" product_seq reals)
    (rest const-decl "finseq" seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_plus2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (fs_rel_prime_i formula-decl nil prop_primes_extra nil)
    (delete_rest formula-decl nil seq_extras structures)
    (fs_rel_prime? const-decl "bool" prop_primes_extra nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (product_mult formula-decl nil product_seq reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_mZ_rel_prime_intersection formula-decl nil
     chinese_remainder_theorem_Z nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Intersection_add_first formula-decl nil
     chinese_remainder_theorem_Z nil)
    (nil application-judgement "(nonempty?[T])" seq2set structures)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (product_rec def-decl "posnat" product_seq_scaf reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (Chinese_Remainder_Theorem_for_int_TCC1 0
  (Chinese_Remainder_Theorem_for_int_TCC1-2 nil 3794182078
   ("" (skosimp)
    (("" (expand "fsRI?")
      (("" (skosimp)
        (("" (expand "finseq_appl")
          (("" (expand "fsnZ")
            (("" (expand "finseq_appl")
              (("" (lemma "nZ_ideal") (("" (inst?) nil))))))))))))))
    nil)
   ((fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)"
    "comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsI(chinese_remainder_theorem_Z.Z)"))
  (Chinese_Remainder_Theorem_for_int_TCC1-1 nil 3784745094
   ("" (skosimp)
    (("" (expand "fsRI?")
      (("" (skosimp)
        (("" (expand "finseq_appl")
          (("" (expand "fsnZ")
            (("" (expand "finseq_appl")
              (("" (lemma "nZ_ideal") (("" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)"
    "comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsI(chinese_remainder_theorem_Z.Z)")))
 (Chinese_Remainder_Theorem_for_int_TCC2 0
  (Chinese_Remainder_Theorem_for_int_TCC2-1 nil 3784745094
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst?)
        (("1" (inst -1 "x1!1`1" "x1!1`2") (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (Chinese_Remainder_Theorem_for_int subtype
    "cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)))"
    "set[(cartesian_product_n[set[int]](fsQ[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*), 0, 1](Z)(fsnZ(fspn))))]")))
 (Chinese_Remainder_Theorem_for_int_TCC3 0
  (Chinese_Remainder_Theorem_for_int_TCC3-1 nil 3784745094
   ("" (skosimp)
    (("" (inst 1 "nZ(product(fspn!1))")
      (("" (lemma "ideal_is_coset")
        (("" (inst?)
          (("" (hide 2)
            (("" (lemma "nZ_ideal") (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (product const-decl "posnat" product_seq reals)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (coset type-eq-decl nil cosets_def nil)
    (fspn!1 skolem-const-decl
     "{fspn: finseq[posnat] | length(fspn) /= 0 AND fs_rel_primes(fspn)}"
     chinese_remainder_theorem_Z nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (Chinese_Remainder_Theorem_for_int existence ""
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))")))
 (Chinese_Remainder_Theorem_for_int_TCC4 0
  (Chinese_Remainder_Theorem_for_int_TCC4-1 nil 3784745094
   ("" (skosimp)
    (("" (skosimp*)
      (("" (lemma "coset_add")
        (("" (inst?)
          (("1" (inst -1 "x1!1`1" "x1!1`2") (("1" (assert) nil nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (fspn!1 skolem-const-decl
     "{fspn: finseq[posnat] | length(fspn) /= 0 AND fs_rel_primes(fspn)}"
     chinese_remainder_theorem_Z nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (product const-decl "posnat" product_seq reals)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (coset_add formula-decl nil quotient_rings nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "quotient_ring_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].add(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))]")))
 (Chinese_Remainder_Theorem_for_int_TCC5 0
  (Chinese_Remainder_Theorem_for_int_TCC5-1 nil 3784745094
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst?)
        (("1" (inst -1 "x1!1`1" "x1!1`2") (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "nZ_ideal") (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_product formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (product const-decl "posnat" product_seq reals)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (fspn!1 skolem-const-decl
     "{fspn: finseq[posnat] | length(fspn) /= 0 AND fs_rel_primes(fspn)}"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "quotient_ring_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))]")))
 (Chinese_Remainder_Theorem_for_int_TCC6 0
  (Chinese_Remainder_Theorem_for_int_TCC6-1 nil 3784745094
   ("" (skosimp)
    (("" (expand "coset?")
      (("" (prop)
        (("1" (expand "left_coset?")
          (("1" (inst 1 "0")
            (("1" (assert) (("1" (rewrite "left_zero") nil nil)) nil)
             ("2" (expand "Z")
              (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "right_coset?")
          (("2" (inst 1 "0")
            (("1" (assert) (("1" (rewrite "right_zero") nil nil)) nil)
             ("2" (expand "Z")
              (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coset? const-decl "bool" cosets_def nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (right_zero formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (product const-decl "posnat" product_seq reals)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn))"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(chinese_remainder_theorem_Z.Z, chinese_remainder_theorem_Z.nZ(product_seq.product(chinese_remainder_theorem_Z.fspn)))")))
 (Chinese_Remainder_Theorem_for_int_TCC7 0
  (Chinese_Remainder_Theorem_for_int_TCC7-1 nil 3784745094
   ("" (skosimp)
    (("" (inst 1 "fsnZ(fspn!1)")
      (("" (expand "fsnZ")
        (("" (expand "cartesian_product_n")
          (("" (expand "finseq_appl")
            (("" (expand "member")
              (("" (prop)
                (("1" (expand "fsQ") (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (expand "fsQ") (("2" (propax) nil nil)) nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (skosimp)
                    (("3" (expand "fsQ")
                      (("3" (expand "finseq_appl")
                        (("3" (expand "/")
                          (("3" (rewrite "ideal_is_coset")
                            (("3" (hide 2)
                              (("3"
                                (lemma "nZ_ideal")
                                (("3" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (fsI type-eq-decl nil comaximal_finseqs_ideals nil)
    (setof type-eq-decl nil defined_types nil)
    (fsQ const-decl "finseq[setof[set[T]]]" comaximal_finseqs_ideals
     nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (fspn!1 skolem-const-decl
     "{fspn: finseq[posnat] | length(fspn) /= 0 AND fs_rel_primes(fspn)}"
     chinese_remainder_theorem_Z nil)
    (member const-decl "bool" sets nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (Chinese_Remainder_Theorem_for_int existence ""
    "(cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))")))
 (Chinese_Remainder_Theorem_for_int_TCC8 0
  (Chinese_Remainder_Theorem_for_int_TCC8-2 nil 3794182316
   ("" (skosimp*)
    (("" (expand "fsnZ")
      (("" (expand "cartesian_product_n")
        (("" (expand "finseq_appl")
          (("" (expand "member")
            (("" (assert)
              (("" (prop)
                (("1" (expand "fsQ") (("1" (assert) nil nil)) nil)
                 ("2" (expand "fsQ")
                  (("2" (expand "Sfs") (("2" (propax) nil nil)) nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (expand "fsQ")
                    (("3" (expand "finseq_appl")
                      (("3" (expand "/")
                        (("3" (expand "Sfs")
                          (("3" (expand "finseq_appl")
                            (("3" (rewrite "coset_add")
                              (("3"
                                (hide (2 3))
                                (("3"
                                  (lemma "nZ_ideal")
                                  (("3" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (coset_add formula-decl nil quotient_rings nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (< const-decl "bool" reals nil)
    (fsI type-eq-decl nil comaximal_finseqs_ideals nil)
    (fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (setof type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (Sfs const-decl "finseq[set[T]]" cartesian_product_quot_ring nil)
    (fsQ const-decl "finseq[setof[set[T]]]" comaximal_finseqs_ideals
     nil)
    (member const-decl "bool" sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "cartesian_product_quot_ring[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].Sfs(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))"
    "[[(cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)))), (cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))] -> (cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))]"))
  (Chinese_Remainder_Theorem_for_int_TCC8-1 nil 3784745094
   ("" (skosimp)
    (("" (inst 1 "nZ(product(fspn!1))")
      (("" (lemma "Chinese_Remainder_Theorem_for_int_TCC4")
        (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (product const-decl "posnat" product_seq reals)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (coset type-eq-decl nil cosets_def nil)
    (Chinese_Remainder_Theorem_for_int_TCC4 subtype-tcc nil
     chinese_remainder_theorem_Z nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "cartesian_product_quot_ring[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].Sfs(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))"
    "[[(cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)))), (cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))] -> (cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))]")))
 (Chinese_Remainder_Theorem_for_int_TCC9 0
  (Chinese_Remainder_Theorem_for_int_TCC9-1 nil 3784745094
   ("" (skosimp*)
    (("" (expand "fsnZ")
      (("" (expand "cartesian_product_n")
        (("" (expand "finseq_appl")
          (("" (expand "member")
            (("" (assert)
              (("" (prop)
                (("1" (expand "fsQ") (("1" (assert) nil nil)) nil)
                 ("2" (expand "fsQ")
                  (("2" (expand "Pfs") (("2" (propax) nil nil)) nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (expand "fsQ")
                    (("3" (expand "finseq_appl")
                      (("3" (expand "/")
                        (("3" (expand "Pfs")
                          (("3" (expand "finseq_appl")
                            (("3" (rewrite "coset_product")
                              (("3"
                                (hide (2 3))
                                (("3"
                                  (lemma "nZ_ideal")
                                  (("3" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (coset_product formula-decl nil quotient_rings nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (< const-decl "bool" reals nil)
    (fsI type-eq-decl nil comaximal_finseqs_ideals nil)
    (fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (setof type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (Pfs const-decl "finseq[set[T]]" cartesian_product_quot_ring nil)
    (fsQ const-decl "finseq[setof[set[T]]]" comaximal_finseqs_ideals
     nil)
    (member const-decl "bool" sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "cartesian_product_quot_ring[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].Pfs(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))"
    "[[(cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)))), (cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))] -> (cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))]")))
 (Chinese_Remainder_Theorem_for_int_TCC10 0
  (Chinese_Remainder_Theorem_for_int_TCC10-1 nil 3794168216
   ("" (skosimp)
    (("" (expand "fsnZ")
      (("" (expand "cartesian_product_n")
        (("" (expand "finseq_appl")
          (("" (expand "member")
            (("" (prop)
              (("1" (expand "fsQ") (("1" (assert) nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "fsQ") (("2" (propax) nil nil)) nil))
                nil)
               ("3" (hide 2)
                (("3" (skosimp)
                  (("3" (expand "fsQ")
                    (("3" (expand "finseq_appl")
                      (("3" (expand "/")
                        (("3" (rewrite "ideal_is_coset")
                          (("3" (hide 2)
                            (("3" (lemma "nZ_ideal")
                              (("3" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (fsQ const-decl "finseq[setof[set[T]]]" comaximal_finseqs_ideals
     nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (member const-decl "bool" sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil))
   nil
   (Chinese_Remainder_Theorem_for_int subtype
    "chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn)"
    "(cartesian_product_finite[set[int]].cartesian_product_n(comaximal_finseqs_ideals[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].fsQ(chinese_remainder_theorem_Z.Z)(chinese_remainder_theorem_Z.fsnZ(chinese_remainder_theorem_Z.fspn))))")))
 (Chinese_Remainder_Theorem_for_int 0
  (Chinese_Remainder_Theorem_for_int-2 nil 3792710361
   ("" (skosimp*)
    (("" (lemma "nZ_fs_intersection")
      (("" (inst?)
        (("" (prop)
          (("1" (skoletin* -1)
            (("1" (hide -2)
              (("1" (replace -1 1 rl)
                (("1" (lemma "Chinese_Remainder_Theorem")
                  (("1" (inst?)
                    (("1" (expand "R_isomorphic?")
                      (("1" (skosimp)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "R_isomorphism?")
                              (("1"
                                (flatten)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "R_monomorphism?")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "R_homomorphism?")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (expand
                                                   "star_closed?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (hide
                                                               (-1 2))
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (hide
                                                               (-1 2))
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand
                                                   "star_closed?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (hide
                                                               (-1 2))
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (hide
                                                               (-1 2))
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (-3 1))
                                                (("3"
                                                  (expand
                                                   "star_closed?")
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (expand "member")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "x!1"
                                                         "y!1")
                                                        (("1"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("1"
                                                            (expand
                                                             "fsnZ")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "fsnZ")
                                                              (("2"
                                                                (expand
                                                                 "fsnZ_1")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "x!1")
                                                          (("3"
                                                            (hide 2)
                                                            (("3"
                                                              (expand
                                                               "fsnZ")
                                                              (("3"
                                                                (expand
                                                                 "fsnZ_1")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide-all-but (-4 1))
                                                (("4"
                                                  (expand
                                                   "star_closed?")
                                                  (("4"
                                                    (skosimp)
                                                    (("4"
                                                      (expand "member")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "x!1"
                                                         "y!1")
                                                        (("1"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("1"
                                                            (expand
                                                             "fsnZ")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "fsnZ")
                                                              (("2"
                                                                (expand
                                                                 "fsnZ_1")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "x!1")
                                                          (("3"
                                                            (hide 2)
                                                            (("3"
                                                              (expand
                                                               "fsnZ")
                                                              (("3"
                                                                (expand
                                                                 "fsnZ_1")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide-all-but
                                                 (-5 -7 1))
                                                (("5"
                                                  (expand
                                                   "homomorphism?")
                                                  (("5"
                                                    (skosimp)
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "b!1")
                                                      (("5"
                                                        (expand "fsnZ")
                                                        (("5"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("5"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide-all-but
                                                 (-6 -7 1))
                                                (("6"
                                                  (expand
                                                   "homomorphism?")
                                                  (("6"
                                                    (skosimp)
                                                    (("6"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "b!1")
                                                      (("6"
                                                        (expand "fsnZ")
                                                        (("6"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("6"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (expand "R_epimorphism?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide (-2 -3))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "surjective?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (expand
                                                             "/")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "y!1")
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("2"
                                                            (expand
                                                             "fsnZ")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1)
                                            (("2"
                                              (expand
                                               "R_homomorphism?")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (expand
                                                     "star_closed?")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("3"
                                                                  (expand
                                                                   "restrict")
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-2 1))
                                                  (("2"
                                                    (expand
                                                     "star_closed?")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "restrict")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("3"
                                                                  (expand
                                                                   "restrict")
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (-3 1))
                                                  (("3"
                                                    (expand
                                                     "star_closed?")
                                                    (("3"
                                                      (skosimp)
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (expand
                                                             "fsnZ_1")
                                                            (("1"
                                                              (expand
                                                               "fsnZ")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "fsnZ")
                                                                (("2"
                                                                  (expand
                                                                   "fsnZ_1")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (hide 2)
                                                              (("3"
                                                                (expand
                                                                 "fsnZ")
                                                                (("3"
                                                                  (expand
                                                                   "fsnZ_1")
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide-all-but (-4 1))
                                                  (("4"
                                                    (expand
                                                     "star_closed?")
                                                    (("4"
                                                      (skosimp)
                                                      (("4"
                                                        (expand
                                                         "member")
                                                        (("4"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (expand
                                                             "fsnZ_1")
                                                            (("1"
                                                              (expand
                                                               "fsnZ")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "fsnZ")
                                                                (("2"
                                                                  (expand
                                                                   "fsnZ_1")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (hide 2)
                                                              (("3"
                                                                (expand
                                                                 "fsnZ")
                                                                (("3"
                                                                  (expand
                                                                   "fsnZ_1")
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide-all-but
                                                   (-5 -7 1))
                                                  (("5"
                                                    (expand
                                                     "homomorphism?")
                                                    (("5"
                                                      (skosimp)
                                                      (("5"
                                                        (inst
                                                         -1
                                                         "a!1"
                                                         "b!1")
                                                        (("5"
                                                          (replaces
                                                           -2
                                                           -1)
                                                          (("5"
                                                            (expand
                                                             "fsnZ")
                                                            (("5"
                                                              (expand
                                                               "fsnZ_1")
                                                              (("5"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide-all-but
                                                   (-6 -7 1))
                                                  (("6"
                                                    (expand
                                                     "homomorphism?")
                                                    (("6"
                                                      (skosimp)
                                                      (("6"
                                                        (inst
                                                         -1
                                                         "a!1"
                                                         "b!1")
                                                        (("6"
                                                          (replaces
                                                           -2
                                                           -1)
                                                          (("6"
                                                            (expand
                                                             "fsnZ")
                                                            (("6"
                                                              (expand
                                                               "fsnZ_1")
                                                              (("6"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1)
                            (("2" (expand "restrict")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "phi!1(x1!1)")
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand "fsnZ")
                                        (("2"
                                          (expand "fsnZ_1")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (split)
                        (("1" (expand "fsICM?")
                          (("1" (split)
                            (("1" (expand "fsRI?")
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (expand "fsnZ_1" 1)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lemma "nZ_ideal")
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (expand "fsnZ_1" 2)
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (lemma "nZ_mZ_comaximal")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 3)
                                            (("2"
                                              (typepred "fspn!1")
                                              (("2"
                                                (expand
                                                 "fs_rel_primes")
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "fspn!1")
                            (("2" (hide (-2 -3))
                              (("2"
                                (expand "fsnZ_1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (lemma "Z_commutative_ring_w_one")
                        (("3" (expand "commutative_ring_with_one?")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 1)
            (("2" (typepred "fspn!1") (("2" (assert) nil nil)) nil))
            nil)
           ("3" (hide 2)
            (("3" (typepred "fspn!1") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nZ_fs_intersection formula-decl nil chinese_remainder_theorem_Z
     nil)
    (Chinese_Remainder_Theorem formula-decl nil
     chinese_remainder_theorem_rings nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     algebra)
    (Z_commutative_ring_w_one formula-decl nil
     chinese_remainder_theorem_Z nil)
    (nZ_mZ_comaximal formula-decl nil chinese_remainder_theorem_Z nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (fsI type-eq-decl nil comaximal_finseqs_ideals nil)
    (fsQ const-decl "finseq[setof[set[T]]]" comaximal_finseqs_ideals
     nil)
    (fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (injective? const-decl "bool" functions nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (surjective? const-decl "bool" functions nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (fsICM type-eq-decl nil comaximal_finseqs_ideals nil)
    (fsICM? const-decl "bool" comaximal_finseqs_ideals nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     chinese_remainder_theorem_Z nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (product const-decl "posnat" product_seq reals)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)
  (Chinese_Remainder_Theorem_for_int-1 nil 3784745110
   ("" (skosimp*)
    (("" (lemma "nZ_fs_intersection")
      (("" (inst?)
        (("" (prop)
          (("1" (skoletin* -1)
            (("1" (hide -2)
              (("1" (replace -1 1 rl)
                (("1" (lemma "Chinese_Remainder_Theorem")
                  (("1" (inst?)
                    (("1" (expand "R_isomorphic?")
                      (("1" (skosimp)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "R_isomorphism?")
                              (("1"
                                (flatten)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "R_monomorphism?")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "R_homomorphism?")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (expand
                                                   "star_closed?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (hide
                                                               (-1 2))
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (hide
                                                               (-1 2))
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand
                                                   "star_closed?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (hide
                                                               (-1 2))
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (hide
                                                               (-1 2))
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (-3 1))
                                                (("3"
                                                  (expand
                                                   "star_closed?")
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (expand "member")
                                                      (("3"
                                                        (expand
                                                         "restrict")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (expand
                                                             "fsnZ_1")
                                                            (("1"
                                                              (expand
                                                               "fsnZ")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (expand
                                                               "restrict")
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "fsnZ")
                                                                  (("2"
                                                                    (expand
                                                                     "fsnZ_1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (expand
                                                               "restrict")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("3"
                                                                  (expand
                                                                   "fsnZ")
                                                                  (("3"
                                                                    (expand
                                                                     "fsnZ_1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide-all-but (-4 1))
                                                (("4"
                                                  (expand
                                                   "star_closed?")
                                                  (("4"
                                                    (skosimp)
                                                    (("4"
                                                      (expand "member")
                                                      (("4"
                                                        (expand
                                                         "restrict")
                                                        (("4"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "y!1")
                                                          (("1"
                                                            (expand
                                                             "fsnZ_1")
                                                            (("1"
                                                              (expand
                                                               "fsnZ")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y!1")
                                                            (("2"
                                                              (expand
                                                               "restrict")
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "fsnZ")
                                                                  (("2"
                                                                    (expand
                                                                     "fsnZ_1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x!1")
                                                            (("3"
                                                              (expand
                                                               "restrict")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("3"
                                                                  (expand
                                                                   "fsnZ")
                                                                  (("3"
                                                                    (expand
                                                                     "fsnZ_1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide-all-but
                                                 (-5 -7 1))
                                                (("5"
                                                  (expand
                                                   "homomorphism?")
                                                  (("5"
                                                    (skosimp)
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "b!1")
                                                      (("5"
                                                        (expand "fsnZ")
                                                        (("5"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("5"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide-all-but
                                                 (-6 -7 1))
                                                (("6"
                                                  (expand
                                                   "homomorphism?")
                                                  (("6"
                                                    (skosimp)
                                                    (("6"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "b!1")
                                                      (("6"
                                                        (expand "fsnZ")
                                                        (("6"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("6"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (expand "R_epimorphism?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide (-2 -3))
                                            (("1"
                                              (expand "surjective?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (expand "/")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "y!1")
                                                    (("2"
                                                      (hide (-1 2))
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (expand
                                                           "fsnZ_1")
                                                          (("2"
                                                            (expand
                                                             "fsnZ")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1)
                                            (("2"
                                              (expand
                                               "R_homomorphism?")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (expand
                                                     "star_closed?")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("3"
                                                                  (expand
                                                                   "restrict")
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-2 1))
                                                  (("2"
                                                    (expand
                                                     "star_closed?")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "restrict")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  2))
                                                                (("3"
                                                                  (expand
                                                                   "restrict")
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (-3 1))
                                                  (("3"
                                                    (expand
                                                     "star_closed?")
                                                    (("3"
                                                      (skosimp)
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (expand
                                                           "restrict")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "y!1")
                                                            (("1"
                                                              (expand
                                                               "fsnZ_1")
                                                              (("1"
                                                                (expand
                                                                 "fsnZ")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (hide
                                                                   (-1
                                                                    2))
                                                                  (("2"
                                                                    (expand
                                                                     "fsnZ")
                                                                    (("2"
                                                                      (expand
                                                                       "fsnZ_1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (hide
                                                                   (-1
                                                                    2))
                                                                  (("3"
                                                                    (expand
                                                                     "fsnZ")
                                                                    (("3"
                                                                      (expand
                                                                       "fsnZ_1")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide-all-but (-4 1))
                                                  (("4"
                                                    (expand
                                                     "star_closed?")
                                                    (("4"
                                                      (skosimp)
                                                      (("4"
                                                        (expand
                                                         "member")
                                                        (("4"
                                                          (expand
                                                           "restrict")
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "y!1")
                                                            (("1"
                                                              (expand
                                                               "fsnZ_1")
                                                              (("1"
                                                                (expand
                                                                 "fsnZ")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (hide
                                                                   (-1
                                                                    2))
                                                                  (("2"
                                                                    (expand
                                                                     "fsnZ")
                                                                    (("2"
                                                                      (expand
                                                                       "fsnZ_1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x!1")
                                                              (("3"
                                                                (expand
                                                                 "restrict")
                                                                (("3"
                                                                  (hide
                                                                   (-1
                                                                    2))
                                                                  (("3"
                                                                    (expand
                                                                     "fsnZ")
                                                                    (("3"
                                                                      (expand
                                                                       "fsnZ_1")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide-all-but
                                                   (-5 -7 1))
                                                  (("5"
                                                    (expand
                                                     "homomorphism?")
                                                    (("5"
                                                      (skosimp)
                                                      (("5"
                                                        (inst
                                                         -1
                                                         "a!1"
                                                         "b!1")
                                                        (("5"
                                                          (expand
                                                           "fsnZ")
                                                          (("5"
                                                            (expand
                                                             "fsnZ_1")
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide-all-but
                                                   (-6 -7 1))
                                                  (("6"
                                                    (expand
                                                     "homomorphism?")
                                                    (("6"
                                                      (skosimp)
                                                      (("6"
                                                        (inst
                                                         -1
                                                         "a!1"
                                                         "b!1")
                                                        (("6"
                                                          (expand
                                                           "fsnZ")
                                                          (("6"
                                                            (expand
                                                             "fsnZ_1")
                                                            (("6"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1)
                            (("2" (expand "restrict")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "phi!1(x1!1)")
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand "fsnZ")
                                        (("2"
                                          (expand "fsnZ_1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (split)
                        (("1" (expand "fsICM?")
                          (("1" (split)
                            (("1" (expand "fsRI?")
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (expand "fsnZ_1" 1)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lemma "nZ_ideal")
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (expand "fsnZ_1" 2)
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (lemma "nZ_mZ_comaximal")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 3)
                                            (("2"
                                              (typepred "fspn!1")
                                              (("2"
                                                (expand
                                                 "fs_rel_primes")
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "fspn!1")
                            (("2" (hide (-2 -3))
                              (("2"
                                (expand "fsnZ_1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (lemma "Z_commutative_ring_w_one")
                        (("3" (expand "commutative_ring_with_one?")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 1)
            (("2" (typepred "fspn!1") (("2" (assert) nil nil)) nil))
            nil)
           ("3" (hide 2)
            (("3" (typepred "fspn!1") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nZ_fs_intersection formula-decl nil chinese_remainder_theorem_Z
     nil)
    (Chinese_Remainder_Theorem formula-decl nil
     chinese_remainder_theorem_rings nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     algebra)
    (Z_commutative_ring_w_one formula-decl nil
     chinese_remainder_theorem_Z nil)
    (nZ_mZ_comaximal formula-decl nil chinese_remainder_theorem_Z nil)
    (nZ_ideal formula-decl nil chinese_remainder_theorem_Z nil)
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (fsRI? const-decl "bool" comaximal_finseqs_ideals nil)
    (fsI type-eq-decl nil comaximal_finseqs_ideals nil)
    (fsQ const-decl "finseq[setof[set[T]]]" comaximal_finseqs_ideals
     nil)
    (fsnZ const-decl "finseq[set[int]]" chinese_remainder_theorem_Z
     nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (injective? const-decl "bool" functions nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (surjective? const-decl "bool" functions nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (fsICM type-eq-decl nil comaximal_finseqs_ideals nil)
    (fsICM? const-decl "bool" comaximal_finseqs_ideals nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Intersection const-decl "set" sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (seq2set const-decl "finite_set[T]" seq2set structures)
    (product const-decl "posnat" product_seq reals)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nZ const-decl "set[int]" chinese_remainder_theorem_Z nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (fs_rel_primes const-decl "bool" chinese_remainder_theorem_Z nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)))



sigma_R_below[T:Type+, +,*:[T,T->T], zero:T, N: posnat]: THEORY 

BEGIN

   ASSUMING IMPORTING algebra@ring_def[T,+,*,zero]
    
	fullset_is_ring: ASSUMPTION ring?(fullset[T])

   ENDASSUMING

   IMPORTING algebra@ring[T,+,*,zero],
             quotient_rings[T,+,*,zero]
   

%%----------------------------------------------------------------------------
            a: VAR T
	    I: VAR set[T]
	    R: VAR ring[T,+,*,zero]
  int_below_N: TYPE = {i:int | i < N}
       low, m: VAR nat
  n, i, highn: VAR below[N]
  high, high1: VAR int_below_N
         F, G: VAR [below[N] -> T]

  R_sigma_below(low, high, F): RECURSIVE T =
       IF low > high THEN zero
        ELSE R_sigma_below(low, high-1, F) + F(high)
       ENDIF                            
   MEASURE abs(high+1-low)

%-----------------------------------------------------------------------------

  R_sigma_b_eq_arg: LEMMA R_sigma_below(n, n, F) = F(n)

  R_sigma_b_spl: LEMMA high = low + n + m IMPLIES 
      R_sigma_below(low, high, F) = 
                         R_sigma_below(low,low+n,F) + R_sigma_below(low+n+1,high,F)
			      
  R_sigma_b_split: LEMMA low - 1 <= m AND m <= high IMPLIES 
      R_sigma_below(low, high, F) = 
                         R_sigma_below(low, m, F) + R_sigma_below(m+1, high, F)

  R_sigma_b_first: LEMMA high >= low IMPLIES
      R_sigma_below(low, high, F) = F(low) + R_sigma_below(low+1, high, F)

  R_sigma_b_last: LEMMA high >= low IMPLIES 
      R_sigma_below(low, high, F) = R_sigma_below(low, high-1, F) + F(high)

  R_sigma_b_middle: LEMMA high >= i AND i >= low IMPLIES
      R_sigma_below(low, high, F) = R_sigma_below(low, i-1, F) + F(i) +
                                                                R_sigma_below(i+1, high, F)
				
  R_sigma_b_left_aux: LEMMA
      R_sigma_below(low, highn, (LAMBDA i: a * F(i))) = a * R_sigma_below(low, highn, F)

  R_sigma_b_left: LEMMA
      R_sigma_below(low, high, (LAMBDA i: a * F(i))) = a * R_sigma_below(low, high, F)

  R_sigma_b_right_aux: LEMMA
      R_sigma_below(low, highn, (LAMBDA i: F(i) * a)) = R_sigma_below(low, highn, F) * a

  R_sigma_b_right: LEMMA
      R_sigma_below(low, high, (LAMBDA i: F(i) * a)) = R_sigma_below(low, high, F) * a

  R_sigma_b_inv_aux: LEMMA R_sigma_below(low, highn, (LAMBDA i: -F(i)))
                             = -R_sigma_below(low, highn, F)

  R_sigma_b_inv: LEMMA R_sigma_below(low, high, (LAMBDA i: -F(i)))
                             = -R_sigma_below(low, high, F)

  R_sigma_b_eq_k_aux: LEMMA
      FORALL(k: nat):
        highn + k < N AND (FORALL (j: subrange(low,highn)): F(j) = G(j+k))
          IMPLIES
	    R_sigma_below(low,highn,F) = R_sigma_below(low+k,highn+k,G)

  R_sigma_b_eq_k: LEMMA
      FORALL(k: nat):
        high + k < N AND (FORALL (j: subrange(low,high)): F(j) = G(j+k))
          IMPLIES
	    R_sigma_below(low,high,F) = R_sigma_below(low+k,high+k,G)

 R_sigma_b_in_ideal_aux: LEMMA
      ideal?(I,R) AND (FORALL (j: subrange(low,highn)): member(F(j), I))
          IMPLIES
            member(R_sigma_below(low,highn,F),I)

 R_sigma_b_in_ideal: LEMMA
      ideal?(I,R) AND (FORALL (j: subrange(low,high)): member(F(j), I))
          IMPLIES
            member(R_sigma_below(low,high,F),I)

 R_sigma_b_add_zero_aux: LEMMA 
      ideal?(I,R) AND (FORALL (j: subrange(low,highn)): member(F(j), R) AND F(j) + I = I)
          IMPLIES
	    R_sigma_below(low,highn,F) + I = I

  R_sigma_b_add_zero: LEMMA 
      ideal?(I,R) AND (FORALL (j: subrange(low,high)): member(F(j), R) AND F(j) + I = I)
          IMPLIES
	    R_sigma_below(low,high,F) + I = I
	     
END sigma_R_below

(cartesian_product_finite
 (cartesian_product_n_TCC1 0
  (cartesian_product_n_TCC1-1 nil 3763074006 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (cartesian_product_one_emptyset 0
  (cartesian_product_one_emptyset-1 nil 3782678605
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_one")
            (("1" (skosimp) (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set[T]" seq_extras
     "structures/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (emptyset const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty? const-decl "bool" sets nil)
    (add_first const-decl "finseq" seq_extras "structures/")
    (insert? const-decl "finseq" seq_extras "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cartesian_product_set_emptyset 0
  (cartesian_product_set_emptyset-1 nil 3782680848
   ("" (skosimp)
    (("" (decompose-equality 1)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_set")
            (("1" (expand "Union")
              (("1" (skosimp)
                (("1" (typepred "a!1")
                  (("1" (skosimp)
                    (("1" (expand "empty?") (("1" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "cartesian_product_set")
            (("2" (expand "Union")
              (("2" (skosimp)
                (("2" (typepred "a!1")
                  (("2" (skosimp)
                    (("2" (replaces -2)
                      (("2" (expand "cartesian_product_one")
                        (("2" (skosimp)
                          (("2" (expand "empty?")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "emptyset") (("3" (propax) nil nil)) nil)
           ("4" (expand "emptyset") (("4" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set[T]" seq_extras
     "structures/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (emptyset const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Union const-decl "set" sets nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (cartesian_product_n_emptyset 0
  (cartesian_product_n_emptyset-1 nil 3782681358
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (prop)
            (("1" (expand "cartesian_product_n")
              (("1" (assert)
                (("1" (expand "finseq_appl")
                  (("1" (flatten)
                    (("1" (inst?)
                      (("1" (expand "empty?") (("1" (inst?) nil nil))
                        nil)
                       ("2" (typepred "i!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "finseq[T]" cartesian_product_finite nil)
    (i!1 skolem-const-decl "below(length(fsA!1))"
     cartesian_product_finite nil)
    (below type-eq-decl nil naturalnumbers nil)
    (fsA!1 skolem-const-decl "finseq[set[T]]" cartesian_product_finite
     nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" seq_extras
     "structures/"))
   shostak))
 (cartesian_product_n_add_is_union 0
  (cartesian_product_n_add_is_union-1 nil 3781740315
   ("" (skosimp)
    (("" (decompose-equality 2)
      (("" (iff)
        (("" (prop)
          (("1" (expand "cartesian_product_n" -1)
            (("1" (prop)
              (("1" (hide 1)
                (("1" (expand "add_first")
                  (("1" (expand "insert?") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "finseq_appl")
                (("2" (inst-cp -2 "0")
                  (("1" (expand "member")
                    (("1" (expand "add_first" (-3 1))
                      (("1" (expand "insert?")
                        (("1" (expand "cartesian_product_set")
                          (("1" (expand "Union")
                            (("1"
                              (inst 2
                               "cartesian_product_one(x!1`seq(0),cartesian_product_n(fsA!1))")
                              (("1"
                                (expand "cartesian_product_one")
                                (("1"
                                  (inst 2 "rest(x!1)")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (expand "cartesian_product_n")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "add_first")
                                              (("1"
                                                (expand "insert?")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (inst -2 "i!1 + 1")
                                                  (("1"
                                                    (expand
                                                     "add_first")
                                                    (("1"
                                                      (expand
                                                       "insert?")
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (lemma
                                                           "rest_pos[T]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-2
                                                                      -3
                                                                      2))
                                                                    (("2"
                                                                      (typepred
                                                                       "i!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (-3
                                                                  -4
                                                                  1))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i!1")
                                                    (("2"
                                                      (hide (-3 2))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-2 -3))
                                      (("2"
                                        (lemma "seq_first_rest[T]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "first")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "add_first")
                                                    (("2"
                                                      (expand
                                                       "insert?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "x!1`seq(0)")
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (expand "add_first")
                      (("2" (expand "insert?") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "cartesian_product_set")
            (("2" (expand "Union")
              (("2" (skosimp)
                (("2" (typepred "a!1")
                  (("2" (expand "cartesian_product_n")
                    (("2" (prop)
                      (("1" (hide -2)
                        (("1" (expand "add_first")
                          (("1" (expand "insert?")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "finseq_appl")
                        (("2" (expand "add_first")
                          (("2" (expand "insert?")
                            (("2" (skosimp)
                              (("2"
                                (replaces -2)
                                (("2"
                                  (expand "cartesian_product_one")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -3)
                                          (("2"
                                            (replaces -3)
                                            (("2"
                                              (expand "add_first")
                                              (("2"
                                                (expand "insert?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "finseq_appl")
                        (("3" (skosimp)
                          (("3" (expand "member")
                            (("3" (skosimp)
                              (("3"
                                (replaces -2)
                                (("3"
                                  (expand "cartesian_product_one")
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (expand "member")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "add_first" 1)
                                          (("3"
                                            (expand "insert?")
                                            (("3"
                                              (prop)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -4)
                                                  (("1"
                                                    (expand
                                                     "add_first")
                                                    (("1"
                                                      (expand
                                                       "insert?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (inst -3 "i!1 - 1")
                                                  (("1"
                                                    (replaces -4)
                                                    (("1"
                                                      (expand
                                                       "add_first")
                                                      (("1"
                                                        (expand
                                                         "insert?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 3))
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (cartesian_product_n const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (add_first const-decl "finseq" seq_extras "structures/")
    (cartesian_product_set const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil cartesian_product_finite nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (insert? const-decl "finseq" seq_extras "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "finseq[T]" cartesian_product_finite nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (A!1 skolem-const-decl "set[T]" cartesian_product_finite nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cartesian_product_one const-decl "set[finseq[T]]"
     cartesian_product_finite nil)
    (fsA!1 skolem-const-decl "finseq[set[T]]" cartesian_product_finite
     nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (seq_first_rest formula-decl nil seq_extras "structures/")
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below(length(rest(x!1)))"
     cartesian_product_finite nil)
    (rest_pos formula-decl nil seq_extras "structures/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (fsy!1 skolem-const-decl "finseq[T]" cartesian_product_finite nil)
    (i!1 skolem-const-decl "below(length(x!1))"
     cartesian_product_finite nil))
   shostak)))


(ring_with_id_one_generator
 (IMP_ring_one_generator_TCC1 0
  (IMP_ring_one_generator_TCC1-1 nil 3779132594
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (fullset_is_ring_with_one formula-decl nil
     ring_with_id_one_generator nil))
   nil))
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3779132594
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil
     ring_with_id_one_generator nil))
   nil))
 (commutative_id_one_gen_charac 0
  (commutative_id_one_gen_charac-1 nil 3779132605
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (rewrite "commutative_one_gen_charac")
          (("" (prop)
            (("1" (expand "restrict")
              (("1" (expand "+")
                (("1" (expand "commutative_one_gen")
                  (("1" (skosimp)
                    (("1" (expand "commutative_ring?")
                      (("1" (flatten)
                        (("1" (expand "commutative?")
                          (("1" (inst -3 "r!1" "a!1")
                            (("1" (expand "restrict")
                              (("1"
                                (replaces -3)
                                (("1"
                                  (inst 1 "r!1 + times(one,n!1)")
                                  (("1"
                                    (rewrite "right_distributive")
                                    (("1"
                                      (rewrite "right_times")
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "R_sum_star_closed")
                                      (("2"
                                        (inst
                                         -1
                                         "R!1"
                                         "r!1"
                                         " times[T, +, *, zero](one, n!1)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "times_member")
                                              (("2"
                                                (inst
                                                 -1
                                                 "R!1"
                                                 "n!1"
                                                 "one")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred "R!1")
                                                  (("2"
                                                    (expand
                                                     "ring_with_one?")
                                                    (("2"
                                                      (expand
                                                       "monoid?")
                                                      (("2"
                                                        (expand
                                                         "monad?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide-all-but
                                                             (-2 1))
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "restrict")
              (("2" (expand "+")
                (("2" (skosimp)
                  (("2" (expand "commutative_one_gen")
                    (("2" (inst 1 "h!1" "0")
                      (("2" (expand "times")
                        (("2" (expand "^")
                          (("2" (expand "power")
                            (("2" (assert)
                              (("2"
                                (expand "commutative_ring?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (expand "commutative?")
                                      (("2"
                                        (inst -2 "h!1" "a!1")
                                        (("2"
                                          (expand "restrict")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "set[T]" cosets_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (one formal-const-decl "T" ring_with_id_one_generator nil)
    (zero formal-const-decl "T" ring_with_id_one_generator nil)
    (* formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_id_one_generator nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_with_id_one_generator nil)
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (commutative_one_gen_charac formula-decl nil ring_one_generator
     nil)
    (^ const-decl "T" group "algebra/")
    (right_identity formula-decl nil monad "algebra/")
    (power def-decl "T" monoid_def "algebra/")
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (commutative? const-decl "bool" operator_defs nil)
    (n!1 skolem-const-decl "int" ring_with_id_one_generator nil)
    (times const-decl "T" ring_basic_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (r!1 skolem-const-decl "(R!1)" ring_with_id_one_generator nil)
    (R!1 skolem-const-decl "(ring_with_one?)"
     ring_with_id_one_generator nil)
    (times_one formula-decl nil ring_with_one "algebra/")
    (right_times formula-decl nil ring_basic_properties nil)
    (right_distributive formula-decl nil ring "algebra/")
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (TRUE const-decl "bool" booleans nil))
   nil)))


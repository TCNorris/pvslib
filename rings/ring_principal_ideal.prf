(ring_principal_ideal
 (IMP_ring_one_generator_TCC1 0
  (IMP_ring_one_generator_TCC1-1 nil 3793899783
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_principal_ideal nil)) nil))
 (gen_is_member 0
  (gen_is_member-1 nil 3777884795
   ("" (skosimp)
    (("" (expand "member")
      (("" (expand "principal_ideal")
        (("" (expand "Intersection")
          (("" (skosimp)
            (("" (typepred "a!2" "a!1")
              (("" (expand "fam_ideal")
                (("" (expand "extend")
                  (("" (prop)
                    (("" (expand "member") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (Intersection const-decl "set" sets nil)
    (fam_ideal const-decl "setof[set[(T)]]" ring_principal_ideal_def
     nil)
    (setof type-eq-decl nil defined_types nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (zero formal-const-decl "T" ring_principal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_principal_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (extend const-decl "R" extend nil)
    (principal_ideal const-decl "set[T]" ring_principal_ideal_def nil))
   shostak))
 (principal_ideal_is_ideal 0
  (principal_ideal_is_ideal-1 nil 3777885106
   ("" (skosimp)
    (("" (rewrite "ideal_equiv")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst -1 "a!1")
              (("1" (rewrite "gen_is_member") nil nil)) nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "principal_ideal")
                (("2" (expand "Intersection")
                  (("2" (inst -1 "R!1")
                    (("2" (expand "fam_ideal")
                      (("2" (expand "extend")
                        (("2" (prop)
                          (("1" (typepred "a!1")
                            (("1" (expand "member")
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (typepred "R!1")
                            (("2" (rewrite "self_ideal") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (expand "principal_ideal")
            (("3" (expand "Intersection")
              (("3" (split)
                (("1" (skosimp)
                  (("1" (typepred "a!2" "x!1" "y!1")
                    (("1" (expand "fam_ideal")
                      (("1" (expand "extend")
                        (("1" (prop)
                          (("1" (hide -2)
                            (("1" (expand "principal_ideal")
                              (("1"
                                (expand "Intersection")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (rewrite "ideal_equiv")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1 -2)
                                          (("1"
                                            (inst -1 "x!1" "y!1" "a!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "a!2" "x!1" "r!1")
                    (("2" (expand "fam_ideal")
                      (("2" (expand "extend")
                        (("2" (prop)
                          (("2" (expand "principal_ideal")
                            (("2" (expand "Intersection")
                              (("2"
                                (inst -3 "a!2")
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (rewrite "ideal_equiv")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -3 "x!1" "x!1" "r!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp)
                  (("3" (typepred "a!2" "r!1" "x!1")
                    (("3" (expand "fam_ideal")
                      (("3" (expand "extend")
                        (("3" (prop)
                          (("3" (hide -2)
                            (("3" (expand "principal_ideal")
                              (("3"
                                (expand "Intersection")
                                (("3"
                                  (inst -3 "a!2")
                                  (("3"
                                    (rewrite "ideal_equiv")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (hide -1 -2)
                                        (("3"
                                          (inst -1 "x!1" "x!1" "r!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ideal_equiv formula-decl nil ring_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (principal_ideal const-decl "set[T]" ring_principal_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (T formal-nonempty-type-decl nil ring_principal_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (zero formal-const-decl "T" ring_principal_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (a!2 skolem-const-decl "(fam_ideal(R!1)(a!1))" ring_principal_ideal
     nil)
    (inv_right formula-decl nil group "algebra/")
    (a!2 skolem-const-decl "(fam_ideal(R!1)(a!1))" ring_principal_ideal
     nil)
    (y!1 skolem-const-decl "(principal_ideal(R!1)(a!1))"
     ring_principal_ideal nil)
    (x!1 skolem-const-decl "(principal_ideal(R!1)(a!1))"
     ring_principal_ideal nil)
    (a!2 skolem-const-decl "(fam_ideal(R!1)(a!1))" ring_principal_ideal
     nil)
    (subset? const-decl "bool" sets nil)
    (Intersection const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (self_ideal formula-decl nil ring_ideal nil)
    (extend const-decl "R" extend nil)
    (a!1 skolem-const-decl "(R!1)" ring_principal_ideal nil)
    (R!1 skolem-const-decl "(ring?)" ring_principal_ideal nil)
    (setof type-eq-decl nil defined_types nil)
    (fam_ideal const-decl "setof[set[(T)]]" ring_principal_ideal_def
     nil)
    (nonempty? const-decl "bool" sets nil)
    (gen_is_member formula-decl nil ring_principal_ideal nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (principal_ideal_charac 0
  (principal_ideal_charac-1 nil 3779471979
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "extend")
          (("" (prop)
            (("1" (expand "principal_ideal")
              (("1" (expand "Intersection")
                (("1" (inst -2 "one_gen(R)(a)")
                  (("1" (expand "extend") (("1" (prop) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (expand "fam_ideal")
                      (("2" (expand "extend" 1 1)
                        (("2" (prop)
                          (("1" (expand "member")
                            (("1" (expand "extend")
                              (("1"
                                (expand "one_gen")
                                (("1"
                                  (inst
                                   1
                                   "zero"
                                   "zero"
                                   "1"
                                   "LAMBDA(i:nat): zero"
                                   "LAMBDA(i:nat): zero"
                                   "0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "times_int_one")
                                      (("1"
                                        (expand "F_one_gen")
                                        (("1"
                                          (expand "R_sigma")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -)
                                    (("2"
                                      (lemma "zero_is_member_R")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "one_gen_is_ideal") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "principal_ideal")
              (("2" (expand "Intersection")
                (("2" (inst -1 "R")
                  (("2" (hide 2)
                    (("2" (expand "fam_ideal")
                      (("2" (expand "extend")
                        (("2" (rewrite "self_ideal")
                          (("2" (typepred "a") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "one_gen")
              (("3" (skeep)
                (("3" (expand "principal_ideal")
                  (("3" (expand "Intersection")
                    (("3" (skeep)
                      (("3" (case "ring?(a_1)")
                        (("1"
                          (case "a_1(r*a + a*s + times(a, n)) AND a_1(R_sigma(0, m, F_one_gen(R, a, F, G)))")
                          (("1" (flatten)
                            (("1" (lemma "R_sum_star_closed")
                              (("1"
                                (inst
                                 -1
                                 "a_1"
                                 "(r * a + a * s + times(a, n))"
                                 " R_sigma(0, m, F_one_gen(R, a, F, G))")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -3 2)
                            (("2" (split)
                              (("1"
                                (case
                                 "a_1(r*a +a*s) AND a_1(times(a,n))")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "R_sum_star_closed")
                                    (("1"
                                      (inst
                                       -1
                                       "a_1"
                                       "r * a + a * s"
                                       "times(a,n)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (case "a_1(r*a) AND a_1(a*s)")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma "R_sum_star_closed")
                                          (("1"
                                            (inst -1 "a_1" "r*a" "a*s")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 2)
                                        (("2"
                                          (typepred "a_1")
                                          (("2"
                                            (expand "fam_ideal")
                                            (("2"
                                              (expand "extend")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand "ideal?")
                                                  (("1"
                                                    (expand
                                                     "left_ideal?")
                                                    (("1"
                                                      (expand
                                                       "left_swallow?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -1 -3)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "r"
                                                             "a")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "right_ideal?")
                                                      (("2"
                                                        (expand
                                                         "right_swallow?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "s"
                                                               "a")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "a_1")
                                      (("2"
                                        (expand "fam_ideal")
                                        (("2"
                                          (expand "extend")
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide -1 -4)
                                              (("2"
                                                (lemma "times_member")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "a_1"
                                                   "n"
                                                   "a")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "member")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (generalize "m" "m")
                                (("2"
                                  (induct "m")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "F_one_gen")
                                      (("1"
                                        (expand "R_sigma")
                                        (("1"
                                          (typepred "a_1")
                                          (("1"
                                            (expand "fam_ideal")
                                            (("1"
                                              (expand "extend")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (case "a_1(F(0)*a)")
                                                  (("1"
                                                    (expand "ideal?")
                                                    (("1"
                                                      (expand
                                                       "right_ideal?")
                                                      (("1"
                                                        (expand
                                                         "right_swallow?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 -4 1))
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "G(0)"
                                                               "F(0)*a")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "ideal?")
                                                    (("2"
                                                      (expand
                                                       "left_ideal?")
                                                      (("2"
                                                        (expand
                                                         "left_swallow?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide-all-but
                                                             (-2 -4 1))
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "F(0)"
                                                               "a")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (expand "R_sigma" 1)
                                        (("2"
                                          (case
                                           "a_1(F_one_gen(R, a, F, G)(1 + j))")
                                          (("1"
                                            (lemma "R_sum_star_closed")
                                            (("1"
                                              (inst
                                               -1
                                               "a_1"
                                               "R_sigma(0, j, F_one_gen(R, a, F, G))"
                                               "F_one_gen(R, a, F, G)(1 + j)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "F_one_gen")
                                              (("2"
                                                (typepred "a_1")
                                                (("2"
                                                  (expand "fam_ideal")
                                                  (("2"
                                                    (expand "extend")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (case
                                                           "a_1(F(1+j)*a)")
                                                          (("1"
                                                            (expand
                                                             "ideal?")
                                                            (("1"
                                                              (expand
                                                               "right_ideal?")
                                                              (("1"
                                                                (expand
                                                                 "right_swallow?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "G(1 + j)"
                                                                       "F(1 + j) * a")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ideal?")
                                                            (("2"
                                                              (expand
                                                               "left_ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_swallow?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -3
                                                                     2)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "F(1+j)"
                                                                       "a")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "a_1")
                          (("2" (expand "fam_ideal")
                            (("2" (expand "extend")
                              (("2"
                                (prop)
                                (("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (expand "ideal?")
                                    (("2"
                                      (expand "left_ideal?")
                                      (("2"
                                        (expand "subring?")
                                        (("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (zero formal-const-decl "T" ring_principal_ideal nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (principal_ideal const-decl "set[T]" ring_principal_ideal_def nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_principal_ideal nil)
    (subring? const-decl "bool" ring_def "algebra/")
    (times const-decl "T" ring_basic_properties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (a_1 skolem-const-decl "(fam_ideal(R)(a))" ring_principal_ideal
     nil)
    (times_member formula-decl nil ring_basic_properties nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (F skolem-const-decl "[nat -> (R)]" ring_principal_ideal nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" ring_principal_ideal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (self_ideal formula-decl nil ring_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (a skolem-const-decl "(R)" ring_principal_ideal nil)
    (R skolem-const-decl "(ring?)" ring_principal_ideal nil)
    (fam_ideal const-decl "setof[set[(T)]]" ring_principal_ideal_def
     nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (times_int_one formula-decl nil ring_basic_properties nil)
    (R_sigma def-decl "T" ring_basic_properties nil)
    (right_identity formula-decl nil monad "algebra/")
    (F_one_gen const-decl "[nat -> (R)]" ring_one_generator nil)
    (left_identity formula-decl nil monad "algebra/")
    (times_zero formula-decl nil ring "algebra/")
    (zero_times formula-decl nil ring "algebra/")
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (one_gen_is_ideal formula-decl nil ring_one_generator nil)
    (Intersection const-decl "set" sets nil))
   shostak))
 (comm_principal_ideal_charac_TCC1 0
  (comm_principal_ideal_charac_TCC1-1 nil 3778427209
   ("" (skeep)
    (("" (typepred "R")
      (("" (expand "commutative_ring?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def "algebra/")
    (zero formal-const-decl "T" ring_principal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_principal_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (comm_principal_ideal_charac 0
  (comm_principal_ideal_charac-1 nil 3778427238
   ("" (skeep)
    (("" (rewrite "principal_ideal_charac")
      (("" (rewrite "commutative_one_gen_charac") nil nil)) nil))
    nil)
   ((principal_ideal_charac formula-decl nil ring_principal_ideal nil)
    (T formal-nonempty-type-decl nil ring_principal_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_principal_ideal nil)
    (zero formal-const-decl "T" ring_principal_ideal nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (commutative_one_gen_charac formula-decl nil ring_one_generator
     nil))
   shostak)))


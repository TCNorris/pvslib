(ring_with_one_homomorphism
 (IMP_ring_homomorphism_lemmas_TCC1 0
  (IMP_ring_homomorphism_lemmas_TCC1-1 nil 3783846800
   ("" (lemma "fullsetT1_is_ring_w_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism nil))
   nil))
 (IMP_ring_homomorphism_lemmas_TCC2 0
  (IMP_ring_homomorphism_lemmas_TCC2-1 nil 3783846800
   ("" (lemma "fullsetT2_is_ring_w_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism nil))
   nil))
 (R_TCC1 0
  (R_TCC1-1 nil 3782046145
   ("" (rewrite "fullsetT1_is_ring_w_one") nil nil)
   ((fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism nil))
   nil))
 (S_TCC1 0
  (S_TCC1-1 nil 3782046145
   ("" (rewrite "fullsetT2_is_ring_w_one") nil nil)
   ((fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism nil))
   nil))
 (epi_maps_ones_TCC1 0
  (epi_maps_ones_TCC1-1 nil 3782120011 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-nonempty-type-decl nil ring_with_one_homomorphism nil)
    (set type-eq-decl nil sets nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_with_one_homomorphism
     nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_with_one_homomorphism
     nil)
    (zero1 formal-const-decl "T1" ring_with_one_homomorphism nil)
    (one1 formal-const-decl "T1" ring_with_one_homomorphism nil)
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (ring_with_one nonempty-type-eq-decl nil ring_with_one "algebra/")
    (T2 formal-nonempty-type-decl nil ring_with_one_homomorphism nil)
    (s2 formal-const-decl "[T2, T2 -> T2]" ring_with_one_homomorphism
     nil)
    (p2 formal-const-decl "[T2, T2 -> T2]" ring_with_one_homomorphism
     nil)
    (zero2 formal-const-decl "T2" ring_with_one_homomorphism nil)
    (one2 formal-const-decl "T2" ring_with_one_homomorphism nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_epimorphism type-eq-decl nil ring_homomorphisms_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (one_member formula-decl nil monad "algebra/")
    (right_identity formula-decl nil monad "algebra/")
    (restrict const-decl "R" restrict nil)
    (left_identity formula-decl nil monad "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (left_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (right_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (surjective? const-decl "bool" functions nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil))
   nil))
 (epi_maps_ones 0
  (epi_maps_ones-1 nil 3782120018
   ("" (skeep*)
    (("" (typepred "phi")
      (("" (expand "R_epimorphism?")
        (("" (flatten)
          (("" (expand "surjective?")
            (("" (inst -1 "one2")
              (("1" (skeep)
                (("1" (rewrite "R_homo_equiv")
                  (("1" (inst -2 "x" "one1")
                    (("1" (flatten)
                      (("1" (hide -2)
                        (("1"
                          (case-replace "phi(p1(x, one1)) = phi(x)")
                          (("1" (replaces -2)
                            (("1"
                              (rewrite
                               "one_times[T2,s2,p2,zero2,one2]")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2"
                              (rewrite
                               "times_one[T1,s1,p1,zero1,one1]")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "S")
                (("2" (expand "ring_with_one?")
                  (("2" (expand "monoid?")
                    (("2" (expand "monad?")
                      (("2" (expand "member") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_epimorphism type-eq-decl nil ring_homomorphisms_def nil)
    (one2 formal-const-decl "T2" ring_with_one_homomorphism nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one "algebra/")
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (one1 formal-const-decl "T1" ring_with_one_homomorphism nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zero2 formal-const-decl "T2" ring_with_one_homomorphism nil)
    (p2 formal-const-decl "[T2, T2 -> T2]" ring_with_one_homomorphism
     nil)
    (s2 formal-const-decl "[T2, T2 -> T2]" ring_with_one_homomorphism
     nil)
    (zero1 formal-const-decl "T1" ring_with_one_homomorphism nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_with_one_homomorphism
     nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_with_one_homomorphism
     nil)
    (T2 formal-nonempty-type-decl nil ring_with_one_homomorphism nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-nonempty-type-decl nil ring_with_one_homomorphism nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (S skolem-const-decl "ring_with_one[T2, s2, p2, zero2, one2]"
     ring_with_one_homomorphism nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (R_homo_equiv formula-decl nil ring_homomorphism_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (one_times formula-decl nil ring_with_one "algebra/")
    (times_one formula-decl nil ring_with_one "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (isomorphic_fields 0
  (isomorphic_fields-1 nil 3782046221
   ("" (skeep)
    (("" (expand "field?")
      (("" (expand "division_ring?")
        (("" (expand "R_isomorphic?")
          (("" (skeep)
            (("" (expand "R_isomorphism?")
              (("" (flatten)
                (("" (expand "R_epimorphism?")
                  (("" (flatten)
                    (("" (rewrite "R_homo_equiv")
                      (("" (expand "group?")
                        (("" (expand "monoid?")
                          (("" (expand "monad?")
                            (("" (expand "member")
                              ((""
                                (flatten)
                                ((""
                                  (split)
                                  (("1"
                                    (expand "star_closed?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "remove")
                                          (("1"
                                            (typepred "x" "y")
                                            (("1"
                                              (expand "remove")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1
                                                    -2
                                                    -3
                                                    -4
                                                    -5
                                                    -6
                                                    1
                                                    2
                                                    3
                                                    4))
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (expand
                                                       "surjective?")
                                                      (("1"
                                                        (copy -4)
                                                        (("1"
                                                          (inst -1 "x")
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "y")
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "x_1"
                                                                 "x!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -8
                                                                     "x_1"
                                                                     "x!1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -4)
                                                                            (("1"
                                                                              (case-replace
                                                                               "p2(x,y) = zero2")
                                                                              (("1"
                                                                                (case
                                                                                 "member(p1(x_1, x!1), R_kernel(R,S)(phi))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "monomorphism_charac")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -5)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "p1(x_1, x!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton")
                                                                                          (("1"
                                                                                            (iff
                                                                                             -1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "zero_is_member_R[T2,s2,p2,zero2]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "S")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   4
                                                                                   5)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "R_kernel")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x_1"
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "R_prod_star_closed[T1,s1,p1,zero1]")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "R"
                                                                                               "x_1"
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "R_monomorphism?")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "remove")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "zero_to_zero")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "R"
                                                                             "S"
                                                                             "phi")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -5
                                                                                1
                                                                                2))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "R_monomorphism?")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "zero_to_zero")
                                                                      (("3"
                                                                        (expand
                                                                         "remove")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "R"
                                                                             "S"
                                                                             "phi")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "R_monomorphism?")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "remove")
                                    (("2"
                                      (hide -4 -6 -7 -8 -9)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (typepred "S")
                                          (("2"
                                            (expand "ring_with_one?")
                                            (("2"
                                              (expand "monoid?")
                                              (("2"
                                                (expand "monad?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "R_monomorphism?")
                                                          (("2"
                                                            (expand
                                                             "injective?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "one1"
                                                                 "zero1")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -6
                                                                    -7
                                                                    -8
                                                                    -9
                                                                    -10
                                                                    1))
                                                                  (("1"
                                                                    (lemma
                                                                     "zero_to_zero")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "R"
                                                                       "S"
                                                                       "phi")
                                                                      (("1"
                                                                        (lemma
                                                                         "epi_maps_ones")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "R"
                                                                           "S"
                                                                           "phi")
                                                                          (("1"
                                                                            (case
                                                                             "R_epimorphism?(R, S)(phi)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-7
                                                                                -8
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "R_epimorphism?")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "R_homo_equiv")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "R_epimorphism?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (typepred
                                                                     "R")
                                                                    (("2"
                                                                      (expand
                                                                       "ring_with_one?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "zero_is_member_R[T1,s1,p1,zero1]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "identity?")
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (expand "restrict")
                                        (("3"
                                          (hide-all-but 1)
                                          (("3"
                                            (rewrite
                                             "times_one[T2,s2,p2,zero2,one2]")
                                            (("3"
                                              (rewrite
                                               "one_times[T2,s2,p2,zero2,one2]")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide -)
                                    (("4"
                                      (expand "associative?")
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (expand "restrict")
                                          (("4"
                                            (typepred "S")
                                            (("4"
                                              (expand "ring_with_one?")
                                              (("4"
                                                (expand "ring?")
                                                (("4"
                                                  (flatten)
                                                  (("4"
                                                    (hide-all-but
                                                     (-3 1))
                                                    (("4"
                                                      (expand
                                                       "associative?")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "x"
                                                         "y"
                                                         "z")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "z")
                                                          (("2"
                                                            (expand
                                                             "remove")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "y")
                                                          (("3"
                                                            (expand
                                                             "remove")
                                                            (("3"
                                                              (expand
                                                               "member")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (typepred
                                                           "x")
                                                          (("4"
                                                            (expand
                                                             "remove")
                                                            (("4"
                                                              (expand
                                                               "member")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (hide-all-but (-1 -2 -3 -5 -8 1))
                                    (("5"
                                      (expand "inv_exists?")
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (lemma "epi_maps_ones")
                                          (("5"
                                            (inst -1 "R" "S" "phi")
                                            (("1"
                                              (copy -3)
                                              (("1"
                                                (expand
                                                 "surjective?"
                                                 -4)
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -7 "x_1")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (copy -5)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "x_1"
                                                             "y")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -6)
                                                                (("1"
                                                                  (replaces
                                                                   -5)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "phi(y)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "epi_commutative")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "R"
                                                                           "S"
                                                                           "phi")
                                                                          (("1"
                                                                            (reveal
                                                                             -11)
                                                                            (("1"
                                                                              (expand
                                                                               "commutative_ring?")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "R"
                                                                                   "S")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ring_with_one?")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "commutative?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x"
                                                                                               "phi(y)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "restrict")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "remove")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -4
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "R_monomorphism?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "R_epimorphism?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "remove")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (lemma
                                                                           "zero_to_zero")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "R"
                                                                             "S"
                                                                             "phi")
                                                                            (("1"
                                                                              (case
                                                                               "phi(y) = zero2")
                                                                              (("1"
                                                                                (hide
                                                                                 -3
                                                                                 -4)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -5)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "times_zero[T2,s2,p2,zero2]")
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-2
                                                                                        -4
                                                                                        -5
                                                                                        -7))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "R_monomorphism?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "injective?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "zero1"
                                                                                               "one1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "R")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "ring_with_one?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "monoid?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "monad?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "R_monomorphism?")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y")
                                                              (("2"
                                                                (expand
                                                                 "remove")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (expand
                                                           "remove")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (hide
                                                               -2
                                                               -3
                                                               -6
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "R_monomorphism?")
                                                                (("2"
                                                                  (lemma
                                                                   "zero_to_zero")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "R"
                                                                     "S"
                                                                     "phi")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-2 -3 1))
                                              (("2"
                                                (expand
                                                 "R_epimorphism?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "R_homo_equiv")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (hide-all-but (-2 -3 -9 1))
                                    (("6"
                                      (lemma "epi_commutative")
                                      (("6"
                                        (inst -1 "R" "S" "phi")
                                        (("1"
                                          (expand "commutative_ring?")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "R")
                                              (("1"
                                                (expand
                                                 "ring_with_one?")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 -2 -3 1))
                                          (("2"
                                            (expand "R_epimorphism?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "R_homo_equiv")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((field? const-decl "bool" field_def "algebra/")
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homo_equiv formula-decl nil ring_homomorphism_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (one1 formal-const-decl "T1" ring_with_one_homomorphism nil)
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (ring_with_one nonempty-type-eq-decl nil ring_with_one "algebra/")
    (one2 formal-const-decl "T2" ring_with_one_homomorphism nil)
    (T1 formal-nonempty-type-decl nil ring_with_one_homomorphism nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_with_one_homomorphism
     nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_with_one_homomorphism
     nil)
    (zero1 formal-const-decl "T1" ring_with_one_homomorphism nil)
    (T2 formal-nonempty-type-decl nil ring_with_one_homomorphism nil)
    (s2 formal-const-decl "[T2, T2 -> T2]" ring_with_one_homomorphism
     nil)
    (p2 formal-const-decl "[T2, T2 -> T2]" ring_with_one_homomorphism
     nil)
    (zero2 formal-const-decl "T2" ring_with_one_homomorphism nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (surjective? const-decl "bool" functions nil)
    (S skolem-const-decl "ring_with_one[T2, s2, p2, zero2, one2]"
     ring_with_one_homomorphism nil)
    (x skolem-const-decl "(remove(zero2, S))"
     ring_with_one_homomorphism nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_to_zero formula-decl nil ring_homomorphism_lemmas nil)
    (phi skolem-const-decl "[(R) -> (S)]" ring_with_one_homomorphism
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (one_member formula-decl nil monad "algebra/")
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (monomorphism_charac formula-decl nil ring_homomorphism_lemmas nil)
    (R_kernel const-decl "set[T1]" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (x!1 skolem-const-decl "(R)" ring_with_one_homomorphism nil)
    (x_1 skolem-const-decl "(R)" ring_with_one_homomorphism nil)
    (R skolem-const-decl "ring_with_one[T1, s1, p1, zero1, one1]"
     ring_with_one_homomorphism nil)
    (y skolem-const-decl "(remove(zero2, S))"
     ring_with_one_homomorphism nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (R_epimorphism type-eq-decl nil ring_homomorphisms_def nil)
    (epi_maps_ones formula-decl nil ring_with_one_homomorphism nil)
    (injective? const-decl "bool" functions nil)
    (one_times formula-decl nil ring_with_one "algebra/")
    (times_one formula-decl nil ring_with_one "algebra/")
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (z skolem-const-decl "(remove(zero2, S))"
     ring_with_one_homomorphism nil)
    (y skolem-const-decl "(remove(zero2, S))"
     ring_with_one_homomorphism nil)
    (x skolem-const-decl "(remove(zero2, S))"
     ring_with_one_homomorphism nil)
    (inv_exists? const-decl "bool" group_def "algebra/")
    (x skolem-const-decl "(remove(zero2, S))"
     ring_with_one_homomorphism nil)
    (x_1 skolem-const-decl "(R)" ring_with_one_homomorphism nil)
    (times_zero formula-decl nil ring "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (epi_commutative formula-decl nil ring_homomorphism_lemmas nil)
    (y skolem-const-decl "(remove(zero1, R))"
     ring_with_one_homomorphism nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (division_ring? const-decl "bool" division_ring_def "algebra/"))
   shostak)))
(ring_with_one_homomorphism_extras
 (R_TCC1 0
  (R_TCC1-1 nil 3782140885
   ("" (rewrite "fullsetT1_is_ring_w_one") nil nil)
   ((fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil))
   nil))
 (S_TCC1 0
  (S_TCC1-1 nil 3782140885
   ("" (rewrite "fullsetT2_is_ring_w_one") nil nil)
   ((fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil))
   nil))
 (isomorphic_fields_charac 0
  (isomorphic_fields_charac-1 nil 3782140897
   ("" (skeep)
    (("" (prop)
      (("1"
        (lemma
         "isomorphic_fields[T1,s1,p1,zero1,one1,T2,s2,p2,zero2,one2]")
        (("1" (inst -1 "R" "S") (("1" (assert) nil nil)) nil)
         ("2" (rewrite "fullsetT2_is_ring_w_one") nil nil)
         ("3" (rewrite "fullsetT1_is_ring_w_one") nil nil))
        nil)
       ("2"
        (lemma
         "isomorphic_fields[T2,s2,p2,zero2,one2,T1,s1,p1,zero1,one1]")
        (("1" (inst -1 "S" "R")
          (("1" (assert)
            (("1" (hide -1 2)
              (("1" (expand "R_isomorphic?")
                (("1" (skeep)
                  (("1" (inst 1 "inverse(phi)")
                    (("1"
                      (rewrite
                       "inv_iso_is_iso[T1,s1,p1,zero1,T2,s2,p2,zero2]")
                      (("1" (lemma "	 fullsetT2_is_ring_w_one")
                        (("1" (expand "ring_with_one?")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (lemma "	 fullsetT1_is_ring_w_one")
                        (("2" (expand "ring_with_one?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst 1 "zero1")
                      (("2" (typepred "R")
                        (("2" (expand "ring_with_one?")
                          (("2" (flatten)
                            (("2"
                              (lemma
                               "zero_is_member_R[T1,s1,p1,zero1]")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (lemma " fullsetT1_is_ring_w_one")
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite " fullsetT1_is_ring_w_one") nil nil)
         ("3" (rewrite " fullsetT2_is_ring_w_one") nil nil))
        nil))
      nil))
    nil)
   ((fullsetT1_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil)
    (fullsetT2_is_ring_w_one formula-decl nil
     ring_with_one_homomorphism_extras nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one "algebra/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (fullset const-decl "set" sets nil)
    (isomorphic_fields formula-decl nil ring_with_one_homomorphism nil)
    (T1 formal-nonempty-type-decl nil ring_with_one_homomorphism_extras
     nil)
    (s1 formal-const-decl "[T1, T1 -> T1]"
     ring_with_one_homomorphism_extras nil)
    (p1 formal-const-decl "[T1, T1 -> T1]"
     ring_with_one_homomorphism_extras nil)
    (zero1 formal-const-decl "T1" ring_with_one_homomorphism_extras
     nil)
    (one1 formal-const-decl "T1" ring_with_one_homomorphism_extras nil)
    (T2 formal-nonempty-type-decl nil ring_with_one_homomorphism_extras
     nil)
    (s2 formal-const-decl "[T2, T2 -> T2]"
     ring_with_one_homomorphism_extras nil)
    (p2 formal-const-decl "[T2, T2 -> T2]"
     ring_with_one_homomorphism_extras nil)
    (zero2 formal-const-decl "T2" ring_with_one_homomorphism_extras
     nil)
    (one2 formal-const-decl "T2" ring_with_one_homomorphism_extras nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inv_iso_is_iso formula-decl nil ring_homomorphism_lemmas nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_isomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (inverse const-decl "D" function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (R skolem-const-decl "ring_with_one[T1, s1, p1, zero1, one1]"
     ring_with_one_homomorphism_extras nil)
    (R_isomorphic? const-decl "bool" ring_homomorphisms_def nil))
   shostak)))


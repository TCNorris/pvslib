
cartesian_product_finite[T: TYPE+]: THEORY

  BEGIN
  
    IMPORTING finite_sequences,
	      structures@seq_extras

              x: VAR T
	      A: VAR set[T]
           B, C: VAR set[finseq[T]]
  fsx, fsy, fsz: VAR finseq[T]
	    fsA: VAR finseq[set[T]]
%-------------------------------------------------


  % cartesian_product_one(x,B): set[finseq[T]] = 
  %     {fsx | IF B = emptyset THEN add_first(x,empty_seq) ELSE EXISTS fsy: member(fsy,B) AND fsx = add_first[T](x,fsy) ENDIF}

 cartesian_product_one(x,B): set[finseq[T]] = 
      {fsx | EXISTS fsy: member(fsy,B) AND fsx = add_first[T](x,fsy)}



  cartesian_product_set(A,B): set[finseq[T]] =
      Union({C | EXISTS x: member(x,A) AND C = cartesian_product_one(x,B)})


  cartesian_product_n(fsA): set[finseq[T]] =
      IF length(fsA) = 0 THEN emptyset
       ELSE {fsz | length(fsz) = length(fsA) AND
                   FORALL (i: below(length(fsz))): member(fsz(i), fsA(i))}
      ENDIF

%-------------------------------------------------
		    
  cartesian_product_one_emptyset: LEMMA
       empty?(B) IMPLIES cartesian_product_one(x,B) = emptyset

  cartesian_product_set_emptyset: LEMMA
      empty?(A) OR empty?(B) IMPLIES cartesian_product_set(A,B) = emptyset

  cartesian_product_n_emptyset: LEMMA
      (EXISTS (i: below(length(fsA))): empty?(fsA(i)))
        IMPLIES
	  cartesian_product_n(fsA) = emptyset

  cartesian_product_n_add_is_union: LEMMA
      length(fsA) /= 0
        IMPLIES
          cartesian_product_n(add_first[set[T]](A, fsA)) =
                       cartesian_product_set(A, cartesian_product_n(fsA))


  END cartesian_product_finite


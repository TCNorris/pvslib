(power_series_integ (deriv_domain 0 (deriv_domain-1 nil 3472404235 ("" (lemma "connected_domain") (("" (lemma "not_one_element") (("" (lemma "connected_deriv_domain[T]") (("" (assert) nil nil)) nil)) nil)) nil) ((not_one_element formula-decl nil power_series_integ nil) (connected_deriv_domain formula-decl nil deriv_domain_def analysis) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (connected_domain formula-decl nil power_series_integ nil)) nil)) (IMP_power_series_conv_TCC1 0 (IMP_power_series_conv_TCC1-2 "" 3804438678 ("" (lemma "not_one_element") (("" (propax) nil nil)) nil) nil shostak (IMP_power_series_conv assuming "power_series_conv[T].power_series_conv" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")) (IMP_power_series_conv_TCC1-1 nil 3804436037 ("" (assuming-tcc) nil nil) ((not_one_element formula-decl nil power_series_integ nil)) nil (IMP_power_series_conv assuming "power_series_conv[T].power_series_conv" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (IMP_power_series_conv_TCC2 0 (IMP_power_series_conv_TCC2-2 "" 3804438832 ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil) nil shostak (IMP_power_series_conv assuming "power_series_conv[T].power_series_conv" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")) (IMP_power_series_conv_TCC2-1 nil 3804436037 ("" (assuming-tcc) nil nil) ((deriv_domain formula-decl nil power_series_integ nil)) nil (IMP_power_series_conv assuming "power_series_conv[T].power_series_conv" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (IMP_power_series_conv_TCC3 0 (IMP_power_series_conv_TCC3-2 "" 3804438874 ("" (lemma "open") (("" (propax) nil nil)) nil) nil shostak (IMP_power_series_conv assuming "power_series_conv[T].power_series_conv" "open: ASSUMPTION FORALL (x: power_series_conv.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_conv.T_pred(y))")) (IMP_power_series_conv_TCC3-1 nil 3804436037 ("" (assuming-tcc) nil nil) ((open formula-decl nil power_series_integ nil)) nil (IMP_power_series_conv assuming "power_series_conv[T].power_series_conv" "open: ASSUMPTION FORALL (x: power_series_conv.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_conv.T_pred(y))"))) (integseq_TCC1 0 (integseq_TCC1-1 nil 3304350927 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak (integseq subtype "(number_fields.-)(power_series_integ.k, 1)" "nat"))) (integseq_TCC2 0 (integseq_TCC2-1 nil 3304350927 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil)) shostak (integseq subtype "power_series_integ.k" "nznum"))) (integ_powerseq_TCC1 0 (integ_powerseq_TCC1-1 nil 3304350927 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) shostak (integ_powerseq subtype "((number_fields.+)(power_series_integ.k, 1))" "{i: integers.int | booleans.OR(power_series_integ.x /= 0, reals.>=(i, 0))}"))) (conv_integseq 0 (conv_integseq-3 "" 3790091765 ("" (skosimp*) (("" (expand "conv_powerseries?") (("" (skosimp*) (("" (lemma "powerseries_abs_conv") (("" (inst?) (("" (replace -2) (("" (inst?) (("" (expand "powerseries") (("" (rewrite "convergent_abs " +) (("" (hide 2) (("" (lemma "comparison_test_gen") (("" (inst - "(LAMBDA (k: nat):
                                        IF k = 0 THEN abs(a!1(0))
                                        ELSE abs(a!1(k) * x!1 ^ k/(k+1))
                                        ENDIF)" "abs(powerseq(a!1,x!1))") (("" (assert) (("" (split -1) (("1" (lemma "convergent_scal") (("1" (inst?) (("1" (inst - "abs(x!1)") (("1" (assert) (("1" (hide -2 -3) (("1" (rewrite "series_scal") (("1" (expand "integseq") (("1" (rewrite "apow_rew") (("1" (expand "apowerseq") (("1" (hide -2) (("1" (expand "abs" +) (("1" (lemma "conv_series_shift") (("1" (inst -1 "1" "(LAMBDA (k_1: nat):
                                          IF k_1 = 0 THEN abs(0)
                                          ELSE abs(a!1(k_1 - 1) / k_1 * x!1 ^ k_1)
                                          ENDIF)") (("1" (assert) (("1" (hide 2) (("1" (case-replace "(LAMBDA n:
                                      abs(x!1) *
                                       IF n = 0 THEN abs(a!1(0))
                                       ELSE abs(a!1(n) * x!1 ^ n / (1 + n))
                                       ENDIF) = (LAMBDA n: abs((a!1(n) / (1 + n)) * x!1 ^ (1 + n)))") (("1" (hide -1 2) (("1" (apply-extensionality 1 :hide? t) (("1" (lift-if) (("1" (ground) (("1" (replace -1) (("1" (assert) (("1" (rewrite "abs_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (rewrite "abs_mult") (("2" (rewrite "abs_div") (("2" (rewrite "abs_div") (("2" (rewrite "abs_mult") (("2" (case-replace "abs(x!1 ^ (1 + x!2)) = abs(x!1)*abs(x!1 ^ x!2)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (rewrite "abs_hat") (("1" (rewrite "abs_hat") (("1" (grind) nil nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) (("2" (rewrite "abs_0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) nil nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) nil nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (inst + "1") (("2" (skosimp*) (("2" (lift-if) (("2" (ground) (("2" (rewrite "abs_abs") (("2" (rewrite "apow_rew") (("2" (expand "apowerseq") (("2" (assert) (("2" (expand "abs" 2 2) (("2" (rewrite "abs_mult") (("2" (rewrite "abs_div") (("2" (rewrite "abs_mult") (("2" (cross-mult 2) (("2" (name-replace "AAA" "abs(a!1(n!1)) * abs(x!1 ^ n!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((conv_powerseries? const-decl "bool" power_series_conv nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (powerseries_abs_conv formula-decl nil power_series_conv nil) (powerseries const-decl "sequence[real]" power_series nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "real" exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (abs const-decl "sequence[real]" series nil) (series const-decl "sequence[real]" series nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (series_scal formula-decl nil series nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (apow_rew formula-decl nil power_series nil) (int_minus_int_is_int application-judgement "int" integers nil) (conv_series_shift formula-decl nil series nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (expt_x1 formula-decl nil exponentiation nil) (abs_mult formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (abs_div formula-decl nil real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (minus_even_is_even application-judgement "even_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nat_expt application-judgement "nat" exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (expt def-decl "real" exponentiation nil) (nat_exp application-judgement "nat" exponentiation nil) (abs_0 formula-decl nil abs_lems reals) (int_times_even_is_even application-judgement "even_int" integers nil) (hat_02n formula-decl nil power_series nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_exp application-judgement "nnreal" exponentiation nil) (abs_hat formula-decl nil exponent_props reals) (nzreal nonempty-type-eq-decl nil reals nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (apowerseq const-decl "sequence[real]" power_series nil) (convergent_scal formula-decl nil convergence_ops analysis) (abs_abs formula-decl nil real_props nil) (div_mult_pos_le1 formula-decl nil real_props nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nnreal type-eq-decl nil real_types nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (comparison_test_gen formula-decl nil series nil) (integseq const-decl "sequence[real]" power_series_integ nil) (powerseq const-decl "sequence[real]" power_series nil) (convergent_abs formula-decl nil series nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil)) shostak) (conv_integseq-2 nil 3352096155 ("" (skosimp*) (("" (expand "conv_powerseries?") (("" (skosimp*) (("" (lemma "powerseries_abs_conv") (("" (inst?) (("" (replace -2) (("" (inst?) (("" (expand "powerseries") (("" (rewrite "convergent_abs " +) (("" (hide 2) (("" (lemma "comparison_test_gen") (("" (inst - "(LAMBDA (k: nat):
                                        IF k = 0 THEN abs(a!1(0))
                                        ELSE abs(a!1(k) * x!1 ^ k/(k+1))
                                        ENDIF)" "abs(powerseq(a!1,x!1))") (("" (assert) (("" (split -1) (("1" (lemma "convergent_scal") (("1" (inst?) (("1" (inst - "abs(x!1)") (("1" (assert) (("1" (hide -2 -3) (("1" (rewrite "series_scal") (("1" (expand "integseq") (("1" (rewrite "apow_rew") (("1" (expand "apowerseq") (("1" (hide -2) (("1" (expand "abs" +) (("1" (lemma "conv_series_shift") (("1" (inst -1 "1" "(LAMBDA (k_1: nat):
                                          IF k_1 = 0 THEN abs(0)
                                          ELSE abs(a!1(k_1 - 1) / k_1 * x!1 ^ k_1)
                                          ENDIF)") (("1" (assert) (("1" (hide 2) (("1" (case-replace "(LAMBDA n:
                                      abs(x!1) *
                                       IF n = 0 THEN abs(a!1(0))
                                       ELSE abs(a!1(n) * x!1 ^ n / (1 + n))
                                       ENDIF) = (LAMBDA n: abs((a!1(n) / (1 + n)) * x!1 ^ (1 + n)))") (("1" (hide -1 2) (("1" (apply-extensionality 1 :hide? t) (("1" (lift-if) (("1" (ground) (("1" (replace -1) (("1" (assert) (("1" (rewrite "abs_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (rewrite "abs_mult") (("2" (rewrite "abs_div") (("2" (rewrite "abs_div") (("2" (rewrite "abs_mult") (("2" (case-replace "abs(x!1 ^ (1 + x!2)) = abs(x!1)*abs(x!1 ^ x!2)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (rewrite "abs_hat") (("1" (rewrite "abs_hat") (("1" (grind) nil nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) (("2" (rewrite "abs_0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) nil nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) nil nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (inst + "1") (("2" (skosimp*) (("2" (lift-if) (("2" (ground) (("2" (rewrite "abs_abs") (("2" (rewrite "apow_rew") (("2" (expand "apowerseq") (("2" (assert) (("2" (expand "abs" 2 2) (("2" (rewrite "abs_mult") (("2" (rewrite "abs_div") (("2" (rewrite "abs_mult") (("2" (cross-mult 2) (("2" (assert) (("2" (name-replace "AAA" "abs(a!1(n!1)) * abs(x!1 ^ n!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((powerseries_abs_conv formula-decl nil power_series_conv nil) (abs const-decl "sequence[real]" series nil) (series_scal formula-decl nil series nil) (apow_rew formula-decl nil power_series nil) (conv_series_shift formula-decl nil series nil) (abs_0 formula-decl nil abs_lems reals) (hat_02n formula-decl nil power_series nil) (abs_hat formula-decl nil exponent_props reals) (apowerseq const-decl "sequence[real]" power_series nil) (convergent_scal formula-decl nil convergence_ops analysis) (comparison_test_gen formula-decl nil series nil) (powerseq const-decl "sequence[real]" power_series nil) (convergent_abs formula-decl nil series nil)) nil) (conv_integseq-1 nil 3304436060 ("" (skosimp*) (("" (expand "conv_powerseries?") (("" (skosimp*) (("" (lemma "powerseries_abs_conv") (("" (inst?) (("" (replace -2) (("" (inst?) (("" (expand "powerseries") (("" (rewrite "convergent_abs " +) (("" (hide 2) (("" (lemma "comparison_test_gen") (("" (inst - "(LAMBDA (k: nat):
                                      IF k = 0 THEN abs(a!1(0))
                                      ELSE abs(a!1(k) * x!1 ^ k/(k+1))
                                      ENDIF)" "abs(powerseq(a!1,x!1))") (("" (assert) (("" (split -1) (("1" (lemma "convergent_scal") (("1" (inst?) (("1" (inst - "abs(x!1)") (("1" (assert) (("1" (hide -2 -3) (("1" (rewrite "series_scal") (("1" (expand "integseq") (("1" (expand "powerseq") (("1" (hide -2) (("1" (expand "abs" +) (("1" (lemma "conv_series_shift") (("1" (inst -1 "1" "(LAMBDA (k_1: nat):
                                      IF k_1 = 0 THEN abs(0)
                                      ELSE abs(a!1(k_1 - 1) / k_1 * x!1 ^ k_1)
                                      ENDIF)") (("1" (assert) (("1" (hide 2) (("1" (case-replace "(LAMBDA n:
                                abs(x!1) *
                                 IF n = 0 THEN abs(a!1(0))
                                 ELSE abs(a!1(n) * x!1 ^ n / (1 + n))
                                 ENDIF) = (LAMBDA n: abs((a!1(n) / (1 + n)) * x!1 ^ (1 + n)))") (("1" (hide -1 2) (("1" (apply-extensionality 1 :hide? t) (("1" (lift-if) (("1" (ground) (("1" (replace -1) (("1" (assert) (("1" (rewrite "abs_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (rewrite "abs_mult") (("2" (rewrite "abs_div") (("2" (rewrite "abs_div") (("2" (rewrite "abs_mult") (("2" (case-replace "abs(x!1 ^ (1 + x!2)) = abs(x!1)*abs(x!1 ^ x!2)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (rewrite "abs_hat") (("1" (rewrite "abs_hat") (("1" (grind) nil nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) (("2" (rewrite "abs_0") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) nil nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (inst + "1") (("2" (skosimp*) (("2" (lift-if) (("2" (ground) (("2" (rewrite "abs_abs") (("2" (expand "powerseq") (("2" (assert) (("2" (expand "abs" 2 2) (("2" (rewrite "abs_mult") (("2" (rewrite "abs_div") (("2" (rewrite "abs_mult") (("2" (cross-mult 2) (("2" (assert) (("2" (name-replace "AAA" "abs(a!1(n!1)) * abs(x!1 ^ n!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((powerseries_abs_conv formula-decl nil power_series_conv nil) (abs const-decl "sequence[real]" series nil) (series_scal formula-decl nil series nil) (abs_hat formula-decl nil exponent_props reals) (conv_series_shift formula-decl nil series nil) (convergent_scal formula-decl nil convergence_ops analysis) (comparison_test_gen formula-decl nil series nil) (powerseq const-decl "sequence[real]" power_series nil) (convergent_abs formula-decl nil series nil)) nil)) (integ_powerseries_conv 0 (integ_powerseries_conv-1 nil 3304351058 ("" (skosimp*) (("" (lemma "conv_integseq") (("" (inst?) (("" (assert) (("" (hide -2) (("" (expand "integseq") (("" (expand "conv_powerseries?") (("" (expand "powerseries") (("" (expand "integ_powerseq") (("" (expand "powerseq") (("" (inst?) (("" (lemma "conv_series_shift") (("" (inst?) (("1" (inst - "1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) nil nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((conv_integseq formula-decl nil power_series_integ nil) (integseq const-decl "sequence[real]" power_series_integ nil) (powerseries const-decl "sequence[real]" power_series nil) (powerseq const-decl "sequence[real]" power_series nil) (conv_series_shift formula-decl nil series nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (^ const-decl "real" exponentiation nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (integ_powerseq const-decl "sequence[real]" power_series_integ nil) (conv_powerseries? const-decl "bool" power_series_conv nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak)) (integseq_lim_shift_TCC1 0 (integseq_lim_shift_TCC1-1 nil 3304433232 ("" (skosimp*) (("" (lemma "conv_integseq") (("" (inst?) (("" (assert) (("" (expand "conv_powerseries?") (("" (inst?) (("" (expand "powerseries") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((conv_integseq formula-decl nil power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (powerseries const-decl "sequence[real]" power_series nil) (conv_powerseries? const-decl "bool" power_series_conv nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak (integseq_lim_shift subtype "series.series(power_series.powerseq(power_series_integ.integseq(power_series_integ.a), power_series_integ.x))" "(convergence_sequences.convergent?)"))) (integseq_lim_shift_TCC2 0 (integseq_lim_shift_TCC2-1 nil 3304433232 ("" (skosimp*) (("" (lemma "integ_powerseries_conv") (("" (inst?) (("" (assert) (("" (inst?) nil nil)) nil)) nil)) nil)) nil) ((integ_powerseries_conv formula-decl nil power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak (integseq_lim_shift subtype "series.series(power_series_integ.integ_powerseq(power_series_integ.a, power_series_integ.x))" "(convergence_sequences.convergent?)"))) (integseq_lim_shift 0 (integseq_lim_shift-1 nil 3304431843 ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) (("1" (lemma "conv_integseq") (("1" (inst?) (("1" (assert) (("1" (hide -2) (("1" (lemma "limit_series_shift") (("1" (inst?) (("1" (inst - "1") (("1" (assert) (("1" (expand "conv_powerseries?") (("1" (inst?) (("1" (expand "powerseries") (("1" (assert) (("1" (replace -1) (("1" (hide -1) (("1" (expand "sigma") (("1" (expand "integseq") (("1" (expand "powerseq") (("1" (expand "integ_powerseq") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "integ_powerseries_conv") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (lemma "conv_integseq") (("3" (inst?) (("3" (assert) (("3" (expand "conv_powerseries?") (("3" (expand "powerseries") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (limit const-decl "real" convergence_sequences analysis) (integ_powerseq const-decl "sequence[real]" power_series_integ nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (sequence type-eq-decl nil sequences nil) (convergent? const-decl "bool" convergence_sequences analysis) (series const-decl "sequence[real]" series nil) (powerseq const-decl "sequence[real]" power_series nil) (integseq const-decl "sequence[real]" power_series_integ nil) (a!1 skolem-const-decl "sequence[real]" power_series_integ nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (sigma_0_neg formula-decl nil sigma_nat reals) (real_div_nzreal_is_real application-judgement "real" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (sigma def-decl "real" sigma reals) (powerseries const-decl "sequence[real]" power_series nil) (conv_powerseries? const-decl "bool" power_series_conv nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (limit_series_shift formula-decl nil series nil) (conv_integseq formula-decl nil power_series_integ nil) (integ_powerseries_conv formula-decl nil power_series_integ nil)) shostak)) (IMP_power_series_deriv_TCC1 0 (IMP_power_series_deriv_TCC1-2 "" 3804438902 ("" (lemma "connected_domain") (("" (propax) nil nil)) nil) nil shostak (IMP_power_series_deriv assuming "power_series_deriv[T].power_series_deriv" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")) (IMP_power_series_deriv_TCC1-1 nil 3804436037 ("" (assuming-tcc) nil nil) ((connected_domain formula-decl nil power_series_integ nil)) nil (IMP_power_series_deriv assuming "power_series_deriv[T].power_series_deriv" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (IMP_power_series_deriv_TCC2 0 (IMP_power_series_deriv_TCC2-2 "" 3804438930 ("" (lemma "ball") (("" (assert) nil nil)) nil) nil shostak (IMP_power_series_deriv assuming "power_series_deriv[T].power_series_deriv" "ball: ASSUMPTION FORALL (x: power_series_deriv.T): booleans.IMPLIES(power_series_deriv.T_pred(x), power_series_deriv.T_pred((number_fields.-)(x)))")) (IMP_power_series_deriv_TCC2-1 nil 3804436037 ("" (assuming-tcc) nil nil) ((minus_real_is_real application-judgement "real" reals nil) (ball formula-decl nil power_series_integ nil)) nil (IMP_power_series_deriv assuming "power_series_deriv[T].power_series_deriv" "ball: ASSUMPTION FORALL (x: power_series_deriv.T): booleans.IMPLIES(power_series_deriv.T_pred(x), power_series_deriv.T_pred((number_fields.-)(x)))"))) (powerseries_integrable?_TCC1 0 (powerseries_integrable?_TCC1-1 nil 3393947524 ("" (subtype-tcc) nil nil) ((powerseries const-decl "sequence[real]" power_series nil) (series const-decl "sequence[real]" series nil) (convergence const-decl "bool" convergence_sequences analysis) (convergent? const-decl "bool" convergence_sequences analysis) (T formal-nonempty-subtype-decl nil power_series_integ nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (conv_powerseries? const-decl "bool" power_series_conv nil) (real_minus_real_is_real application-judgement "real" reals nil)) nil (powerseries_integrable? subtype "power_series.powerseries(power_series_integ.a)(power_series_integ.x)" "(convergence_sequences.convergent?)"))) (powerseries_integrable? 0 (powerseries_integrable?-1 nil 3393947529 ("" (skosimp*) (("" (lemma "powerseries_cont") (("" (inst?) (("" (assert) (("" (lemma "cont_fun_integrable?") (("" (inst?) (("1" (assert) nil nil) ("2" (expand "conv_powerseries?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((T formal-nonempty-subtype-decl nil power_series_integ nil) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (powerseries_cont formula-decl nil power_series_deriv nil) (a!1 skolem-const-decl "sequence[real]" power_series_integ nil) (powerseries const-decl "sequence[real]" power_series nil) (convergent? const-decl "bool" convergence_sequences analysis) (limit const-decl "real" convergence_sequences analysis) (conv_powerseries? const-decl "bool" power_series_conv nil) (cont_fun_integrable? formula-decl nil indefinite_integral analysis) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil)) nil)) (powerseries_integral_TCC1 0 (powerseries_integral_TCC1-1 nil 3393947745 ("" (skosimp*) (("" (lemma "powerseries_integrable?") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) ((powerseries_integrable? formula-decl nil power_series_integ nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) nil (powerseries_integral subtype "power_series_integ.f" "integrable_fun[T]"))) (powerseries_integral 0 (powerseries_integral-1 nil 3393947754 ("" (skosimp*) (("" (lemma "conv_integseq") (("" (inst?) (("" (assert) (("" (lemma "integseq_lim_shift") (("" (inst?) (("" (assert) (("" (replace -1 * rl) (("" (hide -1) (("" (lemma "antiderivative_lem") (("" (inst?) (("1" (assert) (("1" (inst - "deriv(LAMBDA x: limit(series(powerseq(integseq(a!1), x))))") (("1" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (expand "antiderivative?") (("2" (typepred "integral[T](LAMBDA x: limit(powerseries(a!1)(x)))") (("1" (replace -2) (("1" (apply-extensionality 1 :hide? t) (("1" (lemma "deriv_Inf_sum") (("1" (inst - "integseq(a!1)") (("1" (split -1) (("1" (expand "Inf_sum") (("1" (expand "powerseries") (("1" (replace -1) (("1" (hide -1 -2 -3) (("1" (expand "derivseq") (("1" (expand "integseq") (("1" (case-replace "(LAMBDA (k: nat):
                                                                                                                                             a!1(k) / (1 + k) + k * (a!1(k) / (1 + k))) = a!1") (("1" (hide 2) (("1" (apply-extensionality 1 :hide? t) (("1" (factor 1 l) (("1" (name-replace "XP1" "1+x!2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide -1 -2) (("2" (lemma "powerseries_derivable") (("2" (expand "conv_powerseries?") (("2" (inst - "integseq(a!1)") (("2" (expand "powerseries") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2) (("3" (lemma "powerseries_derivable") (("3" (expand "conv_powerseries?") (("3" (inst - "integseq(a!1)") (("3" (expand "powerseries") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 -2) (("4" (expand "conv_powerseries?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (lemma "powerseries_cont") (("2" (inst?) (("2" (assert) (("2" (hide -1 2) (("2" (lemma "powerseries_integrable?") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (hide -1 2) (("3" (expand "conv_powerseries?") (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (lemma "powerseries_derivable") (("3" (inst - "integseq(a!1)") (("3" (assert) (("3" (expand "powerseries") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "powerseries_derivable") (("2" (inst - "integseq(a!1)") (("2" (assert) (("2" (expand "powerseries") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp*) (("3" (expand "conv_powerseries?") (("3" (inst?) (("3" (expand "powerseries") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (expand "conv_powerseries?") (("2" (inst?) (("2" (expand "powerseries") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1 2) (("3" (lemma "powerseries_cont") (("3" (inst?) (("3" (assert) (("3" (hide -1 2) (("3" (expand "conv_powerseries?") (("3" (assert) (("3" (lemma "powerseries_integrable?") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 2) (("4" (skosimp*) (("4" (expand "conv_powerseries?") (("4" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((conv_integseq formula-decl nil power_series_integ nil) (antiderivative_lem formula-decl nil indefinite_integral analysis) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (antiderivative? const-decl "bool" indefinite_integral analysis) (powerseries_integrable? formula-decl nil power_series_integ nil) (powerseries_cont formula-decl nil power_series_deriv nil) (conv_powerseries? const-decl "bool" power_series_conv nil) (powerseries_derivable formula-decl nil power_series_deriv nil) (deriv_Inf_sum formula-decl nil power_series_deriv nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posint nonempty-type-eq-decl nil integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (derivseq const-decl "sequence[real]" power_series_derivseq nil) (Inf_sum const-decl "real" power_series_conv nil) (NOT const-decl "[bool -> bool]" booleans nil) (integral const-decl "{F: [T -> real] | derivable?(F) AND deriv(F) = f}" indefinite_integral analysis) (deriv const-decl "[T -> real]" derivatives analysis) (deriv_fun type-eq-decl nil derivatives analysis) (= const-decl "[T, T -> boolean]" equalities nil) (derivable? const-decl "bool" derivatives analysis) (AND const-decl "[bool, bool -> bool]" booleans nil) (integrable_fun type-eq-decl nil indefinite_integral analysis) (series const-decl "sequence[real]" series nil) (powerseq const-decl "sequence[real]" power_series nil) (integseq const-decl "sequence[real]" power_series_integ nil) (integrable? const-decl "bool" indefinite_integral analysis) (limit const-decl "real" convergence_sequences analysis) (convergent? const-decl "bool" convergence_sequences analysis) (powerseries const-decl "sequence[real]" power_series nil) (a!1 skolem-const-decl "sequence[real]" power_series_integ nil) (integseq_lim_shift formula-decl nil power_series_integ nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) nil)) (integral_powerseries 0 (integral_powerseries-4 "" 3790091767 ("" (skosimp*) (("" (lemma "powerseries_integral") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "fundamental_indef") (("" (inst?) (("1" (assert) (("1" (lemma "powerseries_cont") (("1" (inst?) (("1" (assert) (("1" (flatten) (("1" (replace -3) (("1" (assert) (("1" (replace -4) (("1" (expand "+ ") (("1" (expand "const_fun") (("1" (hide -1 -2 -3 -4) (("1" (expand "integ_powerseq") (("1" (expand "^") (("1" (expand "expt") (("1" (lemma "zero_series_limit") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (expand "conv_powerseries?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((powerseries_integral formula-decl nil power_series_integ nil) (fundamental_indef formula-decl nil indefinite_integral analysis) (T_pred const-decl "[real -> boolean]" power_series_integ nil) (T formal-nonempty-subtype-decl nil power_series_integ nil) (conv_powerseries? const-decl "bool" power_series_conv nil) (constant_seq1 application-judgement "(convergent?)" convergence_ops analysis) (derivable_const application-judgement "deriv_fun" derivatives analysis) (real_minus_real_is_real application-judgement "real" reals nil) (+ const-decl "[T -> real]" real_fun_ops reals) (^ const-decl "real" exponentiation nil) (zero_series_limit formula-decl nil series nil) (real_times_real_is_real application-judgement "real" reals nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (expt def-decl "real" exponentiation nil) (integ_powerseq const-decl "sequence[real]" power_series_integ nil) (const_fun const-decl "[T -> real]" real_fun_ops reals) (powerseries_cont formula-decl nil power_series_deriv nil) (limit const-decl "real" convergence_sequences analysis) (convergent? const-decl "bool" convergence_sequences analysis) (powerseries const-decl "sequence[real]" power_series nil) (a!1 skolem-const-decl "sequence[real]" power_series_integ nil) (sequence type-eq-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak) (integral_powerseries-3 nil 3393947841 ("" (skosimp*) (("" (lemma "powerseries_integral") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "fundamental_indef") (("" (inst?) (("1" (assert) (("1" (lemma "powerseries_cont") (("1" (inst?) (("1" (assert) (("1" (flatten) (("1" (replace -3) (("1" (assert) (("1" (replace -4) (("1" (assert) (("1" (expand "+ ") (("1" (expand "const_fun") (("1" (hide -1 -2 -3 -4) (("1" (expand "integ_powerseq") (("1" (expand "^") (("1" (expand "expt") (("1" (lemma "zero_series_limit") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (expand "conv_powerseries?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fundamental_indef formula-decl nil indefinite_integral analysis) (constant_seq1 application-judgement "(convergent?)" convergence_ops analysis) (derivable_const application-judgement "deriv_fun" derivatives analysis) (zero_series_limit formula-decl nil series nil) (const_fun const-decl "[T -> real]" real_fun_ops reals) (powerseries_cont formula-decl nil power_series_deriv nil) (limit const-decl "real" convergence_sequences analysis) (convergent? const-decl "bool" convergence_sequences analysis)) nil) (integral_powerseries-2 nil 3393944656 ("" (skosimp*) (("" (lemma "powerseries_antideriv") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "fundamental_indef") (("" (inst?) (("1" (assert) (("1" (lemma "powerseries_cont") (("1" (inst?) (("1" (assert) (("1" (flatten) (("1" (replace -3) (("1" (assert) (("1" (replace -4) (("1" (assert) (("1" (expand "+ ") (("1" (expand "const_fun") (("1" (hide -1 -2 -3 -4) (("1" (expand "integ_powerseq") (("1" (expand "^") (("1" (expand "expt") (("1" (lemma "zero_series_limit") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (expand "conv_powerseries?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fundamental_indef formula-decl nil indefinite_integral analysis) (constant_seq1 application-judgement "(convergent?)" convergence_ops analysis) (const_fun const-decl "[T -> real]" real_fun_ops reals) (zero_series_limit formula-decl nil series nil) (powerseries_cont formula-decl nil power_series_deriv nil) (limit const-decl "real" convergence_sequences analysis)) nil) (integral_powerseries-1 nil 3320418966 ("" (skosimp*) (("" (lemma "powerseries_antideriv") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "fundamental4") (("" (inst?) (("1" (assert) (("1" (lemma "powerseries_cont") (("1" (inst?) (("1" (assert) (("1" (flatten) (("1" (replace -3) (("1" (assert) (("1" (replace -4) (("1" (assert) (("1" (expand "+ ") (("1" (expand "const_fun") (("1" (hide -1 -2 -3 -4) (("1" (expand "integ_powerseq") (("1" (expand "^") (("1" (expand "expt") (("1" (lemma "zero_series_limit") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (expand "conv_powerseries?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((const_fun const-decl "[T -> real]" real_fun_ops reals) (zero_series_limit formula-decl nil series nil) (powerseries_cont formula-decl nil power_series_deriv nil) (limit const-decl "real" convergence_sequences analysis)) shostak)))

(trig_props
 (IMP_power_series_deriv_TCC1 0
  (IMP_power_series_deriv_TCC1-1 nil 3299592135
   ("" (expand "connected?") (("" (propax) nil nil)) nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)) shostak
   (IMP_power_series_deriv assuming
    "power_series_deriv[real].power_series_deriv"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_power_series_deriv_TCC2 0
  (IMP_power_series_deriv_TCC2-1 nil 3299592135
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (assert) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   shostak
   (IMP_power_series_deriv assuming
    "power_series_deriv[real].power_series_deriv"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (IMP_power_series_deriv_TCC3 0
  (IMP_power_series_deriv_TCC3-1 nil 3299592135
   ("" (skosimp*) (("" (inst + "1") (("" (skosimp*) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak
   (IMP_power_series_deriv assuming
    "power_series_deriv[real].power_series_deriv"
    "open: ASSUMPTION FORALL (x: power_series_deriv.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_deriv.T_pred(y))")))
 (IMP_power_series_deriv_TCC4 0
  (IMP_power_series_deriv_TCC4-1 nil 3299592135 ("" (skosimp*) nil nil) nil
   shostak
   (IMP_power_series_deriv assuming
    "power_series_deriv[real].power_series_deriv"
    "ball: ASSUMPTION FORALL (x: power_series_deriv.T): booleans.IMPLIES(power_series_deriv.T_pred(x), power_series_deriv.T_pred((number_fields.-)(x)))")))
 (sin_derivable 0
  (sin_derivable-1 nil 3249311628
   ("" (lemma "sin_conv")
    (("" (lemma "powerseries_derivable[real]")
      (("" (expand "sin")
        (("" (expand "inf_sum")
          (("" (inst?)
            (("" (assert)
              (("" (expand "powerseries") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (powerseries_derivable formula-decl nil power_series_deriv nil)
    (inf_sum const-decl "real" series nil)
    (powerseries const-decl "sequence[real]" power_series nil)
    (sin_coef const-decl "real" trig_fun nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin const-decl "real" trig_fun nil)
    (sin_conv formula-decl nil trig_fun nil))
   nil))
 (deriv_sin_TCC1 0
  (deriv_sin_TCC1-1 nil 3249311628
   ("" (lemma "sin_derivable") (("" (propax) nil nil)) nil)
   ((sin_derivable formula-decl nil trig_props nil)) nil
   (deriv_sin subtype "trig_fun.sin" "deriv_fun[real]")))
 (deriv_sin 0
  (deriv_sin-2 nil 3352090315
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "sin_coef")
        (("" (rewrite "sin_conv")
          (("" (expand "sin")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "cos")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](sin_coef),x!1)) = series(powerseq(cos_coef, x!1))")
                              (("" (hide 2)
                                (("" (expand "series")
                                  (("" (apply-extensionality 1 :hide? t)
                                    ((""
                                      (case-replace
                                       "powerseq(derivseq[real](sin_coef), x!1) = powerseq(cos_coef, x!1)")
                                      ((""
                                        (hide 2)
                                        ((""
                                          (rewrite "apow_rew")
                                          ((""
                                            (rewrite "apow_rew")
                                            ((""
                                              (expand "apowerseq")
                                              ((""
                                                (expand "derivseq")
                                                ((""
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  ((""
                                                    (lift-if)
                                                    ((""
                                                      (ground)
                                                      (("1"
                                                        (expand "sin_coef")
                                                        (("1"
                                                          (expand "cos_coef")
                                                          (("1"
                                                            (expand
                                                             "factorial")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (expand
                                                                 "even?")
                                                                (("1"
                                                                  (expand
                                                                   "altsign")
                                                                  (("1"
                                                                    (expand
                                                                     "even?")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "sin_coef")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "cos_coef")
                                                              (("1"
                                                                (lemma
                                                                 "even_plus1")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!3")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "altsign")
                                                              (("2"
                                                                (expand
                                                                 "cos_coef")
                                                                (("2"
                                                                  (lemma
                                                                   "even_plus1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!3")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "altsign")
                                                                        (("2"
                                                                          (expand
                                                                           "factorial"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (name-replace
                                                                                 "FF"
                                                                                 "factorial(x!3)")
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "M1"
                                                                                   "(-1) ^ (x!3 / 2)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "X23"
                                                                                     "x!1 ^ x!3 ")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (field
                                                                                         2)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "even?")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_Inf_sum formula-decl nil power_series_deriv nil)
    (sin_conv formula-decl nil trig_fun nil)
    (inf_sum const-decl "real" series nil)
    (cos const-decl "real" trig_fun nil)
    (cos_coef const-decl "real" trig_fun nil)
    (derivseq const-decl "sequence[real]" power_series_derivseq nil)
    (powerseq const-decl "sequence[real]" power_series nil)
    (series const-decl "sequence[real]" series nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apow_rew formula-decl nil power_series nil)
    (apowerseq const-decl "sequence[real]" power_series nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" trig_fun nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (even? const-decl "bool" integers nil)
    (factorial def-decl "posnat" factorial ints)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus1 formula-decl nil naturalnumbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (powerseries const-decl "sequence[real]" power_series nil)
    (Inf_sum const-decl "real" power_series_conv nil)
    (sin const-decl "real" trig_fun nil)
    (sin_coef const-decl "real" trig_fun nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   nil)
  (deriv_sin-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "sin_coef")
        (("" (rewrite "sin_conv")
          (("" (expand "sin")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "cos")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](sin_coef),x!1)) = series(powerseq(cos_coef, x!1))")
                              (("" (hide 2)
                                (("" (expand "series")
                                  (("" (apply-extensionality 1 :hide? t)
                                    ((""
                                      (case-replace
                                       "powerseq(derivseq[real](sin_coef), x!1) = powerseq(cos_coef, x!1)")
                                      ((""
                                        (hide 2)
                                        ((""
                                          (expand "powerseq")
                                          ((""
                                            (expand "derivseq")
                                            ((""
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              ((""
                                                (lift-if)
                                                ((""
                                                  (ground)
                                                  (("1"
                                                    (expand "sin_coef")
                                                    (("1"
                                                      (expand "cos_coef")
                                                      (("1"
                                                        (expand "factorial")
                                                        (("1"
                                                          (expand "factorial")
                                                          (("1"
                                                            (expand "even?")
                                                            (("1"
                                                              (expand
                                                               "altsign")
                                                              (("1"
                                                                (expand
                                                                 "even?")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "sin_coef")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand "cos_coef")
                                                          (("1"
                                                            (lemma
                                                             "even_plus1")
                                                            (("1"
                                                              (inst - "x!3")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "altsign")
                                                          (("2"
                                                            (expand
                                                             "cos_coef")
                                                            (("2"
                                                              (lemma
                                                               "even_plus1")
                                                              (("2"
                                                                (inst - "x!3")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "altsign")
                                                                    (("2"
                                                                      (expand
                                                                       "factorial"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "factorial"
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (name-replace
                                                                             "FF"
                                                                             "factorial(x!3)")
                                                                            (("2"
                                                                              (name-replace
                                                                               "M1"
                                                                               "(-1) ^ (x!3 / 2)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "X23"
                                                                                 "x!1 ^ x!3 ")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (field
                                                                                     2)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "even?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_Inf_sum formula-decl nil power_series_deriv nil)
    (sin_conv formula-decl nil trig_fun nil)
    (cos const-decl "real" trig_fun nil)
    (cos_coef const-decl "real" trig_fun nil)
    (derivseq const-decl "sequence[real]" power_series_derivseq nil)
    (powerseq const-decl "sequence[real]" power_series nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" trig_fun nil)
    (sigma def-decl "real" sigma reals) (sin const-decl "real" trig_fun nil)
    (sin_coef const-decl "real" trig_fun nil))
   nil))
 (cos_derivable 0
  (cos_derivable-2 "" 3790091663
   ("" (lemma "cos_conv")
    (("" (lemma "powerseries_derivable[real]")
      (("" (expand "cos")
        (("" (inst?)
          (("" (assert)
            (("" (expand "inf_sum")
              (("" (assert)
                (("" (expand "powerseries") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_derivable-1 nil 3249311628
   ("" (lemma "cos_conv")
    (("" (lemma "powerseries_derivable[real]")
      (("1" (expand "cos")
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand "inf_sum")
              (("1" (assert)
                (("1" (expand "powerseries") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*) (("2" (inst + "x!1 + 1") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (powerseries_derivable formula-decl nil power_series_deriv nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (cos_coef const-decl "real" trig_fun nil)
    (inf_sum const-decl "real" series nil)
    (powerseries const-decl "sequence[real]" power_series nil)
    (cos const-decl "real" trig_fun nil)
    (cos_conv formula-decl nil trig_fun nil))
   nil))
 (deriv_cos_TCC1 0
  (deriv_cos_TCC1-1 nil 3249311628 ("" (rewrite "cos_derivable") nil nil)
   ((cos_derivable formula-decl nil trig_props nil)) nil
   (deriv_cos subtype "trig_fun.cos" "deriv_fun[real]")))
 (deriv_cos 0
  (deriv_cos-4 "" 3790091664
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "cos_coef")
        (("" (rewrite "cos_conv")
          (("" (expand "cos")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "sin")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](cos_coef),x!1)) = -series(powerseq(sin_coef, x!1))")
                              (("1" (hide -1)
                                (("1" (rewrite "limit_neg") nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (expand "series")
                                  (("2" (apply-extensionality 1 :hide? t)
                                    (("2"
                                      (case-replace
                                       "powerseq(derivseq[real](cos_coef), x!1) = -powerseq(sin_coef, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (lemma "sigma_scal")
                                            (("1"
                                              (inst
                                               -
                                               "LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)"
                                               "-1"
                                               "x!2"
                                               "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case-replace
                                                     "(LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)) =powerseq(sin_coef, x!1)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "apow_rew")
                                          (("2"
                                            (rewrite "apow_rew")
                                            (("2"
                                              (expand "apowerseq")
                                              (("2"
                                                (expand "derivseq")
                                                (("2"
                                                  (expand "-")
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand "cos_coef")
                                                          (("1"
                                                            (expand
                                                             "sin_coef")
                                                            (("1"
                                                              (expand "even?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "cos_coef")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (expand
                                                               "sin_coef")
                                                              (("2"
                                                                (lemma
                                                                 "even_plus1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!3")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             "altsign(1 + x!3) = -altsign(x!3)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (name
                                                                                 "FF"
                                                                                 "factorial(x!3)")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "AA"
                                                                                   "altsign(x!3)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "X23"
                                                                                     "x!1 ^ x!3 ")
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       l)
                                                                                      (("1"
                                                                                        (name
                                                                                         "XP1"
                                                                                         "(1 + x!3)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "factorial(XP1) = XP1*factorial(x!3)")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "F1"
                                                                                               "factorial(x!3)")
                                                                                              (("1"
                                                                                                (field
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "altsign")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "even?")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "x!3 - 1 = 2 * j!1 - 2")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "2 * j!1 / 2 = j!1")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "(2 * j!1 -2)/ 2 = j!1-1")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "expt_plus")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1-1"
                                                                                                     "1"
                                                                                                     "-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (deriv_cos-3 nil 3352090481
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "cos_coef")
        (("" (rewrite "cos_conv")
          (("" (expand "cos")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "sin")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](cos_coef),x!1)) = -series(powerseq(sin_coef, x!1))")
                              (("1" (hide -1)
                                (("1" (rewrite "limit_neg") nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (expand "series")
                                  (("2" (apply-extensionality 1 :hide? t)
                                    (("2"
                                      (case-replace
                                       "powerseq(derivseq[real](cos_coef), x!1) = -powerseq(sin_coef, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (lemma "sigma_scal")
                                            (("1"
                                              (inst
                                               -
                                               "LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)"
                                               "-1"
                                               "x!2"
                                               "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case-replace
                                                     "(LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)) =powerseq(sin_coef, x!1)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "apow_rew")
                                          (("2"
                                            (rewrite "apow_rew")
                                            (("2"
                                              (expand "apowerseq")
                                              (("2"
                                                (expand "derivseq")
                                                (("2"
                                                  (expand "-")
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand "cos_coef")
                                                          (("1"
                                                            (expand
                                                             "sin_coef")
                                                            (("1"
                                                              (expand "even?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "cos_coef")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (expand
                                                               "sin_coef")
                                                              (("2"
                                                                (lemma
                                                                 "even_plus1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!3")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             "altsign(1 + x!3) = -altsign(x!3)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (name
                                                                                 "FF"
                                                                                 "factorial(x!3)")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "AA"
                                                                                   "altsign(x!3)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "X23"
                                                                                     "x!1 ^ x!3 ")
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       l)
                                                                                      (("1"
                                                                                        (name
                                                                                         "XP1"
                                                                                         "(1 + x!3)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "factorial(XP1) = XP1*factorial(x!3)")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "F1"
                                                                                               "factorial(x!3)")
                                                                                              (("1"
                                                                                                (field
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "altsign")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "even?")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "x!3 - 1 = 2 * j!1 - 2")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "2 * j!1 / 2 = j!1")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "(2 * j!1 -2)/ 2 = j!1-1")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "expt_plus")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1-1"
                                                                                                     "1"
                                                                                                     "-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_Inf_sum formula-decl nil power_series_deriv nil)
    (cos_conv formula-decl nil trig_fun nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (inf_sum const-decl "real" series nil)
    (sin const-decl "real" trig_fun nil)
    (sin_coef const-decl "real" trig_fun nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (derivseq const-decl "sequence[real]" power_series_derivseq nil)
    (powerseq const-decl "sequence[real]" power_series nil)
    (series const-decl "sequence[real]" series nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit_neg formula-decl nil convergence_ops analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_scal formula-decl nil sigma reals)
    (apow_rew formula-decl nil power_series nil)
    (apowerseq const-decl "sequence[real]" power_series nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" trig_fun nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus1 formula-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (powerseries const-decl "sequence[real]" power_series nil)
    (Inf_sum const-decl "real" power_series_conv nil)
    (cos const-decl "real" trig_fun nil)
    (cos_coef const-decl "real" trig_fun nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   nil)
  (deriv_cos-2 nil 3298209019
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "cos_coef")
        (("" (rewrite "cos_conv")
          (("" (expand "cos")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "sin")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](cos_coef),x!1)) = -series(powerseq(sin_coef, x!1))")
                              (("1" (hide -1)
                                (("1" (rewrite "limit_neg")
                                  (("1" (hide 2)
                                    (("1" (lemma "sin_conv")
                                      (("1"
                                        (expand "conv_powerseries?")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand "powerseries")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (expand "series")
                                  (("2" (apply-extensionality 1 :hide? t)
                                    (("2"
                                      (case-replace
                                       "powerseq(derivseq[real](cos_coef), x!1) = -powerseq(sin_coef, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (lemma "sigma_scal")
                                            (("1"
                                              (inst
                                               -
                                               "LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)"
                                               "-1"
                                               "x!2"
                                               "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case-replace
                                                     "(LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)) =powerseq(sin_coef, x!1)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "powerseq")
                                          (("2"
                                            (expand "derivseq")
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (apply-extensionality
                                                 1
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (expand "cos_coef")
                                                      (("1"
                                                        (expand "sin_coef")
                                                        (("1"
                                                          (expand "even?")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "cos_coef")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (expand "sin_coef")
                                                          (("2"
                                                            (lemma
                                                             "even_plus1")
                                                            (("2"
                                                              (inst - "x!3")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "altsign(1 + x!3) = -altsign(x!3)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (name
                                                                             "FF"
                                                                             "factorial(x!3)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "AA"
                                                                               "altsign(x!3)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "X23"
                                                                                 "x!1 ^ x!3 ")
                                                                                (("1"
                                                                                  (factor
                                                                                   1
                                                                                   l)
                                                                                  (("1"
                                                                                    (name
                                                                                     "XP1"
                                                                                     "(1 + x!3)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "factorial(XP1) = XP1*factorial(x!3)")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "F1"
                                                                                           "factorial(x!3)")
                                                                                          (("1"
                                                                                            (field
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             *
                                                                                             rl)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "altsign")
                                                                              (("2"
                                                                                (expand
                                                                                 "even?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "x!3 - 1 = 2 * j!1 - 2")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "2 * j!1 / 2 = j!1")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "(2 * j!1 -2)/ 2 = j!1-1")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "expt_plus")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j!1-1"
                                                                                                 "1"
                                                                                                 "-1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_Inf_sum formula-decl nil power_series_deriv nil)
    (cos_conv formula-decl nil trig_fun nil)
    (sin const-decl "real" trig_fun nil)
    (sin_coef const-decl "real" trig_fun nil)
    (derivseq const-decl "sequence[real]" power_series_derivseq nil)
    (powerseq const-decl "sequence[real]" power_series nil)
    (limit_neg formula-decl nil convergence_ops analysis)
    (sigma_scal formula-decl nil sigma reals)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" trig_fun nil)
    (sigma def-decl "real" sigma reals) (cos const-decl "real" trig_fun nil)
    (cos_coef const-decl "real" trig_fun nil))
   nil)
  (deriv_cos-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "deriv_inf_series")
      (("" (inst -1 "cos_coef")
        (("" (split -1)
          (("1" (assert)
            (("1" (expand "cos")
              (("1" (expand "inf_sum")
                (("1" (expand "powerseries")
                  (("1" (replace -1 * rl)
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1" (expand "sin")
                          (("1" (expand "deriv_powerseq")
                            (("1" (expand "inf_sum")
                              (("1" (lemma "limit_series_shift")
                                (("1" (inst?)
                                  (("1" (inst -1 "1")
                                    (("1" (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (lemma "limit_neg")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 * rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case-replace
                                                         "series(LAMBDA n:                                                                 cos_coef(1 + n) * x!1 ^ n +                                                                  n * cos_coef(1 + n) * x!1 ^ n)                                                   = -series(powerseq(sin_coef, x!1))")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (case-replace
                                                             "-series(powerseq(sin_coef, x!1)) = series(-powerseq(sin_coef, x!1))")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (rewrite
                                                                 "congruence")
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (expand
                                                                       "-")
                                                                      (("1"
                                                                        (expand
                                                                         "powerseq")
                                                                        (("1"
                                                                          (expand
                                                                           "sin_coef")
                                                                          (("1"
                                                                            (expand
                                                                             "cos_coef")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "even_plus1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (name-replace
                                                                                     "Y"
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "X"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (name-replace
                                                                                     "Y"
                                                                                     "x!2")
                                                                                    (("3"
                                                                                      (name-replace
                                                                                       "X"
                                                                                       "x!1")
                                                                                      (("3"
                                                                                        (case-replace
                                                                                         "factorial(1 + Y) = factorial(Y)* (1+Y)")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "FF"
                                                                                             "factorial(Y)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "altsign(1+Y) = - altsign(Y)")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "AA"
                                                                                                 "altsign(Y)")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "EE"
                                                                                                   "X^Y")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "-AA / (FF * (1 + Y)) * EE + EE * (-AA / (FF * (1 + Y))) * Y =                                                         -AA * EE * (1 / (FF * (1 + Y)) + Y/ (FF * (1 + Y)))")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "(1 / (FF * (1 + Y)) + Y / (FF * (1 + Y))) =                                                                     (1 + Y)/ (FF * (1 + Y))")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (name-replace
                                                                                                             "DD"
                                                                                                             "(1+Y)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "altsign")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "expt"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "factorial"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide
                                                                                     2)
                                                                                    (("4"
                                                                                      (lemma
                                                                                       "even_plus1")
                                                                                      (("4"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (expand "-")
                                                                  (("2"
                                                                    (expand
                                                                     "powerseq")
                                                                    (("2"
                                                                      (expand
                                                                       "series")
                                                                      (("2"
                                                                        (lemma
                                                                         "sigma_scal")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "-1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "sin_conv")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (expand "powerseries")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "deriv_powerseries_conv")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (inst?) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "powerseries")
                                                      (("2"
                                                        (lemma "cos_conv")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (expand
                                                             "powerseries")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (skosimp*) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*) (("2" (rewrite "cos_conv") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cos const-decl "real" trig_fun nil) (sin const-decl "real" trig_fun nil)
    (sigma def-decl "real" sigma reals)
    (powerseq const-decl "sequence[real]" power_series nil)
    (sin_coef const-decl "real" trig_fun nil)
    (sigma_scal formula-decl nil sigma reals)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" trig_fun nil)
    (sin_conv formula-decl nil trig_fun nil)
    (limit_neg formula-decl nil convergence_ops analysis)
    (cos_conv formula-decl nil trig_fun nil)
    (limit_series_shift formula-decl nil series nil)
    (cos_coef const-decl "real" trig_fun nil))
   nil))
 (sin2_cos2_derivable 0
  (sin2_cos2_derivable-2 "" 3790091664
   ("" (lemma "cos_derivable")
    (("" (lemma "sin_derivable")
      (("" (expand "derivable?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (lemma "sum_derivable[real]")
                (("" (inst -1 "sin*sin" "cos*cos" "x!1")
                  (("" (assert)
                    (("" (hide 2)
                      (("" (lemma "prod_derivable[real]")
                        (("" (inst -1 "sin" "sin" "x!1")
                          (("" (assert)
                            (("" (lemma "prod_derivable[real]")
                              (("" (inst -1 "cos" "cos" "x!1")
                                (("" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin2_cos2_derivable-1 nil 3249311628
   ("" (lemma "cos_derivable")
    (("" (lemma "sin_derivable")
      (("" (expand "derivable?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (lemma "sum_derivable[real]")
                (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (lemma "prod_derivable[real]")
                        (("1" (inst -1 "sin" "sin" "x!1")
                          (("1" (assert)
                            (("1" (lemma "prod_derivable[real]")
                              (("1" (inst -1 "cos" "cos" "x!1")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "not_one_element?")
                    (("2" (skosimp*)
                      (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_derivable formula-decl nil trig_props nil)
    (cos const-decl "real" trig_fun nil) (sin const-decl "real" trig_fun nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable? const-decl "bool" derivatives analysis)
    (cos_derivable formula-decl nil trig_props nil))
   nil))
 (sin2_cos2 0
  (sin2_cos2-5 "" 3790091665
   ("" (expand "const_fun")
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1" (case-replace "derivable?[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (hide -2)
                              (("1" (case "(sin * sin + cos * cos)(0) = 1")
                                (("1" (expand "constant?")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst -2 "x!1" "0")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 2)
                                  (("2" (lemma "sin_0")
                                    (("2" (lemma "cos_0")
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (expand "*")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case "deriv(sin * sin + cos * cos)(x!1) = const_fun(0)(x!1)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace -1) (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (assert)
                      (("2" (expand "not_one_element?")
                        (("2" (skosimp*)
                          (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "connected?") (("3" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("2" (apply-extensionality 1 :hide? t)
                      (("2" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("2" (expand "derivable?" -3)
                          (("2" (expand "derivable?" -4)
                            (("2" (inst?)
                              (("2" (inst?)
                                (("2" (assert)
                                  (("2" (expand "deriv" 1)
                                    (("2" (replace -1)
                                      (("2"
                                        (hide -1 -2)
                                        (("2"
                                          (lemma "deriv_prod[real]")
                                          (("2"
                                            (inst -1 "sin" "sin" "x!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "derivable?" -4)
                                                (("2"
                                                  (expand "derivable?" -5)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (hide -1 -2)
                                                            (("2"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("2"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("2" (expand "derivable?" 1)
                    (("2" (skosimp*)
                      (("2" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("2" (expand "derivable?" -2)
                          (("2" (expand "derivable?" -3)
                            (("2" (inst?)
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("2" (expand "derivable?" 1)
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (expand "derivable?" -3)
                        (("2" (expand "derivable?" -4)
                          (("2" (inst?)
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("2" (expand "derivable?" 1)
                (("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (expand "derivable?" -3)
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin2_cos2-4 nil 3445341842
   ("" (expand "const_fun")
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1" (case-replace "derivable?[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (hide -2)
                              (("1" (case "(sin * sin + cos * cos)(0) = 1")
                                (("1" (expand "constant?")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst -2 "x!1" "0")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 2)
                                  (("2" (lemma "sin_0")
                                    (("2" (lemma "cos_0")
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (expand "*")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case "deriv(sin * sin + cos * cos)(x!1) = const_fun(0)(x!1)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace -1) (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (assert)
                      (("2" (expand "not_one_element?")
                        (("2" (skosimp*)
                          (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "connected?") (("3" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "deriv" 1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "derivable?" -4)
                                                (("1"
                                                  (expand "derivable?" -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "not_one_element?")
                        (("2" (skosimp*)
                          (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (lemma "deriv_domain_real")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "not_one_element?")
                      (("2" (skosimp*)
                        (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "not_one_element?")
                    (("2" (skosimp*)
                      (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "not_one_element?")
                  (("2" (skosimp*)
                    (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_derivable formula-decl nil trig_props nil)
    (cos const-decl "real" trig_fun nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (deriv_sin formula-decl nil trig_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv_cos formula-decl nil trig_props nil)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (null_derivative formula-decl nil derivative_props analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (cos_0 formula-decl nil trig_fun nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_0 formula-decl nil trig_fun nil)
    (constant? const-decl "bool" real_fun_preds reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (constant_seq1 application-judgement "(convergent?)" convergence_ops
     analysis)
    (derivable_const application-judgement "deriv_fun" derivatives analysis)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (sin const-decl "real" trig_fun nil)
    (sin_derivable formula-decl nil trig_props nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   nil)
  (sin2_cos2-3 nil 3445341805
   ("" (expand "const_fun")
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1" (case-replace "derivable?[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (hide -2)
                              (("1" (case "(sin * sin + cos * cos)(0) = 1")
                                (("1" (expand "constant?")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst -2 "x!1" "0")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil)))))))))
                                 ("2" (hide -1 2)
                                  (("2" (lemma "sin_0")
                                    (("2" (lemma "cos_0")
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (expand "*")
                                          (("2" (assert) nil)))))))))))))))))
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case "deriv(sin * sin + cos * cos)(x!1) = const_fun(0)(x!1)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil)))))))))
                                 ("2" (replace -1)
                                  (("2" (propax) nil)))))))))))))))))
                   ("2" (hide -1 2)
                    (("2" (skosimp*)
                      (("2" (inst + "x!1+1") (("2" (assert) nil)))))))))
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "deriv" 1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "derivable?" -4)
                                                (("1"
                                                  (expand "derivable" -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                     ("2" (skosimp*)
                      (("2" (inst-cp + "0")
                        (("2" (inst + "1") (("2" (assert) nil)))))))))))
                 ("3" (propax) nil)))
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1" (inst?) (("1" (assert) nil)))))))))))))))
                   ("2" (skosimp*)
                    (("2" (inst-cp + "0")
                      (("2" (inst + "1") (("2" (assert) nil)))))))))))))
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil)))))))))))))))
                 ("2" (skosimp*)
                  (("2" (inst-cp + "0")
                    (("2" (inst + "1") (("2" (assert) nil)))))))))))))
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil)))))))))))
               ("2" (skosimp*)
                (("2" (inst-cp + "0")
                  (("2" (inst + "1") (("2" (assert) nil))))))))))))))))))
    nil)
   nil nil)
  (sin2_cos2-2 nil 3445341423
   (";;; Proof sin2_cos2-1 for formula trig_props.sin2_cos2"
    (expand "const_fun")
    ((";;; Proof sin2_cos2-1 for formula trig_props.sin2_cos2"
      (lemma "cos_derivable")
      ((";;; Proof sin2_cos2-1 for formula trig_props.sin2_cos2"
        (lemma "sin_derivable")
        ((";;; Proof sin2_cos2-1 for formula trig_props.sin2_cos2"
          (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1" (case-replace "derivable[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (hide -2)
                              (("1" (case "(sin * sin + cos * cos)(0) = 1")
                                (("1" (expand "constant?")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst -2 "x!1" "0")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil)))))))))
                                 ("2" (hide -1 2)
                                  (("2" (lemma "sin_0")
                                    (("2" (lemma "cos_0")
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (expand "*")
                                          (("2" (assert) nil)))))))))))))))))
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case "deriv(sin * sin + cos * cos)(x!1) = const_fun(0)(x!1)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil)))))))))
                                 ("2" (replace -1)
                                  (("2" (propax) nil)))))))))))))))))
                   ("2" (hide -1 2)
                    (("2" (skosimp*)
                      (("2" (inst + "x!1+1") (("2" (assert) nil)))))))))
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "deriv" 1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "derivable?" -4)
                                                (("1"
                                                  (expand "derivable" -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                     ("2" (skosimp*)
                      (("2" (inst-cp + "0")
                        (("2" (inst + "1") (("2" (assert) nil)))))))))))
                 ("3" (propax) nil)))
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1" (inst?) (("1" (assert) nil)))))))))))))))
                   ("2" (skosimp*)
                    (("2" (inst-cp + "0")
                      (("2" (inst + "1") (("2" (assert) nil)))))))))))))
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil)))))))))))))))
                 ("2" (skosimp*)
                  (("2" (inst-cp + "0")
                    (("2" (inst + "1") (("2" (assert) nil)))))))))))))
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil)))))))))))
               ("2" (skosimp*)
                (("2" (inst-cp + "0")
                  (("2" (inst + "1") (("2" (assert) nil))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (sin2_cos2-1 nil 3249311628
   ("" (expand "const_fun")
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable[real](cos * cos)")
          (("1" (case "derivable[real](sin * sin)")
            (("1" (case-replace "derivable[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (hide -2)
                              (("1" (case "(sin * sin + cos * cos)(0) = 1")
                                (("1" (expand "constant?")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst -2 "x!1" "0")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 2)
                                  (("2" (lemma "sin_0")
                                    (("2" (lemma "cos_0")
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (expand "*")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case "deriv(sin * sin + cos * cos)(x!1) = const_fun(0)(x!1)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (replace -1) (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (skosimp*)
                      (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "deriv" 1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "derivable?" -4)
                                                (("1"
                                                  (expand "derivable" -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst-cp + "0")
                        (("2" (inst + "1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst-cp + "0")
                      (("2" (inst + "1") (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst-cp + "0")
                    (("2" (inst + "1") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst-cp + "0")
                  (("2" (inst + "1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos const-decl "real" trig_fun nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (null_derivative formula-decl nil derivative_props analysis)
    (cos_0 formula-decl nil trig_fun nil)
    (sin_0 formula-decl nil trig_fun nil)
    (constant? const-decl "bool" real_fun_preds reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (sin const-decl "real" trig_fun nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   nil))
 (sin_cos_one 0
  (sin_cos_one-3 "" 3790091666
   ("" (skosimp*)
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1" (case-replace "derivable?[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (case "(sin * sin + cos * cos)(0) = 1")
                              (("1" (expand "constant?")
                                (("1" (inst -2 "x!1" "0")
                                  (("1" (replace -1)
                                    (("1" (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 2)
                                (("2" (lemma "sin_0")
                                  (("2" (lemma "cos_0")
                                    (("2" (expand "+ ")
                                      (("2"
                                        (expand "*")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case-replace
                                 "deriv(sin * sin + cos * cos)(x!2) = const_fun(0)(x!2)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "not_one_element?")
                      (("2" (skosimp*)
                        (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "connected?") (("3" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("2" (apply-extensionality 1 :hide? t)
                      (("2" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("2" (expand "derivable?" -3)
                          (("2" (expand "derivable?" -4)
                            (("2" (inst?)
                              (("2" (inst?)
                                (("2" (assert)
                                  (("2" (expand "deriv" 1)
                                    (("2" (replace -1)
                                      (("2"
                                        (hide -1 -2)
                                        (("2"
                                          (lemma "deriv_prod[real]")
                                          (("2"
                                            (inst -1 "sin" "sin" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "derivable?" -4)
                                                (("2"
                                                  (expand "derivable?" -5)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (hide -1 -2)
                                                            (("2"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!2")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("2"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("2" (expand "derivable?" 1)
                    (("2" (skosimp*)
                      (("2" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("2" (expand "derivable?" -2)
                          (("2" (expand "derivable?" -3)
                            (("2" (inst?)
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("2" (expand "derivable?" 1)
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (expand "derivable?" -3)
                        (("2" (expand "derivable?" -4)
                          (("2" (inst?)
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("2" (expand "derivable?" 1)
                (("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (expand "derivable?" -3)
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin_cos_one-2 nil 3445341870
   ("" (skosimp*)
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1" (case-replace "derivable?[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (case "(sin * sin + cos * cos)(0) = 1")
                              (("1" (expand "constant?")
                                (("1" (inst -2 "x!1" "0")
                                  (("1" (replace -1)
                                    (("1" (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 2)
                                (("2" (lemma "sin_0")
                                  (("2" (lemma "cos_0")
                                    (("2" (expand "+ ")
                                      (("2"
                                        (expand "*")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case-replace
                                 "deriv(sin * sin + cos * cos)(x!2) = const_fun(0)(x!2)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "not_one_element?")
                      (("2" (skosimp*)
                        (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "connected?") (("3" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "deriv" 1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "derivable?" -4)
                                                (("1"
                                                  (expand "derivable?" -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "not_one_element?")
                        (("2" (skosimp*)
                          (("2" (inst + "x!2+1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (lemma "deriv_domain_real")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "not_one_element?")
                      (("2" (skosimp*)
                        (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "not_one_element?")
                    (("2" (skosimp*)
                      (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "not_one_element?")
                  (("2" (skosimp*)
                    (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (lemma "deriv_domain_real") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_derivable formula-decl nil trig_props nil)
    (cos const-decl "real" trig_fun nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (deriv_sin formula-decl nil trig_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv_cos formula-decl nil trig_props nil)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (null_derivative formula-decl nil derivative_props analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (constant? const-decl "bool" real_fun_preds reals)
    (sin_0 formula-decl nil trig_fun nil)
    (cos_0 formula-decl nil trig_fun nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_const application-judgement "deriv_fun" derivatives analysis)
    (constant_seq1 application-judgement "(convergent?)" convergence_ops
     analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (sin const-decl "real" trig_fun nil)
    (sin_derivable formula-decl nil trig_props nil))
   nil)
  (sin_cos_one-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "cos_derivable")
      (("" (lemma "sin_derivable")
        (("" (case "derivable[real](cos * cos)")
          (("1" (case "derivable[real](sin * sin)")
            (("1" (case-replace "derivable[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (case "(sin * sin + cos * cos)(0) = 1")
                              (("1" (expand "constant?")
                                (("1" (inst -2 "x!1" "0")
                                  (("1" (replace -1)
                                    (("1" (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 2)
                                (("2" (lemma "sin_0")
                                  (("2" (lemma "cos_0")
                                    (("2" (expand "+ ")
                                      (("2"
                                        (expand "*")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case-replace
                                 "deriv(sin * sin + cos * cos)(x!2) = const_fun(0)(x!2)")
                                (("1" (hide -2)
                                  (("1" (expand "deriv" -1)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst 1 "x!2+1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "deriv" 1)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "derivable?" -4)
                                                (("1"
                                                  (expand "derivable" -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1 -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst-cp + "0")
                        (("2" (inst + "1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst-cp + "0")
                      (("2" (inst + "1") (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst-cp + "0")
                    (("2" (inst + "1") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst-cp + "0")
                  (("2" (inst + "1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos const-decl "real" trig_fun nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (null_derivative formula-decl nil derivative_props analysis)
    (constant? const-decl "bool" real_fun_preds reals)
    (sin_0 formula-decl nil trig_fun nil)
    (cos_0 formula-decl nil trig_fun nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (sin const-decl "real" trig_fun nil))
   nil))
 (sin_lt_1 0
  (sin_lt_1-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "sin_cos_one")
      (("" (inst?)
        (("" (case "sin(x!1) * sin(x!1) <= 1")
          (("1" (hide -2)
            (("1" (lemma "sqrt_1_le")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2" (case "cos(x!1) * cos(x!1) >= 0")
                (("1" (assert) nil nil)
                 ("2" (hide -1 2)
                  (("2" (assert)
                    (("2" (rewrite "abs_square" :dir rl)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_cos_one formula-decl nil trig_props nil)
    (sin const-decl "real" trig_fun nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sqrt_1_le formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs_square formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos const-decl "real" trig_fun nil) (>= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)))


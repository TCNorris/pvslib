(prelude_aux
 (lt_times_lt_nn1 0
  (lt_times_lt_nn1-1 nil 3250061827
   ("" (skosimp*)
    (("" (lemma "trich_lt" ("x" "nnx!1" "y" "0"))
      (("" (split)
        (("1" (assert) nil nil)
         ("2" (replace -1)
          (("2" (grind)
            (("2"
              (lemma "both_sides_times_pos_lt1"
               ("x" "0" "y" "w!1" "pz" "y!1"))
              (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3"
          (lemma "lt_times_lt_pos1"
           ("px" "nnx!1" "y" "y!1" "w" "w!1" "nnz" "nnz!1"))
          (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (lt_times_lt_np1 0
  (lt_times_lt_np1-1 nil 3250061827
   ("" (skosimp*)
    (("" (typepred "npy!1")
      (("" (expand "<=")
        (("" (split -1)
          (("1"
            (lemma "lt_times_lt_neg1"
             ("x" "x!1" "ny" "npy!1" "z" "z!1" "npw" "npw!1"))
            (("1" (grind) nil nil) ("2" (propax) nil nil)) nil)
           ("2" (replace -1)
            (("2" (typepred "npw!1")
              (("2" (lemma "total_le")
                (("2" (lemma "strict_lt")
                  (("2" (expand "strict_total_order?")
                    (("2" (expand "total_order?")
                      (("2" (expand "strict_order?")
                        (("2" (expand "partial_order?")
                          (("2" (expand "preorder?")
                            (("2" (expand "transitive?")
                              (("2" (flatten)
                                (("2" (expand "<=" -8)
                                  (("2" (split -8)
                                    (("1" (inst - "z!1" "npw!1" "0")
                                      (("1"
                                        (lemma
                                         "both_sides_times_neg_lt1"
                                         ("y" "z!1" "x" "0" "nz" "x!1"))
                                        (("1" (grind) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (lemma
                                         "negreal_times_negreal_is_posreal")
                                        (("2"
                                          (inst - "x!1" "z!1")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((npreal type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_neg1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (strict_lt formula-decl nil real_props nil)
    (total_order? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (x!1 skolem-const-decl "real" prelude_aux nil)
    (z!1 skolem-const-decl "real" prelude_aux nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (dichotomous? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (preorder? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (strict_total_order? const-decl "bool" orders nil)
    (total_le formula-decl nil real_props nil))
   nil))
 (both_sides_times_nonneg_le1 0
  (both_sides_times_nonneg_le1-1 nil 3250061827
   ("" (skosimp*)
    (("" (case "0 < nnz!1")
      (("1"
        (lemma "both_sides_times_pos_le1" ("x" "x!1" "y" "y!1" "pz" "nnz!1"))
        (("1" (bash) nil nil) ("2" (assert) nil nil)) nil)
       ("2" (case "nnz!1=0")
        (("1" (replace -1) (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (both_sides_times_nonpos_le1 0
  (both_sides_times_nonpos_le1-1 nil 3250061827
   ("" (skosimp*)
    (("" (case "0 > npz!1")
      (("1"
        (lemma "both_sides_times_neg_le1" ("y" "y!1" "x" "x!1" "nz" "npz!1"))
        (("1" (bash) nil nil) ("2" (assert) nil nil)) nil)
       ("2" (case "npz!1=0")
        (("1" (replace -1) (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((npreal type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (abs_nonneg 0
  (abs_nonneg-1 nil 3250061827 ("" (grind) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (abs_nonpos 0
  (abs_nonpos-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (npreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (odd_even 0
  (odd_even-1 nil 3250061827
   ("" (skolem!)
    (("" (expand "even?")
      (("" (split)
        (("1" (flatten)
          (("1" (skolem!)
            (("1" (replace -1) (("1" (hide -1) (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "floor_exists" ("x" "z!1/2"))
          (("2" (expand "odd?")
            (("2" (flatten)
              (("2" (skolem!)
                (("2" (inst 1 "i!1")
                  (("2" (inst 2 "i!1")
                    (("2" (lemma "floor_val" ("i" "z!1" "j" "2" "k" "i!1"))
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (floor_exists formula-decl nil floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_val formula-decl nil floor_ceil nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil))
 (odd_or_even 0
  (odd_or_even-1 nil 3250061827
   ("" (skolem!) (("" (rewrite "odd_even") (("" (bash) nil nil)) nil)) nil)
   ((odd_even formula-decl nil prelude_aux nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil))
 (expt_product_aux_TCC1 0
  (expt_product_aux_TCC1-1 nil 3250061827 ("" (subtype-tcc) nil nil) nil nil
   (expt_product_aux subtype "prelude_aux.n"
    "{i: integers.int | booleans.OR((number_fields.*(prelude_aux.n0x, prelude_aux.n0y)) /= 0, reals.>=(i, 0))}")))
 (expt_product_aux_TCC2 0
  (expt_product_aux_TCC2-1 nil 3250061827 ("" (subtype-tcc) nil nil) nil nil
   (expt_product_aux subtype "prelude_aux.n"
    "{i: integers.int | booleans.OR(prelude_aux.n0x /= 0, reals.>=(i, 0))}")))
 (expt_product_aux 0
  (expt_product_aux-1 nil 3250061827
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst - "n0x!1" "n0y!1")
        (("2" (lemma "expt_plus" ("i" "j!1" "j" "1"))
          (("2" (inst-cp - "n0x!1")
            (("2" (inst-cp - "n0y!1")
              (("2" (inst - "n0x!1 *n0y!1") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_plus formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil))
 (expt_product_TCC1 0
  (expt_product_TCC1-1 nil 3250061827 ("" (subtype-tcc) nil nil) nil nil
   (expt_product subtype "prelude_aux.i"
    "{i: integers.int | booleans.OR((number_fields.*(prelude_aux.n0x, prelude_aux.n0y)) /= 0, reals.>=(i, 0))}")))
 (expt_product_TCC2 0
  (expt_product_TCC2-1 nil 3250061827 ("" (subtype-tcc) nil nil) nil nil
   (expt_product subtype "prelude_aux.i"
    "{i: integers.int | booleans.OR(prelude_aux.n0x /= 0, reals.>=(i, 0))}")))
 (expt_product 0
  (expt_product-1 nil 3250061827
   ("" (skosimp) (("" (rewrite "mult_expt") nil nil)) nil)
   ((mult_expt formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   nil))
 (expt_division_aux_TCC1 0
  (expt_division_aux_TCC1-1 nil 3251301322 ("" (grind) nil nil) nil shostak
   (expt_division_aux subtype "prelude_aux.n"
    "{i: integers.int | booleans.OR((number_fields./(prelude_aux.n0x, prelude_aux.n0y)) /= 0, reals.>=(i, 0))}")))
 (expt_division_aux 0
  (expt_division_aux-1 nil 3251299141
   ("" (skosimp) (("" (rewrite "div_expt") nil nil)) nil)
   ((div_expt formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (expt_division_TCC1 0
  (expt_division_TCC1-1 nil 3251301322 ("" (grind) nil nil) nil shostak
   (expt_division subtype "prelude_aux.i"
    "{i: integers.int | booleans.OR((number_fields./(prelude_aux.n0x, prelude_aux.n0y)) /= 0, reals.>=(i, 0))}")))
 (expt_division 0
  (expt_division-1 nil 3251299019
   ("" (skosimp*)
    (("" (case "i!1 >= 0")
      (("1"
        (lemma "expt_division_aux" ("n0x" "n0x!1" "n0y" "n0y!1" "n" "i!1"))
        (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)
       ("2" (lemma "expt_inverse" ("n0x" "n0x!1" "i" "-i!1"))
        (("2" (lemma "expt_inverse" ("n0x" "n0y!1" "i" "-i!1"))
          (("2" (lemma "expt_inverse" ("n0x" "n0x!1/n0y!1" "i" "-i!1"))
            (("2"
              (lemma "expt_division_aux"
               ("n0x" "n0x!1" "n0y" "n0y!1" "n" "-i!1"))
              (("1"
                (lemma "div_div1"
                 ("x" "1" "n0y" "n0x!1^-i!1" "n0z" "n0y!1^-i!1"))
                (("1"
                  (lemma "div_div1"
                   ("x" "1/(n0y!1^-i!1)" "n0y" "1" "n0z" "n0x!1^-i!1"))
                  (("1" (simplify -1)
                    (("1"
                      (lemma "times_div2"
                       ("x" "1" "y" "n0x!1^-i!1" "n0z" "n0y!1^-i!1"))
                      (("1" (replace -1 -2)
                        (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (expt_division_aux formula-decl nil prelude_aux nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_div1 formula-decl nil real_props nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (expt_minus1 0
  (expt_minus1-1 nil 3250061827
   ("" (skosimp*)
    (("" (split)
      (("1" (expand "even?")
        (("1" (flatten)
          (("1" (skolem!)
            (("1" (lemma "expt_plus" ("n0x" "-1" "i" "j!1" "j" "j!1"))
              (("1" (lemma "expt_product" ("n0x" "-1" "n0y" "-1" "i" "j!1"))
                (("1" (lemma "expt_1i" ("i" "j!1")) (("1" (bash) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "odd?")
        (("2" (flatten)
          (("2" (skolem!)
            (("2" (lemma "expt_plus" ("n0x" "-1" "i" "j!1" "j" "j!1"))
              (("2" (lemma "expt_product" ("n0x" "-1" "n0y" "-1" "i" "j!1"))
                (("2" (lemma "expt_1i" ("i" "j!1"))
                  (("2" (lemma "expt_x1" ("x" "-1"))
                    (("2" (lemma "expt_plus" ("n0x" "-1" "i" "1" "j" "2*j!1"))
                      (("2" (bash) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_1i formula-decl nil exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (expt_product formula-decl nil prelude_aux nil)
    (even? const-decl "bool" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_exp application-judgement "int" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd? const-decl "bool" integers nil))
   nil))
 (lt_equiv_not_le 0
  (lt_equiv_not_le-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (le_equiv_not_lt 0
  (le_equiv_not_lt-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (lt_equiv_le_plus_one 0
  (lt_equiv_le_plus_one-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (lt_plus_one_equiv_le 0
  (lt_plus_one_equiv_le-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (lt_le_transitivity 0
  (lt_le_transitivity-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (le_lt_transitivity 0
  (le_lt_transitivity-1 nil 3250061827 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (exp_of2_exists_aux_TCC1 0
  (exp_of2_exists_aux_TCC1-1 nil 3251301325
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (exp_of2_exists_aux subtype "prelude_aux.n"
    "{i: integers.int | booleans.OR(prelude_aux.lt1x /= 0, reals.>=(i, 0))}")))
 (exp_of2_exists_aux 0
  (exp_of2_exists_aux-1 nil 3251290896
   ("" (induct "pn")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skosimp*)
      (("3" (lemma "trichotomy" ("x" "j!1"))
        (("3" (split -1)
          (("1" (assert)
            (("1" (case "lt1x!1 < 1-2^-j!1")
              (("1" (inst - "lt1x!1") (("1" (assert) nil nil)) nil)
               ("2"
                (lemma "lt_times_lt_pos1"
                 ("px" "lt1x!1" "y" "1-2^-(1+j!1)" "nnz" "lt1x!1" "w"
                  "1-2^-(1+j!1)"))
                (("2"
                  (lemma "lt_times_lt_pos1"
                   ("px" "lt1x!1" "y" "1-2^-(1+j!1)" "nnz" "lt1x!1*lt1x!1" "w"
                    "(1-2^-(1+j!1))*(1-2^-(1+j!1))"))
                  (("2" (assert)
                    (("2" (assert)
                      (("2" (inst - "lt1x!1 * (lt1x!1 * lt1x!1)")
                        (("1" (lemma "expt_pos" ("px" "2" "i" "-(1+j!1)"))
                          (("1"
                            (lemma "both_sides_times_pos_lt1"
                             ("x" "0 " "y"
                              "1-3*2^-(1+j!1)+2^-(1+j!1)*2^-(1+j!1)" "pz"
                              "2^-(1+j!1)"))
                            (("1"
                              (lemma "posreal_times_posreal_is_posreal"
                               ("px" "2^-(1+j!1)" "py" "2^-(1+j!1)"))
                              (("1"
                                (lemma "both_sides_expt_gt1_le"
                                 ("gt1x" "2" "i" "-(1+j!1)" "j" "-2"))
                                (("1" (expand "^" -1 2)
                                  (("1" (rewrite "expt")
                                    (("1" (rewrite "expt")
                                      (("1"
                                        (rewrite "expt")
                                        (("1"
                                          (lemma
                                           "div_mult_pos_le2"
                                           ("x"
                                            "2^-(1+j!1)"
                                            "z"
                                            "1"
                                            "py"
                                            "4"))
                                          (("1"
                                            (lemma
                                             "lt_plus_lt1"
                                             ("x"
                                              "lt1x!1 * (lt1x!1 * lt1x!1)"
                                              "y"
                                              "1 + 3 * (2 ^ -(1 + j!1) * 2 ^ -(1 + j!1)) -2 ^ -(1 + j!1) * 2 ^ -(1 + j!1) * 2 ^ -(1 + j!1)- 3 * 2 ^ -(1 + j!1)"
                                              "z"
                                              "0"
                                              "w"
                                              "(1 - 3 * 2 ^ -(1 + j!1) + 2 ^ -(1 + j!1) * 2 ^ -(1 + j!1)) * 2 ^ -(1 + j!1)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -5 -1)
                                                (("1"
                                                  (lemma
                                                   "expt_plus"
                                                   ("n0x"
                                                    "2"
                                                    "i"
                                                    "1"
                                                    "j"
                                                    "-(1+j!1)"))
                                                  (("1"
                                                    (rewrite "expt_x1")
                                                    (("1"
                                                      (replace -1 -2 rl)
                                                      (("1"
                                                        (replace -2 -11)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (lemma
                                                             "expt_times"
                                                             ("n0x"
                                                              "lt1x!1"
                                                              "j"
                                                              "n!1"
                                                              "i"
                                                              "3"))
                                                            (("1"
                                                              (expand
                                                               "^"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (rewrite
                                                                 "expt")
                                                                (("1"
                                                                  (rewrite
                                                                   "expt")
                                                                  (("1"
                                                                    (rewrite
                                                                     "expt")
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "3*n!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (lemma "lt_times_lt_pos1"
                           ("px" "lt1x!1" "y" "1" "nnz" "lt1x!1" "w" "1"))
                          (("2"
                            (lemma "lt_times_lt_pos1"
                             ("px" "lt1x!1" "y" "1" "nnz" "lt1x!1*lt1x!1" "w"
                              "1"))
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst + "1") (("2" (hide -2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (expt_pos formula-decl nil exponentiation nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (lt_plus_lt1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (lt1x!1 skolem-const-decl "{r: posreal | r < 1}" prelude_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   shostak))
 (exp_of2_exists_TCC1 0
  (exp_of2_exists_TCC1-1 nil 3251301328 ("" (grind) nil nil) nil shostak
   (exp_of2_exists subtype "prelude_aux.n"
    "{i: integers.int | booleans.OR(prelude_aux.lt1x /= 0, reals.>=(i, 0))}")))
 (exp_of2_exists 0
  (exp_of2_exists-1 nil 3251289615
   ("" (skosimp*)
    (("" (lemma "archimedean" ("px" "1-lt1x!1"))
      (("" (skosimp*)
        (("" (lemma "exp_of_exists" ("b" "2" "py" "n!1"))
          (("" (skosimp*)
            (("" (lemma "expt_pos" ("px" "2" "i" "i!1+1"))
              ((""
                (lemma "both_sides_div_pos_lt2"
                 ("pz" "1" "px" "2^(i!1+1)" "py" "n!1"))
                ((""
                  (lemma "exp_of2_exists_aux" ("lt1x" "lt1x!1" "pn" "i!1+1"))
                  (("1" (lemma "expt_inverse" ("n0x" "2" "i" "i!1+1"))
                    (("1" (replace -1 -2)
                      (("1"
                        (lemma "both_sides_minus_lt2"
                         ("z" "lt1x!1" "y" "1/2^(i!1+1)" "x" "1/n!1"))
                        (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred "n!1")
                    (("2" (lemma "lt_equiv_le_plus_one" ("x" "0" "y" "n!1"))
                      (("2"
                        (lemma "both_sides_expt_gt1_lt"
                         ("gt1x" "2" "i" "0" "j" "i!1+1"))
                        (("2" (rewrite "expt_x0") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (archimedean formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (exp_of_exists formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_pos formula-decl nil exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp_of2_exists_aux formula-decl nil prelude_aux nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_minus_lt2 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (lt_equiv_le_plus_one formula-decl nil prelude_aux nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   shostak))
 (exp_of_exists2 0
  (exp_of_exists2-1 nil 3251283119
   ("" (skosimp*)
    (("" (lemma "exp_of_exists" ("b" "2" "py" "1/lt1y!1"))
      (("" (skosimp*)
        (("" (lemma "expt_pos" ("px" "2" "i" "i!1+1"))
          ((""
            (lemma "both_sides_div_pos_lt2"
             ("pz" "1" "px" "lt1y!1" "py" "2^-(i!1+1)"))
            (("" (lemma "expt_inverse" ("n0x" "2" "i" "-(i!1+1)"))
              (("" (assert)
                (("" (replace -1 -2 rl)
                  (("" (replace -5 -2)
                    (("" (assert)
                      (("" (lemma "exp_of2_exists" ("lt1x" "lt1x!1"))
                        (("" (skosimp*)
                          (("" (lemma "expt_pos" ("px" "lt1x!1" "i" "n!1"))
                            ((""
                              (lemma "both_sides_expt_pos_lt"
                               ("pm" "1+i!1" "px" "lt1x!1^n!1" "py" "1/2"))
                              (("1" (inst + "n!1*(1+i!1)")
                                (("1"
                                  (lemma "expt_times"
                                   ("n0x" "lt1x!1" "i" "n!1" "j" "1+i!1"))
                                  (("1"
                                    (lemma "expt_division"
                                     ("n0x" "1" "n0y" "2" "i" "1+i!1"))
                                    (("1" (rewrite "expt_1i")
                                      (("1"
                                        (lemma
                                         "expt_inverse"
                                         ("n0x" "2" "i" "1+i!1"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "n!1")
                                  (("2"
                                    (lemma "both_sides_times_nonneg_le1"
                                     ("x" "0" "y" "i!1+1" "nnz" "n!1"))
                                    (("2"
                                      (lemma
                                       "both_sides_expt_gt1_lt"
                                       ("gt1x" "2" "i" "-(1+i!1)" "j" "0"))
                                      (("2"
                                        (rewrite "expt_x0")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "both_sides_expt_gt1_lt"
                                 ("gt1x" "2" "i" "-(1+i!1)" "j" "0"))
                                (("2" (rewrite "expt_x0")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_of_exists formula-decl nil exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_pos formula-decl nil exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nnreal type-eq-decl nil real_types nil)
    (both_sides_times_nonneg_le1 formula-decl nil prelude_aux nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (expt_division formula-decl nil prelude_aux nil)
    (n!1 skolem-const-decl "nat" prelude_aux nil)
    (i!1 skolem-const-decl "int" prelude_aux nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (exp_of2_exists formula-decl nil prelude_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (floor_sqrt_val 0
  (floor_sqrt_val-1 nil 3250061827
   ("" (skosimp*)
    (("" (lemma "floor_def" ("x" "sqrt(n!1)"))
      (("" (flatten -1)
        (("" (typepred "sqrt(n!1)")
          (("" (lemma "nonneg_floor_is_nat" ("x" "sqrt(n!1)"))
            (("" (expand ">=")
              (("" (rewrite "sq_rew")
                (("" (rewrite "sq_rew")
                  (("" (rewrite "sq_rew")
                    (("" (lemma "sqrt_le" ("nny" "sq(m!1)" "nnz" "n!1"))
                      (("" (lemma "sqrt_lt" ("nnz" "sq(1+m!1)" "nny" "n!1"))
                        (("" (replace -1 1 rl)
                          (("" (replace -2 1 rl)
                            (("" (rewrite "sqrt_sq")
                              (("" (rewrite "sqrt_sq")
                                (("" (split 1)
                                  (("1" (flatten)
                                    (("1"
                                      (lemma
                                       "trich_lt"
                                       ("x" "floor(sqrt(n!1))" "y" "m!1"))
                                      (("1"
                                        (split -1)
                                        (("1" (assert) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten 1) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (floor_def formula-decl nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sqrt_le formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (trich_lt formula-decl nil real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_lt formula-decl nil sqrt reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (sq_rew formula-decl nil sq reals)
    (nonneg_floor_is_nat judgement-tcc nil floor_ceil nil))
   nil))
 (ceiling_sqrt_0 0
  (ceiling_sqrt_0-1 nil 3287291927
   ("" (rewrite "sqrt_0") (("" (grind) nil nil)) nil)
   ((nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (sqrt_0 formula-decl nil sqrt reals))
   shostak))
 (ceiling_sqrt_val 0
  (ceiling_sqrt_val-2 "" 3790105854
   ("" (skosimp*)
    (("" (rewrite "sq_rew")
      (("" (rewrite "sq_rew")
        (("" (lemma "ceiling_def" ("x" "sqrt(pn!1)"))
          (("" (flatten -1)
            (("" (typepred "pn!1")
              (("" (lemma "sqrt_le" ("nny" "1" "nnz" "pn!1"))
                (("" (rewrite "sqrt_1")
                  (("" (assert)
                    (("" (name-replace "M" "ceiling(sqrt(pn!1))")
                      (("" (lemma "sq_le" ("nna" "sqrt(pn!1)" "nnb" "M"))
                        (("" (lemma "sq_lt" ("nnb" "sqrt(pn!1)" "nna" "M-1"))
                          (("1" (assert)
                            (("1" (split 1)
                              (("1" (flatten 1)
                                (("1" (lemma "trich_lt" ("x" "M" "y" "pm!1"))
                                  (("1" (split -1)
                                    (("1"
                                      (lemma
                                       "sq_le"
                                       ("nna" "M" "nnb" "pm!1-1"))
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (lemma
                                       "sq_lt"
                                       ("nna" "pm!1" "nnb" "M-1"))
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten 1) (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ceiling_sqrt_val-1 nil 3287290302
   ("" (skosimp*)
    (("" (rewrite "sq_rew")
      (("" (rewrite "sq_rew")
        (("" (lemma "ceiling_def" ("x" "sqrt(pn!1)"))
          (("" (flatten -1)
            (("" (typepred "pn!1")
              (("" (lemma "sqrt_le" ("nny" "1" "nnz" "pn!1"))
                (("" (rewrite "sqrt_1")
                  (("" (assert)
                    (("" (name-replace "M" "ceiling(sqrt(pn!1))")
                      (("" (lemma "sq_le" ("nna" "sqrt(pn!1)" "nnb" "M"))
                        (("" (lemma "sq_lt" ("nnb" "sqrt(pn!1)" "nna" "M-1"))
                          (("1" (assert)
                            (("1" (rewrite "sq_sqrt")
                              (("1" (split 1)
                                (("1" (flatten 1)
                                  (("1"
                                    (lemma "trich_lt" ("x" "M" "y" "pm!1"))
                                    (("1" (split -1)
                                      (("1"
                                        (lemma
                                         "sq_le"
                                         ("nna" "M" "nnb" "pm!1-1"))
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (lemma
                                         "sq_lt"
                                         ("nna" "pm!1" "nnb" "M-1"))
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten 1) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_rew formula-decl nil sq reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sqrt_1 formula-decl nil sqrt reals)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sq_lt formula-decl nil sq reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (trich_lt formula-decl nil real_props nil)
    (sq_sqrt formula-decl nil sqrt reals) (sq_le formula-decl nil sq reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sqrt_le formula-decl nil sqrt reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_pos application-judgement "posreal" sqrt reals))
   shostak))
 (log2_TCC1 0
  (log2_TCC1-1 nil 3287293386
   ("" (lemma "ln_strict_increasing")
    (("" (expand "strict_increasing?")
      (("" (inst - "1" "2")
        (("" (rewrite "ln_1") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)
    (ln_1 formula-decl nil ln_exp lnexp)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_strict_increasing formula-decl nil ln_exp lnexp))
   shostak (log2 subtype "ln_exp.ln(2)" "nznum")))
 (log2_2_expt_i 0
  (log2_2_expt_i-2 "" 3790105854
   ("" (case "FORALL (n:nat): log2(2 ^ n) = n")
    (("1" (skosimp*)
      (("1" (case "i!1>=0")
        (("1" (inst - "i!1") nil nil)
         ("2" (inst - "-i!1")
          (("1" (rewrite "expt_inverse")
            (("1" (expand "log2")
              (("1" (rewrite "ln_div") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (rewrite "expt_x0")
          (("1" (expand "log2")
            (("1" (rewrite "ln_1") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (rewrite "expt_plus")
            (("2" (rewrite "expt_x1")
              (("2" (expand "log2")
                (("2" (rewrite "ln_mult") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (log2_2_expt_i-1 nil 3287293536
   ("" (case "FORALL (n:nat): log2(2 ^ n) = n")
    (("1" (skosimp*)
      (("1" (case "i!1>=0")
        (("1" (inst - "i!1") nil nil)
         ("2" (inst - "-i!1")
          (("1" (rewrite "expt_inverse")
            (("1" (expand "log2")
              (("1" (rewrite "ln_div")
                (("1" (rewrite "ln_1") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (rewrite "expt_x0")
          (("1" (expand "log2")
            (("1" (rewrite "ln_1") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (rewrite "expt_plus")
            (("2" (rewrite "expt_x1")
              (("2" (expand "log2")
                (("2" (rewrite "ln_mult") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_x1 formula-decl nil exponentiation nil)
    (ln_mult formula-decl nil ln_exp lnexp)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ln_div formula-decl nil ln_exp lnexp)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (i!1 skolem-const-decl "int" prelude_aux nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (log2 const-decl "real" prelude_aux nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   shostak))
 (log2_strict_increasing 0
  (log2_strict_increasing-1 nil 3287293990
   ("" (lemma "ln_strict_increasing")
    (("" (expand "strict_increasing?")
      (("" (skosimp*)
        (("" (inst-cp - "x!1" "y!1")
          (("" (inst - "1" "2")
            (("" (rewrite "ln_1")
              (("" (assert)
                (("" (expand "log2")
                  ((""
                    (lemma "both_sides_div_pos_lt1"
                     ("pz" "ln(2)" "x" "ln(x!1)" "y" "ln(y!1)"))
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (log2 const-decl "real" prelude_aux nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln const-decl "real" ln_exp lnexp)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ln_strict_increasing formula-decl nil ln_exp lnexp))
   shostak)))


(power
 (abs_ge0 0
  (abs_ge0-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (abs_neg 0
  (abs_neg-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (abs_interval 0
  (abs_interval-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (abs_interval1 0
  (abs_interval1-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (abs_interval2 0
  (abs_interval2-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (triangle_open 0
  (triangle_open-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil))
 (abs_error 0
  (abs_error-1 nil 3250077324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (lemma_A2_generalized 0
  (lemma_A2_generalized-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "floor_def" ("x" "x!1+1/2")) (("" (grind) nil nil)) nil)) nil)
   ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (floor_def formula-decl nil floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (round const-decl "int" prelude_aux nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (cauchy_power_lt1_n_odd_TCC1 0
  (cauchy_power_lt1_n_odd_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_n_odd subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_n_odd_TCC2 0
  (cauchy_power_lt1_n_odd_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((odd? const-decl "bool" integers nil) (ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (cauchy_power_lt1_n_odd subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_n_odd 0
  (cauchy_power_lt1_n_odd-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_odd" ("n" "pn!1"))
      (("" (replace -2 -1)
        (("" (assert)
          (("" (hide -2)
            ((""
              (lemma "lemma_A2_generalized"
               ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
              (("" (replace -5 -1 rl)
                (("" (simplify -1)
                  (("" (flatten)
                    (("" (hide -6)
                      ((""
                        (lemma "lemma_A4"
                         ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
                          "2^-(p!1+1)"))
                        (("" (assert)
                          (("" (flatten)
                            (("" (inst-cp - "sx!1")
                              (("" (inst-cp - "e1!1 + sx!1")
                                (("" (inst-cp - "sx!1 - e1!1")
                                  (("" (inst - "rx!1 * e1!1")
                                    (("1" (replace -7)
                                      (("1"
                                        (replace -8)
                                        (("1"
                                          (replace -9)
                                          (("1"
                                            (replace -10)
                                            (("1"
                                              (hide (-7 -8 -9 -10))
                                              (("1"
                                                (lemma
                                                 "div_mult_pos_lt2"
                                                 ("py"
                                                  "e1!1"
                                                  "x"
                                                  "rx!1 - 1"
                                                  "z"
                                                  "sx!1"))
                                                (("1"
                                                  (simplify -1)
                                                  (("1"
                                                    (lemma
                                                     "div_mult_pos_lt1"
                                                     ("py"
                                                      "e1!1"
                                                      "x"
                                                      "rx!1 + 1"
                                                      "z"
                                                      "sx!1"))
                                                    (("1"
                                                      (simplify -1)
                                                      (("1"
                                                        (hide (-11 -12))
                                                        (("1"
                                                          (lemma
                                                           "both_sides_expt_pos_lt"
                                                           ("pm"
                                                            "pn!1"
                                                            "px"
                                                            "-(rx!1 * e1!1)"
                                                            "py"
                                                            "-(sx!1 - e1!1)"))
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_neg_lt1"
                                                             ("nz"
                                                              "-1"
                                                              "y"
                                                              "sx!1 - e1!1"
                                                              "x"
                                                              "rx!1 * e1!1"))
                                                            (("1"
                                                              (lemma
                                                               "both_sides_expt_pos_lt"
                                                               ("pm"
                                                                "pn!1"
                                                                "py"
                                                                "-(rx!1 * e1!1)"
                                                                "px"
                                                                "-(sx!1 + e1!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_times_neg_lt1"
                                                                 ("nz"
                                                                  "-1"
                                                                  "x"
                                                                  "sx!1 + e1!1"
                                                                  "y"
                                                                  "rx!1 * e1!1"))
                                                                (("1"
                                                                  (hide
                                                                   (-7 -10))
                                                                  (("1"
                                                                    (lemma
                                                                     "both_sides_times_pos_lt1"
                                                                     ("x"
                                                                      "-((-sx!1) ^ pn!1) - 2 ^ -(1 + p!1)"
                                                                      "y"
                                                                      "-((-(e1!1 + sx!1)) ^ pn!1)"
                                                                      "pz"
                                                                      "2^p!1"))
                                                                    (("1"
                                                                      (simplify
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "expt_plus"
                                                                         ("n0x"
                                                                          "2"
                                                                          "i"
                                                                          "-(1 + p!1)"
                                                                          "j"
                                                                          "p!1"))
                                                                        (("1"
                                                                          (simplify
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_lt1"
                                                                                   ("x"
                                                                                    "-((-(sx!1 - e1!1)) ^ pn!1)"
                                                                                    "y"
                                                                                    "2 ^ -(1 + p!1) + -((-sx!1) ^ pn!1)"
                                                                                    "pz"
                                                                                    "2^p!1"))
                                                                                  (("1"
                                                                                    (simplify
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       (-1
                                                                                        -3)
                                                                                       rl)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-4
                                                                                            -6
                                                                                            -2))
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "both_sides_times_neg_lt1"
                                                                                             ("nz"
                                                                                              "-1"
                                                                                              "y"
                                                                                              "(-(e1!1 + sx!1)) ^ pn!1"
                                                                                              "x"
                                                                                              "(-(rx!1 * e1!1)) ^ pn!1"))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "both_sides_times_neg_lt1"
                                                                                               ("nz"
                                                                                                "-1"
                                                                                                "y"
                                                                                                "(-(rx!1 * e1!1)) ^ pn!1"
                                                                                                "x"
                                                                                                "(-(sx!1 - e1!1)) ^ pn!1"))
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "AA"
                                                                                                 "(-sx!1) ^ pn!1")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "B"
                                                                                                   "(-(rx!1 * e1!1)) ^ pn!1")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "C"
                                                                                                     "(-(sx!1 - e1!1)) ^ pn!1")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "D"
                                                                                                       "(-(e1!1 + sx!1)) ^ pn!1")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "both_sides_times_pos_lt1"
                                                                                                         ("pz"
                                                                                                          "2^p!1"
                                                                                                          "x"
                                                                                                          "-C"
                                                                                                          "y"
                                                                                                          "-B"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "both_sides_times_pos_lt1"
                                                                                                           ("pz"
                                                                                                            "2^p!1"
                                                                                                            "x"
                                                                                                            "-B"
                                                                                                            "y"
                                                                                                            "-D"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (reveal
                                                                                                               (-7
                                                                                                                -8))
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 (-1
                                                                                                                  -2
                                                                                                                  -3))
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       (-4
                                                                                                                        -5))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            -3
                                                                                                                            -4
                                                                                                                            -5))
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "both_sides_times_pos_lt1"
                                                                                                                             ("pz"
                                                                                                                              "2^p!1"
                                                                                                                              "x"
                                                                                                                              "-AA - 2 ^ -(1 + p!1)"
                                                                                                                              "y"
                                                                                                                              "-C"))
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "both_sides_times_pos_lt1"
                                                                                                                               ("pz"
                                                                                                                                "2^p!1"
                                                                                                                                "x"
                                                                                                                                "-D"
                                                                                                                                "y"
                                                                                                                                "2 ^ -(1 + p!1) -AA"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (-10 -12 1))
                                      (("2"
                                        (lemma
                                         "div_mult_pos_lt2"
                                         ("py"
                                          "e1!1"
                                          "z"
                                          "sx!1"
                                          "x"
                                          "rx!1 - 1"))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_odd formula-decl nil prelude_A4 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (expt def-decl "real" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (e1!1 skolem-const-decl "posreal" power nil)
    (rx!1 skolem-const-decl "rat" power nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lemma_A4 formula-decl nil appendix nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   nil))
 (cauchy_power_lt1_n_even_TCC1 0
  (cauchy_power_lt1_n_even_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_n_even subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_n_even_TCC2 0
  (cauchy_power_lt1_n_even_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil) (ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_n_even subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_n_even 0
  (cauchy_power_lt1_n_even-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_even" ("n" "pn!1"))
      (("" (replace -2 -1)
        ((""
          (lemma "lemma_A2_generalized"
           ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
          ((""
            (lemma "lemma_A4"
             ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
              "2^-(p!1+1)"))
            ((""
              (lemma "div_mult_pos_lt2"
               ("py" "e1!1" "x" "rx!1 - 1" "z" "sx!1"))
              ((""
                (lemma "div_mult_pos_lt1"
                 ("py" "e1!1" "x" "rx!1 + 1" "z" "sx!1"))
                (("" (assert)
                  (("" (flatten)
                    (("" (hide (-10 -13 -14 -15 -12))
                      ((""
                        (lemma "expt_plus"
                         ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                        (("" (expand "^" -1 1)
                          (("" (expand "expt")
                            (("" (expand "expt")
                              (("" (inst-cp - "rx!1 * e1!1")
                                (("" (inst-cp - "sx!1 - e1!1")
                                  (("" (inst - "e1!1 + sx!1")
                                    (("" (replace -10)
                                      ((""
                                        (replace -11)
                                        ((""
                                          (replace -12)
                                          ((""
                                            (lemma
                                             "both_sides_expt_pos_lt"
                                             ("pm"
                                              "pn!1"
                                              "px"
                                              "-(e1!1 * rx!1)"
                                              "py"
                                              "-(sx!1 - e1!1)"))
                                            ((""
                                              (lemma
                                               "both_sides_expt_pos_lt"
                                               ("pm"
                                                "pn!1"
                                                "py"
                                                "-(e1!1 * rx!1)"
                                                "px"
                                                "-(sx!1 + e1!1)"))
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("x"
                                                    "(-(rx!1 * e1!1)) ^ pn!1"
                                                    "y"
                                                    "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                                    "pz"
                                                    "2^p!1"))
                                                  ((""
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("y"
                                                      "(-(rx!1 * e1!1)) ^ pn!1"
                                                      "x"
                                                      "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"
                                                      "pz"
                                                      "2^p!1"))
                                                    (("" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_even formula-decl nil prelude_A4 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lemma_A4 formula-decl nil appendix nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (cauchy_power_lt1_snz_odd_TCC1 0
  (cauchy_power_lt1_snz_odd_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_snz_odd subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_snz_odd_TCC2 0
  (cauchy_power_lt1_snz_odd_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((odd? const-decl "bool" integers nil) (ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (cauchy_power_lt1_snz_odd subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_snz_odd 0
  (cauchy_power_lt1_snz_odd-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_odd" ("n" "pn!1"))
      (("" (replace -2 -1)
        ((""
          (lemma "lemma_A2_generalized"
           ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
          ((""
            (lemma "lemma_A4"
             ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
              "2^-(p!1+1)"))
            ((""
              (lemma "lemma_A4"
               ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
                "2^-(p!1+1)"))
              ((""
                (lemma "div_mult_pos_lt1"
                 ("py" "e1!1" "x" "rx!1 + 1" "z" "sx!1"))
                (("" (assert)
                  (("" (flatten)
                    (("" (replace -15)
                      (("" (rewrite "expt_0pn")
                        (("" (lemma "trich_lt" ("x" "rx!1" "y" "0"))
                          (("" (split -1)
                            (("1" (inst-cp - "rx!1*e1!1")
                              (("1" (replace -14)
                                (("1"
                                  (lemma "posreal_exp"
                                   ("x" "-(rx!1 * e1!1)" "i" "pn!1"))
                                  (("1"
                                    (lemma "both_sides_times_pos_lt1"
                                     ("x" "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)" "y"
                                      "0" "pz" "2^p!1"))
                                    (("1" (assert)
                                      (("1"
                                        (lemma
                                         "expt_plus"
                                         ("n0x"
                                          "2"
                                          "i"
                                          "-(1 + p!1)"
                                          "j"
                                          "p!1"))
                                        (("1"
                                          (expand "^" -1 1)
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1"
                                                (replace -1 -2 rl)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("x"
                                                    "-((-(rx!1 * e1!1)) ^ pn!1)"
                                                    "y"
                                                    "0"
                                                    "pz"
                                                    "2^p!1"))
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("x"
                                                      "0"
                                                      "y"
                                                      "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                                      "pz"
                                                      "2^p!1"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst-cp - "sx!1")
                                                        (("1"
                                                          (inst-cp
                                                           -
                                                           "sx!1-e1!1")
                                                          (("1"
                                                            (lemma
                                                             "both_sides_expt_pos_lt"
                                                             ("pm"
                                                              "pn!1"
                                                              "px"
                                                              "-sx!1"
                                                              "py"
                                                              "-(sx!1 - e1!1)"))
                                                            (("1"
                                                              (name-replace
                                                               "AA"
                                                               "(-sx!1)^pn!1")
                                                              (("1"
                                                                (name-replace
                                                                 "B"
                                                                 "(-(rx!1*e1!1))^pn!1")
                                                                (("1"
                                                                  (lemma
                                                                   "both_sides_expt_pos_lt"
                                                                   ("pm"
                                                                    "pn!1"
                                                                    "px"
                                                                    "-e1!1 * rx!1"
                                                                    "py"
                                                                    "-(sx!1 - e1!1)"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       -1)
                                                                      (("1"
                                                                        (reveal
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "both_sides_times_pos_lt1"
                                                                             ("x"
                                                                              "-AA - 2 ^ -(1 + p!1)"
                                                                              "y"
                                                                              "-B"
                                                                              "pz"
                                                                              "2^p!1"))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "negreal_times_negreal_is_posreal"
                                                                     ("nx"
                                                                      "-e1!1"
                                                                      "ny"
                                                                      "rx!1"))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "both_sides_times_neg_gt2"
                                     ("nz" "-1" "x" "rx!1*e1!1" "y" "0"))
                                    (("2"
                                      (lemma
                                       "neg_times_lt"
                                       ("x" "rx!1" "y" "e1!1"))
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "neg_times_lt" ("x" "rx!1" "y" "e1!1"))
                                (("2" (assert) nil nil)) nil))
                              nil)
                             ("2" (assert) nil nil) ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_odd formula-decl nil prelude_A4 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trich_lt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil) (rx!1 skolem-const-decl "rat" power nil)
    (e1!1 skolem-const-decl "posreal" power nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (neg_times_lt formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (both_sides_times_neg_gt2 formula-decl nil real_props nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lemma_A4 formula-decl nil appendix nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (cauchy_power_lt1_snz_even_TCC1 0
  (cauchy_power_lt1_snz_even_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_snz_even subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_snz_even_TCC2 0
  (cauchy_power_lt1_snz_even_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil) (ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_snz_even subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_snz_even 0
  (cauchy_power_lt1_snz_even-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_even" ("n" "pn!1"))
      (("" (replace -2 -1)
        ((""
          (lemma "lemma_A2_generalized"
           ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
          ((""
            (lemma "lemma_A4"
             ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
              "2^-(p!1+1)"))
            ((""
              (lemma "div_mult_pos_lt2"
               ("py" "e1!1" "x" "rx!1 - 1" "z" "sx!1"))
              ((""
                (lemma "div_mult_pos_lt1"
                 ("py" "e1!1" "x" "rx!1 + 1" "z" "sx!1"))
                (("" (assert)
                  (("" (flatten)
                    (("" (hide (-10 -13 -14 -15 -16))
                      (("" (replace -11)
                        (("" (rewrite "expt_0pn")
                          (("" (lemma "trich_lt" ("x" "rx!1" "y" "0"))
                            (("" (split -1)
                              (("1"
                                (lemma "both_sides_expt_pos_lt"
                                 ("pm" "pn!1" "px" "-(rx!1 * e1!1)" "py"
                                  "-(sx!1 - e1!1)"))
                                (("1"
                                  (lemma "posreal_exp"
                                   ("x" "-(rx!1 * e1!1)" "i" "pn!1"))
                                  (("1" (assert)
                                    (("1" (inst-cp - "rx!1 * e1!1")
                                      (("1"
                                        (inst-cp - "sx!1 - e1!1")
                                        (("1"
                                          (replace -13)
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "0"
                                              "y"
                                              "(-(rx!1 * e1!1)) ^ pn!1"
                                              "pz"
                                              "2^p!1"))
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("y"
                                                "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                                "x"
                                                "(-(rx!1 * e1!1)) ^ pn!1"
                                                "pz"
                                                "2^p!1"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "expt_plus"
                                                   ("n0x"
                                                    "2"
                                                    "i"
                                                    "-(1 + p!1)"
                                                    "j"
                                                    "p!1"))
                                                  (("1"
                                                    (expand "^" -1 1)
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (replace -1 -2 rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "both_sides_times_pos_lt1"
                                                               ("x"
                                                                "sx!1 ^ pn!1"
                                                                "y"
                                                                "2 ^ -(1 + p!1)"
                                                                "pz"
                                                                "2^p!1"))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil) ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_even formula-decl nil prelude_A4 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt def-decl "real" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (trich_lt formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lemma_A4 formula-decl nil appendix nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (cauchy_power_lt1_sn_odd_TCC1 0
  (cauchy_power_lt1_sn_odd_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_sn_odd subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_sn_odd_TCC2 0
  (cauchy_power_lt1_sn_odd_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((odd? const-decl "bool" integers nil) (ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (cauchy_power_lt1_sn_odd subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_sn_odd 0
  (cauchy_power_lt1_sn_odd-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_odd" ("n" "pn!1"))
      ((""
        (lemma "lemma_A2_generalized"
         ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
        ((""
          (lemma "lemma_A4"
           ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2" "2^-(p!1+1)"))
          ((""
            (lemma "div_mult_pos_lt2" ("py" "e1!1" "x" "rx!1 - 1" "z" "sx!1"))
            ((""
              (lemma "div_mult_pos_lt1"
               ("py" "e1!1" "x" "rx!1 + 1" "z" "sx!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma "trich_lt" ("x" "rx!1" "y" "0"))
                    ((""
                      (lemma "expt_plus"
                       ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                      ((""
                        (lemma "expt_times"
                         ("n0x" "2" "i" "-(3 + floor(log2(pn!1)) + p!1)" "j"
                          "pn!1"))
                        ((""
                          (lemma "lt_times_lt_pos1"
                           ("px" "1" "y" "pn!1" "nnz" "1 + p!1" "w"
                            "3 + floor(log2(pn!1)) + p!1"))
                          ((""
                            (lemma "both_sides_expt_gt1_lt"
                             ("gt1x" "2" "i"
                              "-(3 + floor(log2(pn!1)) + p!1) * pn!1" "j"
                              "-(1 + p!1)"))
                            (("" (case "floor(log2(pn!1)) >= 0")
                              (("1" (assert)
                                (("1" (assert)
                                  (("1" (split -6)
                                    (("1"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("x" "rx!1" "y" "0" "pz" "e1!1"))
                                      (("1"
                                        (inst-cp - "rx!1 * e1!1")
                                        (("1"
                                          (inst-cp - "sx!1 - e1!1")
                                          (("1"
                                            (lemma
                                             "both_sides_expt_pos_lt"
                                             ("pm"
                                              "pn!1"
                                              "px"
                                              "-(rx!1 * e1!1)"
                                              "py"
                                              "-(sx!1 - e1!1)"))
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("x"
                                                "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"
                                                "y"
                                                "-((-(rx!1 * e1!1)) ^ pn!1)"
                                                "pz"
                                                "2^p!1"))
                                              (("1"
                                                (lemma
                                                 "both_sides_expt_pos_lt"
                                                 ("pm"
                                                  "pn!1"
                                                  "px"
                                                  "-sx!1"
                                                  "py"
                                                  "e1!1"))
                                                (("1"
                                                  (inst - "sx!1")
                                                  (("1"
                                                    (lemma
                                                     "posreal_exp"
                                                     ("x"
                                                      "-(e1!1 * rx!1)"
                                                      "i"
                                                      "pn!1"))
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("x"
                                                        "-((-(rx!1 * e1!1)) ^ pn!1)"
                                                        "y"
                                                        "2 ^ -(1 + p!1) + -((-sx!1) ^ pn!1)"
                                                        "pz"
                                                        "2^p!1"))
                                                      (("1"
                                                        (replace -27 * rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -12
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (simplify -1)
                                                              (("1"
                                                                (case-replace
                                                                 "2 ^ (-(1 + p!1) + p!1) = 1/2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-5 1 -25 -6))
                                                      (("2"
                                                        (lemma
                                                         "expt_pos"
                                                         ("px"
                                                          "2"
                                                          "i"
                                                          "-(3 + floor(log2(pn!1)) + p!1)"))
                                                        (("2"
                                                          (lemma
                                                           "posreal_times_posreal_is_posreal"
                                                           ("px"
                                                            "-rx!1"
                                                            "py"
                                                            "e1!1"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (-1 1))
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 -2))
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (rewrite "expt_0pn")
                                        (("2"
                                          (lemma
                                           "both_sides_expt_pos_lt"
                                           ("pm"
                                            "pn!1"
                                            "px"
                                            "-sx!1"
                                            "py"
                                            "e1!1"))
                                          (("2"
                                            (inst-cp - "sx!1")
                                            (("2"
                                              (lemma
                                               "posreal_exp"
                                               ("x" "-sx!1" "i" "pn!1"))
                                              (("2"
                                                (lemma
                                                 "both_sides_times_pos_lt1"
                                                 ("x"
                                                  "(-sx!1) ^ pn!1"
                                                  "y"
                                                  "2 ^ -(1 + p!1)"
                                                  "pz"
                                                  "2^p!1"))
                                                (("2"
                                                  (lemma
                                                   "both_sides_times_neg_lt1"
                                                   ("nz"
                                                    "-1"
                                                    "y"
                                                    "(-sx!1) ^ pn!1 * 2 ^ p!1"
                                                    "x"
                                                    "1/2"))
                                                  (("2"
                                                    (lemma
                                                     "both_sides_times_neg_lt1"
                                                     ("nz"
                                                      "-(2 ^ p!1)"
                                                      "x"
                                                      "(-sx!1) ^ pn!1"
                                                      "y"
                                                      "0"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -25 * rl)
                                                        (("2"
                                                          (replace -10)
                                                          (("2"
                                                            (case-replace
                                                             "2 ^ (-(1 + p!1) + p!1)=1/2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("x" "0" "y" "rx!1" "pz" "e1!1"))
                                      (("3"
                                        (lemma
                                         "both_sides_expt_pos_lt"
                                         ("pm"
                                          "pn!1"
                                          "px"
                                          "rx!1 * e1!1"
                                          "py"
                                          "e1!1 + sx!1"))
                                        (("1"
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("x"
                                            "(rx!1 * e1!1) ^ pn!1"
                                            "y"
                                            "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                            "pz"
                                            "2^p!1"))
                                          (("1"
                                            (inst-cp - "sx!1")
                                            (("1"
                                              (lemma
                                               "posreal_exp"
                                               ("x" "-sx!1" "i" "pn!1"))
                                              (("1"
                                                (lemma
                                                 "posreal_exp"
                                                 ("x"
                                                  "rx!1 * e1!1"
                                                  "i"
                                                  "pn!1"))
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_neg_lt1"
                                                   ("nz"
                                                    "-(2 ^ p!1)"
                                                    "y"
                                                    "0"
                                                    "x"
                                                    "(-sx!1) ^ pn!1"))
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("x"
                                                      "0"
                                                      "y"
                                                      "(rx!1 * e1!1) ^ pn!1"
                                                      "pz"
                                                      "2^p!1"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case-replace
                                                         "2 ^ (-(1 + p!1) + p!1) = 1/2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (lemma "log2_strict_increasing")
                                  (("2" (expand "strict_increasing?")
                                    (("2" (case-replace "pn!1=1")
                                      (("1"
                                        (expand "log2")
                                        (("1"
                                          (rewrite "ln_1")
                                          (("1"
                                            (rewrite "floor_int")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case-replace "pn!1=2")
                                        (("1"
                                          (expand "log2" 2)
                                          (("1"
                                            (rewrite "div_simp")
                                            (("1"
                                              (rewrite "floor_int")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst - "2" "pn!1")
                                          (("2"
                                            (expand "log2" -1 1)
                                            (("2"
                                              (rewrite "div_simp")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_odd formula-decl nil prelude_A4 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (e1!1 skolem-const-decl "posreal" power nil)
    (rx!1 skolem-const-decl "rat" power nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (floor_int formula-decl nil floor_ceil nil)
    (ln const-decl "real" ln_exp lnexp)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (log2 const-decl "real" prelude_aux nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (trich_lt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil))
 (cauchy_power_lt1_sn_even_TCC1 0
  (cauchy_power_lt1_sn_even_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_sn_even subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_sn_even_TCC2 0
  (cauchy_power_lt1_sn_even_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil) (ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_sn_even subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_sn_even 0
  (cauchy_power_lt1_sn_even-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_even" ("n" "pn!1"))
      ((""
        (lemma "lemma_A2_generalized"
         ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
        ((""
          (lemma "lemma_A4"
           ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2" "2^-(p!1+1)"))
          ((""
            (lemma "div_mult_pos_lt2" ("py" "e1!1" "x" "rx!1 - 1" "z" "sx!1"))
            ((""
              (lemma "div_mult_pos_lt1"
               ("py" "e1!1" "x" "rx!1 + 1" "z" "sx!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (lemma "trich_lt" ("x" "rx!1" "y" "0"))
                    (("" (split -1)
                      (("1"
                        (lemma "both_sides_times_pos_lt1"
                         ("x" "rx!1" "y" "0" "pz" "e1!1"))
                        (("1" (inst-cp - "rx!1 * e1!1")
                          (("1" (inst-cp - "sx!1 - e1!1")
                            (("1"
                              (lemma "posreal_exp"
                               ("x" "-(rx!1 * e1!1)" "i" "pn!1"))
                              (("1"
                                (lemma "posreal_exp"
                                 ("x" "-(sx!1)" "i" "pn!1"))
                                (("1" (inst - "sx!1")
                                  (("1"
                                    (lemma "both_sides_expt_pos_lt"
                                     ("pm" "pn!1" "px" "-(rx!1 * e1!1)" "py"
                                      "-(sx!1 - e1!1)"))
                                    (("1"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("x"
                                        "(-(rx!1 * e1!1)) ^ pn!1"
                                        "y"
                                        "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                        "pz"
                                        "2^p!1"))
                                      (("1"
                                        (lemma
                                         "expt_plus"
                                         ("n0x"
                                          "2"
                                          "i"
                                          "-(1 + p!1)"
                                          "j"
                                          "p!1"))
                                        (("1"
                                          (case-replace
                                           "2 ^ (-(1 + p!1) + p!1) = 1/2")
                                          (("1"
                                            (lemma
                                             "both_sides_expt_pos_lt"
                                             ("pm"
                                              "pn!1"
                                              "px"
                                              "-sx!1"
                                              "py"
                                              "e1!1"))
                                            (("1"
                                              (lemma
                                               "expt_times"
                                               ("n0x"
                                                "2"
                                                "i"
                                                "-(3 + floor(log2(pn!1)) + p!1)"
                                                "j"
                                                "pn!1"))
                                              (("1"
                                                (lemma
                                                 "lt_times_lt_pos1"
                                                 ("px"
                                                  "1"
                                                  "y"
                                                  "pn!1"
                                                  "nnz"
                                                  "1+p!1"
                                                  "w"
                                                  "3 + floor(log2(pn!1)) + p!1"))
                                                (("1"
                                                  (lemma
                                                   "both_sides_expt_gt1_lt"
                                                   ("gt1x"
                                                    "2"
                                                    "i"
                                                    "-(3 + floor(log2(pn!1)) + p!1) * pn!1"
                                                    "j"
                                                    "-(1 + p!1)"))
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("x"
                                                      "(-sx!1) ^ pn!1"
                                                      "y"
                                                      "2 ^ -(1 + p!1)"
                                                      "pz"
                                                      "2^p!1"))
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("x"
                                                        "0"
                                                        "y"
                                                        "(-(rx!1 * e1!1)) ^ pn!1"
                                                        "pz"
                                                        "2^p!1"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "floor(log2(pn!1))>=0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (case-replace
                                                                   "pn!1=1")
                                                                  (("1"
                                                                    (expand
                                                                     "log2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "ln_1")
                                                                      (("1"
                                                                        (rewrite
                                                                         "floor_int")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case-replace
                                                                     "pn!1=2")
                                                                    (("1"
                                                                      (expand
                                                                       "log2")
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_simp")
                                                                        (("1"
                                                                          (rewrite
                                                                           "floor_int")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "log2_strict_increasing")
                                                                      (("2"
                                                                        (expand
                                                                         "strict_increasing?")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "2"
                                                                           "pn!1")
                                                                          (("2"
                                                                            (expand
                                                                             "log2"
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (hide-all-but (-1 1))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1 -2))
                            (("2" (assert) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (rewrite "expt_0pn")
                          (("2"
                            (lemma "posreal_exp"
                             ("x" "e1!1 + sx!1" "i" "pn!1"))
                            (("2"
                              (lemma "both_sides_times_pos_lt1"
                               ("x" "0" "y" "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                "pz" "2^p!1"))
                              (("2"
                                (lemma "expt_plus"
                                 ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                                (("2" (inst-cp - "sx!1")
                                  (("2"
                                    (lemma "both_sides_expt_pos_lt"
                                     ("pm" "pn!1" "px" "-sx!1" "py" "e1!1"))
                                    (("2"
                                      (lemma
                                       "expt_times"
                                       ("n0x"
                                        "2"
                                        "i"
                                        "-(3 + floor(log2(pn!1)) + p!1)"
                                        "j"
                                        "pn!1"))
                                      (("2"
                                        (case-replace
                                         "2 ^ (-(1 + p!1) + p!1) = 1/2")
                                        (("1"
                                          (lemma
                                           "lt_times_lt_pos1"
                                           ("px"
                                            "1"
                                            "y"
                                            "pn!1"
                                            "nnz"
                                            "1+p!1"
                                            "w"
                                            "3 + floor(log2(pn!1)) + p!1"))
                                          (("1"
                                            (lemma
                                             "both_sides_expt_gt1_lt"
                                             ("gt1x"
                                              "2"
                                              "i"
                                              "-(3 + floor(log2(pn!1)) + p!1) * pn!1"
                                              "j"
                                              "-(1 + p!1)"))
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("x"
                                                "(-sx!1) ^ pn!1"
                                                "y"
                                                "2 ^ -(1 + p!1)"
                                                "pz"
                                                "2^p!1"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -21 * rl)
                                                    (("1"
                                                      (case
                                                       "floor(log2(pn!1))>=0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (case-replace
                                                           "pn!1=1")
                                                          (("1"
                                                            (expand "log2")
                                                            (("1"
                                                              (rewrite "ln_1")
                                                              (("1"
                                                                (rewrite
                                                                 "floor_int")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "pn!1=2")
                                                            (("1"
                                                              (expand "log2")
                                                              (("1"
                                                                (rewrite
                                                                 "div_simp")
                                                                (("1"
                                                                  (rewrite
                                                                   "floor_int")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "log2_strict_increasing")
                                                              (("2"
                                                                (expand
                                                                 "strict_increasing?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "2"
                                                                   "pn!1")
                                                                  (("2"
                                                                    (expand
                                                                     "log2"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (case "2 ^ (-(1 + p!1) + p!1) = 1 / 2")
                        (("1" (case "floor(log2(pn!1))>=0")
                          (("1"
                            (lemma "both_sides_expt_pos_lt"
                             ("pm" "pn!1" "px" "e1!1 * rx!1" "py"
                              "e1!1 + sx!1"))
                            (("1"
                              (lemma "expt_plus"
                               ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                              (("1"
                                (lemma "both_sides_times_pos_lt1"
                                 ("x" "(rx!1 * e1!1) ^ pn!1" "y"
                                  "2 ^ -(1 + p!1) + sx!1 ^ pn!1" "pz"
                                  "2^p!1"))
                                (("1" (inst-cp - "sx!1")
                                  (("1"
                                    (lemma "posreal_exp"
                                     ("x" "rx!1 * e1!1" "i" "pn!1"))
                                    (("1"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("x"
                                        "0"
                                        "y"
                                        "(rx!1 * e1!1) ^ pn!1"
                                        "pz"
                                        "2 ^ p!1"))
                                      (("1"
                                        (lemma
                                         "expt_times"
                                         ("n0x"
                                          "2"
                                          "i"
                                          "-(3 + floor(log2(pn!1)) + p!1)"
                                          "j"
                                          "pn!1"))
                                        (("1"
                                          (lemma
                                           "lt_times_lt_pos1"
                                           ("px"
                                            "1"
                                            "y"
                                            "pn!1"
                                            "nnz"
                                            "1+p!1"
                                            "w"
                                            "3 + floor(log2(pn!1)) + p!1"))
                                          (("1"
                                            (lemma
                                             "both_sides_expt_gt1_lt"
                                             ("gt1x"
                                              "2"
                                              "i"
                                              "-(3 + floor(log2(pn!1)) + p!1) * pn!1"
                                              "j"
                                              "-(1 + p!1)"))
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("x"
                                                "(-sx!1) ^ pn!1"
                                                "y"
                                                "2 ^ -(1 + p!1)"
                                                "pz"
                                                "2^p!1"))
                                              (("1"
                                                (lemma
                                                 "both_sides_expt_pos_lt"
                                                 ("pm"
                                                  "pn!1"
                                                  "px"
                                                  "-sx!1"
                                                  "py"
                                                  "e1!1"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (lemma
                                         "both_sides_times_pos_lt1"
                                         ("x" "0" "y" "rx!1" "pz" "e1!1"))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "both_sides_times_pos_lt1"
                               ("x" "0" "y" "rx!1" "pz" "e1!1"))
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (case-replace "pn!1=1")
                              (("1" (expand "log2")
                                (("1" (rewrite "ln_1")
                                  (("1" (rewrite "floor_int")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (case-replace "pn!1=2")
                                (("1" (expand "log2")
                                  (("1" (rewrite "div_simp")
                                    (("1" (rewrite "floor_int")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "log2_strict_increasing")
                                  (("2" (expand "strict_increasing?")
                                    (("2" (inst - "2" "pn!1")
                                      (("2"
                                        (expand "log2" -1 1)
                                        (("2"
                                          (rewrite "div_simp")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_even formula-decl nil prelude_A4 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil) (rx!1 skolem-const-decl "rat" power nil)
    (e1!1 skolem-const-decl "posreal" power nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (expt_times formula-decl nil exponentiation nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (log2 const-decl "real" prelude_aux nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (floor_int formula-decl nil floor_ceil nil)
    (ln const-decl "real" ln_exp lnexp)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (trich_lt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil))
 (cauchy_power_lt1_z_TCC1 0
  (cauchy_power_lt1_z_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_z subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_z_TCC2 0
  (cauchy_power_lt1_z_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_z subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_z 0
  (cauchy_power_lt1_z-1 nil 3250077324
   ("" (skosimp*)
    ((""
      (lemma "lemma_A2_generalized"
       ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
      ((""
        (lemma "lemma_A4"
         ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2" "2^-(p!1+1)"))
        (("" (assert)
          (("" (flatten)
            (("" (hide -9)
              (("" (replace -7)
                (("" (rewrite "expt_0pn")
                  ((""
                    (lemma "div_mult_pos_lt1"
                     ("py" "e1!1" "z" "0" "x" "rx!1+1"))
                    ((""
                      (lemma "div_mult_pos_lt2"
                       ("py" "e1!1" "z" "0" "x" "rx!1-1"))
                      (("" (assert)
                        (("" (hide (-11 -12 -9))
                          (("" (lemma "trich_lt" ("x" "rx!1" "y" "0"))
                            ((""
                              (lemma "expt_plus"
                               ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                              (("" (expand "^" -1 1)
                                (("" (expand "expt")
                                  (("" (expand "expt")
                                    (("" (split -2)
                                      (("1"
                                        (lemma
                                         "both_sides_times_pos_lt1"
                                         ("y" "0" "x" "rx!1" "pz" "e1!1"))
                                        (("1"
                                          (case "even?(pn!1)")
                                          (("1"
                                            (lemma
                                             "expt_neg_even"
                                             ("n" "pn!1"))
                                            (("1"
                                              (replace -2 -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("x"
                                                    "rx!1"
                                                    "y"
                                                    "0"
                                                    "pz"
                                                    "e1!1"))
                                                  (("1"
                                                    (inst - "rx!1 * e1!1")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (hide
                                                         (-2 -3 -1 -9 -11))
                                                        (("1"
                                                          (lemma
                                                           "posreal_exp"
                                                           ("x"
                                                            "-(rx!1 * e1!1)"
                                                            "i"
                                                            "pn!1"))
                                                          (("1"
                                                            (lemma
                                                             "both_sides_expt_pos_lt"
                                                             ("pm"
                                                              "pn!1"
                                                              "px"
                                                              "-(rx!1 * e1!1)"
                                                              "py"
                                                              "e1!1"))
                                                            (("1"
                                                              (lemma
                                                               "both_sides_times_pos_lt1"
                                                               ("x"
                                                                "(-(rx!1 * e1!1)) ^ pn!1"
                                                                "y"
                                                                "2 ^ -(1 + p!1)"
                                                                "pz"
                                                                "2^p!1"))
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_times_pos_lt1"
                                                                 ("y"
                                                                  "(-(rx!1 * e1!1)) ^ pn!1"
                                                                  "x"
                                                                  "0"
                                                                  "pz"
                                                                  "2^p!1"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "odd_even" 1)
                                            (("2"
                                              (lemma
                                               "expt_neg_odd"
                                               ("n" "pn!1"))
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("x"
                                                      "rx!1"
                                                      "y"
                                                      "0"
                                                      "pz"
                                                      "e1!1"))
                                                    (("2"
                                                      (inst-cp - "-e1!1")
                                                      (("2"
                                                        (inst - "rx!1 * e1!1")
                                                        (("2"
                                                          (lemma
                                                           "posreal_exp"
                                                           ("x"
                                                            "-(rx!1 * e1!1)"
                                                            "i"
                                                            "pn!1"))
                                                          (("2"
                                                            (replace -3)
                                                            (("2"
                                                              (name-replace
                                                               "AA"
                                                               "(-(rx!1 * e1!1)) ^ pn!1")
                                                              (("2"
                                                                (lemma
                                                                 "both_sides_expt_pos_lt"
                                                                 ("pm"
                                                                  "pn!1"
                                                                  "px"
                                                                  "-(e1!1 * rx!1)"
                                                                  "py"
                                                                  "e1!1"))
                                                                (("2"
                                                                  (reveal -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_times_neg_lt1"
                                                                         ("y"
                                                                          "AA"
                                                                          "x"
                                                                          "e1!1 ^ pn!1"
                                                                          "nz"
                                                                          "-1*2^p!1"))
                                                                        (("2"
                                                                          (lemma
                                                                           "both_sides_times_neg_lt1"
                                                                           ("x"
                                                                            "AA"
                                                                            "y"
                                                                            "0"
                                                                            "nz"
                                                                            "-1*2^p!1"))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "both_sides_times_neg_lt1"
                                                                               ("x"
                                                                                "2 ^ -(1 + p!1)"
                                                                                "y"
                                                                                "e1!1 ^ pn!1"
                                                                                "nz"
                                                                                "2 ^ p!1 * -1"))
                                                                              (("2"
                                                                                (simplify
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (rewrite "expt_0pn")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         "both_sides_expt_pos_lt"
                                         ("pm"
                                          "pn!1"
                                          "px"
                                          "e1!1 * rx!1"
                                          "py"
                                          "e1!1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "(rx!1 * e1!1) ^ pn!1"
                                              "y"
                                              "2 ^ -(1 + p!1)"
                                              "pz"
                                              "2^p!1"))
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("y"
                                                "(rx!1 * e1!1) ^ pn!1"
                                                "x"
                                                "-1 * 2 ^ -(1 + p!1)"
                                                "pz"
                                                "2^p!1"))
                                              (("1"
                                                (simplify -1)
                                                (("1"
                                                  (replace -5 (-1 -2) rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "posreal_exp"
                                                       ("x"
                                                        "rx!1 * e1!1"
                                                        "i"
                                                        "pn!1"))
                                                      (("1"
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("y"
                                                          "(rx!1 * e1!1) ^ pn!1"
                                                          "x"
                                                          "0"
                                                          "pz"
                                                          "2^p!1"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("x"
                                                          "0"
                                                          "y"
                                                          "rx!1"
                                                          "pz"
                                                          "e1!1"))
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("x" "0" "y" "rx!1" "pz" "e1!1"))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt def-decl "real" exponentiation nil)
    (even? const-decl "bool" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (expt_neg_even formula-decl nil prelude_A4 nil)
    (expt_neg_odd formula-decl nil prelude_A4 nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (odd_even formula-decl nil prelude_aux nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (trich_lt formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil))
   nil))
 (cauchy_power_lt1_sp_odd_TCC1 0
  (cauchy_power_lt1_sp_odd_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_sp_odd subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_sp_odd 0
  (cauchy_power_lt1_sp_odd-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_odd" ("n" "pn!1"))
      (("" (replace -2 -1)
        (("" (hide -2)
          ((""
            (lemma "lemma_A2_generalized"
             ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
            (("" (assert)
              (("" (flatten)
                ((""
                  (lemma "lemma_A4"
                   ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
                    "2^-(p!1+1)"))
                  (("" (assert)
                    (("" (flatten)
                      (("" (hide (-11))
                        (("" (inst - "sx!1 - e1!1")
                          (("" (replace -7)
                            ((""
                              (lemma "div_mult_pos_lt1"
                               ("py" "e1!1" "z" "sx!1" "x" "rx!1+1"))
                              ((""
                                (lemma "div_mult_pos_lt2"
                                 ("py" "e1!1" "z" "sx!1" "x" "rx!1-1"))
                                (("" (assert)
                                  (("" (hide (-9 -13 -14))
                                    (("" (reveal -4)
                                      ((""
                                        (lemma
                                         "trich_lt"
                                         ("x" "rx!1" "y" "0"))
                                        ((""
                                          (split -1)
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x" "rx!1" "y" "0" "pz" "e1!1"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "rx!1 * e1!1")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (lemma
                                                     "expt_plus"
                                                     ("i"
                                                      "-(1 + p!1)"
                                                      "j"
                                                      "p!1"
                                                      "n0x"
                                                      "2"))
                                                    (("1"
                                                      (expand "^" -1 1)
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (hide (-4 -15))
                                                            (("1"
                                                              (lemma
                                                               "both_sides_expt_pos_lt"
                                                               ("pm"
                                                                "pn!1"
                                                                "px"
                                                                "-(rx!1 * e1!1)"
                                                                "py"
                                                                "-(sx!1 - e1!1)"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "both_sides_times_pos_lt1"
                                                                   ("x"
                                                                    "-((-(rx!1 * e1!1)) ^ pn!1)"
                                                                    "pz"
                                                                    "2^p!1"
                                                                    "y"
                                                                    "0"))
                                                                  (("1"
                                                                    (lemma
                                                                     "posreal_exp"
                                                                     ("x"
                                                                      "-(sx!1 - e1!1)"
                                                                      "i"
                                                                      "pn!1"))
                                                                    (("1"
                                                                      (lemma
                                                                       "both_sides_times_pos_lt1"
                                                                       ("x"
                                                                        "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"
                                                                        "y"
                                                                        "0"
                                                                        "pz"
                                                                        "2^p!1"))
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_times_pos_lt1"
                                                                         ("y"
                                                                          "sx!1 ^ pn!1 + 2 ^ -(1 + p!1)"
                                                                          "x"
                                                                          "0"
                                                                          "pz"
                                                                          "2^p!1"))
                                                                        (("1"
                                                                          (simplify
                                                                           (-1
                                                                            -2))
                                                                          (("1"
                                                                            (replace
                                                                             -6
                                                                             (-1
                                                                              -2)
                                                                             rl)
                                                                            (("1"
                                                                              (lemma
                                                                               "posreal_exp"
                                                                               ("x"
                                                                                "e1!1 + sx!1"
                                                                                "i"
                                                                                "pn!1"))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "posreal_exp"
                                                                                   ("x"
                                                                                    "-(rx!1 * e1!1)"
                                                                                    "i"
                                                                                    "pn!1"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "AA"
                                                                                         "(-(rx!1 * e1!1)) ^ pn!1")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "B"
                                                                                           "sx!1 ^ pn!1")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "both_sides_times_neg_lt1"
                                                                                             ("nz"
                                                                                              "2^p!1 * -1"
                                                                                              "y"
                                                                                              "AA"
                                                                                              "x"
                                                                                              "(-(sx!1 - e1!1)) ^ pn!1"))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "both_sides_times_pos_lt1"
                                                                                               ("pz"
                                                                                                "2^p!1"
                                                                                                "x"
                                                                                                "B - 2 ^ -(1 + p!1)"
                                                                                                "y"
                                                                                                "-AA"))
                                                                                              (("1"
                                                                                                (simplify
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -10
                                                                                                   -1
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite "expt_0pn")
                                              (("2"
                                                (lemma
                                                 "posreal_exp"
                                                 ("x"
                                                  "-(sx!1 - e1!1)"
                                                  "i"
                                                  "pn!1"))
                                                (("2"
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("x"
                                                    "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"
                                                    "y"
                                                    "0"
                                                    "pz"
                                                    "2^p!1"))
                                                  (("2"
                                                    (lemma
                                                     "posreal_exp"
                                                     ("x" "sx!1" "i" "pn!1"))
                                                    (("2"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("x"
                                                        "0"
                                                        "y"
                                                        "sx!1 ^ pn!1"
                                                        "pz"
                                                        "2^p!1"))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "both_sides_times_neg_lt1"
                                                           ("y"
                                                            "0"
                                                            "x"
                                                            "(-(sx!1 - e1!1)) ^ pn!1"
                                                            "nz"
                                                            "-1"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "expt_plus"
                                                               ("n0x"
                                                                "2"
                                                                "i"
                                                                "-(1 + p!1)"
                                                                "j"
                                                                "p!1"))
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "expt")
                                                                  (("2"
                                                                    (expand
                                                                     "expt")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -5
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "both_sides_expt_pos_lt"
                                             ("pm"
                                              "pn!1"
                                              "px"
                                              "e1!1 * rx!1"
                                              "py"
                                              "e1!1 + sx!1"))
                                            (("1"
                                              (lemma
                                               "posreal_exp"
                                               ("x" "e1!1 * rx!1" "i" "pn!1"))
                                              (("1"
                                                (lemma
                                                 "expt_plus"
                                                 ("n0x"
                                                  "2"
                                                  "i"
                                                  "-(1 + p!1)"
                                                  "j"
                                                  "p!1"))
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("x"
                                                          "(rx!1 * e1!1) ^ pn!1"
                                                          "pz"
                                                          "2 ^ p!1"
                                                          "y"
                                                          "2 ^ -(1 + p!1) + sx!1 ^ pn!1"))
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("x"
                                                            "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"
                                                            "y"
                                                            "0"
                                                            "pz"
                                                            "2^p!1"))
                                                          (("1"
                                                            (simplify (-1 -2))
                                                            (("1"
                                                              (replace
                                                               -3
                                                               (-1 -2)
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "posreal_exp"
                                                                 ("x"
                                                                  "-(sx!1 - e1!1)"
                                                                  "i"
                                                                  "pn!1"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_times_pos_lt1"
                                                                         ("y"
                                                                          "(rx!1 * e1!1) ^ pn!1"
                                                                          "x"
                                                                          "0"
                                                                          "pz"
                                                                          "2^p!1"))
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("y"
                                                "rx!1"
                                                "x"
                                                "0"
                                                "pz"
                                                "e1!1"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_odd formula-decl nil prelude_A4 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (trich_lt formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil))
 (cauchy_power_lt1_sp_even_TCC1 0
  (cauchy_power_lt1_sp_even_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_sp_even subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_sp_even 0
  (cauchy_power_lt1_sp_even-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "expt_neg_even" ("n" "pn!1"))
      (("" (replace -2 -1)
        (("" (hide -2)
          ((""
            (lemma "lemma_A2_generalized"
             ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
            ((""
              (lemma "lemma_A4"
               ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
                "2^-(p!1+1)"))
              ((""
                (lemma "div_mult_pos_lt1"
                 ("py" "e1!1" "z" "sx!1" "x" "rx!1+1"))
                ((""
                  (lemma "div_mult_pos_lt2"
                   ("py" "e1!1" "z" "sx!1" "x" "rx!1-1"))
                  (("" (case "floor(log2(pn!1))>=0")
                    (("1" (case-replace "2 ^ (-(1 + p!1) + p!1) = 1/2")
                      (("1" (lemma "trich_lt" ("x" "rx!1" "y" "0"))
                        (("1" (split -1)
                          (("1"
                            (lemma "both_sides_times_pos_lt1"
                             ("x" "rx!1" "y" "0" "pz" "e1!1"))
                            (("1" (inst-cp - "rx!1 * e1!1")
                              (("1" (inst-cp - "sx!1 -e1!1")
                                (("1"
                                  (lemma "both_sides_expt_pos_lt"
                                   ("pm" "pn!1" "px" "-(rx!1 * e1!1)" "py"
                                    "-(sx!1 - e1!1)"))
                                  (("1"
                                    (lemma "both_sides_times_pos_lt1"
                                     ("x" "(-(rx!1 * e1!1)) ^ pn!1" "y"
                                      "2 ^ -(1 + p!1) + sx!1 ^ pn!1" "pz"
                                      "2^p!1"))
                                    (("1"
                                      (lemma
                                       "expt_plus"
                                       ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                                      (("1"
                                        (lemma
                                         "both_sides_expt_pos_lt"
                                         ("pm"
                                          "pn!1"
                                          "px"
                                          "sx!1"
                                          "py"
                                          "e1!1"))
                                        (("1"
                                          (lemma
                                           "expt_times"
                                           ("n0x"
                                            "2"
                                            "i"
                                            "-(3 + floor(log2(pn!1)) + p!1)"
                                            "j"
                                            "pn!1"))
                                          (("1"
                                            (lemma
                                             "lt_times_lt_pos1"
                                             ("px"
                                              "1"
                                              "y"
                                              "pn!1"
                                              "nnz"
                                              "1+p!1"
                                              "w"
                                              "3 + floor(log2(pn!1)) + p!1"))
                                            (("1"
                                              (lemma
                                               "both_sides_expt_gt1_lt"
                                               ("gt1x"
                                                "2"
                                                "i"
                                                "-(3 + floor(log2(pn!1)) + p!1) * pn!1"
                                                "j"
                                                "-(1+p!1)"))
                                              (("1"
                                                (lemma
                                                 "both_sides_times_pos_lt1"
                                                 ("x"
                                                  "sx!1 ^ pn!1"
                                                  "y"
                                                  "2 ^ -(1 + p!1)"
                                                  "pz"
                                                  "2^p!1"))
                                                (("1"
                                                  (lemma
                                                   "posreal_exp"
                                                   ("x"
                                                    "-(rx!1 * e1!1)"
                                                    "i"
                                                    "pn!1"))
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("x"
                                                      "0"
                                                      "y"
                                                      "(-(rx!1 * e1!1)) ^ pn!1"
                                                      "pz"
                                                      "2^p!1"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten (-17 -18))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert)
                                    (("3" (hide-all-but (-1 1))
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (hide-all-but (-1 1 -2))
                                (("2" (assert) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "posreal_exp"
                             ("x" "e1!1 + sx!1" "i" "pn!1"))
                            (("1"
                              (lemma "both_sides_times_pos_lt1"
                               ("x" "0" "y" "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                "pz" "2^p!1"))
                              (("1"
                                (lemma "expt_plus"
                                 ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                                (("1"
                                  (lemma "both_sides_expt_pos_lt"
                                   ("pm" "pn!1" "px" "sx!1" "py" "e1!1"))
                                  (("1"
                                    (lemma "expt_times"
                                     ("n0x" "2" "i"
                                      "-(3 + floor(log2(pn!1)) + p!1)" "j"
                                      "pn!1"))
                                    (("1"
                                      (lemma
                                       "both_sides_expt_gt1_lt"
                                       ("gt1x"
                                        "2"
                                        "i"
                                        "-(3 + floor(log2(pn!1)) + p!1) * pn!1"
                                        "j"
                                        "-(1+p!1)"))
                                      (("1"
                                        (lemma
                                         "lt_times_lt_pos1"
                                         ("px"
                                          "1"
                                          "y"
                                          "pn!1"
                                          "nnz"
                                          "1 + p!1"
                                          "w"
                                          "3 + floor(log2(pn!1)) + p!1"))
                                        (("1"
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("x"
                                            "sx!1 ^ pn!1"
                                            "y"
                                            "2 ^ -(1 + p!1)"
                                            "pz"
                                            "2 ^ p!1"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten (-14 -15))
                                              (("1"
                                                (replace -10)
                                                (("1"
                                                  (replace -6 * rl)
                                                  (("1"
                                                    (replace -22 * rl)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (lemma
                                                         "expt_pos"
                                                         ("px"
                                                          "sx!1"
                                                          "i"
                                                          "pn!1"))
                                                        (("1"
                                                          (lemma
                                                           "expt_pos"
                                                           ("px"
                                                            "2"
                                                            "i"
                                                            "p!1"))
                                                          (("1"
                                                            (lemma
                                                             "posreal_times_posreal_is_posreal"
                                                             ("px"
                                                              "sx!1 ^ pn!1"
                                                              "py"
                                                              "2 ^ p!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "sx!1 - e1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -12)
                                                                    (("1"
                                                                      (case
                                                                       "Y!1=0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          -26))
                                                                        (("2"
                                                                          (expand
                                                                           "^")
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "round")
                                                                              (("2"
                                                                                (lemma
                                                                                 "floor_def"
                                                                                 ("x"
                                                                                  "1/2"))
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("3" (inst-cp - "sx!1 - e1!1")
                            (("1"
                              (lemma "both_sides_expt_pos_lt"
                               ("pm" "pn!1" "px" "e1!1 * rx!1" "py"
                                "e1!1 + sx!1"))
                              (("1"
                                (lemma "posreal_exp"
                                 ("x" "e1!1 * rx!1" "i" "pn!1"))
                                (("1"
                                  (lemma "both_sides_times_pos_lt1"
                                   ("x" "(rx!1 * e1!1) ^ pn!1" "pz" "2 ^ p!1"
                                    "y" "2 ^ -(1 + p!1) + sx!1 ^ pn!1"))
                                  (("1"
                                    (lemma "both_sides_expt_pos_lt"
                                     ("pm" "pn!1" "px" "sx!1" "py" "e1!1"))
                                    (("1"
                                      (lemma
                                       "expt_times"
                                       ("n0x"
                                        "2"
                                        "i"
                                        "-(3 + floor(log2(pn!1)) + p!1)"
                                        "j"
                                        "pn!1"))
                                      (("1"
                                        (lemma
                                         "both_sides_expt_gt1_lt"
                                         ("gt1x"
                                          "2"
                                          "i"
                                          "-(3 + floor(log2(pn!1)) + p!1) * pn!1"
                                          "j"
                                          "-(1 + p!1)"))
                                        (("1"
                                          (lemma
                                           "lt_times_lt_pos1"
                                           ("px"
                                            "1"
                                            "y"
                                            "pn!1"
                                            "nnz"
                                            "1 + p!1"
                                            "w"
                                            "3 + floor(log2(pn!1)) + p!1"))
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "sx!1 ^ pn!1"
                                              "y"
                                              "2 ^ -(1 + p!1)"
                                              "pz"
                                              "2^p!1"))
                                            (("1"
                                              (lemma
                                               "expt_plus"
                                               ("n0x"
                                                "2"
                                                "i"
                                                "-(1 + p!1)"
                                                "j"
                                                "p!1"))
                                              (("1"
                                                (lemma
                                                 "posreal_times_posreal_is_posreal"
                                                 ("px"
                                                  "(e1!1 * rx!1) ^ pn!1"
                                                  "py"
                                                  "2 ^ p!1"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten (-16 -17))
                                                    (("1"
                                                      (assert)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-10 1))
                                                  (("2"
                                                    (lemma
                                                     "expt_pos"
                                                     ("px"
                                                      "e1!1*rx!1"
                                                      "i"
                                                      "pn!1"))
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (assert)
                                (("3"
                                  (lemma "posreal_times_posreal_is_posreal"
                                   ("px" "e1!1" "py" "rx!1"))
                                  (("3" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (case-replace "pn!1=1")
                        (("1" (expand "log2")
                          (("1" (rewrite "ln_1")
                            (("1" (rewrite "floor_int")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case-replace "pn!1=2")
                          (("1" (expand "log2")
                            (("1" (rewrite "div_simp")
                              (("1" (rewrite "floor_int")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (lemma "log2_strict_increasing")
                            (("2" (expand "strict_increasing?")
                              (("2" (inst - "2" "pn!1")
                                (("2" (expand "log2" -1 1)
                                  (("2" (rewrite "div_simp")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_neg_even formula-decl nil prelude_A4 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (ln const-decl "real" ln_exp lnexp)
    (floor_int formula-decl nil floor_ceil nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rx!1 skolem-const-decl "rat" power nil)
    (e1!1 skolem-const-decl "posreal" power nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sx!1 skolem-const-decl "smallreal" power nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (round const-decl "int" prelude_aux nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_def formula-decl nil floor_ceil nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (expt_pos formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (trich_lt formula-decl nil real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (log2 const-decl "real" prelude_aux nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil))
 (cauchy_power_lt1_pz_TCC1 0
  (cauchy_power_lt1_pz_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_pz subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_pz 0
  (cauchy_power_lt1_pz-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "div_mult_pos_lt1" ("py" "e1!1" "x" "rx!1 + 1" "z" "sx!1"))
      (("" (lemma "div_mult_pos_lt2" ("py" "e1!1" "x" "rx!1 - 1" "z" "sx!1"))
        ((""
          (lemma "lemma_A2_generalized"
           ("r" "Y!1" "x" "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"))
          (("" (replace -6 -1 rl)
            (("" (simplify -1)
              (("" (assert)
                (("" (hide (-7 -8 -6))
                  (("" (flatten)
                    ((""
                      (lemma "lemma_A4"
                       ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
                        "2^-(p!1+1)"))
                      (("" (assert)
                        (("" (flatten)
                          (("" (name-replace "AA" "sx!1 - e1!1")
                            (("" (replace -9)
                              (("" (rewrite "expt_0pn")
                                ((""
                                  (lemma "expt_plus"
                                   ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                                  (("" (expand "^" -1 1)
                                    (("" (expand "expt")
                                      ((""
                                        (expand "expt")
                                        ((""
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("pz"
                                            "2 ^ p!1"
                                            "x"
                                            "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"
                                            "y"
                                            "0"))
                                          ((""
                                            (lemma
                                             "posreal_exp"
                                             ("x" "rx!1 * e1!1" "i" "pn!1"))
                                            ((""
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("x"
                                                "0"
                                                "y"
                                                "(rx!1 * e1!1) ^ pn!1"
                                                "pz"
                                                "2^p!1"))
                                              ((""
                                                (lemma
                                                 "both_sides_expt_pos_lt"
                                                 ("pm"
                                                  "pn!1"
                                                  "px"
                                                  "rx!1 * e1!1"
                                                  "py"
                                                  "e1!1 + sx!1"))
                                                ((""
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("x"
                                                    "(rx!1 * e1!1) ^ pn!1"
                                                    "y"
                                                    "2 ^ -(1 + p!1) + sx!1 ^ pn!1"
                                                    "pz"
                                                    "2^p!1"))
                                                  ((""
                                                    (simplify -1)
                                                    ((""
                                                      (replace -6 -1 rl)
                                                      ((""
                                                        (simplify -5)
                                                        ((""
                                                          (replace -6 -5 rl)
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt def-decl "real" exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (expt_0pn formula-decl nil prelude_A4 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (cauchy_power_lt1_p_TCC1 0
  (cauchy_power_lt1_p_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_p subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.rx, power.e1)) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_p 0
  (cauchy_power_lt1_p-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "div_mult_pos_lt1" ("py" "e1!1" "x" "rx!1+1" "z" "sx!1"))
      (("" (lemma "div_mult_pos_lt2" ("py" "e1!1" "x" "rx!1-1" "z" "sx!1"))
        (("" (assert)
          (("" (hide (-6 -7))
            ((""
              (lemma "lemma_A4"
               ("pn" "pn!1" "e1" "e1!1" "n" "p!1+1" "x" "sx!1" "e2"
                "2^-(p!1+1)"))
              (("" (assert)
                (("" (flatten)
                  ((""
                    (lemma "both_sides_expt_pos_lt"
                     ("pm" "pn!1" "px" "sx!1 - e1!1" "py" "e1!1 * rx!1"))
                    ((""
                      (lemma "both_sides_expt_pos_lt"
                       ("pm" "pn!1" "py" "sx!1 + e1!1" "px" "e1!1 * rx!1"))
                      ((""
                        (lemma "both_sides_times_pos_lt1"
                         ("pz" "2^p!1" "x" "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)" "y"
                          "(e1!1 + sx!1) ^ pn!1"))
                        ((""
                          (lemma "both_sides_times_pos_lt1"
                           ("pz" "2^p!1" "y" "sx!1 ^ pn!1 + 2 ^ -(1 + p!1)"
                            "x" "( sx!1-e1!1) ^ pn!1"))
                          ((""
                            (lemma "expt_plus"
                             ("n0x" "2" "i" "-(1 + p!1)" "j" "p!1"))
                            (("" (expand "^" -1 1)
                              (("" (expand "expt")
                                (("" (expand "expt")
                                  (("" (simplify (-2 -3))
                                    (("" (replace -1 (-2 -3) rl)
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma
                                           "lemma_A2_generalized"
                                           ("x"
                                            "(rx!1 * e1!1) ^ pn!1 * 2 ^ p!1"
                                            "r"
                                            "Y!1"))
                                          ((""
                                            (assert)
                                            ((""
                                              (flatten)
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma
                                                   "both_sides_expt_pos_lt"
                                                   ("pm"
                                                    "pn!1"
                                                    "px"
                                                    "e1!1 * rx!1"
                                                    "py"
                                                    "sx!1+e1!1"))
                                                  ((""
                                                    (lemma
                                                     "both_sides_expt_pos_lt"
                                                     ("pm"
                                                      "pn!1"
                                                      "py"
                                                      "e1!1 * rx!1"
                                                      "px"
                                                      "sx!1-e1!1"))
                                                    ((""
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "2^p!1"
                                                        "x"
                                                        "(sx!1 - e1!1) ^ pn!1"
                                                        "y"
                                                        "(e1!1 * rx!1) ^ pn!1"))
                                                      ((""
                                                        (lemma
                                                         "both_sides_times_pos_lt1"
                                                         ("pz"
                                                          "2^p!1"
                                                          "x"
                                                          "(e1!1 * rx!1) ^ pn!1"
                                                          "y"
                                                          "(sx!1 + e1!1) ^ pn!1"))
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (lemma
                                                             "both_sides_times_pos_lt1"
                                                             ("pz"
                                                              "2^p!1"
                                                              "x"
                                                              "(e1!1 + sx!1) ^ pn!1"
                                                              "y"
                                                              "2 ^ -(1 + p!1) + sx!1 ^ pn!1"))
                                                            ((""
                                                              (lemma
                                                               "both_sides_times_pos_lt1"
                                                               ("pz"
                                                                "2^p!1"
                                                                "y"
                                                                "(sx!1-e1!1) ^ pn!1"
                                                                "x"
                                                                "sx!1 ^ pn!1 - 2 ^ -(1 + p!1)"))
                                                              ((""
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lemma_A4 formula-decl nil appendix nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (lemma_A2_generalized formula-decl nil power nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (cauchy_power_lt1_main_generalized_TCC1 0
  (cauchy_power_lt1_main_generalized_TCC1-1 nil 3250077324
   ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_main_generalized subtype "power.pn"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.*(power.rx, exponentiation.^(2, (number_fields.-)((number_fields.+)((number_fields.+)(3, power.p), floor_ceil.floor(prelude_aux.log2(power.pn))))))) = 0), reals.>=(i, 0))}")))
 (cauchy_power_lt1_main_generalized_TCC2 0
  (cauchy_power_lt1_main_generalized_TCC2-1 nil 3250077324
   ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_main_generalized subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_main_generalized 0
  (cauchy_power_lt1_main_generalized-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "trich_lt" ("x" "sx!1" "y" "0"))
      (("" (name "e1!1" "2^-(p!1+floor(log2(pn!1))+3)")
        (("" (replace -1)
          ((""
            (lemma "expt_inverse"
             ("i" "-(p!1 + floor(log2(pn!1)) + 3)" "n0x" "2"))
            (("" (replace -2 -1)
              (("" (replace -1 (-5 -6))
                (("" (hide -1)
                  (("" (split -2)
                    (("1" (lemma "trich_lt" ("x" "sx!1+e1!1" "y" "0"))
                      (("1" (split -1)
                        (("1" (case "even?(pn!1)")
                          (("1"
                            (lemma "cauchy_power_lt1_n_even"
                             ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                              "Y" "Y!1" "rx" "rx!1"))
                            (("1" (assert) nil nil)) nil)
                           ("2"
                            (lemma "cauchy_power_lt1_n_odd"
                             ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                              "Y" "Y!1" "rx" "rx!1"))
                            (("2" (rewrite "odd_even" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "even?(pn!1)")
                          (("1"
                            (lemma "cauchy_power_lt1_snz_even"
                             ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                              "Y" "Y!1" "rx" "rx!1"))
                            (("1" (assert) nil nil)) nil)
                           ("2"
                            (lemma "cauchy_power_lt1_snz_odd"
                             ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                              "Y" "Y!1" "rx" "rx!1"))
                            (("2" (rewrite "odd_even" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (case "even?(pn!1)")
                          (("1"
                            (lemma "cauchy_power_lt1_sn_even"
                             ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                              "Y" "Y!1" "rx" "rx!1"))
                            (("1" (assert) nil nil)) nil)
                           ("2" (rewrite "odd_even" 1)
                            (("2"
                              (lemma "cauchy_power_lt1_sn_odd"
                               ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                                "Y" "Y!1" "rx" "rx!1"))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "cauchy_power_lt1_z"
                       ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1" "Y"
                        "Y!1" "rx" "rx!1"))
                      (("2" (assert) nil nil)) nil)
                     ("3" (lemma "trich_lt" ("x" "sx!1-e1!1" "y" "0"))
                      (("3" (split -1)
                        (("1" (case "even?(pn!1)")
                          (("1"
                            (lemma "cauchy_power_lt1_sp_even"
                             ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                              "Y" "Y!1" "rx" "rx!1"))
                            (("1" (assert) nil nil)) nil)
                           ("2" (rewrite "odd_even" 1)
                            (("2"
                              (lemma "cauchy_power_lt1_sp_odd"
                               ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1"
                                "Y" "Y!1" "rx" "rx!1"))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2"
                          (lemma "cauchy_power_lt1_pz"
                           ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1" "Y"
                            "Y!1" "rx" "rx!1"))
                          (("2" (assert) nil nil)) nil)
                         ("3"
                          (lemma "cauchy_power_lt1_p"
                           ("pn" "pn!1" "sx" "sx!1" "e1" "e1!1" "p" "p!1" "Y"
                            "Y!1" "rx" "rx!1"))
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cauchy_power_lt1_p formula-decl nil power nil)
    (cauchy_power_lt1_pz formula-decl nil power nil)
    (cauchy_power_lt1_sp_even formula-decl nil power nil)
    (cauchy_power_lt1_sp_odd formula-decl nil power nil)
    (cauchy_power_lt1_z formula-decl nil power nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cauchy_power_lt1_sn_even formula-decl nil power nil)
    (cauchy_power_lt1_sn_odd formula-decl nil power nil)
    (cauchy_power_lt1_snz_even formula-decl nil power nil)
    (cauchy_power_lt1_snz_odd formula-decl nil power nil)
    (even? const-decl "bool" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cauchy_power_lt1_n_even formula-decl nil power nil)
    (odd_even formula-decl nil prelude_aux nil)
    (cauchy_power_lt1_n_odd formula-decl nil power nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (log2 const-decl "real" prelude_aux nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil))
   nil))
 (cauchy_power_lt1_main_TCC1 0
  (cauchy_power_lt1_main_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_main subtype "power.pn"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.*(power.X, exponentiation.^(2, (number_fields.-)((number_fields.+)((number_fields.+)(3, power.p), floor_ceil.floor(prelude_aux.log2(power.pn))))))) = 0), reals.>=(i, 0))}")))
 (cauchy_power_lt1_main_TCC2 0
  (cauchy_power_lt1_main_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (round const-decl "int" prelude_aux nil)
    (/= const-decl "boolean" notequal nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_main subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (cauchy_power_lt1_main 0
  (cauchy_power_lt1_main-1 nil 3250077324
   ("" (skosimp*)
    ((""
      (lemma "cauchy_power_lt1_main_generalized"
       ("pn" "pn!1" "sx" "sx!1" "p" "p!1" "Y" "Y!1" "rx" "X!1"))
      (("" (assert) nil nil)) nil))
    nil)
   ((smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cauchy_power_lt1_main_generalized formula-decl nil power nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (cauchy_power_lt1_isreal_TCC1 0
  (cauchy_power_lt1_isreal_TCC1-1 nil 3250077324
   ("" (skosimp*)
    (("" (case-replace "pn!1=1")
      (("1" (expand "log2")
        (("1" (rewrite "ln_1")
          (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (case-replace "pn!1=2")
        (("1" (expand "log2")
          (("1" (rewrite "div_simp")
            (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (lemma "log2_strict_increasing")
          (("2" (expand "strict_increasing?")
            (("2" (inst - "2" "pn!1")
              (("2" (expand "log2" -1 1)
                (("2" (rewrite "div_simp") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_int formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (log2 const-decl "real" prelude_aux nil)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil))
   nil
   (cauchy_power_lt1_isreal subtype
    "(number_fields.+)((number_fields.+)(power.p, floor_ceil.floor(prelude_aux.log2(power.pn))), 3)"
    "nat")))
 (cauchy_power_lt1_isreal_TCC2 0
  (cauchy_power_lt1_isreal_TCC2-1 nil 3287579065
   ("" (lemma "cauchy_power_lt1_isreal_TCC1") (("" (assert) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (cauchy_power_lt1_isreal_TCC1 subtype-tcc nil power nil))
   shostak
   (cauchy_power_lt1_isreal subtype
    "(number_fields.+)((number_fields.+)(3, power.p), floor_ceil.floor(prelude_aux.log2(power.pn)))"
    "nat")))
 (cauchy_power_lt1_isreal_TCC3 0
  (cauchy_power_lt1_isreal_TCC3-1 nil 3563629402 ("" (subtype-tcc) nil nil)
   ((ln const-decl "real" ln_exp lnexp)
    (Integral const-decl "real" integral_def analysis)
    (log2 const-decl "real" prelude_aux nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cauchy_power_lt1_isreal subtype "power.pn"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.*(power.scx((number_fields.+)((number_fields.+)(3, power.p), floor_ceil.floor(prelude_aux.log2(power.pn)))), exponentiation.^(2, (number_fields.-)((number_fields.+)((number_fields.+)(3, power.p), floor_ceil.floor(prelude_aux.log2(power.pn))))))) = 0), reals.>=(i, 0))}")))
 (cauchy_power_lt1_isreal 0
  (cauchy_power_lt1_isreal-1 nil 3250077324
   ("" (skosimp*)
    (("" (case "floor(log2(pn!1))>=0")
      (("1" (typepred "scx!1")
        (("1" (expand "cauchy_real?")
          (("1" (expand "cauchy_smallreal?")
            (("1" (expand "cauchy_prop")
              (("1" (skosimp*)
                (("1" (inst + "sx!1^pn!1")
                  (("1" (skosimp*)
                    (("1" (inst - "3 + p!1 + floor(log2(pn!1))")
                      (("1" (flatten)
                        (("1"
                          (lemma "cauchy_power_lt1_main"
                           ("Y" "round((scx!1(3 + p!1 + floor(log2(pn!1))) *
                     2 ^ -(3 + p!1 + floor(log2(pn!1))))
                    ^ pn!1
                    * 2 ^ p!1)" "p" "p!1" "pn" "pn!1" "sx" "sx!1" "X"
                            "scx!1(3 + p!1 + floor(log2(pn!1)))"))
                          (("1" (assert) nil nil) ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (case-replace "pn!1=1")
          (("1" (expand "log2")
            (("1" (rewrite "ln_1")
              (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (case-replace "pn!1=2")
            (("1" (expand "log2")
              (("1" (rewrite "div_simp")
                (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (lemma "log2_strict_increasing")
              (("2" (expand "strict_increasing?")
                (("2" (inst - "2" "pn!1")
                  (("2" (expand "log2" -1 1)
                    (("2" (rewrite "div_simp") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (log2 const-decl "real" prelude_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pn!1 skolem-const-decl "posnat" power nil)
    (p!1 skolem-const-decl "nat" power nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (cauchy_power_lt1_main formula-decl nil power nil)
    (round const-decl "int" prelude_aux nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cauchy_smallreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_smallreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (floor_int formula-decl nil floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp lnexp)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil))
   nil))
 (cauchy_power_lt1_TCC1 0
  (cauchy_power_lt1_TCC1-1 nil 3250077324
   ("" (skosimp)
    (("" (lemma "cauchy_power_lt1_isreal" ("scx" "scx!1" "pn" "pn!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((cauchy_smallreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_smallreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cauchy_power_lt1_isreal formula-decl nil power nil))
   nil
   (cauchy_power_lt1 subtype
    "(LAMBDA p: prelude_aux.round(number_fields.*(exponentiation.^((number_fields.*(power.scx((number_fields.+)((number_fields.+)(power.p, floor_ceil.floor(prelude_aux.log2(power.pn))), 3)), exponentiation.^(2, (number_fields.-)(((number_fields.+)((number_fields.+)(power.p, floor_ceil.floor(prelude_aux.log2(power.pn))), 3)))))), power.pn), exponentiation.^(2, power.p))))"
    "cauchy_real")))
 (power_lemma_lt1_TCC1 0
  (power_lemma_lt1_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (/= const-decl "boolean" notequal nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   nil
   (power_lemma_lt1 subtype "power.pn"
    "{i: integers.int | booleans.OR(power.sx /= 0, reals.>=(i, 0))}")))
 (power_lemma_lt1 0
  (power_lemma_lt1-1 nil 3250077324
   ("" (skosimp*)
    (("" (expand "cauchy_prop")
      (("" (skosimp*)
        (("" (case "p!1+floor(log2(pn!1))+3>=0")
          (("1" (inst - "p!1+floor(log2(pn!1))+3")
            (("1" (flatten)
              (("1" (expand "cauchy_power_lt1")
                (("1"
                  (lemma "cauchy_power_lt1_main"
                   ("Y" "round((scx!1(3 + p!1 + floor(log2(pn!1))) *
              2 ^ -(3 + p!1 + floor(log2(pn!1))))
             ^ pn!1
             * 2 ^ p!1)" "p" "p!1" "pn" "pn!1" "sx" "sx!1" "X"
                    "scx!1(3 + p!1 + floor(log2(pn!1)))"))
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1)
                    (("2" (case-replace "pn!1=1")
                      (("1" (expand "log2")
                        (("1" (rewrite "ln_1")
                          (("1" (rewrite "floor_int") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case-replace "pn!1=2")
                        (("1" (expand "log2")
                          (("1" (rewrite "div_simp")
                            (("1" (rewrite "floor_int")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "log2_strict_increasing")
                          (("2" (expand "strict_increasing?")
                            (("2" (inst - "2" "pn!1")
                              (("2" (expand "log2" -1 1)
                                (("2" (rewrite "div_simp")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (hide-all-but 1)
              (("2" (case-replace "pn!1=1")
                (("1" (expand "log2")
                  (("1" (rewrite "ln_1")
                    (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (case-replace "pn!1=2")
                  (("1" (expand "log2")
                    (("1" (rewrite "div_simp")
                      (("1" (rewrite "floor_int") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "log2_strict_increasing")
                    (("2" (expand "strict_increasing?")
                      (("2" (inst - "2" "pn!1")
                        (("2" (expand "log2" -1 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (log2 const-decl "real" prelude_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (cauchy_power_lt1_main formula-decl nil power nil)
    (cauchy_smallreal? const-decl "bool" cauchy nil)
    (cauchy_smallreal nonempty-type-eq-decl nil cauchy nil)
    (round const-decl "int" prelude_aux nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (floor_int formula-decl nil floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp lnexp)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cauchy_power_lt1 const-decl "cauchy_real" power nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (p!1 skolem-const-decl "nat" power nil)
    (pn!1 skolem-const-decl "posnat" power nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (cauchy_power_div1 0
  (cauchy_power_div1-1 nil 3250077324
   ("" (skosimp*)
    (("" (case "floor(log2(abs(X0!1) + 1))>=0")
      (("1" (case "p!1>=1")
        (("1" (lemma "lemma_A3" ("i" "p!1-1" "px" "abs(X0!1) + 1"))
          (("1" (assert)
            (("1" (flatten)
              (("1"
                (lemma "both_sides_expt_gt1_lt"
                 ("gt1x" "2" "i" "p!1 - 1" "j" "p!1"))
                (("1" (simplify -1)
                  (("1" (lemma "posreal_exp" ("x" "2" "i" "p!1"))
                    (("1" (expand "abs")
                      (("1" (case "X0!1 < 0")
                        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (case "FORALL (n:posnat): floor(log2(n)) >= 0")
          (("1" (inst - "abs(X0!1) + 1") nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (case-replace "n!1=1")
                (("1" (expand "log2")
                  (("1" (rewrite "ln_1")
                    (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (case-replace "n!1=2")
                  (("1" (expand "log2")
                    (("1" (rewrite "div_simp")
                      (("1" (rewrite "floor_int") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "log2_strict_increasing")
                    (("2" (expand "strict_increasing?")
                      (("2" (inst - "2" "n!1")
                        (("2" (expand "log2" -1 1)
                          (("2" (rewrite "div_simp") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (log2 const-decl "real" prelude_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lemma_A3 formula-decl nil appendix nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_exp judgement-tcc nil exponentiation nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (ln const-decl "real" ln_exp lnexp)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor_int formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (cauchy_power_main_TCC1 0
  (cauchy_power_main_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (log2 const-decl "real" prelude_aux nil)
    (Integral const-decl "real" integral_def analysis)
    (ln const-decl "real" ln_exp lnexp))
   nil
   (cauchy_power_main subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields./(power.X, exponentiation.^(2, power.p1))) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_main_TCC2 0
  (cauchy_power_main_TCC2-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (round const-decl "int" prelude_aux nil)
    (^ const-decl "real" exponentiation nil)
    (log2 const-decl "real" prelude_aux nil)
    (Integral const-decl "real" integral_def analysis)
    (ln const-decl "real" ln_exp lnexp))
   nil
   (cauchy_power_main subtype "power.pn"
    "{i: integers.int | booleans.OR(power.x /= 0, reals.>=(i, 0))}")))
 (cauchy_power_main 0
  (cauchy_power_main-1 nil 3250077324
   ("" (skosimp*)
    (("" (lemma "cauchy_power_div1" ("X0" "X0!1" "x" "x!1" "p" "q!1"))
      (("" (assert)
        (("" (flatten)
          (("" (case "FORALL (n:posnat): floor(log2(n)) >= 0")
            (("1" (inst-cp - "1+abs(X0!1)")
              (("1" (inst - "pn!1")
                (("1"
                  (lemma "cauchy_power_lt1_main_generalized"
                   ("pn" "pn!1" "sx" "x!1*2^-q!1" "rx" "X!1*2^-q!1" "p"
                    "p!1+pn!1*q!1" "Y" "Y!1"))
                  (("1"
                    (lemma "expt_product_n0i"
                     ("x" "x!1" "y" "2 ^ -q!1" "pn" "pn!1"))
                    (("1"
                      (lemma "expt_times" ("n0x" "2" "i" "-q!1" "j" "pn!1"))
                      (("1"
                        (lemma "expt_plus"
                         ("n0x" "2" "i" "-q!1 * pn!1" "j" "p!1 + pn!1 * q!1"))
                        (("1"
                          (lemma "expt_plus"
                           ("n0x" "2" "i" "-1 *q!1 * pn!1" "j"
                            "q!1* pn!1 +p!1 "))
                          (("1" (lemma "expt_inverse" ("n0x" "2" "i" "p1!1"))
                            (("1"
                              (lemma "expt_product_n0i"
                               ("x" "X!1/2 ^ p1!1" "y" "2 ^ -q!1" "pn"
                                "pn!1"))
                              (("1"
                                (lemma "expt_plus"
                                 ("n0x" "2" "i" "pn!1 * q!1" "j" "p!1"))
                                (("1"
                                  (lemma "expt_plus"
                                   ("n0x" "2" "i" "-q!1 * pn!1" "j"
                                    "pn!1 * q!1"))
                                  (("1" (rewrite "expt_x0")
                                    (("1"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("x"
                                        "X!1 - 1"
                                        "y"
                                        "x!1 * 2 ^ p1!1"
                                        "pz"
                                        "2 ^ -q!1"))
                                      (("1"
                                        (lemma
                                         "both_sides_times_pos_lt1"
                                         ("y"
                                          "X!1 + 1"
                                          "x"
                                          "x!1 * 2 ^ p1!1"
                                          "pz"
                                          "2 ^ -q!1"))
                                        (("1"
                                          (lemma
                                           "both_sides_expt_gt1_lt"
                                           ("gt1x" "2" "i" "-q!1" "j" "0"))
                                          (("1"
                                            (rewrite "expt_x0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "expt_inverse" ("n0x" "2" "i" "q!1"))
                    (("2"
                      (lemma "div_mult_pos_lt1"
                       ("py" "2 ^ q!1" "x" "1" "z" "x!1"))
                      (("2"
                        (lemma "div_mult_pos_lt2"
                         ("py" "2 ^ q!1" "x" "-1" "z" "x!1"))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skosimp*)
                (("2" (case-replace "n!1=1")
                  (("1" (expand "log2")
                    (("1" (rewrite "ln_1")
                      (("1" (rewrite "floor_int") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "n!1=2")
                    (("1" (expand "log2")
                      (("1" (rewrite "div_simp")
                        (("1" (rewrite "floor_int") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "log2_strict_increasing")
                      (("2" (expand "strict_increasing?")
                        (("2" (inst - "2" "n!1")
                          (("2" (expand "log2" -1 1)
                            (("2" (rewrite "div_simp")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cauchy_power_div1 formula-decl nil power nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (floor_int formula-decl nil floor_ceil nil)
    (ln const-decl "real" ln_exp lnexp)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (cauchy_power_lt1_main_generalized formula-decl nil power nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (smallreal nonempty-type-eq-decl nil prelude_aux nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (expt_product_n0i formula-decl nil prelude_A4 nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (log2 const-decl "real" prelude_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (cauchy_power_isreal_TCC1 0
  (cauchy_power_isreal_TCC1-1 nil 3250077324
   ("" (skosimp*)
    (("" (case "FORALL (n:posnat): floor(log2(n)) >= 0")
      (("1" (inst-cp - "pn!1")
        (("1" (inst - "abs(cx!1(0))+1")
          (("1"
            (lemma "posreal_times_posreal_is_posreal"
             ("px" "pn!1" "py" "1 + floor(log2(abs(cx!1(0)) + 1))"))
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (case-replace "n!1=1")
            (("1" (expand "log2")
              (("1" (rewrite "ln_1")
                (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (case-replace "n!1=2")
              (("1" (expand "log2")
                (("1" (rewrite "div_simp")
                  (("1" (rewrite "floor_int") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (lemma "log2_strict_increasing")
                (("2" (expand "strict_increasing?")
                  (("2" (inst - "2" "n!1")
                    (("2" (expand "log2" -1 1)
                      (("2" (rewrite "div_simp") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((log2 const-decl "real" prelude_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (log2_strict_increasing formula-decl nil prelude_aux nil)
    (ln const-decl "real" ln_exp lnexp)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor_int formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (cauchy_power_isreal subtype "power.pn"
    "{i: integers.int | booleans.OR((number_fields.*(power.cx(power.p1), exponentiation.^(2, (number_fields.-)((power.p1))))) /= 0, reals.>=(i, 0))}")))
 (cauchy_power_isreal 0
  (cauchy_power_isreal-1 nil 3250077324
   ("" (skosimp)
    (("" (typepred "cx!1")
      (("" (expand "cauchy_real?")
        (("" (skosimp)
          (("" (inst + "x!1^pn!1")
            (("" (expand "cauchy_prop")
              (("" (skosimp)
                (("" (inst-cp - "0")
                  (("" (name-replace "X0!1" "cx!1(0)")
                    (("" (rewrite "expt_x0")
                      (("" (typepred "floor_log2(1 + abs(X0!1))")
                        (("" (typepred "floor_log2(pn!1)")
                          (("" (rewrite "floor_log2_def")
                            (("" (rewrite "floor_log2_def")
                              ((""
                                (name-replace "QF" "floor(log2(1+abs(X0!1)))")
                                ((""
                                  (lemma "posreal_times_posreal_is_posreal"
                                   ("px" "QF+1" "py" "pn!1"))
                                  (("1"
                                    (name "P1"
                                          "3 + p!1 + floor(log2(pn!1))+(QF+1)*pn!1")
                                    (("1" (replace -1)
                                      (("1"
                                        (lemma
                                         "cauchy_power_main"
                                         ("X0"
                                          "X0!1"
                                          "x"
                                          "x!1"
                                          "q"
                                          "QF+1"
                                          "p1"
                                          "P1"
                                          "p"
                                          "p!1"
                                          "X"
                                          "cx!1(P1)"
                                          "Y"
                                          "round((cx!1(P1) * 2 ^ -P1) ^ pn!1 * 2 ^ p!1)"
                                          "pn"
                                          "pn!1"))
                                        (("1"
                                          (flatten -7)
                                          (("1"
                                            (rewrite "expt_inverse")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "P1")
                                                (("1"
                                                  (replace -6)
                                                  (("1"
                                                    (expand "QF" -1)
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (QF skolem-const-decl
     "{i | i <= log2(1 + abs(X0!1)) & log2(1 + abs(X0!1)) < 1 + i}" power nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (round const-decl "int" prelude_aux nil)
    (cauchy_power_main formula-decl nil power nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (log2 const-decl "real" prelude_aux nil)
    (floor_log2_def formula-decl nil appendix nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (floor_log2 def-decl "nat" appendix nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (cauchy_power_TCC1 0
  (cauchy_power_TCC1-1 nil 3250077324
   ("" (lemma "cauchy_power_isreal") (("" (propax) nil nil)) nil)
   ((cauchy_power_isreal formula-decl nil power nil)) nil
   (cauchy_power subtype
    "(LAMBDA p: LET p1 = (number_fields.+)((number_fields.+)((number_fields.+)(power.p, appendix.floor_log2(power.pn)), 3), number_fields.*(power.pn, ((number_fields.+)(1, appendix.floor_log2((number_fields.+)(real_defs.abs(power.cx(0)), 1)))))) IN prelude_aux.round(number_fields.*(exponentiation.^((number_fields.*(power.cx(power.p1), exponentiation.^(2, (number_fields.-)((power.p1))))), power.pn), exponentiation.^(2, power.p))))"
    "cauchy_real")))
 (power_lemma_TCC1 0
  (power_lemma_TCC1-1 nil 3250077324 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (/= const-decl "boolean" notequal nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   nil
   (power_lemma subtype "power.pn"
    "{i: integers.int | booleans.OR(power.x /= 0, reals.>=(i, 0))}")))
 (power_lemma 0
  (power_lemma-1 nil 3250077324
   ("" (skosimp)
    (("" (expand "cauchy_prop")
      (("" (skosimp)
        (("" (expand "cauchy_power")
          ((""
            (lemma "cauchy_power_main"
             ("x" "x!1" "X0" "cx!1(0)" "q" "1+floor_log2(abs(cx!1(0))+1)" "p1"
              "3 + floor_log2(pn!1) +
                      floor_log2(1 + abs(cx!1(0))) * pn!1
                      + p!1
                      + pn!1" "p" "p!1" "Y" "round((cx!1(3 + floor_log2(pn!1) +
                      floor_log2(1 + abs(cx!1(0))) * pn!1
                      + p!1
                      + pn!1)
                 *
                 2 ^
                  -(3 + floor_log2(pn!1) +
                     floor_log2(1 + abs(cx!1(0))) * pn!1
                     + p!1
                     + pn!1))
                ^ pn!1
                * 2 ^ p!1)" "X" "cx!1(3 + floor_log2(pn!1) +
                      floor_log2(1 + abs(cx!1(0))) * pn!1
                      + p!1
                      + pn!1)" "pn" "pn!1"))
            (("" (rewrite "floor_log2_def")
              (("" (rewrite "floor_log2_def")
                ((""
                  (name-replace "P1" "3 + floor(log2(pn!1)) +
                      floor(log2(1 + abs(cx!1(0)))) * pn!1
                      + p!1
                      + pn!1")
                  (("" (inst-cp - "P1")
                    (("1" (replace -3 -1)
                      (("1" (inst - "0")
                        (("1" (rewrite "expt_x0")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (rewrite "expt_inverse")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "P1")
                      (("2" (hide-all-but 1)
                        (("2" (assert)
                          (("2" (lemma "floor_log2_def")
                            (("2" (inst-cp - "pn!1")
                              (("2" (typepred "floor_log2(pn!1)")
                                (("2" (inst - "1 + abs(cx!1(0))")
                                  (("2"
                                    (typepred "floor_log2(1 + abs(cx!1(0)))")
                                    (("2" (assert)
                                      (("2"
                                        (lemma
                                         "both_sides_times_pos_le1"
                                         ("pz"
                                          "pn!1"
                                          "x"
                                          "0"
                                          "y"
                                          "floor_log2(1 + abs(cx!1(0)))"))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (cauchy_power const-decl "cauchy_real" power nil)
    (floor_log2_def formula-decl nil appendix nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (log2 const-decl "real" prelude_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (expt_inverse formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (P1 skolem-const-decl "int" power nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (cauchy_power_main formula-decl nil power nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (floor_log2 def-decl "nat" appendix nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (round const-decl "int" prelude_aux nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil)))


cauchy_numerical : THEORY
  BEGIN

  IMPORTING CauchyExpr,
            cauchy_expr_eval,
            structures@Maybe

  Output : TYPE = [# ans: Maybe[real], p: nat #]

  expr      : VAR CauchyExpr
  vars      : VAR list[rat]
  out       : VAR Output 
  zero_prec : VAR nat
  precision : VAR nat

  numerical(precision, zero_prec)(expr, vars): Output =
    LET cx = Eval(zero_prec)(expr, vars)
    IN IF some?(cx) THEN (# ans := Some(val(cx)(precision) / 2^precision),
                            p   := precision #)
                    ELSE (# ans := None, p := precision #) ENDIF

  numerical_soundness : THEOREM
    LET res = numerical(precision, zero_prec)(expr, vars)
    IN some?(res`ans) IMPLIES
      val(res`ans) * 2^res`p - 1 < val(Eval_real(expr, vars)) * 2^res`p AND
      val(Eval_real(expr, vars)) * 2^res`p < val(res`ans) * 2^res`p + 1

  END cauchy_numerical

(unique
 (unique_cauchy 0
  (unique_cauchy-2 nil 3768235880
   ("" (skosimp*)
    (("" (lemma "neg_lemma" ("x" "y!1" "cx" "cx!1"))
      ((""
        (lemma "add_lemma"
         ("x" "x!1" "y" "-y!1" "cx" "cx!1" "cy" "cauchy_neg(cx!1)"))
        (("" (replace -4)
          (("" (replace -3)
            (("" (simplify)
              (("" (replace -2)
                (("" (simplify)
                  (("" (hide (-2 -3 -4))
                    (("" (extensionality "[nat->int]")
                      ((""
                        (inst -1 "cauchy_add(cx!1, cauchy_neg(cx!1))"
                         "cauchy_zero")
                        (("" (expand "cauchy_add" -1 1)
                          (("" (expand "cauchy_neg" -1 1)
                            (("" (expand "cauchy_zero" -1 1)
                              (("" (lemma "unique_cauchy_zero")
                                (("" (bash)
                                  (("1" (lemma "unique_cauchy_zero")
                                    (("1" (inst -1 "x!1-y!1")
                                      (("1"
                                        (hide (-2 -3))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (neg_lemma formula-decl nil neg nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (round const-decl "int" prelude_aux nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (^ const-decl "real" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (unique_cauchy_zero formula-decl nil cauchy nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (cauchy_add const-decl "cauchy_real" add nil)
    (cauchy_nnreal? const-decl "bool" cauchy nil)
    (cauchy_nnreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_zero const-decl "cauchy_nnreal" cauchy nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (add_lemma formula-decl nil add nil)
    (cauchy_neg const-decl "cauchy_real" neg nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil)
  (unique_cauchy-1 nil 3507981239
   ("" (skosimp*)
    (("" (lemma "neg_lemma" ("x" "y!1" "cx" "cx!1"))
      ((""
        (lemma "add_lemma"
         ("x" "x!1" "y" "-y!1" "cx" "cx!1" "cy" "cauchy_neg(cx!1)"))
        (("" (replace -4)
          (("" (replace -3)
            (("" (simplify)
              (("" (replace -2)
                (("" (simplify)
                  (("" (hide (-2 -3 -4))
                    (("" (extensionality "[nat->int]")
                      ((""
                        (inst -1 "cauchy_add(cx!1, cauchy_neg(cx!1))"
                         "cauchy_zero")
                        (("" (expand "cauchy_add" -1 1)
                          (("" (expand "cauchy_neg" -1 1)
                            (("" (expand "cauchy_zero" -1 1)
                              (("" (lemma "unique_cauchy_zero")
                                (("" (bash -2)
                                  (("1" (lemma "unique_cauchy_zero")
                                    (("1" (inst -1 "x!1-y!1")
                                      (("1"
                                        (hide (-2 -3))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (neg_lemma formula-decl nil neg nil)
    (round const-decl "int" prelude_aux nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (unique_cauchy_zero formula-decl nil cauchy nil)
    (cauchy_add const-decl "cauchy_real" add nil)
    (cauchy_nnreal? const-decl "bool" cauchy nil)
    (cauchy_nnreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_zero const-decl "cauchy_nnreal" cauchy nil)
    (add_lemma formula-decl nil add nil)
    (cauchy_neg const-decl "cauchy_real" neg nil))
   nil))
 (cauchy_dich1 0
  (cauchy_dich1-1 nil 3507981239
   ("" (skolem!)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "cauchy_posreal?")
          (("1" (expand "cauchy_negreal?")
            (("1" (skosimp*)
              (("1" (typepred "x!1" "x!2")
                (("1"
                  (lemma "unique_cauchy" ("x" "x!1" "y" "x!2" "cx" "nzcx!1"))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "cauchy_negreal?")
          (("2" (expand "cauchy_posreal?")
            (("2" (typepred "nzcx!1")
              (("2" (expand "cauchy_nzreal?")
                (("2" (skolem!)
                  (("2" (typepred "x!1")
                    (("2" (case "x!1<0")
                      (("1" (inst 1 "x!1") (("1" (assert) nil nil)) nil)
                       ("2" (case "0<x!1")
                        (("1" (inst 3 "x!1") (("1" (assert) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_posreal? const-decl "bool" cauchy nil)
    (cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_nzreal? const-decl "bool" cauchy nil)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (unique_cauchy formula-decl nil unique nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (cauchy_negreal? const-decl "bool" cauchy nil)
    (x!1 skolem-const-decl "nzreal" unique nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (cauchy_dich2 0
  (cauchy_dich2-1 nil 3507981239
   ("" (skosimp*)
    (("" (lemma "cauchy_dich1" ("nzcx" "nzcx!1")) (("" (grind) nil nil)) nil))
    nil)
   ((cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_nzreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cauchy_dich1 formula-decl nil unique nil))
   nil))
 (cauchy_dich3 0
  (cauchy_dich3-1 nil 3507981239
   ("" (skosimp*)
    (("" (expand "cauchy_nnreal?")
      (("" (expand "cauchy_negreal?")
        (("" (split)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (typepred "x!1" "x!2")
                (("1"
                  (lemma "unique_cauchy" ("x" "x!1" "y" "x!2" "cx" "nncx!1"))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (typepred "nncx!1")
              (("2" (expand "cauchy_nnreal?") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_nnreal? const-decl "bool" cauchy nil)
    (cauchy_nnreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (unique_cauchy formula-decl nil unique nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (cauchy_negreal? const-decl "bool" cauchy nil))
   nil))
 (cauchy_dich4 0
  (cauchy_dich4-1 nil 3507981239
   ("" (skolem!)
    (("" (expand "cauchy_npreal?")
      (("" (expand "cauchy_posreal?")
        (("" (split)
          (("1" (skosimp*)
            (("1" (lemma "unique_cauchy" ("x" "x!1" "y" "x!2" "cx" "npcx!1"))
              (("1" (typepred "x!1" "x!2") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (typepred "npcx!1")
            (("2" (expand "cauchy_npreal?") (("2" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_npreal? const-decl "bool" cauchy nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (npreal type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil)
    (cauchy_npreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unique_cauchy formula-decl nil unique nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cauchy_posreal? const-decl "bool" cauchy nil))
   nil))
 (cauchy_dich5 0
  (cauchy_dich5-1 nil 3507981239
   ("" (skosimp*)
    (("" (typepred "nzcx!1")
      (("" (expand "cauchy_nzreal?")
        (("" (expand "cauchy_negreal?")
          (("" (expand "cauchy_posreal?")
            (("" (skolem!)
              (("" (typepred "x!1")
                (("" (lemma "trich_lt" ("x" "x!1" "y" "0"))
                  (("" (split -1)
                    (("1" (inst 1 "x!1") (("1" (assert) nil nil)) nil)
                     ("2" (assert) nil nil)
                     ("3" (inst 2 "x!1") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_nzreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cauchy_negreal? const-decl "bool" cauchy nil)
    (trich_lt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "nzreal" unique nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cauchy_posreal? const-decl "bool" cauchy nil))
   nil))
 (cauchy_trich 0
  (cauchy_trich-1 nil 3507981239
   ("" (skosimp*)
    (("" (typepred "cx!1")
      (("" (expand "cauchy_real?")
        (("" (skolem!)
          (("" (lemma "trich_lt" ("x" "x!1" "y" "0"))
            (("" (split -1)
              (("1" (expand "cauchy_negreal?")
                (("1" (inst + "x!1") (("1" (assert) nil nil)) nil)) nil)
               ("2" (lemma "unique_cauchy_zero3" ("cx" "cx!1"))
                (("2" (grind) nil nil)) nil)
               ("3" (expand "cauchy_posreal?")
                (("3" (inst + "x!1") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "real" unique nil)
    (cauchy_negreal? const-decl "bool" cauchy nil)
    (cauchy_posreal? const-decl "bool" cauchy nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unique_cauchy_zero3 formula-decl nil cauchy nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (trich_lt formula-decl nil real_props nil))
   nil))
 (cauchy_pos_characteristic 0
  (cauchy_pos_characteristic-1 nil 3507981239
   ("" (skosimp*)
    (("" (typepred "pcx!1")
      (("" (expand "cauchy_posreal?")
        (("" (skolem!)
          (("" (typepred "x!1")
            (("" (expand "cauchy_prop")
              (("" (inst - "p!1")
                (("" (flatten)
                  (("" (lemma "expt_ge1" ("b" "2" "n" "p!1"))
                    ((""
                      (lemma "lt_times_lt_pos1"
                       ("px" "1" "y" "2^p!1" "nnz" "0" "w" "x!1"))
                      ((""
                        (lemma "lt_plus_one_equiv_le"
                         ("x" "0" "y" "pcx!1(p!1)"))
                        (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_posreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_plus_one_equiv_le formula-decl nil prelude_aux nil)
    (above nonempty-type-eq-decl nil integers nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   nil))
 (cauchy_neg_characteristic 0
  (cauchy_neg_characteristic-1 nil 3507981239
   ("" (skosimp*)
    (("" (typepred "ncx!1")
      (("" (expand "cauchy_negreal?")
        (("" (skolem!)
          (("" (typepred "x!1")
            (("" (expand "cauchy_prop")
              (("" (inst - "p!1")
                (("" (flatten)
                  ((""
                    (lemma "lt_equiv_le_plus_one"
                     ("x" "ncx!1(p!1) - 1" "y" "0"))
                    (("" (lemma "expt_ge1" ("b" "2" "n" "p!1"))
                      ((""
                        (lemma "both_sides_times_pos_lt1"
                         ("x" "x!1" "y" "0" "pz" "2^p!1"))
                        (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_negreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_negreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lt_equiv_le_plus_one formula-decl nil prelude_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil))
   nil))
 (cauchy_pos_monotonic 0
  (cauchy_pos_monotonic-1 nil 3507981239
   ("" (skosimp*)
    (("" (typepred "pcx!1")
      (("" (expand "cauchy_posreal?")
        (("" (skosimp*)
          (("" (expand "cauchy_prop")
            (("" (inst-cp - "s!1")
              (("" (inst - "s!1+p!1")
                (("" (lemma "expt_plus" ("n0x" "2" "i" "s!1" "j" "p!1"))
                  (("" (replace -1)
                    (("" (lemma "expt_ge1" ("b" "2" "n" "p!1"))
                      (("" (expand ">=")
                        (("" (flatten)
                          (("" (case "p!1=0")
                            (("1" (assert) nil nil)
                             ("2" (case "1<=p!1")
                              (("1"
                                (lemma "both_sides_expt_gt1_le"
                                 ("gt1x" "2" "i" "1" "j" "p!1"))
                                (("1" (expand "^" -1 1)
                                  (("1" (expand "expt")
                                    (("1" (expand "expt")
                                      (("1"
                                        (replace -2 -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "pcx!1(s!1) - 1"
                                              "y"
                                              "x!1 * 2 ^ s!1"
                                              "pz"
                                              "2^p!1"))
                                            (("1"
                                              (replace -8 -1)
                                              (("1"
                                                (rewrite
                                                 "associative_mult"
                                                 -7)
                                                (("1"
                                                  (hide (1 -5 -6 -9))
                                                  (("1"
                                                    (lemma
                                                     "reals_totally_ordered")
                                                    (("1"
                                                      (expand
                                                       "strict_total_order?")
                                                      (("1"
                                                        (expand
                                                         "strict_order?")
                                                        (("1"
                                                          (expand
                                                           "transitive?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide (-1 -3))
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "(pcx!1(s!1) - 1) * 2 ^ p!1"
                                                                 "2 ^ p!1 * 2 ^ s!1 * x!1"
                                                                 "1 + pcx!1(p!1 + s!1)")
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "lt_times_lt_pos1"
                                                                       ("px"
                                                                        "2"
                                                                        "y"
                                                                        "pcx!1(s!1)-1"
                                                                        "nnz"
                                                                        "2"
                                                                        "w"
                                                                        "2 ^ p!1"))
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "2*2"
                                                                         "(pcx!1(s!1) - 1) * 2 ^ p!1"
                                                                         "1 + pcx!1(p!1 + s!1)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_posreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (expt_plus formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil) (^ const-decl "real" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (strict_total_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (strict_order? const-decl "bool" orders nil)
    (reals_totally_ordered formula-decl nil reals nil)
    (associative_mult formula-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (cauchy_monotonic 0
  (cauchy_monotonic-1 nil 3507981239
   ("" (skosimp)
    (("" (case "p!1=0")
      (("1" (replace -1) (("1" (assert) nil nil)) nil)
       ("2" (case "0< p!1")
        (("1" (typepred "nzcx!1")
          (("1" (lemma "cauchy_dich5" ("nzcx" "nzcx!1"))
            (("1" (lemma "expt_ge1" ("b" "2"))
              (("1" (inst-cp - "s!1")
                (("1" (inst - "s!1+ p!1")
                  (("1" (split -3)
                    (("1" (copy -1)
                      (("1" (expand "cauchy_negreal?" -1)
                        (("1" (skolem!)
                          (("1" (typepred "x!1")
                            (("1" (expand "cauchy_prop")
                              (("1" (inst-cp - "s!1")
                                (("1" (inst - "s!1+ p!1")
                                  (("1" (flatten)
                                    (("1"
                                      (lemma
                                       "cauchy_neg_characteristic"
                                       ("ncx" "nzcx!1"))
                                      (("1"
                                        (inst-cp - "s!1")
                                        (("1"
                                          (inst - "s!1+ p!1")
                                          (("1"
                                            (rewrite "abs_nonpos")
                                            (("1"
                                              (rewrite "abs_nonpos")
                                              (("1"
                                                (lemma
                                                 "expt_plus"
                                                 ("n0x"
                                                  "2"
                                                  "i"
                                                  "s!1"
                                                  "j"
                                                  "p!1"))
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite
                                                     "lt_equiv_le_plus_one"
                                                     -14)
                                                    (("1"
                                                      (lemma
                                                       "expt_ge1"
                                                       ("b" "2" "n" "p!1-1"))
                                                      (("1"
                                                        (lemma
                                                         "expt_plus"
                                                         ("n0x"
                                                          "2"
                                                          "i"
                                                          "p!1-1"
                                                          "j"
                                                          "1"))
                                                        (("1"
                                                          (simplify -1)
                                                          (("1"
                                                            (expand "^" -1 3)
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (lemma
                                                                   "both_sides_times_pos_ge1"
                                                                   ("x"
                                                                    "2 ^ (p!1 - 1)"
                                                                    "y"
                                                                    "1"
                                                                    "pz"
                                                                    "2"))
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -1
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1)
                                                                      (("1"
                                                                        (flatten
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "both_sides_times_neg_lt1"
                                                                           ("y"
                                                                            "nzcx!1(s!1 + p!1) - 1"
                                                                            "x"
                                                                            "x!1 * (2 ^ s!1 * 2 ^ p!1)"
                                                                            "nz"
                                                                            "-1"))
                                                                          (("1"
                                                                            (lemma
                                                                             "both_sides_times_neg_lt1"
                                                                             ("y"
                                                                              "x!1 * 2 ^ s!1"
                                                                              "x"
                                                                              "1 + nzcx!1(s!1)"
                                                                              "nz"
                                                                              "-1*(2^p!1)"))
                                                                            (("1"
                                                                              (replace
                                                                               -14
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (simplify)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "both_sides_plus_le1"
                                                                                       ("x"
                                                                                        "3"
                                                                                        "y"
                                                                                        "-nzcx!1(s!1)"
                                                                                        "z"
                                                                                        "-1"))
                                                                                      (("1"
                                                                                        (replace
                                                                                         -21
                                                                                         -1)
                                                                                        (("1"
                                                                                          (simplify
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             ">=")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "le_times_le_pos"
                                                                                               ("nnx"
                                                                                                "2"
                                                                                                "y"
                                                                                                "-nzcx!1(s!1) - 1"
                                                                                                "nnz"
                                                                                                "2"
                                                                                                "w"
                                                                                                "2 ^ p!1"))
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (simplify
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -3
                                                                                                        -4
                                                                                                        2))
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "cauchy_pos_characteristic" ("pcx" "nzcx!1"))
                      (("1" (inst-cp - "s!1")
                        (("1" (inst - "s!1+ p!1")
                          (("1" (rewrite "abs_nonneg")
                            (("1" (rewrite "abs_nonneg")
                              (("1"
                                (lemma "cauchy_pos_monotonic"
                                 ("pcx" "nzcx!1" "s" "s!1" "p" "p!1"))
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_nzreal? const-decl "bool" cauchy nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cauchy_pos_characteristic formula-decl nil unique nil)
    (cauchy_posreal? const-decl "bool" cauchy nil)
    (cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_pos_monotonic formula-decl nil unique nil)
    (abs_nonneg formula-decl nil prelude_aux nil)
    (nnreal type-eq-decl nil real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (cauchy_neg_characteristic formula-decl nil unique nil)
    (cauchy_negreal nonempty-type-eq-decl nil cauchy nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (^ const-decl "real" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (lt_equiv_le_plus_one formula-decl nil prelude_aux nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (expt_plus formula-decl nil exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (abs_nonpos formula-decl nil prelude_aux nil)
    (npreal type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (cauchy_negreal? const-decl "bool" cauchy nil)
    (cauchy_dich5 formula-decl nil unique nil)
    (< const-decl "bool" reals nil))
   nil))
 (cauchy_odd_extend 0
  (cauchy_odd_extend-2 "" 3790105966
   ("" (skosimp*)
    (("" (lemma "cauchy_dich5" ("nzcx" "nzcx!1"))
      (("" (split -1)
        (("1" (copy -1)
          (("1" (expand "cauchy_negreal?" -1)
            (("1" (skolem!)
              (("1" (typepred "x!1")
                (("1"
                  (lemma "unique_cauchy"
                   ("x" "nzx!1" "y" "x!1" "cx" "nzcx!1"))
                  (("1" (inst -8 "-x!1" "cauchy_neg(nzcx!1)")
                    (("1" (lemma "neg_lemma" ("x" "x!1" "cx" "nzcx!1"))
                      (("1" (expand "odd_real_fn?")
                        (("1" (expand "odd_cauchy_fn?")
                          (("1" (inst -7 "x!1")
                            (("1" (inst -8 "nzcx!1")
                              (("1"
                                (lemma "neg_lemma"
                                 ("x" "-f!1(x!1)" "cx"
                                  "cauchy_neg(cf!1(nzcx!1))"))
                                (("1" (replace -6 -2)
                                  (("1" (replace -6 -3)
                                    (("1" (replace -11)
                                      (("1"
                                        (simplify)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand "cauchy_neg" -1 1)
                                            (("1"
                                              (expand "cauchy_neg" -1 1)
                                              (("1"
                                                (lemma "eta" ("f" "cf!1"))
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "neg_cauchy_negreal_is_cauchy_posreal")
                      (("2" (inst - "nzcx!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "cauchy_posreal?")
          (("2" (skolem!)
            (("2" (typepred "x!1")
              (("2"
                (lemma "unique_cauchy" ("cx" "nzcx!1" "x" "x!1" "y" "nzx!1"))
                (("2" (inst - "x!1" "nzcx!1")
                  (("1" (assert) nil nil)
                   ("2" (expand "cauchy_posreal?")
                    (("2" (inst + "x!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cauchy_odd_extend-1 nil 3507981239
   ("" (skosimp*)
    (("" (lemma "cauchy_dich5" ("nzcx" "nzcx!1"))
      (("" (split -1)
        (("1" (copy -1)
          (("1" (expand "cauchy_negreal?" -1)
            (("1" (skolem!)
              (("1" (typepred "x!1")
                (("1"
                  (lemma "unique_cauchy"
                   ("x" "nzx!1" "y" "x!1" "cx" "nzcx!1"))
                  (("1" (inst -8 "-x!1" "cauchy_neg(nzcx!1)")
                    (("1" (lemma "neg_lemma" ("x" "x!1" "cx" "nzcx!1"))
                      (("1" (expand "odd_real_fn?")
                        (("1" (expand "odd_cauchy_fn?")
                          (("1" (inst -7 "x!1")
                            (("1" (inst -8 "nzcx!1")
                              (("1"
                                (lemma "neg_lemma"
                                 ("x" "-f!1(x!1)" "cx"
                                  "cauchy_neg(cf!1(nzcx!1))"))
                                (("1" (replace -6 -2)
                                  (("1" (replace -6 -3)
                                    (("1" (replace -11)
                                      (("1"
                                        (simplify)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (simplify)
                                            (("1"
                                              (simplify)
                                              (("1"
                                                (expand "cauchy_neg" -1 1)
                                                (("1"
                                                  (expand "cauchy_neg" -1 1)
                                                  (("1"
                                                    (lemma "eta" ("f" "cf!1"))
                                                    (("1"
                                                      (replace -1 1 rl)
                                                      (("1" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "neg_cauchy_negreal_is_cauchy_posreal")
                      (("2" (inst - "nzcx!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "cauchy_posreal?")
          (("2" (skolem!)
            (("2" (typepred "x!1")
              (("2"
                (lemma "unique_cauchy" ("cx" "nzcx!1" "x" "x!1" "y" "nzx!1"))
                (("2" (inst - "x!1" "nzcx!1")
                  (("1" (assert) nil nil)
                   ("2" (expand "cauchy_posreal?")
                    (("2" (inst + "x!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
    (cauchy_nzreal? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cauchy_dich5 formula-decl nil unique nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (unique_cauchy formula-decl nil unique nil)
    (neg_cauchy_negreal_is_cauchy_posreal judgement-tcc nil neg nil)
    (cauchy_negreal nonempty-type-eq-decl nil cauchy nil)
    (neg_lemma formula-decl nil neg nil)
    (odd_cauchy_fn? const-decl "bool" unique nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eta formula-decl nil functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_real_fn? const-decl "bool" unique nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
    (nzcx!1 skolem-const-decl "cauchy_nzreal" unique nil)
    (cauchy_neg const-decl "cauchy_real" neg nil)
    (cauchy_posreal? const-decl "bool" cauchy nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (neg_cauchy_nzreal_is_cauchy_nzreal application-judgement "cauchy_nzreal"
     neg nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cauchy_negreal? const-decl "bool" cauchy nil))
   nil)))


(log (cauchy_ln_small_TCC1 0
      (cauchy_ln_small_TCC1-1 nil 3394161634
       ("" (expand "cauchy_ln_small?")
        (("" (inst + "0") (("" (rewrite "int_lemma") nil nil)) nil)) nil)
       ((number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (int_lemma formula-decl nil int nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       nil (cauchy_ln_small subtype "int.cauchy_int(0)" "cauchy_ln_small")))
     (subtype_TCC1 0
      (subtype_TCC1-1 nil 3394109924
       ("" (skosimp)
        (("" (typepred "x!1")
          (("" (expand "cauchy_ln_small?")
            (("" (skosimp)
              (("" (expand "cauchy_real?") (("" (inst + "x!2") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       nil (subtype_ subtype "log.x" "cauchy_real")))
     (cauchy_ln_med_TCC1 0
      (cauchy_ln_med_TCC1-1 nil 3394161634
       ("" (expand "cauchy_ln_med?")
        (("" (inst + "1") (("" (rewrite "int_lemma") nil nil)) nil)) nil)
       ((number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (int_lemma formula-decl nil int nil)
        (cauchy_ln_med? const-decl "bool" log nil))
       nil (cauchy_ln_med subtype "int.cauchy_int(1)" "cauchy_ln_med")))
     (subtype_TCC2 0
      (subtype_TCC2-1 nil 3394127143
       ("" (skosimp)
        (("" (typepred "x!1")
          (("" (expand "cauchy_ln_med?")
            (("" (expand "cauchy_posreal?")
              (("" (skosimp) (("" (inst + "x!2") nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_med nonempty-type-eq-decl nil log nil)
        (cauchy_ln_med? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil))
       nil (subtype_ subtype "log.x" "cauchy_posreal")))
     (cauchy_gt_quarter_TCC1 0
      (cauchy_gt_quarter_TCC1-1 nil 3394175254
       ("" (expand "cauchy_gt_quarter?")
        (("" (inst + "1") (("" (rewrite "int_lemma") nil nil)) nil)) nil)
       ((number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (< const-decl "bool" reals nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (int_lemma formula-decl nil int nil)
        (cauchy_gt_quarter? const-decl "bool" log nil))
       nil
       (cauchy_gt_quarter subtype "int.cauchy_int(1)" "cauchy_gt_quarter")))
     (subtype_TCC3 0
      (subtype_TCC3-1 nil 3394161634
       ("" (skosimp)
        (("" (typepred "x!1")
          (("" (expand "cauchy_gt_quarter?")
            (("" (skosimp)
              (("" (expand "cauchy_posreal?") (("" (inst + "x!2") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (< const-decl "bool" reals nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (cauchy_posreal? const-decl "bool" cauchy nil))
       nil (subtype_ subtype "log.x" "cauchy_posreal")))
     (cauchy_ln_series_TCC1 0
      (cauchy_ln_series_TCC1-1 nil 3394113740
       ("" (skosimp)
        (("" (expand "cauchy_nzreal?")
          (("" (inst + "n!1")
            (("1" (rewrite "int_lemma") nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ((cauchy_nzreal? const-decl "bool" cauchy nil)
        (int_lemma formula-decl nil int nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (/= const-decl "boolean" notequal nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (n!1 skolem-const-decl "nat" log nil))
       nil
       (cauchy_ln_series subtype "int.cauchy_int(log.n)" "cauchy_nzreal")))
     (cauchy_ln_series_TCC2 0
      (cauchy_ln_series_TCC2-1 nil 3394113740
       ("" (skosimp)
        (("" (expand "cauchy_nzreal?")
          (("" (inst + "n!1")
            (("1" (rewrite "int_lemma") nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ((cauchy_nzreal? const-decl "bool" cauchy nil)
        (int_lemma formula-decl nil int nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (/= const-decl "boolean" notequal nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (n!1 skolem-const-decl "nat" log nil))
       nil
       (cauchy_ln_series subtype "int.cauchy_int(log.n)" "cauchy_nzreal")))
     (ln_series_lemma_TCC1 0
      (ln_series_lemma_TCC1-1 nil 3394113740
       ("" (skosimp) (("" (assert) nil nil)) nil)
       ((int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil (ln_series_lemma subtype "(number_fields.-)(log.n, 1)" "nat")))
     (ln_series_lemma 0
      (ln_series_lemma-1 nil 3394113751
       ("" (skosimp)
        (("" (expand "cauchy_ln_series")
          (("" (typepred "n!1")
            (("" (expand ">=")
              (("" (expand "<=")
                (("" (split -1)
                  (("1" (assert)
                    (("1" (expand "lnT")
                      (("1" (case "even?(n!1)")
                        (("1" (assert)
                          (("1" (expand "even?")
                            (("1" (skosimp)
                              (("1" (replace -1)
                                (("1" (rewrite "expt_times")
                                  (("1" (rewrite "expt_x2")
                                    (("1" (rewrite "expt_1i")
                                      (("1"
                                        (replace -1 * rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "div_lemma"
                                             ("x"
                                              "-1"
                                              "nzy"
                                              "n!1"
                                              "cx"
                                              "cauchy_int(-1)"
                                              "nzcy"
                                              "cauchy_int(n!1)"))
                                            (("1"
                                              (rewrite "int_lemma")
                                              (("1"
                                                (rewrite "int_lemma")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (rewrite "even_iff_not_odd")
                            (("2" (expand "odd?")
                              (("2" (skosimp)
                                (("2" (replace -1)
                                  (("2" (rewrite "expt_plus")
                                    (("2" (rewrite "expt_times")
                                      (("2"
                                        (rewrite "expt_x2")
                                        (("2"
                                          (rewrite "expt_1i")
                                          (("2"
                                            (replace -1 * rl)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma
                                                 "div_lemma"
                                                 ("x"
                                                  "1"
                                                  "nzy"
                                                  "n!1"
                                                  "cx"
                                                  "cauchy_int(1)"
                                                  "nzcy"
                                                  "cauchy_int(n!1)"))
                                                (("2"
                                                  (rewrite "int_lemma")
                                                  (("2"
                                                    (rewrite "int_lemma")
                                                    (("2"
                                                      (rewrite "expt_x1")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1 * rl)
                    (("2" (lemma "unique_cauchy_zero" ("x" "0"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_series const-decl "cauchy_real" log nil)
        (lnT const-decl "real_gtm1_le1" ln_exp_series_alt lnexp)
        (odd? const-decl "bool" integers nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (nzint_times_nzint_is_nzint application-judgement "nzint" integers
         nil)
        (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
         nil)
        (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
        (expt_plus formula-decl nil exponentiation nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (even_iff_not_odd formula-decl nil naturalnumbers nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (nzreal_exp application-judgement "nzreal" exponentiation nil)
        (int_exp application-judgement "int" exponentiation nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers nil)
        (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (/= const-decl "boolean" notequal nil)
        (expt_times formula-decl nil exponentiation nil)
        (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (even_times_int_is_even application-judgement "even_int" integers nil)
        (rat_exp application-judgement "rat" exponentiation nil)
        (expt_1i formula-decl nil exponentiation nil)
        (int_lemma formula-decl nil int nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_nzreal? const-decl "bool" cauchy nil)
        (cauchy_int const-decl "cauchy_real" int nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (div_lemma formula-decl nil div nil)
        (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
        (expt_x2 formula-decl nil inv nil)
        (even? const-decl "bool" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (unique_cauchy_zero formula-decl nil cauchy nil)
        (<= const-decl "bool" reals nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil))
       shostak))
     (ln_estimate_lemma_TCC1 0
      (ln_estimate_lemma_TCC1-1 nil 3394115362
       ("" (skosimp)
        (("" (expand "cauchys_real?")
          (("" (lemma "ln_series_lemma")
            (("" (inst + "lambda n:IF n = 0 THEN 0 ELSE lnT(1)(n - 1) ENDIF")
              (("1" (expand "cauchys_prop") (("1" (propax) nil nil)) nil)
               ("2" (skosimp) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchys_real? const-decl "bool" sum nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (IF const-decl "[boolean, T, T -> T]" if_def nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (<= const-decl "bool" reals nil)
        (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt lnexp)
        (lnT const-decl "real_gtm1_le1" ln_exp_series_alt lnexp)
        (cauchys_prop const-decl "bool" sum nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (ln_series_lemma formula-decl nil log nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       nil (ln_estimate_lemma subtype "log.cauchy_ln_series" "cauchys_real")))
     (ln_estimate_lemma 0
      (ln_estimate_lemma-1 nil 3394115371
       ("" (skosimp)
        (("" (expand "ln_estimate")
          ((""
            (lemma "powerseries_lemma"
             ("x" "ssx!1" "cx" "cssx!1" "xs"
              "LAMBDA n: IF n = 0 THEN 0 ELSE lnT(1)(n-1) ENDIF" "cxs"
              "cauchy_ln_series" "m" "n!1"))
            (("1" (expand "powerseries")
              (("1" (replace -2)
                (("1" (lemma "ln_series_lemma")
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1"
                        (name-replace "CPS"
                         "cauchy_powerseries(cssx!1, cauchy_ln_series, n!1)")
                        (("1" (expand "lnT")
                          (("1"
                            (case-replace "(LAMBDA (i:nat):
                          IF i = 0 THEN 0
                          ELSE -(-1) ^ i / i * ssx!1 ^ i
                          ENDIF)=(LAMBDA (nn: nat):
                          IF nn = 0 THEN 0 ELSE -(-ssx!1) ^ nn / nn ENDIF)")
                            (("1" (hide-all-but 1)
                              (("1" (apply-extensionality :hide? t)
                                (("1" (case-replace "x!1=0")
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "(-ssx!1) ^ x!1 = (-1) ^ x!1* ssx!1 ^ x!1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (case-replace "ssx!1=0")
                                          (("1"
                                            (expand "^")
                                            (("1"
                                              (expand "expt")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "mult_expt"
                                             ("n0x"
                                              "-1"
                                              "n0y"
                                              "ssx!1"
                                              "i"
                                              "x!1"))
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp) nil nil))
                                nil))
                              nil)
                             ("2" (skosimp) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ((ln_estimate const-decl "real" ln_exp_series_alt lnexp)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (powerseries const-decl "real" powerseries nil)
        (ln_series_lemma formula-decl nil log nil)
        (expt def-decl "real" exponentiation nil)
        (even_times_int_is_even application-judgement "even_int" integers nil)
        (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nat_expt application-judgement "nat" exponentiation nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (mult_expt formula-decl nil exponentiation nil)
        (int_exp application-judgement "int" exponentiation nil)
        (nzreal_exp application-judgement "nzreal" exponentiation nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers nil)
        (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (real_div_nzreal_is_real application-judgement "real" reals nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (^ const-decl "real" exponentiation nil)
        (cauchys_real? const-decl "bool" sum nil)
        (cauchys_real nonempty-type-eq-decl nil sum nil)
        (cauchy_powerseries const-decl "cauchy_real" powerseries nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (powerseries_lemma formula-decl nil powerseries nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_ln_series const-decl "cauchy_real" log nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (IF const-decl "[boolean, T, T -> T]" if_def nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (< const-decl "bool" reals nil)
        (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt lnexp)
        (lnT const-decl "real_gtm1_le1" ln_exp_series_alt lnexp)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       shostak))
     (cauchy_ln_drx_TCC1 0
      (cauchy_ln_drx_TCC1-1 nil 3394115362
       ("" (lemma "ln_series_lemma")
        (("" (expand "cauchys_real?")
          (("" (inst + "lambda n:IF n = 0 THEN 0 ELSE lnT(1)(n - 1) ENDIF")
            (("1" (expand "cauchys_prop") (("1" (propax) nil nil)) nil)
             ("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ((cauchys_real? const-decl "bool" sum nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (cauchys_prop const-decl "bool" sum nil)
        (lnT const-decl "real_gtm1_le1" ln_exp_series_alt lnexp)
        (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt lnexp)
        (<= const-decl "bool" reals nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (< const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (IF const-decl "[boolean, T, T -> T]" if_def nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (ln_series_lemma formula-decl nil log nil))
       nil (cauchy_ln_drx subtype "log.cauchy_ln_series" "cauchys_real")))
     (ln_drx_lemma_TCC1 0
      (ln_drx_lemma_TCC1-1 nil 3394113740 ("" (subtype-tcc) nil nil)
       ((^ const-decl "real" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posnat_expt application-judgement "posnat" exponentiation nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       nil (ln_drx_lemma subtype "(number_fields.+)(1, log.ssx)" "posreal")))
     (ln_drx_lemma 0
      (ln_drx_lemma-2 nil 3508599150
       ("" (skosimp)
        (("" (lemma "ln_estimate_lemma" ("ssx" "ssx!1" "cssx" "cssx!1"))
          (("" (expand "cauchy_ln_drx")
            (("" (expand "cauchy_prop" 1)
              (("" (skosimp)
                (("" (inst - "2+p!1")
                  (("" (assert)
                    (("" (lemma "ln_estimate_bnd" ("z" "ssx!1" "n" "2+p!1"))
                      (("" (name-replace "LOG_" "ln(1 + ssx!1)")
                        ((""
                          (name-replace "CPS"
                           "cauchy_powerseries(cssx!1, cauchy_ln_series, 2 + p!1)")
                          ((""
                            (name-replace "EST" "ln_estimate(ssx!1, 2 + p!1)")
                            (("" (expand "round")
                              ((""
                                (typepred "floor(1 / 2 + CPS(2 + p!1) / 4)")
                                ((""
                                  (name-replace "RR"
                                   "floor(1 / 2 + CPS(2 + p!1) / 4)")
                                  (("" (hide -5)
                                    (("" (expand "cauchy_prop")
                                      ((""
                                        (inst - "2+p!1")
                                        ((""
                                          (flatten)
                                          ((""
                                            (case
                                             "abs(LOG_ - EST)*2^p!1 < 1/4")
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (case
                                                 "abs(LOG_* 2 ^ p!1 - CPS(2 + p!1)/4) < 1/2")
                                                (("1"
                                                  (hide -2 -5 -6)
                                                  (("1"
                                                    (name-replace
                                                     "P2"
                                                     "2 ^ p!1")
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -3 2)
                                                  (("2"
                                                    (lemma
                                                     "abs_mult"
                                                     ("x"
                                                      "LOG_-EST"
                                                      "y"
                                                      "2^p!1"))
                                                    (("2"
                                                      (expand "abs" -1 3)
                                                      (("2"
                                                        (replace -1 -2 rl)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (rewrite
                                                             "expt_plus")
                                                            (("2"
                                                              (rewrite
                                                               "expt_x2")
                                                              (("2"
                                                                (name-replace
                                                                 "P2"
                                                                 "2^p!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-3 1))
                                              (("2"
                                                (name-replace
                                                 "ABS"
                                                 "abs(LOG_ - EST)")
                                                (("2"
                                                  (typepred "ssx!1")
                                                  (("2"
                                                    (case
                                                     "abs(ssx!1) ^ (2 + p!1 + 1) <= 1/2^(3+p!1)")
                                                    (("1"
                                                      (case
                                                       "1 <= IF ssx!1 < 0 THEN 1 + ssx!1 ELSE 1 ENDIF * (2 + p!1 + 1)")
                                                      (("1"
                                                        (lemma
                                                         "le_div_le_pos"
                                                         ("nnx"
                                                          "abs(ssx!1) ^ (2 + p!1 + 1)"
                                                          "y"
                                                          "1 / 2 ^ (3 + p!1)"
                                                          "pz"
                                                          "1"
                                                          "w"
                                                          "IF ssx!1 < 0 THEN 1 + ssx!1 ELSE 1 ENDIF * (2 + p!1 + 1)"))
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (replace -2)
                                                            (("1"
                                                              (name-replace
                                                               "RHS"
                                                               "abs(ssx!1) ^ (2 + p!1 + 1) /
               (IF ssx!1 < 0 THEN 1 + ssx!1 ELSE 1 ENDIF * (2 + p!1 + 1))")
                                                              (("1"
                                                                (rewrite
                                                                 "div_div2")
                                                                (("1"
                                                                  (lemma
                                                                   "both_sides_expt_gt1_lt"
                                                                   ("gt1x"
                                                                    "2"
                                                                    "i"
                                                                    "2+p!1"
                                                                    "j"
                                                                    "3+p!1"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (lemma
                                                                         "div_mult_pos_lt2"
                                                                         ("py"
                                                                          "2^p!1"
                                                                          "x"
                                                                          "ABS"
                                                                          "z"
                                                                          "1/4"))
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_div2")
                                                                              (("1"
                                                                                (lemma
                                                                                 "both_sides_div_pos_lt2"
                                                                                 ("pz"
                                                                                  "1"
                                                                                  "px"
                                                                                  "2 ^ (3 + p!1)"
                                                                                  "py"
                                                                                  "2 ^ (2 + p!1)"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "expt_plus"
                                                                                     ("n0x"
                                                                                      "2"
                                                                                      "i"
                                                                                      "2"
                                                                                      "j"
                                                                                      "p!1"))
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "expt_x2")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-2 -3 1))
                                                        (("2"
                                                          (case-replace
                                                           "ssx!1<0")
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_pos_le1"
                                                             ("pz"
                                                              "3+p!1"
                                                              "x"
                                                              "-1/2"
                                                              "y"
                                                              "ssx!1"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-1 -2 1))
                                                      (("2"
                                                        (case-replace
                                                         "ssx!1=0")
                                                        (("1"
                                                          (expand "^" 1 1)
                                                          (("1"
                                                            (expand
                                                             "expt"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand "abs")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "both_sides_expt_pos_le"
                                                           ("px"
                                                            "abs(ssx!1)"
                                                            "py"
                                                            "1/2"
                                                            "pm"
                                                            "3+p!1"))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "inv_expt")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2 3)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (ln_estimate_lemma formula-decl nil log nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posint_plus_nnint_is_posint application-judgement "posint" integers
         nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (ln_estimate_bnd formula-decl nil ln_exp_series_alt lnexp)
        (< const-decl "bool" reals nil)
        (real_gtm1_le1 nonempty-type-eq-decl nil ln_exp_series_alt lnexp)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (cauchy_ln_series const-decl "cauchy_real" log nil)
        (cauchy_powerseries const-decl "cauchy_real" powerseries nil)
        (cauchys_real nonempty-type-eq-decl nil sum nil)
        (cauchys_real? const-decl "bool" sum nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (round const-decl "int" prelude_aux nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (both_sides_expt_pos_le formula-decl nil exponentiation nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (inv_expt formula-decl nil exponentiation nil)
        (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nat_expt application-judgement "nat" exponentiation nil)
        (expt def-decl "real" exponentiation nil)
        (IF const-decl "[boolean, T, T -> T]" if_def nil)
        (real_div_nzreal_is_real application-judgement "real" reals nil)
        (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
        (both_sides_div_pos_lt2 formula-decl nil real_props nil)
        (div_mult_pos_lt2 formula-decl nil real_props nil)
        (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (div_div2 formula-decl nil real_props nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (le_div_le_pos formula-decl nil real_props nil)
        (nnreal_exp application-judgement "nnreal" exponentiation nil)
        (rat_times_rat_is_rat application-judgement "rat" rationals nil)
        (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
         nil)
        (both_sides_times_pos_le1 formula-decl nil real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint" integers
         nil)
        (expt_x2 formula-decl nil inv nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (even_times_int_is_even application-judgement "even_int" integers nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (expt_plus formula-decl nil exponentiation nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (abs_mult formula-decl nil real_props nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posint nonempty-type-eq-decl nil integers nil)
        (^ const-decl "real" exponentiation nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
         real_types nil)
        (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
        (integer nonempty-type-from-decl nil integers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
        (ln_estimate const-decl "real" ln_exp_series_alt lnexp)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (ln const-decl "real" ln_exp lnexp)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (real_plus_real_is_real application-judgement "real" reals nil)
        (cauchy_ln_drx const-decl "int" log nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       nil)
      (ln_drx_lemma-1 nil 3394116656
       ("" (skosimp)
        (("" (lemma "ln_estimate_lemma" ("ssx" "ssx!1" "cssx" "cssx!1"))
          (("" (expand "cauchy_ln_drx")
            (("" (expand "cauchy_prop" 1)
              (("" (skosimp)
                (("" (inst - "2+p!1")
                  (("" (assert)
                    (("" (lemma "ln_estimate_bnd" ("z" "ssx!1" "n" "2+p!1"))
                      (("" (name-replace "LOG" "ln(1 + ssx!1)")
                        ((""
                          (name-replace "CPS"
                           "cauchy_powerseries(cssx!1, cauchy_ln_series, 2 + p!1)")
                          ((""
                            (name-replace "EST" "ln_estimate(ssx!1, 2 + p!1)")
                            (("" (expand "round")
                              ((""
                                (typepred "floor(1 / 2 + CPS(2 + p!1) / 4)")
                                ((""
                                  (name-replace "RR"
                                   "floor(1 / 2 + CPS(2 + p!1) / 4)")
                                  (("" (hide -5)
                                    (("" (expand "cauchy_prop")
                                      ((""
                                        (inst - "2+p!1")
                                        ((""
                                          (flatten)
                                          ((""
                                            (case
                                             "abs(LOG - EST)*2^p!1 < 1/4")
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (case
                                                 "abs(LOG* 2 ^ p!1 - CPS(2 + p!1)/4) < 1/2")
                                                (("1"
                                                  (hide -2 -5 -6)
                                                  (("1"
                                                    (name-replace
                                                     "P2"
                                                     "2 ^ p!1")
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -3 2)
                                                  (("2"
                                                    (lemma
                                                     "abs_mult"
                                                     ("x"
                                                      "LOG-EST"
                                                      "y"
                                                      "2^p!1"))
                                                    (("2"
                                                      (expand "abs" -1 3)
                                                      (("2"
                                                        (replace -1 -2 rl)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (rewrite
                                                             "expt_plus")
                                                            (("2"
                                                              (rewrite
                                                               "expt_x2")
                                                              (("2"
                                                                (name-replace
                                                                 "P2"
                                                                 "2^p!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-3 1))
                                              (("2"
                                                (name-replace
                                                 "ABS"
                                                 "abs(LOG - EST)")
                                                (("2"
                                                  (typepred "ssx!1")
                                                  (("2"
                                                    (case
                                                     "abs(ssx!1) ^ (2 + p!1 + 1) <= 1/2^(3+p!1)")
                                                    (("1"
                                                      (case
                                                       "1 <= IF ssx!1 < 0 THEN 1 + ssx!1 ELSE 1 ENDIF * (2 + p!1 + 1)")
                                                      (("1"
                                                        (lemma
                                                         "le_div_le_pos"
                                                         ("nnx"
                                                          "abs(ssx!1) ^ (2 + p!1 + 1)"
                                                          "y"
                                                          "1 / 2 ^ (3 + p!1)"
                                                          "pz"
                                                          "1"
                                                          "w"
                                                          "IF ssx!1 < 0 THEN 1 + ssx!1 ELSE 1 ENDIF * (2 + p!1 + 1)"))
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (replace -2)
                                                            (("1"
                                                              (name-replace
                                                               "RHS"
                                                               "abs(ssx!1) ^ (2 + p!1 + 1) /
       (IF ssx!1 < 0 THEN 1 + ssx!1 ELSE 1 ENDIF * (2 + p!1 + 1))")
                                                              (("1"
                                                                (rewrite
                                                                 "div_div2")
                                                                (("1"
                                                                  (lemma
                                                                   "both_sides_expt_gt1_lt"
                                                                   ("gt1x"
                                                                    "2"
                                                                    "i"
                                                                    "2+p!1"
                                                                    "j"
                                                                    "3+p!1"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (lemma
                                                                         "div_mult_pos_lt2"
                                                                         ("py"
                                                                          "2^p!1"
                                                                          "x"
                                                                          "ABS"
                                                                          "z"
                                                                          "1/4"))
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_div2")
                                                                              (("1"
                                                                                (lemma
                                                                                 "both_sides_div_pos_lt2"
                                                                                 ("pz"
                                                                                  "1"
                                                                                  "px"
                                                                                  "2 ^ (3 + p!1)"
                                                                                  "py"
                                                                                  "2 ^ (2 + p!1)"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "expt_plus"
                                                                                     ("n0x"
                                                                                      "2"
                                                                                      "i"
                                                                                      "2"
                                                                                      "j"
                                                                                      "p!1"))
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "expt_x2")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-2 -3 1))
                                                        (("2"
                                                          (case-replace
                                                           "ssx!1<0")
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_pos_le1"
                                                             ("pz"
                                                              "3+p!1"
                                                              "x"
                                                              "-1/2"
                                                              "y"
                                                              "ssx!1"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-1 -2 1))
                                                      (("2"
                                                        (case-replace
                                                         "ssx!1=0")
                                                        (("1"
                                                          (expand "^" 1 1)
                                                          (("1"
                                                            (expand
                                                             "expt"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand "abs")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "both_sides_expt_pos_le"
                                                           ("px"
                                                            "abs(ssx!1)"
                                                            "py"
                                                            "1/2"
                                                            "pm"
                                                            "3+p!1"))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "inv_expt")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2 3)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_prop const-decl "bool" cauchy nil)
        (cauchy_powerseries const-decl "cauchy_real" powerseries nil)
        (cauchys_real nonempty-type-eq-decl nil sum nil)
        (cauchys_real? const-decl "bool" sum nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (round const-decl "int" prelude_aux nil)
        (expt_x2 formula-decl nil inv nil))
       shostak))
     (cauchy_ln_drx_TCC2 0
      (cauchy_ln_drx_TCC2-1 nil 3394115362
       ("" (skosimp)
        (("" (typepred "cssx!1")
          (("" (expand "cauchy_ln_small?")
            (("" (skosimp)
              (("" (lemma "ln_drx_lemma" ("ssx" "x!1" "cssx" "cssx!1"))
                (("" (assert)
                  (("" (expand "cauchy_real?")
                    (("" (inst + "ln(1+x!1)") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_plus_real_is_real application-judgement "real" reals nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (ln const-decl "real" ln_exp lnexp)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (ln_drx_lemma formula-decl nil log nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil))
       nil
       (cauchy_ln_drx_ subtype "log.cauchy_ln_drx(log.cssx)" "cauchy_real")))
     (cauchy_ln_half_TCC1 0
      (cauchy_ln_half_TCC1-1 nil 3394163248
       ("" (lemma "lemma_div2n" ("x" "1" "cx" "cauchy_int(1)" "n" "1"))
        (("" (rewrite "int_lemma")
          ((""
            (lemma "neg_lemma"
             ("x" "div2n(1, 1)" "cx" "cauchy_div2n(cauchy_int(1), 1)"))
            (("" (assert)
              (("" (expand "div2n")
                (("" (rewrite "expt_x1")
                  (("" (expand "cauchy_ln_small?")
                    (("" (inst + "-(1/2)") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int_lemma formula-decl nil int nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (neg_lemma formula-decl nil neg nil)
        (cauchy_div2n const-decl "cauchy_real" shift nil)
        (div2n const-decl "real" shift nil)
        (lemma_div2n formula-decl nil shift nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_int const-decl "cauchy_real" int nil))
       nil
       (cauchy_ln_half subtype
        "neg.cauchy_neg(shift.cauchy_div2n(int.cauchy_int(1), 1))"
        "cauchy_ln_small")))
     (cauchy_ln_half_TCC2 0
      (cauchy_ln_half_TCC2-2 "" 3790106099
       ("" (lemma "lemma_div2n" ("x" "1" "cx" "cauchy_int(1)" "n" "1"))
        (("" (rewrite "int_lemma")
          (("" (expand "div2n")
            (("" (rewrite "expt_x1")
              ((""
                (lemma "neg_lemma"
                 ("x" "1/2" "cx" "cauchy_div2n(cauchy_int(1), 1)"))
                (("" (assert)
                  ((""
                    (lemma "ln_drx_lemma"
                     ("ssx" "-(1/2)" "cssx"
                      "cauchy_neg(cauchy_div2n(cauchy_int(1), 1))"))
                    (("" (assert)
                      (("" (assert)
                        (("" (lemma "ln_strict_increasing")
                          (("" (expand "strict_increasing?")
                            (("" (inst - "1/2" "1")
                              (("" (assert)
                                (("" (expand "cauchy_negreal?")
                                  (("" (inst + "ln(1/2)") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       nil shostak
       (cauchy_ln_half subtype
        "log.cauchy_ln_drx(neg.cauchy_neg(shift.cauchy_div2n(int.cauchy_int(1), 1)))"
        "cauchy_negreal"))
      (cauchy_ln_half_TCC2-1 nil 3394163248
       ("" (lemma "lemma_div2n" ("x" "1" "cx" "cauchy_int(1)" "n" "1"))
        (("" (rewrite "int_lemma")
          (("" (expand "div2n")
            (("" (rewrite "expt_x1")
              ((""
                (lemma "neg_lemma"
                 ("x" "1/2" "cx" "cauchy_div2n(cauchy_int(1), 1)"))
                (("" (assert)
                  ((""
                    (lemma "ln_drx_lemma"
                     ("ssx" "-(1/2)" "cssx"
                      "cauchy_neg(cauchy_div2n(cauchy_int(1), 1))"))
                    (("" (assert)
                      (("" (assert)
                        (("" (lemma "ln_strict_increasing")
                          (("" (expand "strict_increasing?")
                            (("" (inst - "1/2" "1")
                              (("" (assert)
                                (("" (expand "cauchy_negreal?")
                                  (("" (inst + "ln(1/2)")
                                    (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int_lemma formula-decl nil int nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (nil application-judgement "cauchy_real" log nil)
        (ln_strict_increasing formula-decl nil ln_exp lnexp)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (cauchy_negreal? const-decl "bool" cauchy nil)
        (nonpos_real nonempty-type-eq-decl nil real_types nil)
        (< const-decl "bool" reals nil)
        (negreal nonempty-type-eq-decl nil real_types nil)
        (ln const-decl "real" ln_exp lnexp)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (ln_1 formula-decl nil ln_exp lnexp)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (strict_increasing? const-decl "bool" real_fun_preds reals)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (cauchy_neg const-decl "cauchy_real" neg nil)
        (cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (ln_drx_lemma formula-decl nil log nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (neg_lemma formula-decl nil neg nil)
        (cauchy_div2n const-decl "cauchy_real" shift nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (div2n const-decl "real" shift nil)
        (lemma_div2n formula-decl nil shift nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_int const-decl "cauchy_real" int nil))
       nil
       (cauchy_ln_half subtype
        "log.cauchy_ln_drx(neg.cauchy_neg(shift.cauchy_div2n(int.cauchy_int(1), 1)))"
        "cauchy_negreal")))
     (cauchy_ln_half_lemma 0
      (cauchy_ln_half_lemma-1 nil 3394163580
       ("" (expand "cauchy_ln_half")
        (("" (lemma "lemma_div2n" ("x" "1" "cx" "cauchy_int(1)" "n" "1"))
          (("" (rewrite "int_lemma")
            (("" (expand "div2n")
              (("" (rewrite "expt_x1")
                ((""
                  (lemma "neg_lemma"
                   ("x" "1/2" "cx" "cauchy_div2n(cauchy_int(1), 1)"))
                  (("" (assert)
                    ((""
                      (lemma "ln_drx_lemma"
                       ("ssx" "-(1/2)" "cssx"
                        "cauchy_neg(cauchy_div2n(cauchy_int(1), 1))"))
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_int const-decl "cauchy_real" int nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (lemma_div2n formula-decl nil shift nil)
        (div2n const-decl "real" shift nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (neg_lemma formula-decl nil neg nil)
        (cauchy_div2n const-decl "cauchy_real" shift nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (ln_drx_lemma formula-decl nil log nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_neg const-decl "cauchy_real" neg nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (nil application-judgement "cauchy_real" log nil)
        (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (int_lemma formula-decl nil int nil)
        (cauchy_ln_half const-decl "cauchy_negreal" log nil))
       shostak))
     (cauchy_ln2_lemma 0
      (cauchy_ln2_lemma-1 nil 3394116128
       ("" (lemma "cauchy_ln_half_lemma")
        (("" (lemma "ln_div" ("px" "1" "py" "2"))
          (("" (replace -1)
            (("" (expand "cauchy_ln2")
              (("" (lemma "neg_lemma" ("x" "-ln(2)" "cx" "cauchy_ln_half"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (ln_div formula-decl nil ln_exp lnexp)
        (cauchy_ln2 const-decl "cauchy_posreal" log nil)
        (ln_1 formula-decl nil ln_exp lnexp)
        (neg_cauchy_negreal_is_cauchy_posreal application-judgement
         "cauchy_posreal" neg nil)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (neg_lemma formula-decl nil neg nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_negreal? const-decl "bool" cauchy nil)
        (cauchy_negreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_ln_half const-decl "cauchy_negreal" log nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln const-decl "real" ln_exp lnexp)
        (cauchy_ln_half_lemma formula-decl nil log nil))
       shostak))
     (cauchy_ln_sqrt2_TCC1 0
      (cauchy_ln_sqrt2_TCC1-1 nil 3394115362
       ("" (typepred "cauchy_ln2")
        (("" (expand "cauchy_posreal?")
          (("" (skosimp)
            (("" (typepred "x!1")
              (("" (lemma "lemma_div2n" ("x" "x!1" "cx" "cauchy_ln2" "n" "1"))
                (("" (assert)
                  (("" (expand "div2n")
                    (("" (rewrite "expt_x1") (("" (inst + "x!1/2") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((nonneg_real nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (posreal_div_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (div2n const-decl "real" shift nil)
        (lemma_div2n formula-decl nil shift nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_ln2 const-decl "cauchy_posreal" log nil))
       nil
       (cauchy_ln_sqrt2 subtype "shift.cauchy_div2n(log.cauchy_ln2, 1)"
        "cauchy_posreal")))
     (cauchy_ln_sqrt2_lemma 0
      (cauchy_ln_sqrt2_lemma-1 nil 3394118462
       ("" (lemma "cauchy_ln2_lemma")
        (("" (expand "cauchy_ln_sqrt2")
          (("" (lemma "lemma_div2n" ("x" "ln(2)" "cx" "cauchy_ln2" "n" "1"))
            (("" (assert)
              (("" (expand "div2n")
                (("" (rewrite "expt_x1")
                  (("" (lemma "ln_expt" ("px" "sqrt(2)" "i" "2"))
                    (("" (rewrite "expt_x2")
                      (("" (rewrite "sq_rew") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_sqrt2 const-decl "cauchy_posreal" log nil)
        (sqrt_pos application-judgement "posreal" sqrt reals)
        (expt_x1 formula-decl nil exponentiation nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (expt_x2 formula-decl nil inv nil)
        (posreal_times_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (real_div_nzreal_is_real application-judgement "real" reals nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (sq_sqrt formula-decl nil sqrt reals)
        (sq_nz_pos application-judgement "posreal" sq reals)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (sq_rew formula-decl nil sq reals)
        (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (nnreal type-eq-decl nil real_types nil)
        (integer nonempty-type-from-decl nil integers nil)
        (ln_expt formula-decl nil ln_exp lnexp)
        (div2n const-decl "real" shift nil)
        (lemma_div2n formula-decl nil shift nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_ln2 const-decl "cauchy_posreal" log nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (ln const-decl "real" ln_exp lnexp)
        (cauchy_ln2_lemma formula-decl nil log nil))
       shostak))
     (cauchy_ln_dr_TCC1 0
      (cauchy_ln_dr_TCC1-1 nil 3394127143
       ("" (skosimp)
        (("" (typepred "cmx!1")
          (("" (expand "cauchy_ln_med?")
            (("" (skosimp)
              (("" (typepred "x!1")
                ((""
                  (lemma "sub_lemma"
                   ("x" "x!1" "cx" "cmx!1" "y" "1" "cy" "cauchy_int(1)"))
                  (("" (rewrite "int_lemma")
                    (("" (assert)
                      (("" (expand "cauchy_prop" -4)
                        (("" (inst - "2")
                          (("" (flatten)
                            (("" (rewrite "expt_x2")
                              (("" (case "1/2<x!1&x!1<3/2")
                                (("1" (flatten)
                                  (("1" (expand "cauchy_ln_small?")
                                    (("1" (inst + "x!1 - 1")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 2) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_med nonempty-type-eq-decl nil log nil)
        (cauchy_ln_med? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (cauchy_int const-decl "cauchy_real" int nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (sub_lemma formula-decl nil sub nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (expt_x2 formula-decl nil inv nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (x!1 skolem-const-decl "ln_medreal" log nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (< const-decl "bool" reals nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (int_lemma formula-decl nil int nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil))
       nil
       (cauchy_ln_dr subtype "sub.cauchy_sub(log.cmx, int.cauchy_int(1))"
        "cauchy_ln_small")))
     (cauchy_ln_dr_TCC2 0
      (cauchy_ln_dr_TCC2-1 nil 3394127143
       ("" (skosimp*)
        (("" (typepred "cmx!1")
          (("" (expand "cauchy_ln_med?")
            (("" (skosimp)
              (("" (lemma "sqrt_lemma" ("nnx" "x!1" "nncx" "cmx!1"))
                (("" (assert)
                  (("" (typepred "x!1")
                    ((""
                      (lemma "sub_lemma"
                       ("x" "sqrt(x!1)" "cx" "cauchy_sqrt(cmx!1)" "y" "1" "cy"
                        "cauchy_int(1)"))
                      (("" (rewrite "int_lemma")
                        (("" (assert)
                          (("" (lemma "sqrt_le" ("nny" "sq(1/2)" "nnz" "x!1"))
                            ((""
                              (lemma "sqrt_le" ("nnz" "sq(3/2)" "nny" "x!1"))
                              (("" (expand "sq" -1 2)
                                (("" (expand "sq" -2 2)
                                  (("" (assert)
                                    (("" (expand "cauchy_ln_small?")
                                      (("" (inst + "sqrt(x!1) - 1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_med nonempty-type-eq-decl nil log nil)
        (cauchy_ln_med? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (cauchy_int const-decl "cauchy_real" int nil)
        (cauchy_sqrt const-decl "cauchy_nnreal" sqrtx nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (sub_lemma formula-decl nil sub nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (sqrt_sq formula-decl nil sqrt reals)
        (sqrt_pos application-judgement "posreal" sqrt reals)
        (sq_nz_pos application-judgement "posreal" sq reals)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (sq const-decl "nonneg_real" sq reals)
        (sqrt_le formula-decl nil sqrt reals)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (int_lemma formula-decl nil int nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (sqrt_lemma formula-decl nil sqrtx nil)
        (cauchy_nnreal? const-decl "bool" cauchy nil)
        (cauchy_nnreal nonempty-type-eq-decl nil cauchy nil)
        (nnreal type-eq-decl nil real_types nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (ln_medreal nonempty-type-eq-decl nil log nil))
       nil
       (cauchy_ln_dr subtype
        "sub.cauchy_sub(sqrtx.cauchy_sqrt(log.cmx), int.cauchy_int(1))"
        "cauchy_ln_small")))
     (ln_dr_lemma_TCC1 0
      (ln_dr_lemma_TCC1-1 nil 3394127143 ("" (subtype-tcc) nil nil)
       ((^ const-decl "real" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posnat_expt application-judgement "posnat" exponentiation nil))
       nil (ln_dr_lemma subtype "log.mx" "posreal")))
     (ln_dr_lemma 0
      (ln_dr_lemma-1 nil 3394127185
       ("" (skosimp)
        (("" (expand "cauchy_ln_dr")
          (("" (case-replace "3 <= cmx!1(2) AND cmx!1(2) <= 5")
            (("1" (flatten)
              (("1"
                (lemma "sub_lemma"
                 ("x" "mx!1" "cx" "cmx!1" "y" "1" "cy" "cauchy_int(1)"))
                (("1" (rewrite "int_lemma")
                  (("1" (assert)
                    (("1" (expand "cauchy_prop" -4)
                      (("1" (inst - "2")
                        (("1" (rewrite "expt_x2")
                          (("1" (flatten)
                            (("1" (case "1/2<mx!1&mx!1<3/2")
                              (("1" (flatten)
                                (("1"
                                  (lemma "ln_drx_lemma"
                                   ("ssx" "mx!1 - 1" "cssx"
                                    "cauchy_sub(cmx!1, cauchy_int(1))"))
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace 1 2)
              (("2" (hide 1)
                (("2" (lemma "sqrt_lemma" ("nnx" "mx!1" "nncx" "cmx!1"))
                  (("2" (assert)
                    (("2"
                      (lemma "sub_lemma"
                       ("x" "sqrt(mx!1)" "cx" "cauchy_sqrt(cmx!1)" "y" "1"
                        "cy" "cauchy_int(1)"))
                      (("2" (rewrite "int_lemma")
                        (("2" (assert)
                          (("2" (typepred "mx!1")
                            (("2"
                              (lemma "sqrt_le" ("nny" "sq(1/2)" "nnz" "mx!1"))
                              (("2"
                                (lemma "sqrt_le"
                                 ("nnz" "sq(3/2)" "nny" "mx!1"))
                                (("2" (expand "sq" -1 2)
                                  (("2" (expand "sq" -2 2)
                                    (("2" (assert)
                                      (("2"
                                        (lemma
                                         "ln_drx_lemma"
                                         ("ssx"
                                          "sqrt(mx!1) - 1"
                                          "cssx"
                                          "cauchy_sub(cauchy_sqrt(cmx!1), cauchy_int(1))"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "lemma_mul2n"
                                             ("x"
                                              "ln(sqrt(mx!1))"
                                              "cx"
                                              "cauchy_ln_drx(cauchy_sub(cauchy_sqrt(cmx!1),cauchy_int(1)))"
                                              "n"
                                              "1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "mul2n")
                                                (("2"
                                                  (rewrite "expt_x1")
                                                  (("2"
                                                    (lemma
                                                     "ln_expt"
                                                     ("px"
                                                      "sqrt(mx!1)"
                                                      "i"
                                                      "2"))
                                                    (("2"
                                                      (rewrite "expt_x2")
                                                      (("2"
                                                        (rewrite "sq_rew")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln_dr const-decl "cauchy_real" log nil)
        (nnreal type-eq-decl nil real_types nil)
        (cauchy_nnreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_nnreal? const-decl "bool" cauchy nil)
        (sqrt_lemma formula-decl nil sqrtx nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (cauchy_sqrt const-decl "cauchy_nnreal" sqrtx nil)
        (sqrt_le formula-decl nil sqrt reals)
        (sq const-decl "nonneg_real" sq reals)
        (sq_nz_pos application-judgement "posreal" sq reals)
        (sqrt_pos application-judgement "posreal" sqrt reals)
        (sqrt_sq formula-decl nil sqrt reals)
        (expt_x1 formula-decl nil exponentiation nil)
        (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
         real_types nil)
        (sq_sqrt formula-decl nil sqrt reals)
        (sq_rew formula-decl nil sq reals)
        (integer nonempty-type-from-decl nil integers nil)
        (ln_expt formula-decl nil ln_exp lnexp)
        (mul2n const-decl "real" shift nil)
        (ln const-decl "real" ln_exp lnexp)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (cauchy_ln_drx const-decl "int" log nil)
        (lemma_mul2n formula-decl nil shift nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (int_lemma formula-decl nil int nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (expt_x2 formula-decl nil inv nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (< const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (ln_drx_lemma formula-decl nil log nil)
        (cauchy_ln_small? const-decl "bool" log nil)
        (cauchy_ln_small nonempty-type-eq-decl nil log nil)
        (cauchy_sub const-decl "cauchy_real" sub nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (ln_smallreal nonempty-type-eq-decl nil log nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nil application-judgement "cauchy_real" log nil)
        (sub_lemma formula-decl nil sub nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_int const-decl "cauchy_real" int nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (cauchy_ln_med nonempty-type-eq-decl nil log nil)
        (cauchy_ln_med? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (<= const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil))
       shostak))
     (cauchy_lnx_TCC1 0
      (cauchy_lnx_TCC1-1 nil 3394113740
       ("" (skosimp)
        (("" (typepred "cgt!1")
          (("" (expand "cauchy_gt_quarter?")
            (("" (skosimp)
              (("" (expand "cauchy_ln_med?")
                (("" (inst + "x!1")
                  (("" (expand "cauchy_prop")
                    (("" (inst - "2")
                      (("" (rewrite "expt_x2")
                        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (< const-decl "bool" reals nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (x!1 skolem-const-decl "posreal_gt_quarter" log nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (expt_x2 formula-decl nil inv nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_ln_med? const-decl "bool" log nil))
       nil (cauchy_lnx subtype "log.cgt_14" "cauchy_ln_med")))
     (cauchy_lnx_TCC2 0
      (cauchy_lnx_TCC2-1 nil 3394113740 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (posnat_expt application-judgement "posnat" exponentiation nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (^ const-decl "real" exponentiation nil))
       nil (cauchy_lnx subtype "log.t" "posnat")))
     (cauchy_lnx_TCC3 0
      (cauchy_lnx_TCC3-1 nil 3394113740
       ("" (skosimp*)
        (("" (case "8<=t!1")
          (("1" (hide 1)
            (("1" (rewrite "floor_log2_def")
              (("1" (case "3<=log2(t!1)")
                (("1" (lemma "floor_plus_int" ("i" "3" "x" "log2(t!1)-3"))
                  (("1" (lemma "nonneg_floor_is_nat" ("x" "log2(t!1) - 3"))
                    (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (lemma "ln_strict_increasing")
                    (("2" (expand "<=" -2)
                      (("2" (split -2)
                        (("1" (expand "strict_increasing?")
                          (("1" (inst-cp - "2^3" "t!1")
                            (("1" (rewrite "ln_expt")
                              (("1" (expand "log2")
                                (("1" (rewrite "expt_x3")
                                  (("1" (assert)
                                    (("1" (rewrite "div_mult_pos_le2")
                                      (("1"
                                        (inst - "1" "2")
                                        (("1"
                                          (assert)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (expand "log2")
                          (("2" (case-replace "t!1=2^3")
                            (("1" (rewrite "ln_expt") (("1" (assert) nil nil))
                              nil)
                             ("2" (rewrite "expt_x3") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ((int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (<= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (floor_log2_def formula-decl nil appendix nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (strict_increasing? const-decl "bool" real_fun_preds reals)
        (ln_expt formula-decl nil ln_exp lnexp)
        (real_times_real_is_real application-judgement "real" reals nil)
        (expt_x3 formula-decl nil exponentiation nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (ln const-decl "real" ln_exp lnexp)
        (div_mult_pos_le2 formula-decl nil real_props nil)
        (ln_1 formula-decl nil ln_exp lnexp)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_div_nzreal_is_real application-judgement "real" reals nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (/= const-decl "boolean" notequal nil)
        (^ const-decl "real" exponentiation nil)
        (t!1 skolem-const-decl "int" log nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (ln_strict_increasing formula-decl nil ln_exp lnexp)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (floor_plus_int formula-decl nil floor_ceil nil)
        (integer nonempty-type-from-decl nil integers nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_plus_real_is_real application-judgement "real" reals nil)
        (nonneg_floor_is_nat judgement-tcc nil floor_ceil nil)
        (log2 const-decl "real" prelude_aux nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil))
       nil (cauchy_lnx subtype "log.n" "nat")))
     (cauchy_lnx_TCC4 0
      (cauchy_lnx_TCC4-2 "" 3790106103
       ("" (skosimp*)
        (("" (case "9<=cgt!1(2)")
          (("1" (hide 1)
            (("1" (typepred "cgt!1")
              (("1" (expand "cauchy_gt_quarter?")
                (("1" (skosimp)
                  (("1" (typepred "floor_log2(t!1)")
                    (("1"
                      (lemma "lemma_A3" ("i" "floor_log2(t!1)" "px" "t!1"))
                      (("1" (rewrite "floor_log2_def")
                        (("1" (flatten)
                          (("1" (case "n!1>=2")
                            (("1" (case-replace "floor(log2(t!1))=n!1+1")
                              (("1" (hide -9 -1)
                                (("1" (assert)
                                  (("1" (hide -4)
                                    (("1"
                                      (lemma
                                       "lemma_div2n"
                                       ("x" "x!1" "cx" "cgt!1" "n" "n!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "div2n")
                                          (("1"
                                            (case
                                             "1/4<=x!1 / 2 ^ n!1&x!1 / 2 ^ n!1<=9/4")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "cauchy_ln_med?")
                                                (("1"
                                                  (inst + "x!1 / 2 ^ n!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (expand "cauchy_prop")
                                                (("2"
                                                  (inst - "2")
                                                  (("2"
                                                    (rewrite "expt_x2")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "2^(n!1-2)<=x!1&x!1<=9*2^(n!1-2)")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "expt_plus"
                                                             ("n0x"
                                                              "2"
                                                              "i"
                                                              "n!1"
                                                              "j"
                                                              "-2"))
                                                            (("1"
                                                              (rewrite
                                                               "expt_inverse")
                                                              (("1"
                                                                (rewrite
                                                                 "expt_x2")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_mult_pos_le2"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "div_mult_pos_le1"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace -7 * rl)
                                                            (("2"
                                                              (hide -7)
                                                              (("2"
                                                                (case
                                                                 "2 ^ n!1 <= 4*x!1 & 4*x!1 <= 9 * 2 ^ n!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "expt_plus"
                                                                     ("n0x"
                                                                      "2"
                                                                      "i"
                                                                      "n!1"
                                                                      "j"
                                                                      "-2"))
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_inverse")
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_x2")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (name-replace
                                                                     "X4"
                                                                     "4 * x!1")
                                                                    (("2"
                                                                      (case
                                                                       "2^n!1<=t!1-1&t!1+1<=9*2^n!1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         -4
                                                                         -5)
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_plus")
                                                                          (("2"
                                                                            (rewrite
                                                                             "expt_plus")
                                                                            (("2"
                                                                              (rewrite
                                                                               "expt_x1")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "expt_x2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (case-replace "n!1=-1")
                              (("1" (assert) (("1" (grind) nil nil)) nil)
                               ("2" (case-replace "n!1=0")
                                (("1" (assert)
                                  (("1" (case-replace "floor(log2(t!1)) =1")
                                    (("1" (rewrite "expt_x2")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (case-replace "n!1=1")
                                  (("1" (assert)
                                    (("1" (case-replace "floor(log2(t!1))=2")
                                      (("1"
                                        (rewrite "expt_x3")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       nil shostak
       (cauchy_lnx subtype "shift.cauchy_div2n(log.cgt_14, log.n)"
        "cauchy_ln_med"))
      (cauchy_lnx_TCC4-1 nil 3394127143
       ("" (skosimp*)
        (("" (case "9<=cgt!1(2)")
          (("1" (hide 1)
            (("1" (typepred "cgt!1")
              (("1" (expand "cauchy_gt_quarter?")
                (("1" (skosimp)
                  (("1" (typepred "floor_log2(t!1)")
                    (("1"
                      (lemma "lemma_A3" ("i" "floor_log2(t!1)" "px" "t!1"))
                      (("1" (rewrite "floor_log2_def")
                        (("1" (flatten)
                          (("1" (case "n!1>=2")
                            (("1" (case-replace "floor(log2(t!1))=n!1+1")
                              (("1" (hide -9 -1)
                                (("1" (assert)
                                  (("1" (hide -4)
                                    (("1"
                                      (lemma
                                       "lemma_div2n"
                                       ("x" "x!1" "cx" "cgt!1" "n" "n!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "div2n")
                                          (("1"
                                            (case
                                             "1/4<=x!1 / 2 ^ n!1&x!1 / 2 ^ n!1<=9/4")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "cauchy_ln_med?")
                                                (("1"
                                                  (inst + "x!1 / 2 ^ n!1")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (expand "cauchy_prop")
                                                (("2"
                                                  (inst - "2")
                                                  (("2"
                                                    (rewrite "expt_x2")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "2^(n!1-2)<=x!1&x!1<=9*2^(n!1-2)")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "expt_plus"
                                                             ("n0x"
                                                              "2"
                                                              "i"
                                                              "n!1"
                                                              "j"
                                                              "-2"))
                                                            (("1"
                                                              (rewrite
                                                               "expt_inverse")
                                                              (("1"
                                                                (rewrite
                                                                 "expt_x2")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_mult_pos_le2"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "div_mult_pos_le1"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace -7 * rl)
                                                            (("2"
                                                              (hide -7)
                                                              (("2"
                                                                (case
                                                                 "2 ^ n!1 <= 4*x!1 & 4*x!1 <= 9 * 2 ^ n!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "expt_plus"
                                                                     ("n0x"
                                                                      "2"
                                                                      "i"
                                                                      "n!1"
                                                                      "j"
                                                                      "-2"))
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_inverse")
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_x2")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (name-replace
                                                                     "X4"
                                                                     "4 * x!1")
                                                                    (("2"
                                                                      (case
                                                                       "2^n!1<=t!1-1&t!1+1<=9*2^n!1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         -4
                                                                         -5)
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_plus")
                                                                          (("2"
                                                                            (rewrite
                                                                             "expt_plus")
                                                                            (("2"
                                                                              (rewrite
                                                                               "expt_x1")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "expt_x2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (case-replace "n!1=-1")
                              (("1" (assert)
                                (("1" (assert) (("1" (grind) nil nil)) nil))
                                nil)
                               ("2" (case-replace "n!1=0")
                                (("1" (assert)
                                  (("1" (case-replace "floor(log2(t!1)) =1")
                                    (("1" (rewrite "expt_x2")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (case-replace "n!1=1")
                                  (("1" (assert)
                                    (("1" (case-replace "floor(log2(t!1))=2")
                                      (("1"
                                        (rewrite "expt_x3")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ((cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (<= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (lemma_A3 formula-decl nil appendix nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (even_times_int_is_even application-judgement "even_int" integers nil)
        (posnat_expt application-judgement "posnat" exponentiation nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (posreal_div_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (Integral const-decl "real" integral_def analysis)
        (ln const-decl "real" ln_exp lnexp)
        (expt def-decl "real" exponentiation nil)
        (cauchy_div2n const-decl "cauchy_real" shift nil)
        (expt_x3 formula-decl nil exponentiation nil)
        (log2 const-decl "real" prelude_aux nil)
        (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (< const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (integer nonempty-type-from-decl nil integers nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posrat_exp application-judgement "posrat" exponentiation nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (lemma_div2n formula-decl nil shift nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (div2n const-decl "real" shift nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (expt_inverse formula-decl nil exponentiation nil)
        (div_mult_pos_le2 formula-decl nil real_props nil)
        (div_mult_pos_le1 formula-decl nil real_props nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (expt_plus formula-decl nil exponentiation nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers nil)
        (minus_even_is_even application-judgement "even_int" integers nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (posrat_times_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (expt_x2 formula-decl nil inv nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (x!1 skolem-const-decl "posreal_gt_quarter" log nil)
        (n!1 skolem-const-decl "int" log nil)
        (cauchy_ln_med? const-decl "bool" log nil)
        (^ const-decl "real" exponentiation nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (real_div_nzreal_is_real application-judgement "real" reals nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (floor_log2_def formula-decl nil appendix nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (floor_log2 def-decl "nat" appendix nil))
       nil
       (cauchy_lnx subtype "shift.cauchy_div2n(log.cgt_14, log.n)"
        "cauchy_ln_med")))
     (ln_lemma_x_TCC1 0
      (ln_lemma_x_TCC1-1 nil 3394109924
       ("" (skosimp) (("" (assert) nil nil)) nil)
       ((real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil (ln_lemma_x subtype "log.gt_14" "posreal")))
     (ln_lemma_x 0
      (ln_lemma_x-1 nil 3394172288
       ("" (skosimp)
        (("" (expand "cauchy_lnx")
          (("" (case-replace "cgt!1(2) <= 8")
            (("1" (lemma "ln_dr_lemma" ("mx" "gt!1" "cmx" "cgt!1"))
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand "cauchy_prop")
                  (("2" (inst - "2")
                    (("2" (rewrite "expt_x2")
                      (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "9<=cgt!1(2)")
                (("1" (hide 1)
                  (("1" (rewrite "floor_log2_def")
                    (("1"
                      (lemma "lemma_A3"
                       ("i" "floor(log2(cgt!1(2)))" "px" "cgt!1(2)"))
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (typepred "floor_log2(cgt!1(2))")
                            (("1" (rewrite "floor_log2_def")
                              (("1" (name-replace "N" "floor(log2(cgt!1(2)))")
                                (("1" (case "N>=2")
                                  (("1"
                                    (lemma "lemma_div2n"
                                     ("x" "gt!1" "cx" "cgt!1" "n" "N-1"))
                                    (("1" (assert)
                                      (("1"
                                        (expand "cauchy_prop" -7)
                                        (("1"
                                          (inst - "2")
                                          (("1"
                                            (rewrite "expt_x2")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "div2n")
                                                (("1"
                                                  (case
                                                   "1/4<=gt!1 / 2 ^ (N - 1)&gt!1 / 2 ^ (N - 1)<=9/4")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (lemma
                                                       "ln_dr_lemma"
                                                       ("mx"
                                                        "gt!1 / 2 ^ (N - 1)"
                                                        "cmx"
                                                        "cauchy_div2n(cgt!1, N - 1)"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "mul_lemma"
                                                           ("x"
                                                            "N-1"
                                                            "cx"
                                                            "cauchy_int(N - 1)"
                                                            "y"
                                                            "ln(2)"
                                                            "cy"
                                                            "cauchy_ln2"))
                                                          (("1"
                                                            (rewrite
                                                             "int_lemma")
                                                            (("1"
                                                              (rewrite
                                                               "cauchy_ln2_lemma")
                                                              (("1"
                                                                (lemma
                                                                 "add_lemma"
                                                                 ("x"
                                                                  "ln(gt!1 / 2 ^ (N - 1))"
                                                                  "cx"
                                                                  "cauchy_ln_dr(cauchy_div2n(cgt!1, N - 1))"
                                                                  "y"
                                                                  "(N - 1) * ln(2)"
                                                                  "cy"
                                                                  "cauchy_mul(cauchy_int(N - 1), cauchy_ln2)"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case-replace
                                                                     "ln(gt!1 / 2 ^ (N - 1)) + ln(2) * N - ln(2)=ln(gt!1)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-7
                                                                        -4
                                                                        1))
                                                                      (("1"
                                                                        (rewrite
                                                                         "ln_div")
                                                                        (("1"
                                                                          (rewrite
                                                                           "ln_expt")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (case
                                                       "2^(N-3)<=gt!1&gt!1<9*2^(N-3)")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "expt_plus"
                                                           ("n0x"
                                                            "2"
                                                            "i"
                                                            "N"
                                                            "j"
                                                            "-1"))
                                                          (("1"
                                                            (lemma
                                                             "expt_plus"
                                                             ("n0x"
                                                              "2"
                                                              "i"
                                                              "N"
                                                              "j"
                                                              "-2"))
                                                            (("1"
                                                              (lemma
                                                               "expt_plus"
                                                               ("n0x"
                                                                "2"
                                                                "i"
                                                                "N"
                                                                "j"
                                                                "-3"))
                                                              (("1"
                                                                (rewrite
                                                                 "expt_inverse")
                                                                (("1"
                                                                  (rewrite
                                                                   "expt_inverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "expt_inverse")
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_x1")
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_x2")
                                                                        (("1"
                                                                          (rewrite
                                                                           "expt_x3")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "div_mult_pos_le2"
                                                                                       1)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "div_mult_pos_le1"
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "cgt!1(2)/4 - 1/4 <gt!1&gt!1 < 1/4 + cgt!1(2)/4")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide -8 -9)
                                                                (("1"
                                                                  (case
                                                                   "2 ^ (N - 3) <= (2 ^ N-1)/4 & (2^(1+N)+1)/4 <=9 * 2 ^ (N - 3)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-3 1))
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_plus")
                                                                      (("2"
                                                                        (lemma
                                                                         "expt_plus"
                                                                         ("n0x"
                                                                          "2"
                                                                          "i"
                                                                          "N"
                                                                          "j"
                                                                          "-3"))
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_inverse")
                                                                          (("2"
                                                                            (rewrite
                                                                             "expt_x1")
                                                                            (("2"
                                                                              (rewrite
                                                                               "expt_x3")
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "both_sides_expt_gt1_le"
                                                                                     ("gt1x"
                                                                                      "2"
                                                                                      "i"
                                                                                      "2"
                                                                                      "j"
                                                                                      "N"))
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "expt_x2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (hide -5 2)
                                    (("2" (case-replace "N=0")
                                      (("1"
                                        (rewrite "expt_x1")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (case-replace "N=1")
                                        (("1"
                                          (rewrite "expt_x2")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_lnx const-decl "[nat -> int]" log nil)
        (log2 const-decl "real" prelude_aux nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (integer nonempty-type-from-decl nil integers nil)
        (lemma_A3 formula-decl nil appendix nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (real_div_nzreal_is_real application-judgement "real" reals nil)
        (/= const-decl "boolean" notequal nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (^ const-decl "real" exponentiation nil)
        (cauchy_div2n const-decl "cauchy_real" shift nil)
        (mul_lemma formula-decl nil mul nil)
        (cauchy_int const-decl "cauchy_real" int nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_ln2 const-decl "cauchy_posreal" log nil)
        (ln const-decl "real" ln_exp lnexp)
        (cauchy_ln2_lemma formula-decl nil log nil)
        (real_plus_real_is_real application-judgement "real" reals nil)
        (ln_expt formula-decl nil ln_exp lnexp)
        (ln_div formula-decl nil ln_exp lnexp)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (cauchy_mul const-decl "cauchy_real" mul nil)
        (cauchy_ln_dr const-decl "cauchy_real" log nil)
        (add_lemma formula-decl nil add nil)
        (int_lemma formula-decl nil int nil)
        (posrat_times_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (expt_plus formula-decl nil exponentiation nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (expt_x1 formula-decl nil exponentiation nil)
        (expt_x3 formula-decl nil exponentiation nil)
        (div_mult_pos_le1 formula-decl nil real_props nil)
        (div_mult_pos_le2 formula-decl nil real_props nil)
        (expt_inverse formula-decl nil exponentiation nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers nil)
        (minus_even_is_even application-judgement "even_int" integers nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
        (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
        (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
        (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
        (div2n const-decl "real" shift nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (lemma_div2n formula-decl nil shift nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (floor_log2 def-decl "nat" appendix nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (posrat_exp application-judgement "posrat" exponentiation nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (floor_log2_def formula-decl nil appendix nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (< const-decl "bool" reals nil)
        (ln_medreal nonempty-type-eq-decl nil log nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (cauchy_ln_med nonempty-type-eq-decl nil log nil)
        (cauchy_ln_med? const-decl "bool" log nil)
        (ln_dr_lemma formula-decl nil log nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (expt_x2 formula-decl nil inv nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (<= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil))
       shostak))
     (cauchy_lnx_TCC5 0
      (cauchy_lnx_TCC5-1 nil 3394172287
       ("" (skosimp)
        (("" (typepred "cgt!1")
          (("" (expand "cauchy_gt_quarter?")
            (("" (skosimp)
              (("" (lemma "ln_lemma_x" ("cgt_14" "cgt!1" "gt_14" "x!1"))
                (("" (expand "cauchy_real?")
                  (("" (inst + "ln(x!1)") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (ln const-decl "real" ln_exp lnexp)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (ln_lemma_x formula-decl nil log nil) (< const-decl "bool" reals nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil))
       nil (cauchy_lnx_ subtype "log.cauchy_lnx(log.cgt_14)" "cauchy_real")))
     (cauchy_ln_TCC1 0
      (cauchy_ln_TCC1-1 nil 3394109924
       ("" (skosimp)
        (("" (typepred "pcx!1")
          (("" (expand "cauchy_posreal?")
            (("" (skosimp)
              (("" (lemma "inv_lemma" ("nzx" "x!1" "nzcx" "pcx!1"))
                (("" (assert)
                  (("" (expand "cauchy_gt_quarter?")
                    (("" (inst + "1/x!1")
                      (("" (hide -1)
                        (("" (expand "cauchy_prop")
                          (("" (inst - "2")
                            (("" (rewrite "expt_x2")
                              (("" (flatten)
                                (("" (assert)
                                  (("" (case "0<x!1&x!1<3/4")
                                    (("1" (flatten)
                                      (("1"
                                        (lemma
                                         "both_sides_div_pos_lt2"
                                         ("pz" "1" "py" "x!1" "px" "3/4"))
                                        (("1"
                                          (rewrite "div_div1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posreal_div_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (< const-decl "bool" reals nil)
        (x!1 skolem-const-decl "posreal" log nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (expt_x2 formula-decl nil inv nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (posreal_times_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (div_div1 formula-decl nil real_props nil)
        (both_sides_div_pos_lt2 formula-decl nil real_props nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (inv_lemma formula-decl nil inv nil)
        (cauchy_nzreal? const-decl "bool" cauchy nil)
        (cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
        (/= const-decl "boolean" notequal nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (posreal nonempty-type-eq-decl nil real_types nil))
       nil (cauchy_ln subtype "inv.cauchy_inv(log.pcx)" "cauchy_gt_quarter")))
     (cauchy_ln_TCC2 0
      (cauchy_ln_TCC2-1 nil 3394109924
       ("" (skosimp)
        (("" (case "3<=pcx!1(2)")
          (("1" (hide 1)
            (("1" (typepred "pcx!1")
              (("1" (expand "cauchy_posreal?")
                (("1" (skosimp)
                  (("1" (expand "cauchy_gt_quarter?")
                    (("1" (inst + "x!1")
                      (("1" (expand "cauchy_prop")
                        (("1" (inst - "2")
                          (("1" (rewrite "expt_x2")
                            (("1" (flatten) (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ((cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (<= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (< const-decl "bool" reals nil)
        (x!1 skolem-const-decl "posreal" log nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (posreal_times_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (expt_x2 formula-decl nil inv nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_gt_quarter? const-decl "bool" log nil))
       nil (cauchy_ln subtype "log.pcx" "cauchy_gt_quarter")))
     (ln_lemma 0
      (ln_lemma-1 nil 3394110574
       ("" (skosimp)
        (("" (expand "cauchy_ln")
          (("" (case-replace "pcx!1(2) <= 2")
            (("1" (lemma "inv_lemma" ("nzx" "px!1" "nzcx" "pcx!1"))
              (("1" (assert)
                (("1" (expand "cauchy_prop" -3)
                  (("1" (inst - "2")
                    (("1" (rewrite "expt_x2")
                      (("1" (flatten)
                        (("1" (case "0<px!1&px!1<3/4")
                          (("1" (flatten)
                            (("1"
                              (lemma "both_sides_div_pos_lt2"
                               ("pz" "1" "px" "3/4" "py" "px!1"))
                              (("1" (rewrite "div_div1")
                                (("1" (assert)
                                  (("1"
                                    (lemma "ln_lemma_x"
                                     ("gt_14" "1/px!1" "cgt_14"
                                      "cauchy_inv(pcx!1)"))
                                    (("1" (assert)
                                      (("1"
                                        (lemma
                                         "neg_lemma"
                                         ("x"
                                          "ln(1 / px!1)"
                                          "cx"
                                          "cauchy_lnx(cauchy_inv(pcx!1))"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "ln_div"
                                             ("px" "1" "py" "px!1"))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "3<=pcx!1(2)")
              (("1" (assert)
                (("1" (hide 1)
                  (("1" (lemma "ln_lemma_x" ("gt_14" "px!1" "cgt_14" "pcx!1"))
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand "cauchy_prop")
                        (("2" (inst - "2")
                          (("2" (rewrite "expt_x2")
                            (("2" (flatten) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_ln const-decl "cauchy_real" log nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (> const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (nzreal nonempty-type-eq-decl nil reals nil)
        (/= const-decl "boolean" notequal nil)
        (cauchy_nzreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_nzreal? const-decl "bool" cauchy nil)
        (inv_lemma formula-decl nil inv nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (expt_x2 formula-decl nil inv nil)
        (posint_times_posint_is_posint application-judgement "posint" integers
         nil)
        (int_times_even_is_even application-judgement "even_int" integers nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
         nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
        (both_sides_div_pos_lt2 formula-decl nil real_props nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (posreal_times_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (posreal_div_posreal_is_posreal application-judgement "posreal"
         real_types nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (ln_1 formula-decl nil ln_exp lnexp)
        (real_minus_real_is_real application-judgement "real" reals nil)
        (ln_div formula-decl nil ln_exp lnexp)
        (ln const-decl "real" ln_exp lnexp)
        (cauchy_lnx const-decl "[nat -> int]" log nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (neg_lemma formula-decl nil neg nil)
        (posreal_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_inv const-decl "cauchy_nzreal" inv nil)
        (cauchy_gt_quarter nonempty-type-eq-decl nil log nil)
        (cauchy_gt_quarter? const-decl "bool" log nil)
        (ln_lemma_x formula-decl nil log nil)
        (div_div1 formula-decl nil real_props nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nil application-judgement "cauchy_real" log nil)
        (cauchy_posreal nonempty-type-eq-decl nil cauchy nil)
        (cauchy_posreal? const-decl "bool" cauchy nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (<= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil))
       shostak)))


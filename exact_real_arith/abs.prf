(abs (cauchy_abs_TCC1 0
      (cauchy_abs_TCC1-1 nil 3675601371
       ("" (skeep)
        (("" (expand "cauchy_real?")
          (("" (typepred "cx")
            (("" (expand "cauchy_real?")
              (("" (skeep)
                (("" (inst 1 "abs(x)")
                  (("" (expand "cauchy_prop")
                    (("" (skeep)
                      (("" (inst -1 "p_1")
                        (("" (flatten)
                          (("" (split)
                            (("1" (case "cx(p_1) < 0")
                              (("1" (assert)
                                (("1" (expand "abs")
                                  (("1" (case "x < 0")
                                    (("1" (assert) nil nil)
                                     ("2" (assert)
                                      (("2"
                                        (lemma "both_sides_times_neg_lt2")
                                        (("2"
                                          (inst
                                           -1
                                           "-1"
                                           "1 + cx(p_1)"
                                           "x * 2^p_1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (case
                                                   "FORALL (a, b: real): a < -b AND b >= 0 IMPLIES a < b")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "-cx(p_1) - 1"
                                                     "x * 2^p_1")
                                                    (("1"
                                                      (split)
                                                      (("1" (propax) nil nil)
                                                       ("2" (assert) nil nil)
                                                       ("3"
                                                        (lemma "pos_times_le")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "2^p_1")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (hide -1)
                                                              (("3"
                                                                (split)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (expand "abs")
                                  (("2" (case "x < 0")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "FORALL (a, b: real): a < b AND b < 0 IMPLIES a < -b")
                                        (("1"
                                          (inst -1 "cx(p_1) - 1" "x * 2^p_1")
                                          (("1"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (lemma "neg_times_lt")
                                              (("3"
                                                (inst -1 "x" "2^p_1")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (hide -1)
                                                    (("3"
                                                      (split)
                                                      (("1" (propax) nil nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide (1 3 4 5))
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "cx(p_1) < 0")
                              (("1" (assert)
                                (("1" (expand "abs")
                                  (("1" (case "x < 0")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (expand "abs")
                                  (("2" (case "x < 0")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((cauchy_real? const-decl "bool" cauchy nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (< const-decl "bool" reals nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (^ const-decl "real" exponentiation nil)
        (/= const-decl "boolean" notequal nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (negreal nonempty-type-eq-decl nil real_types nil)
        (nonpos_real nonempty-type-eq-decl nil real_types nil)
        (<= const-decl "bool" reals nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (pos_times_le formula-decl nil real_props nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (both_sides_times_neg_lt2 formula-decl nil real_props nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
         real_types nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (neg_times_lt formula-decl nil real_props nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (posint_exp application-judgement "posint" exponentiation nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil))
       nil
       (cauchy_abs subtype
        "(LAMBDA p: IF reals.<(abs.cx(abs.p), 0) THEN (number_fields.-)(abs.cx(abs.p)) ELSE abs.cx(abs.p) ENDIF)"
        "cauchy_real")))
     (abs_lemma 0
      (abs_lemma-1 nil 3675601457
       ("" (skeep)
        (("" (expand "cauchy_prop")
          (("" (skeep)
            (("" (inst -1 "p")
              (("" (flatten)
                (("" (expand "cauchy_abs")
                  (("" (case "cx(p) < 0")
                    (("1" (assert)
                      (("1" (split)
                        (("1" (expand "abs")
                          (("1" (case "x < 0")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2" (lemma "both_sides_times_neg_lt1")
                                (("2" (inst -1 "-1" "1 + cx(p)" "x * 2^p")
                                  (("2" (flatten)
                                    (("2" (hide -1)
                                      (("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (case
                                               "FORALL (a: real): a >= 0 IMPLIES -a <= a")
                                              (("1"
                                                (inst -1 "x * 2^p")
                                                (("1"
                                                  (split)
                                                  (("1" (grind) nil nil)
                                                   ("2"
                                                    (lemma "pos_times_le")
                                                    (("2"
                                                      (inst -1 "x" "2^p")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide (2 3 5))
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs")
                          (("2" (case "x < 0")
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (split)
                        (("1" (expand "abs")
                          (("1" (case "x < 0")
                            (("1" (assert)
                              (("1"
                                (case "FORALL (a, b: real): b < 0 AND a < b IMPLIES a < -b")
                                (("1" (inst -1 "cx(p) - 1" "x * 2^p")
                                  (("1" (split)
                                    (("1" (assert) nil nil)
                                     ("2" (lemma "neg_times_lt")
                                      (("2"
                                        (inst -1 "x" "2^p")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide (1 3 4 5))
                                                  (("2"
                                                    (split)
                                                    (("1" (propax) nil nil)
                                                     ("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skeep) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (expand "abs")
                          (("2" (case "x < 0")
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((posint_exp application-judgement "posint" exponentiation nil)
        (cauchy_prop const-decl "bool" cauchy nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]" number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (cauchy_abs const-decl "cauchy_real" abs nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (neg_times_lt formula-decl nil real_props nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
         real_types nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (^ const-decl "real" exponentiation nil)
        (/= const-decl "boolean" notequal nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (negreal nonempty-type-eq-decl nil real_types nil)
        (nonpos_real nonempty-type-eq-decl nil real_types nil)
        (<= const-decl "bool" reals nil)
        (int_times_int_is_int application-judgement "int" integers nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (posnat_expt application-judgement "posnat" exponentiation nil)
        (pos_times_le formula-decl nil real_props nil)
        (both_sides_times_neg_lt1 formula-decl nil real_props nil)
        (minus_real_is_real application-judgement "real" reals nil)
        (< const-decl "bool" reals nil)
        (cauchy_real? const-decl "bool" cauchy nil)
        (cauchy_real nonempty-type-eq-decl nil cauchy nil))
       shostak)))


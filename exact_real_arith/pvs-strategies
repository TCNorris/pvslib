(defparameter *era-builtin*
  '(;; Special cases
    ("*real*" "cauchy_expr_eval.r2E")
    ("*var*" "cauchy_expr_eval.X")
    ("*neg*" "CauchyExpr_atd.NEG")
    ("*excluded*" ("e"))
    ;; Standard operations
    ("+" "CauchyExpr_adt.ADD")
    ("exp" "CauchyExpr_adt.EXP")
    ("*" "CauchyExpr_adt.MULT")
    ("^" "CauchyExpr_adt.POW")
    ("-" "CauchyExpr_adt.SUB")
    ("min" "CauchyExpr_adt.MIN")
    ("max" "CauchyExpr_adt.MAX")
    ("sin" "CauchyExpr_adt.SIN")
    ("cos" "CauchyExpr_adt.COS")
    ("/" "CauchyExpr_adt.DIV")
    ("sqrt" "CauchyExpr_adt.SQRT")
    ("floor" "CauchyExpr_adt.FLOOR")
    ("ln" "CauchyExpr_adt.LN")
    ("pi" "CauchyExpr_adt.PI")
    ("abs" "CauchyExpr_adt.ABS")
    ("mod" "CauchyExpr_adt.MOD")
    ("sq" "cauchy_expr_eval.SQ")
    ("acos" "CauchyExpr_adt.ACOS")
    ("a" "CauchyExpr_adt.ACOS")
    ("acos" "CauchyExpr_adt.ACOS")
    ("asin" "CauchyExpr_adt.ACOS")
    ("atan" "CauchyExpr_adt.ATAN")
    ("e" "cauchy_expr_eval.EE")))

(defparameter *era-var-values* nil)

(defparameter *cauchy-strategies* "
% era-numerical: Computes a real-valued expression to a specified precision")

(defun era-make-var-list (vars)
  (let ((varlst
         (loop for v in vars
               for xv = (gethash v *era-var-values*)
               collect (format nil "~a" xv))))
    (if vars
        (format nil "(: ~{~a~^,~} :)" varlst)
        "(::)")))

(defun get-var-value-from-lst (var fmexpr)
  (let* ((expr (extra-get-expr fmexpr))
         (val  (extra-add-evalexpr expr)))
    (when val
      (setf (gethash var *era-var-values*) val))))

(defun get-var-value-from-formula (fm vars)
  (when (and (equality? fm)
             (is-variable-expr? (args1 fm) vars))
    (let* ((expr (extra-get-expr (args2 fm)))
           (val  (extra-add-evalexpr expr)))
      (when val
        (let ((num (extra-get-number-from-expr val t)))
          (when num
            (setf (gethash (expr2str (args1 fm)) *era-var-values*) num)))))))

(defun era-get-vars (fms vars)
  (setq *era-var-values* (make-hash-table :test #'equal))
  (let ((uvars (remove-if #'listp vars)))
    (loop for fm in fms
          do (unless (negation? fm)
               (get-var-value-from-formula fm uvars))))
  (loop for v in vars
        when (listp v)
          do (get-var-value-from-lst (car v) (cadr v)))
  vars)

(defun era-find-unbound-vars (vars)
  (loop for v in vars
        when (null (gethash v *era-var-values*))
          collect v))

(defstep era-numerical (expr
                        &optional (precision 3) (zero-prec 5) bin-prec?
                        (safe? t)
                        vars
                        (equiv? t))
  (let ((era-subs    *era-builtin*)
	(era-texpr   (extra-get-expr expr))
        (era-estr    (expr2str era-texpr))
	(era-rews    '("sq_expt2"))
        (fms         (append (mapcar #'extra-get-formula-from-fnum
                                     (extra-get-fnums '-))
                             (mapcar #'(lambda (f)
                                         (make-negation
                                          (extra-get-formula-from-fnum f)))
                                     (extra-get-fnums '+))))
	(vars        (ia-complete-vars (enlist-it vars)
                                       (ia-get-vars-from-expr era-texpr era-subs)))
        (initeqs     (extra-reset-evalexprs))
        (era-vars    (era-get-vars fms vars))
        (unvars      (era-find-unbound-vars era-vars))
	(qth         (no-qualified-name "exact_real_arith@strategies.CauchyStrategies__"))
        (msg         (cond (qth (format nil "This strategy requires theory ~a to be imported in the current context" qth))
                           (unvars
                            (format nil "Variable~:[~;s~] ~{~a~^,~} ~:[is~;are~] unbound."
                                    (cdr unvars) unvars (cdr unvars)))
                           ((null era-texpr)
                            (format nil "Do not understand argument ~a." expr))))
        (era-var-lst (unless msg (era-make-var-list era-vars)))
        (era-erexpr  (unless msg (ia-interval-expr era-texpr precision era-vars era-subs)))
        ;; prec and zp need to be in binary digits.
        ;; 2^(-n) <= 10^(-p)/2  ==>  2^-(n-1) <= 10^(-p)  ==>
        ;;   -(n-1)ln(2) <= -p ln(10)  ==>  n >= 1 + p(ln(10) / ln(2))
        (prec        (if bin-prec? precision (ceiling (1+ (* precision 3.322)))))
        (zp          (if bin-prec? zero-prec (ceiling (1+ (* zero-prec 3.322)))))
	(pprec       (if bin-prec? (ceiling (1+ (/ precision 3.322))) precision))
        (era-lvars   (format nil "list2array(0)((: ~{~a~^, ~} :))" era-vars))
        (msg         (or msg (when (listp era-erexpr) (car era-erexpr)))))
    (if msg (printf msg)
      (with-fresh-names
       ((nm era-erexpr))
       (let ((era-eval (format nil "cauchy_numerical.numerical(~a, ~a)(~a,~a)"
			       prec zp nm era-var-lst)))
	 (then
	  (eval-expr era-eval :safe? safe?)
	  (with-fresh-labels
	   ((!era -1))
	   (let ((output  (args2 (extra-get-formula !era)))
		 (ans     (get-expr-from-obj output 'ans))
		 (ans-str (format nil "~a" ans))
		 (p-str   (format nil "~a" prec)))
	     (if (string= ans-str "None")
		 (then
		  (printf "Cannot compute ~a" expr)
		  (fail))
	       (then
		(lemma "cauchy_numerical.numerical_soundness")
		(inst -1 nm prec era-var-lst zp)
		(beta -1)
		(spread
		 (split -1)
		 ((then
		   (flatten)
		   (decompose-equality !era)
		   (replaces -1)
		   (replaces -1)
		   (simplify (-1 -2))
		   (invoke (div-by -1 "2 ^ %1") p-str)
		   (invoke (div-by -2 "2 ^ %1") p-str)
		   (branch
		    (invoke (case "%1 = %2") (! -1 2) era-estr)
		    ((then
		      (replaces -1)
		      (eval-expr (! -1 l))
		      (replaces -1)
		      (eval-expr (! -2 r))
		      (replaces -1)
		      (decimalize -1 pprec l)
		      (decimalize -2 pprec r))
		     (then (hide -1) (when equiv? (stop-rewrite "exp_1") (interval-eq__$ nm 1 era-subs era-rews))))))
		  (assert))))))))))))
  "[Cauchy] Compute the value of EXPR such that PRECISION indicates an accuracy
of base^-PRECISION on the output, where base is by default 10. ZERO-PREC is used internally
to determine the result of a subexpression is in the domain of its parent expression. For
example, in the expression \"expr1 / expr2\", if the result of expr2 is within
base^-ZERO-PREC of zero, then the strategy will fail. If BIN_PREC? is set to t, 
base is set to 2.

If SAFE? is set to nil the strategy will run computations even if they generate
TCCs. Since TCCs must be valid in order for the expression to be computable,
setting SAFE? to nil may result in the evaluator failing to terminate or
breaking.

If EQUIV? is set to nil, the strategy doesn't try to prove that the deep
embedding of the original expression is correct. The proof of this fact is
trivial from a logical point of view, but requires unfolding of several
definitions which is time consuming in PVS."
  "Computing the value of ~a~%using exact real arithmetic")

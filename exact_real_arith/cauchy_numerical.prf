(cauchy_numerical
 (numerical_soundness_TCC1 0
  (numerical_soundness_TCC1-1 nil 3675098666
   ("" (skeep)
    (("" (lemma "cauchy_expr_eval.eval_lemma_TCC1")
      (("" (inst -1 "zero_prec" "expr" "vars" "Eval(zero_prec)(expr, vars)")
        (("" (assert)
          (("" (assert)
            (("" (expand "numerical") (("" (decompose-equality) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_lemma_TCC1 subtype-tcc nil cauchy_expr_eval nil)
    (numerical const-decl "Output" cauchy_numerical nil)
    (None adt-constructor-decl "(none?)" Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Output type-eq-decl nil cauchy_numerical nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Eval def-decl "Maybe[cauchy_real]" cauchy_expr_eval nil)
    (Maybe type-decl nil Maybe structures)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (CauchyExpr type-decl nil CauchyExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (numerical_soundness subtype
    "cauchy_expr_eval.Eval_real(cauchy_numerical.expr, cauchy_numerical.vars)"
    "(Maybe[real].some?)")))
 (numerical_soundness 0
  (numerical_soundness-2 "" 3790106175
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "numerical")
          (("" (assert)
            (("" (case "some?(Eval(zero_prec)(expr, vars))")
              (("1" (assert)
                (("1" (lemma "eval_lemma")
                  (("1" (inst -1 "zero_prec" "expr" "vars")
                    (("1" (assert)
                      (("1" (expand "cauchy_prop")
                        (("1" (inst -1 "precision")
                          (("1" (flatten)
                            (("1" (split)
                              (("1" (assert) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (numerical_soundness-1 nil 3675164086
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "cauchy_expr_Eval.eval_lemma_TCC1")
          ((""
            (inst -1 "zero_prec" "expr" "vars" "Eval(zero_prec)(expr, vars)")
            (("" (expand "numerical")
              (("" (assert)
                (("" (case "some?(Eval(zero_prec)(expr, vars))")
                  (("1" (assert)
                    (("1" (lemma "eval_lemma")
                      (("1" (inst -1 "zero_prec" "expr" "vars")
                        (("1" (assert)
                          (("1" (expand "cauchy_prop")
                            (("1" (inst -1 "precision")
                              (("1" (flatten)
                                (("1" (split)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (numerical const-decl "Output" cauchy_numerical nil)
    (Eval def-decl "Maybe[cauchy_real]" cauchy_expr_eval nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (CauchyExpr type-decl nil CauchyExpr_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (cauchy_real nonempty-type-eq-decl nil cauchy nil)
    (cauchy_real? const-decl "bool" cauchy nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_lemma formula-decl nil cauchy_expr_eval nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cauchy_prop const-decl "bool" cauchy nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   shostak)))


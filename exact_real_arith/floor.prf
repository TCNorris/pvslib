(floor (cauchy_noninteger_TCC1 0
        (cauchy_noninteger_TCC1-1 nil 3674569919
         ("" (skeep)
          (("" (expand "^")
            (("" (typepred "p")
              (("" (case "p > 0")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((^ const-decl "real" exponentiation nil)
          (> const-decl "bool" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil))
         nil
         (cauchy_noninteger subtype
          "exponentiation.^(2, ((number_fields.-)(floor.p, 1)))" "int")))
       (cauchy_noninteger_TCC2 0
        (cauchy_noninteger_TCC2-1 nil 3674569919
         ("" (split)
          (("1" (expand "cauchy_real?")
            (("1" (inst 1 "1/2")
              (("1" (expand "cauchy_prop")
                (("1" (induct "p_1")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (expand "^")
                      (("2" (expand "expt") (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (split)
                      (("1" (assert)
                        (("1" (hide-all-but 1)
                          (("1" (expand "^")
                            (("1" (assert)
                              (("1" (expand "expt" 1 2)
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "^")
                          (("2" (expand "expt" 1 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "cauchy_noninteger?")
            (("2" (inst 1 "1")
              (("2" (expand "divides")
                (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ((cauchy_noninteger? const-decl "bool" floor nil)
          (divides const-decl "bool" divides nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (posrat_exp application-judgement "posrat" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
          (expt def-decl "real" exponentiation nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (^ const-decl "real" exponentiation nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (IF const-decl "[boolean, T, T -> T]" if_def nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (< const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (pred type-eq-decl nil defined_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
          (posrat_times_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/= const-decl "boolean" notequal nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil))
         nil
         (cauchy_noninteger subtype
          "(LAMBDA p: IF floor.p = 0 THEN 0 ELSE exponentiation.^(2, ((number_fields.-)(floor.p, 1))) ENDIF)"
          "cauchy_noninteger")))
       (subtype_TCC1 0
        (subtype_TCC1-1 nil 3674569919
         ("" (skosimp*)
          (("" (typepred "x!1")
            (("" (expand "cauchy_noninteger?")
              (("" (expand "cauchy_nzreal?")
                (("" (skeep)
                  (("" (case "x!1 = cauchy_zero")
                    (("1" (expand "cauchy_zero") (("1" (grind) nil nil)) nil)
                     ("2" (expand "cauchy_real?")
                      (("2" (skolem!)
                        (("2" (inst + "x!2") (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (cauchy_nzreal? const-decl "bool" cauchy nil)
          (cauchy_zero const-decl "cauchy_nnreal" cauchy nil)
          (cauchy_nnreal nonempty-type-eq-decl nil cauchy nil)
          (cauchy_nnreal? const-decl "bool" cauchy nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (^ const-decl "real" exponentiation nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (divides const-decl "bool" divides nil)
          (int_times_even_is_even application-judgement "even_int" integers
           nil)
          (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (x!2 skolem-const-decl "real" floor nil)
          (/= const-decl "boolean" notequal nil)
          (nzreal nonempty-type-eq-decl nil reals nil))
         nil (subtype_ subtype "floor.x" "cauchy_nzreal")))
       (nonint_is_not_int 0
        (nonint_is_not_int-1 nil 3674825389
         ("" (skeep)
          (("" (typepred "nicx")
            (("" (expand "cauchy_int")
              (("" (expand "cauchy_noninteger?")
                (("" (skeep)
                  (("" (expand "divides")
                    (("" (inst 1 "i")
                      (("" (assert) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (divides const-decl "bool" divides nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (^ const-decl "real" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (cauchy_int const-decl "cauchy_real" int nil))
         shostak))
       (precisions_TCC1 0
        (precisions_TCC1-1 nil 3674813257
         ("" (skeep)
          (("" (expand "nonempty?")
            (("" (expand "empty?")
              (("" (typepred "nicx")
                (("" (expand "cauchy_noninteger?")
                  (("" (skolem!)
                    (("" (inst - "p!1") (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((nonempty? const-decl "bool" sets nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number nonempty-type-decl nil numbers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil)
          (^ const-decl "real" exponentiation nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (divides const-decl "bool" divides nil)
          (member const-decl "bool" sets nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (empty? const-decl "bool" sets nil))
         nil
         (precisions subtype
          "{p: naturalnumbers.nat | (booleans.NOT)(divides.divides(exponentiation.^(2, p), floor.nicx(p)))}"
          "(sets[nat].nonempty?)")))
       (divides_floor 0
        (divides_floor-1 nil 3674905908
         ("" (skeep)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "divides")
                (("1" (inst 1 "floor(i / n)") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "divides")
                (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ((divides const-decl "bool" divides nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/= const-decl "boolean" notequal nil)
          (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (integer nonempty-type-from-decl nil integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
         shostak))
       (cauchy_floor_aux_TCC1 0
        (cauchy_floor_aux_TCC1-1 nil 3674569919 ("" (termination-tcc) nil nil)
         nil nil
         (cauchy_floor_aux subtype
          "(number_fields.-)(sets[nat].choose(floor.precisions(floor.nicx)), floor.n)"
          "naturalnumber")))
       (cauchy_floor_aux_TCC2 0
        (cauchy_floor_aux_TCC2-2 "" 3790106125
         ("" (skeep)
          (("" (expand "precisions")
            (("" (typepred "n")
              (("" (case "n = choose(precisions(nicx))")
                (("1" (replace -3)
                  (("1" (lemma "divides_floor")
                    (("1" (inst -1 "nicx(n)" "2^n")
                      (("1" (expand "precisions") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "precisions")
                  (("2" (case "n < choose(precisions(nicx))")
                    (("1" (both-sides "+" "1" -1) (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         nil shostak
         (cauchy_floor_aux subtype "(number_fields.+)(floor.n, 1)"
          "naturalnumbers.upto(sets[nat].choose(floor.precisions(floor.nicx)))"))
        (cauchy_floor_aux_TCC2-1 nil 3674569919
         ("" (skeep)
          (("" (expand "precisions")
            (("" (typepred "n")
              (("" (case "n = choose(precisions(nicx))")
                (("1" (replace -3)
                  (("1" (lemma "divides_floor")
                    (("1" (inst -1 "nicx(n)" "2^n")
                      (("1" (split)
                        (("1" (expand "precisions") (("1" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "precisions")
                  (("2" (case "n < choose(precisions(nicx))")
                    (("1" (both-sides "+" "1" -1) (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((precisions const-decl "(nonempty?[nat])" floor nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (divides_floor formula-decl nil floor nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (< const-decl "bool" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (both_sides_plus_lt1 formula-decl nil real_props nil)
          (odd? const-decl "bool" integers nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (<= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (set type-eq-decl nil sets nil)
          (nonempty? const-decl "bool" sets nil)
          (choose const-decl "(p)" sets nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (posint_exp application-judgement "posint" exponentiation nil))
         nil
         (cauchy_floor_aux subtype "(number_fields.+)(floor.n, 1)"
          "naturalnumbers.upto(sets[nat].choose(floor.precisions(floor.nicx)))")))
       (cauchy_floor_aux_TCC3 0
        (cauchy_floor_aux_TCC3-1 nil 3674813257 ("" (subtype-tcc) nil nil)
         ((posint_exp application-judgement "posint" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (^ const-decl "real" exponentiation nil))
         nil
         (cauchy_floor_aux termination
          "floor.cauchy_floor_aux(floor.nicx)((number_fields.+)(floor.n, 1))"
          "nil")))
       (cauchy_floor_aux_TCC4 0
        (cauchy_floor_aux_TCC4-1 nil 3674814861 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
          (nonempty? const-decl "bool" sets nil)
          (choose const-decl "(p)" sets nil)
          (precisions const-decl "(nonempty?[nat])" floor nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (integer nonempty-type-from-decl nil integers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (/= const-decl "boolean" notequal nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (< const-decl "bool" reals nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
          (expt def-decl "real" exponentiation nil)
          (divides const-decl "bool" divides nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (^ const-decl "real" exponentiation nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (posnat_expt application-judgement "posnat" exponentiation nil))
         nil
         (cauchy_floor_aux subtype "int.cauchy_int(floor.x)"
          "{cx: cauchy.cauchy_real | EXISTS i: cx = int.cauchy_int(floor.i)}")))
       (integer_lt_plus_1 0
        (integer_lt_plus_1-1 nil 3674924385 ("" (grind) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         shostak))
       (real_bound_int_above 0
        (real_bound_int_above-1 nil 3674985011
         ("" (skeep) (("" (grind) nil nil)) nil)
         ((int_plus_int_is_int application-judgement "int" integers nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil))
         shostak))
       (real_bound_int_below 0
        (real_bound_int_below-1 nil 3674985043 ("" (grind) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil))
         shostak))
       (expt_inv_lt_1 0
        (expt_inv_lt_1-1 nil 3674985180
         ("" (induct "n")
          (("1" (expand "^")
            (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (expand "^")
              (("2" (expand "expt" +) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ((posnat_expt application-judgement "posnat" exponentiation nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (expt def-decl "real" exponentiation nil)
          (nat_induction formula-decl nil naturalnumbers nil)
          (^ const-decl "real" exponentiation nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/= const-decl "boolean" notequal nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (<= const-decl "bool" reals nil)
          (pred type-eq-decl nil defined_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil))
         shostak))
       (floor_aux_lem 0
        (floor_aux_lem-1 nil 3674839733
         ("" (skeep)
          (("" (expand "cauchy_floor_aux")
            (("" (assert)
              (("" (case "floor(x) = floor(nicx(n) / 2^n)")
                (("1" (replace -1 :dir rl)
                  (("1" (lemma "int_lemma") (("1" (grind) nil nil)) nil)) nil)
                 ("2" (hide 3)
                  (("2" (expand "cauchy_prop")
                    (("2" (inst -1 "n")
                      (("2" (flatten)
                        (("2" (typepred "floor(x)")
                          (("2" (typepred "floor(nicx(n) / 2^n)")
                            (("2" (div-by (-5 -6) "2^n")
                              (("2" (lemma "lt_plus_lt1")
                                (("2"
                                  (inst -1 "(1 + nicx(n)) / 2^n" "floor(x)"
                                   "x" "x")
                                  (("2" (split)
                                    (("1" (both-sides "-" "x" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "lt_cut")
                                          (("1"
                                            (inst
                                             -1
                                             "(nicx(n) - 1) / 2^n"
                                             "x"
                                             "1+floor(x)")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide (-5 -6 -7 -8))
                                                (("1"
                                                  (lemma
                                                   "div_distributes_minus")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "2^n"
                                                     "nicx(n)"
                                                     "1")
                                                    (("1"
                                                      (replace -1 :dir rl)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "div_distributes")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "2^n"
                                                             "1"
                                                             "nicx(n)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (both-sides
                                                                   "+"
                                                                   "1/2^n"
                                                                   -1)
                                                                  (("1"
                                                                    (both-sides
                                                                     "-"
                                                                     "1/2^n"
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "lt_cut")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "floor(x) - 1/2^n"
                                                                           "nicx(n) / 2^n"
                                                                           "1 + floor(nicx(n) / 2^n)")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (lemma
                                                                               "lt_plus_lt1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "1 + floor(x) + 1 / 2^n"
                                                                                 "floor(nicx(n) / 2^n)"
                                                                                 "nicx(n) / 2^n"
                                                                                 "nicx(n) / 2^n")
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (both-sides
                                                                                     "-"
                                                                                     "nicx(n) / 2^n"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         (-3
                                                                                          -4
                                                                                          -5
                                                                                          -6))
                                                                                        (("1"
                                                                                          (case
                                                                                           "floor(x) = floor(nicx(n) / 2^n) - 1")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "floor(x)")
                                                                                            (("1"
                                                                                              (both-sides
                                                                                               "+"
                                                                                               "1"
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -15)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "lt_cut")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(nicx(n) - 1) / 2^n"
                                                                                                         "x"
                                                                                                         "floor(nicx(n) / 2^n)")
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              2))
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -1
                                                                                                               "2^n")
                                                                                                              (("1"
                                                                                                                (mult-by
                                                                                                                 1
                                                                                                                 "2^n")
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "floor(nicx(n) / 2^n)")
                                                                                                                  (("1"
                                                                                                                    (mult-by
                                                                                                                     (-1
                                                                                                                      -2)
                                                                                                                     "2^n")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "rem_floor")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "2^n"
                                                                                                                         "nicx(n)")
                                                                                                                        (("1"
                                                                                                                          (both-sides
                                                                                                                           "-"
                                                                                                                           "rem(2^n)(nicx(n))"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "floor(x) = floor(nicx(n) / 2^n) + 1")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               -1)
                                                                                              (("1"
                                                                                                (both-sides
                                                                                                 "-"
                                                                                                 "1"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     -1
                                                                                                     "2^n")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "rem_floor")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "2^n"
                                                                                                         "nicx(n)")
                                                                                                        (("1"
                                                                                                          (both-sides
                                                                                                           "-"
                                                                                                           "rem(2^n)(nicx(n))"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "floor(x)")
                                                                                                                (("1"
                                                                                                                  (reveal
                                                                                                                   (-22
                                                                                                                    -23))
                                                                                                                  (("1"
                                                                                                                    (both-sides
                                                                                                                     "+"
                                                                                                                     "2^n"
                                                                                                                     -5)
                                                                                                                    (("1"
                                                                                                                      (mult-by
                                                                                                                       -3
                                                                                                                       "2^n")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -5
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (mult-by
                                                                                                                             -3
                                                                                                                             "2^n")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "lt_plus_lt1")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "1+nicx(n)"
                                                                                                                                 "nicx(n) + 2^n - rem(2^n)(nicx(n))"
                                                                                                                                 "x * 2^n"
                                                                                                                                 "x * 2^n")
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (both-sides
                                                                                                                                       "-"
                                                                                                                                       "nicx(n) + 2^n"
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (both-sides
                                                                                                                                           "-"
                                                                                                                                           "x * 2^n"
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "rem(2^n)(nicx(n))")
                                                                                                                                                (("1"
                                                                                                                                                  (both-sides
                                                                                                                                                   "+"
                                                                                                                                                   "rem(2^n)(nicx(n))+2^n"
                                                                                                                                                   -3)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "integer_lt_plus_1")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "rem(2^n)(nicx(n))"
                                                                                                                                                         "2^n")
                                                                                                                                                        (("1"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "lt_plus_lt1")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "1 + rem(2^n)(nicx(n))"
                                                                                                                                                               "rem(2^n)(nicx(n)) + 1"
                                                                                                                                                               "2^n"
                                                                                                                                                               "2^n")
                                                                                                                                                              (("1"
                                                                                                                                                                (split)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (both-sides
                                                                                               "+"
                                                                                               "1 / 2^n"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (both-sides
                                                                                                 "-"
                                                                                                 "1 + 1/2^n"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "real_bound_int_above")
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "real_bound_int_below")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "1 / 2^n"
                                                                                                         "floor(x)"
                                                                                                         "floor(nicx(n) / 2^n)")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "1 / 2^n"
                                                                                                           "floor(x)"
                                                                                                           "floor(nicx(n) / 2^n)")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "expt_inv_lt_1")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ((cauchy_floor_aux def-decl
           "{cx: cauchy_real | EXISTS i: cx = cauchy_int(i)}" floor nil)
          (^ const-decl "real" exponentiation nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (precisions const-decl "(nonempty?[nat])" floor nil)
          (choose const-decl "(p)" sets nil)
          (nonempty? const-decl "bool" sets nil)
          (set type-eq-decl nil sets nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (int nonempty-type-eq-decl nil integers nil)
          (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
          (nznum nonempty-type-eq-decl nil number_fields nil)
          (/= const-decl "boolean" notequal nil)
          (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (integer nonempty-type-from-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (real nonempty-type-from-decl nil reals nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (int_lemma formula-decl nil int nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (int_times_int_is_int application-judgement "int" integers nil)
          (cauchy_int const-decl "cauchy_real" int nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (lt_plus_lt1 formula-decl nil real_props nil)
          (posrat_times_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (div_mult_pos_le1 formula-decl nil real_props nil)
          (both_sides_div_pos_le1 formula-decl nil real_props nil)
          (both_sides_times1_imp formula-decl nil extra_real_props nil)
          (posint_plus_nnint_is_posint application-judgement "posint" integers
           nil)
          (integer_lt_plus_1 formula-decl nil floor nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (both_sides_plus_lt2 formula-decl nil real_props nil)
          (both_sides_plus_le2 formula-decl nil real_props nil)
          (both_sides_times_pos_le1 formula-decl nil real_props nil)
          (TRUE const-decl "bool" booleans nil)
          (nnrat_plus_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (real_bound_int_above formula-decl nil floor nil)
          (expt_inv_lt_1 formula-decl nil floor nil)
          (real_bound_int_below formula-decl nil floor nil)
          (both_sides_div_pos_le2 formula-decl nil real_props nil)
          (both_sides_div_pos_lt2 formula-decl nil real_props nil)
          (both_sides_times1 formula-decl nil real_props nil)
          (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
               modulo_arithmetic nil)
          (mod nonempty-type-eq-decl nil euclidean_division nil)
          (rem_floor formula-decl nil modulo_arithmetic nil)
          (div_cancel2 formula-decl nil real_props nil)
          (both_sides_times_pos_lt1 formula-decl nil real_props nil)
          (odd? const-decl "bool" integers nil)
          (rat_times_rat_is_rat application-judgement "rat" rationals nil)
          (div_mult_pos_lt1 formula-decl nil real_props nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
          (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
          (odd_minus_odd_is_even application-judgement "even_int" integers
           nil)
          (posrat_div_posrat_is_posrat application-judgement "posrat"
           rationals nil)
          (div_distributes formula-decl nil real_props nil)
          (div_distributes_minus formula-decl nil real_props nil)
          (lt_cut formula-decl nil extra_real_props nil)
          (both_sides_minus_lt1 formula-decl nil real_props nil)
          (both_sides_plus_le1 formula-decl nil real_props nil)
          (both_sides_plus_lt1 formula-decl nil real_props nil)
          (div_mult_pos_lt2 formula-decl nil real_props nil)
          (div_mult_pos_le2 formula-decl nil real_props nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_minus_real_is_real application-judgement "real" reals nil)
          (real_plus_real_is_real application-judgement "real" reals nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (nonzero_real nonempty-type-eq-decl nil reals nil)
          (times_div_cancel2 formula-decl nil extra_real_props nil)
          (real_times_real_is_real application-judgement "real" reals nil)
          (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (posreal nonempty-type-eq-decl nil real_types nil)
          (> const-decl "bool" reals nil)
          (nonneg_real nonempty-type-eq-decl nil real_types nil)
          (both_sides_div_pos_lt1 formula-decl nil real_props nil)
          (int_minus_int_is_int application-judgement "int" integers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
          (posint_exp application-judgement "posint" exponentiation nil))
         shostak))
       (floor_aux_lem2_TCC1 0
        (floor_aux_lem2_TCC1-1 nil 3674983061 ("" (subtype-tcc) nil nil)
         ((^ const-decl "real" exponentiation nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (posnat_expt application-judgement "posnat" exponentiation nil))
         nil
         (floor_aux_lem2 subtype
          "(number_fields.-)(sets[nat].choose(floor.precisions(floor.nicx)), floor.n)"
          "naturalnumbers.upto(sets[nat].choose(floor.precisions(floor.nicx)))")))
       (floor_aux_lem2 0
        (floor_aux_lem2-1 nil 3674903311
         ("" (skeep)
          (("" (induct "n")
            (("1" (flatten)
              (("1" (lemma "floor_aux_lem")
                (("1" (inst -1 "nicx" "x" "choose(precisions(nicx))")
                  (("1" (split)
                    (("1" (assert) nil nil) ("2" (propax) nil nil)
                     ("3" (lemma "divides_floor")
                      (("3"
                        (inst -1 "nicx(choose(precisions(nicx)))"
                         "2^choose(precisions(nicx))")
                        (("3" (flatten)
                          (("3" (name "m" "choose(precisions(nicx))")
                            (("3" (replaces -1)
                              (("3" (split -1)
                                (("1" (typepred "m")
                                  (("1" (expand "precisions")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (split -2)
                (("1"
                  (case "member(choose(precisions(nicx)) - (jt+1), precisions(nicx))")
                  (("1" (expand "member")
                    (("1" (name "m" "choose(precisions(nicx)) - 1 - jt")
                      (("1" (assert)
                        (("1" (replaces -1)
                          (("1" (expand "precisions" -1)
                            (("1" (lemma "divides_floor")
                              (("1" (inst -1 "nicx(m)" "2^m")
                                (("1" (flatten)
                                  (("1" (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (lemma "floor_aux_lem")
                                      (("2"
                                        (inst -1 "nicx" "x" "m")
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2" (propax) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "divides_floor")
                    (("2" (name "m" "choose(precisions(nicx)) - (jt + 1)")
                      (("2" (replaces -1)
                        (("2" (inst -1 "nicx(m)" "2^m")
                          (("1" (flatten)
                            (("1" (expand "member")
                              (("1" (expand "precisions" +)
                                (("1" (split -2)
                                  (("1" (expand "cauchy_floor_aux" +)
                                    (("1" (assert)
                                      (("1"
                                        (reveal -2)
                                        (("1"
                                          (replace -1 :dir rl)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (reveal -2)
                            (("2" (replaces -1 :dir rl)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (reveal -2)
                            (("3" (replaces -1 :dir rl)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ((int_minus_int_is_int application-judgement "int" integers nil)
          (<= const-decl "bool" reals nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (pred type-eq-decl nil defined_types nil)
          (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (integer nonempty-type-from-decl nil integers nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (< const-decl "bool" reals nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (cauchy_int const-decl "cauchy_real" int nil)
          (cauchy_floor_aux def-decl
           "{cx: cauchy_real | EXISTS i: cx = cauchy_int(i)}" floor nil)
          (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
          (precisions const-decl "(nonempty?[nat])" floor nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (choose const-decl "(p)" sets nil)
          (nonempty? const-decl "bool" sets nil)
          (set type-eq-decl nil sets nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (>= const-decl "bool" reals nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (int nonempty-type-eq-decl nil integers nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (real nonempty-type-from-decl nil reals nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (upto_induction formula-decl nil bounded_nat_inductions nil)
          (floor_aux_lem formula-decl nil floor nil)
          (^ const-decl "real" exponentiation nil)
          (/= const-decl "boolean" notequal nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (posnat nonempty-type-eq-decl nil integers nil)
          (> const-decl "bool" reals nil)
          (nonneg_int nonempty-type-eq-decl nil integers nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (TRUE const-decl "bool" booleans nil)
          (divides_floor formula-decl nil floor nil)
          (posint_exp application-judgement "posint" exponentiation nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (minus_odd_is_odd application-judgement "odd_int" integers nil)
          (posint_times_posint_is_posint application-judgement "posint"
           integers nil)
          (even_times_int_is_even application-judgement "even_int" integers
           nil)
          (divides const-decl "bool" divides nil)
          (expt def-decl "real" exponentiation nil)
          (minus_int_is_int application-judgement "int" integers nil)
          (int_plus_int_is_int application-judgement "int" integers nil)
          (m skolem-const-decl "int" floor nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_gt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (posrat_exp application-judgement "posrat" exponentiation nil)
          (m skolem-const-decl "int" floor nil)
          (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (nnint_plus_posint_is_posint application-judgement "posint" integers
           nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (member const-decl "bool" sets nil))
         shostak))
       (cauchy_floor_TCC1 0
        (cauchy_floor_TCC1-1 nil 3674830668 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (posnat_expt application-judgement "posnat" exponentiation nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (divides const-decl "bool" divides nil)
          (cauchy_prop const-decl "bool" cauchy nil)
          (^ const-decl "real" exponentiation nil))
         nil
         (cauchy_floor subtype "0"
          "naturalnumbers.upto(sets[nat].choose(floor.precisions(floor.nicx)))")))
       (floor_lemma 0
        (floor_lemma-1 nil 3674984336
         ("" (skeep)
          (("" (expand "cauchy_floor")
            (("" (lemma "floor_aux_lem2")
              (("" (inst -1 "x" "nicx" "choose(precisions(nicx))")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((cauchy_floor const-decl
           "{cx: cauchy_real | EXISTS i: cx = cauchy_int(i)}" floor nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (number nonempty-type-decl nil numbers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (number_field_pred const-decl "[number -> boolean]" number_fields
           nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers nil)
          (int nonempty-type-eq-decl nil integers nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (cauchy_real? const-decl "bool" cauchy nil)
          (cauchy_real nonempty-type-eq-decl nil cauchy nil)
          (cauchy_noninteger? const-decl "bool" floor nil)
          (cauchy_noninteger nonempty-type-eq-decl nil floor nil)
          (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
          (nonempty? const-decl "bool" sets nil)
          (choose const-decl "(p)" sets nil)
          (precisions const-decl "(nonempty?[nat])" floor nil)
          (upto nonempty-type-eq-decl nil naturalnumbers nil)
          (floor_aux_lem2 formula-decl nil floor nil))
         shostak)))


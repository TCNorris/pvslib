(prelude_sqrt
 (square_le1 0
  (square_le1-1 nil 3507981236 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil))
 (square_le2 0
  (square_le2-1 nil 3507981236
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (case "1<nnx!1")
          (("1"
            (lemma "lt_times_lt_pos1"
             ("px" "1" "y" "nnx!1" "nnz" "1" "w" "nnx!1"))
            (("1" (grind) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (case "0<nnx!1")
          (("1" (case "nnx!1<1")
            (("1"
              (lemma "lt_times_lt_pos1"
               ("px" "nnx!1" "y" "1" "nnz" "nnx!1" "w" "1"))
              (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (case "nnx!1=0")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (square_le3 0
  (square_le3-1 nil 3507981236
   ("" (skosimp*)
    (("" (typepred "nnx!1")
      (("" (typepred "nny!1")
        (("" (case "nnx!1<nny!1")
          (("1" (split)
            (("1" (assert) nil nil)
             ("2"
              (lemma "lt_times_lt_nn1"
               ("nnx" "nnx!1" "y" "nny!1" "nnz" "nnx!1" "w" "nny!1"))
              (("2" (assert) nil nil)) nil))
            nil)
           ("2" (case "nny!1<=nnx!1")
            (("1" (split)
              (("1"
                (lemma "le_times_le_pos"
                 ("nnx" "nny!1" "y" "nnx!1" "nnz" "nny!1" "w" "nnx!1"))
                (("1" (grind) nil nil)) nil)
               ("2" (flatten) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (lt_times_lt_nn1 formula-decl nil prelude_aux nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil))
   nil))
 (square_eq1 0
  (square_eq1-1 nil 3507981236
   ("" (skosimp*)
    (("" (case "nnx!1<nny!1")
      (("1" (lemma "square_le3" ("nnx" "nnx!1" "nny" "nny!1"))
        (("1" (assert) nil nil)) nil)
       ("2" (case "nny!1<nnx!1")
        (("1" (lemma "square_le3" ("nny" "nnx!1" "nnx" "nny!1"))
          (("1" (assert) nil nil)) nil)
         ("2" (case "nnx!1=nny!1")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (square_le3 formula-decl nil prelude_sqrt nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (square_le4 0
  (square_le4-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_eq1" ("nnx" "nnx!1" "nny" "nny!1"))
      (("" (lemma "square_le3" ("nnx" "nnx!1" "nny" "nny!1"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_eq1 formula-decl nil prelude_sqrt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (square_le3 formula-decl nil prelude_sqrt nil))
   nil))
 (square_le5 0
  (square_le5-2 "" 3790105911
   ("" (skosimp*)
    (("" (lemma "square_le2" ("nnx" "1/px!1"))
      (("" (flatten)
        (("" (split 1)
          (("1" (simplify -1)
            (("1" (lemma "div_mult_pos_le1" ("z" "1" "py" "px!1" "x" "1"))
              (("1" (replace -1 -2)
                (("1" (rewrite "div_times" -2)
                  (("1"
                    (lemma "div_mult_pos_le1"
                     ("z" "1" "py" "px!1*px!1" "x" "1"))
                    (("1" (replace -1 -3)
                      (("1" (assert)
                        (("1" (hide (-1 -2 -4))
                          (("1" (case "1=px!1 * px!1")
                            (("1" (replace -1 (-2 1) rl)
                              (("1" (assert) nil nil)) nil)
                             ("2" (case "1 < px!1 *px!1")
                              (("1" (expand "<=" -2 1)
                                (("1" (replace -1 -2)
                                  (("1" (expand "<=")
                                    (("1" (split -2)
                                      (("1" (assert) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (lemma "div_mult_pos_le1" ("z" "1" "py" "px!1" "x" "1"))
              (("2" (replace -1 -2)
                (("2" (rewrite "div_times" -2)
                  (("2"
                    (lemma "div_mult_pos_le1"
                     ("z" "1" "py" "px!1* px!1" "x" "1"))
                    (("2" (replace -1 -3)
                      (("2" (hide (-1 -2))
                        (("2" (expand "<=")
                          (("2" (case "1=px!1")
                            (("1" (replace -1 (-2 1) rl)
                              (("1" (grind) nil nil)) nil)
                             ("2" (case "1<px!1")
                              (("1" (simplify)
                                (("1" (replace -1)
                                  (("1" (split -2)
                                    (("1" (assert) nil nil)
                                     ("2" (lemma "square_le2" ("nnx" "px!1"))
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (square_le5-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_le2" ("nnx" "1/px!1"))
      (("" (flatten)
        (("" (split 1)
          (("1" (simplify -1)
            (("1" (lemma "div_mult_pos_le1" ("z" "1" "py" "px!1" "x" "1"))
              (("1" (replace -1 -2)
                (("1" (rewrite "div_times" -2)
                  (("1"
                    (lemma "div_mult_pos_le1"
                     ("z" "1" "py" "px!1*px!1" "x" "1"))
                    (("1" (replace -1 -3)
                      (("1" (assert)
                        (("1" (hide (-1 -2 -4))
                          (("1" (case "1=px!1 * px!1")
                            (("1" (replace -1 (-2 1) rl)
                              (("1" (assert) nil nil)) nil)
                             ("2" (case "1 < px!1 *px!1")
                              (("1" (expand "<=" -2 1)
                                (("1" (replace -1 -2)
                                  (("1" (simplify -2)
                                    (("1" (expand "<=")
                                      (("1"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (lemma "div_mult_pos_le1" ("z" "1" "py" "px!1" "x" "1"))
              (("2" (replace -1 -2)
                (("2" (rewrite "div_times" -2)
                  (("2"
                    (lemma "div_mult_pos_le1"
                     ("z" "1" "py" "px!1* px!1" "x" "1"))
                    (("2" (replace -1 -3)
                      (("2" (hide (-1 -2))
                        (("2" (expand "<=")
                          (("2" (case "1=px!1")
                            (("1" (replace -1 (-2 1) rl)
                              (("1" (grind) nil nil)) nil)
                             ("2" (case "1<px!1")
                              (("1" (simplify)
                                (("1" (replace -1)
                                  (("1" (simplify)
                                    (("1" (split -2)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "square_le2" ("nnx" "px!1"))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_le2 formula-decl nil prelude_sqrt nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_times formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (square_le6 0
  (square_le6-1 nil 3507981236
   ("" (skosimp*)
    (("" (rewrite "lt_equiv_not_le" 1)
      (("" (rewrite "le_equiv_not_lt" -1)
        (("" (expand "<=")
          (("" (split -2)
            (("1" (lemma "strict_lt")
              (("1" (expand "strict_total_order?")
                (("1" (expand "strict_order?")
                  (("1" (expand "transitive?")
                    (("1" (flatten)
                      (("1" (inst - "1" "py!1" "nnx!1")
                        (("1"
                          (lemma "lt_times_lt_pos1"
                           ("px" "py!1" "y" "nnx!1" "nnz" "1" "w" "nnx!1"))
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2"
                (lemma "both_sides_times_pos_lt1"
                 ("x" "1" "y" "nnx!1" "pz" "nnx!1"))
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_equiv_not_le formula-decl nil prelude_aux nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (strict_lt formula-decl nil real_props nil)
    (strict_order? const-decl "bool" orders nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (irreflexive? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (transitive? const-decl "bool" relations nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (le_equiv_not_lt formula-decl nil prelude_aux nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil))
 (square_archimedean1 0
  (square_archimedean1-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "archimedean" ("px" "px!1"))
      (("" (skolem!)
        (("" (rewrite "div_mult_pos_lt1")
          (("" (inst + "n!1")
            (("" (rewrite "div_mult_pos_lt1")
              (("" (typepred "n!1")
                (("" (expand ">")
                  (("" (lemma "lt_equiv_le_plus_one" ("x" "0" "y" "n!1"))
                    (("" (grind)
                      ((""
                        (lemma "lt_times_lt_pos1"
                         ("px" "1" "y" "n!1" "nnz" "1" "w" "px!1 * n!1"))
                        (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (archimedean formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (lt_equiv_le_plus_one formula-decl nil prelude_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (square_archimedean2 0
  (square_archimedean2-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "archimedean" ("px" "px!1"))
      (("" (skolem!)
        (("" (inst + "4*n!1")
          (("" (rewrite "add_div")
            (("" (rewrite "div_mult_pos_lt1")
              (("" (rewrite "div_mult_pos_lt1")
                (("" (typepred "n!1")
                  (("" (expand ">")
                    (("" (lemma "lt_equiv_le_plus_one" ("x" "0" "y" "n!1"))
                      (("" (replace -1 -2)
                        (("" (replace -2 -1)
                          (("" (flatten)
                            (("" (simplify)
                              ((""
                                (lemma "both_sides_times_pos_lt1"
                                 ("x" "0" "y" "n!1" "pz" "7"))
                                (("" (rewrite "zero_times1")
                                  (("" (replace -2 -1)
                                    (("" (flatten)
                                      ((""
                                        (lemma
                                         "lt_plus_lt1"
                                         ("x"
                                          "1"
                                          "y"
                                          "n!1"
                                          "z"
                                          "0"
                                          "w"
                                          "n!1*7"))
                                        ((""
                                          (grind)
                                          ((""
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "1"
                                              "y"
                                              "8 * n!1"
                                              "pz"
                                              "4*n!1"))
                                            ((""
                                              (grind)
                                              ((""
                                                (lemma
                                                 "both_sides_plus_lt1"
                                                 ("x"
                                                  "4 * n!1"
                                                  "y"
                                                  "32 * (n!1 * n!1)"
                                                  "z"
                                                  "32 * (n!1 * n!1)"))
                                                ((""
                                                  (lemma
                                                   "lt_times_lt_pos1"
                                                   ("px"
                                                    "1"
                                                    "y"
                                                    "px!1 *n!1"
                                                    "nnz"
                                                    "32 * (n!1 * n!1) + 4 * n!1"
                                                    "w"
                                                    "64 * (n!1 * n!1)"))
                                                  (("" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (archimedean formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_equiv_le_plus_one formula-decl nil prelude_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_times1 formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (lt_plus_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (add_div formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil))
   nil))
 (square_exist_lt1 0
  (square_exist_lt1-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_archimedean2" ("px" "px!1-py!1 * py!1"))
      (("1" (skolem!)
        (("1" (inst + "py!1*(1+1/n!1)")
          (("1" (split)
            (("1"
              (lemma "both_sides_times_pos_lt1"
               ("x" "1" "y" "1+1/n!1" "pz" "py!1"))
              (("1" (grind) nil nil)) nil)
             ("2" (grind)
              (("2"
                (lemma "both_sides_plus_lt1"
                 ("x" "1 / (n!1 * n!1) + 2 / n!1" "y" "px!1 - py!1 * py!1" "z"
                  "py!1 * py!1"))
                (("2" (grind)
                  (("2" (typepred "n!1")
                    (("2"
                      (lemma "both_sides_times_pos_lt1"
                       ("x" "1 / (n!1 * n!1) + 2 / n!1 + py!1 * py!1" "y"
                        "px!1" "pz" "n!1 * n!1"))
                      (("2"
                        (lemma "both_sides_times_pos_lt1"
                         ("x"
                          "1 / n!1 * py!1 * py!1 + 1 / n!1 * (1 / n!1) * py!1 * py!1 +
       (1 / n!1 * py!1 * py!1 + py!1 * py!1)" "y" "px!1" "pz" "n!1 * n!1"))
                        (("2" (grind)
                          (("2" (hide (2 -6 -4))
                            (("2" (rewrite "div_cancel2" -1)
                              (("2" (rewrite "div_cancel2" 1)
                                (("2" (simplify)
                                  (("2" (lemma "square_le2" ("nnx" "py!1"))
                                    (("2" (grind)
                                      (("2"
                                        (lemma
                                         "both_sides_times_pos_le1"
                                         ("x"
                                          "py!1*py!1"
                                          "y"
                                          "1"
                                          "pz"
                                          "2*n!1"))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_archimedean2 formula-decl nil prelude_sqrt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (square_le2 formula-decl nil prelude_sqrt nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (square_exist_lt2 0
  (square_exist_lt2-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_archimedean1" ("px" "px!1"))
      (("" (skolem!) (("" (inst + "1/n!1") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_archimedean1 formula-decl nil prelude_sqrt nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   nil))
 (square_exist_lt3 0
  (square_exist_lt3-2 "" 3790105914
   ("" (skosimp*)
    (("" (typepred "nny!1")
      (("" (expand ">=")
        (("" (expand "<=")
          (("" (split)
            (("1"
              (lemma "div_mult_pos_lt2"
               ("x" "1" "z" "px!1" "py" "nny!1 * nny!1"))
              (("1" (replace -3 -1)
                (("1" (flatten)
                  (("1"
                    (lemma "square_exist_lt1"
                     ("py" "1" "px" "px!1 / (nny!1 * nny!1)"))
                    (("1" (replace -2 -1)
                      (("1" (simplify -1)
                        (("1" (skolem!)
                          (("1" (flatten)
                            (("1" (inst + "nny!1 *pz!1")
                              (("1" (split)
                                (("1"
                                  (lemma "both_sides_times_pos_lt1"
                                   ("x" "1" "y" "pz!1" "pz" "nny!1"))
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "div_mult_pos_lt2"
                                   ("x" "pz!1 * pz!1" "z" "px!1" "py"
                                    "nny!1 * nny!1"))
                                  (("2" (grind) nil nil)) nil))
                                nil)
                               ("2"
                                (lemma "lt_times_lt_nn1"
                                 ("nnx" "1" "y" "pz!1" "nnz" "0" "w" "nny!1"))
                                (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "square_le3" ("nnx" "0" "nny" "nny!1"))
                (("2" (grind) nil nil)) nil))
              nil)
             ("2" (replace -1 (-2 1) rl)
              (("2" (lemma "square_exist_lt2" ("px" "px!1"))
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (square_exist_lt3-1 nil 3507981236
   ("" (skosimp*)
    (("" (typepred "nny!1")
      (("" (expand ">=")
        (("" (expand "<=")
          (("" (split)
            (("1"
              (lemma "div_mult_pos_lt2"
               ("x" "1" "z" "px!1" "py" "nny!1 * nny!1"))
              (("1" (replace -3 -1)
                (("1" (flatten)
                  (("1"
                    (lemma "square_exist_lt1"
                     ("py" "1" "px" "px!1 / (nny!1 * nny!1)"))
                    (("1" (replace -2 -1)
                      (("1" (simplify -1)
                        (("1" (skolem!)
                          (("1" (flatten)
                            (("1" (inst + "nny!1 *pz!1")
                              (("1" (split)
                                (("1"
                                  (lemma "both_sides_times_pos_lt1"
                                   ("x" "1" "y" "pz!1" "pz" "nny!1"))
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "div_mult_pos_lt2"
                                   ("x" "pz!1 * pz!1" "z" "px!1" "py"
                                    "nny!1 * nny!1"))
                                  (("2" (grind) nil nil)) nil))
                                nil)
                               ("2"
                                (lemma "lt_times_lt_nn1"
                                 ("nnx" "1" "y" "pz!1" "nnz" "0" "w" "nny!1"))
                                (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide 2)
                      (("3" (lemma "square_le3" ("nnx" "0" "nny" "nny!1"))
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "square_le3" ("nnx" "0" "nny" "nny!1"))
                (("2" (grind) nil nil)) nil))
              nil)
             ("2" (replace -1 (-2 1) rl)
              (("2" (lemma "square_exist_lt2" ("px" "px!1"))
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (square_exist_lt2 formula-decl nil prelude_sqrt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nny!1 skolem-const-decl "nnreal" prelude_sqrt nil)
    (pz!1 skolem-const-decl "posreal" prelude_sqrt nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (lt_times_lt_nn1 formula-decl nil prelude_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (square_exist_lt1 formula-decl nil prelude_sqrt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (square_le3 formula-decl nil prelude_sqrt nil))
   nil))
 (square_exist_gt3 0
  (square_exist_gt3-2 "" 3790105915
   ("" (skosimp*)
    (("" (typepred "nnx!1")
      (("" (expand ">=")
        (("" (expand "<=")
          (("" (split)
            (("1"
              (lemma "both_sides_div_pos_lt2"
               ("py" "nnx!1" "px" "py!1 * py!1" "pz" "1"))
              (("1" (replace -3 -1)
                (("1" (flatten)
                  (("1"
                    (lemma "square_exist_lt3" ("nny" "1/py!1" "px" "1/nnx!1"))
                    (("1" (replace -2 -1)
                      (("1" (skolem!)
                        (("1" (inst + "1/pz!1")
                          (("1" (flatten)
                            (("1" (split)
                              (("1"
                                (lemma "div_mult_pos_lt1"
                                 ("z" "1" "py" "py!1" "x" "pz!1"))
                                (("1"
                                  (lemma "div_mult_pos_lt1"
                                   ("z" "1" "py" "pz!1" "x" "py!1"))
                                  (("1" (grind) nil nil)) nil))
                                nil)
                               ("2"
                                (lemma "div_mult_pos_lt2"
                                 ("z" "1" "py" "nnx!1" "x" "pz!1 * pz!1"))
                                (("2" (rewrite "div_times" 1)
                                  (("2"
                                    (lemma "div_mult_pos_lt2"
                                     ("z" "1" "x" "nnx!1" "py" "pz!1 * pz!1"))
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (2 -1 -3))
                      (("2"
                        (lemma "div_mult_pos_gt2"
                         ("py" "nnx!1" "z" "1" "x" "0"))
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (replace -1 (-2 1) rl)
              (("2" (lemma "square_le3" ("nnx" "0" "nny" "py!1"))
                (("2" (lemma "archimedean" ("px" "py!1"))
                  (("2" (skolem!)
                    (("2" (inst + "1 / n!1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (square_exist_gt3-1 nil 3507981236
   ("" (skosimp*)
    (("" (typepred "nnx!1")
      (("" (expand ">=")
        (("" (expand "<=")
          (("" (split)
            (("1"
              (lemma "both_sides_div_pos_lt2"
               ("py" "nnx!1" "px" "py!1 * py!1" "pz" "1"))
              (("1" (replace -3 -1)
                (("1" (flatten)
                  (("1"
                    (lemma "square_exist_lt3" ("nny" "1/py!1" "px" "1/nnx!1"))
                    (("1" (replace -2 -1)
                      (("1" (simplify -1)
                        (("1" (skolem!)
                          (("1" (inst + "1/pz!1")
                            (("1" (flatten)
                              (("1" (split)
                                (("1"
                                  (lemma "div_mult_pos_lt1"
                                   ("z" "1" "py" "py!1" "x" "pz!1"))
                                  (("1"
                                    (lemma "div_mult_pos_lt1"
                                     ("z" "1" "py" "pz!1" "x" "py!1"))
                                    (("1" (grind) nil nil)) nil))
                                  nil)
                                 ("2"
                                  (lemma "div_mult_pos_lt2"
                                   ("z" "1" "py" "nnx!1" "x" "pz!1 * pz!1"))
                                  (("2" (rewrite "div_times" 1)
                                    (("2"
                                      (lemma
                                       "div_mult_pos_lt2"
                                       ("z"
                                        "1"
                                        "x"
                                        "nnx!1"
                                        "py"
                                        "pz!1 * pz!1"))
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (2 -1 -3))
                      (("2"
                        (lemma "div_mult_pos_gt2"
                         ("py" "nnx!1" "z" "1" "x" "0"))
                        (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (replace -1 (-2 1) rl)
              (("2" (lemma "square_le3" ("nnx" "0" "nny" "py!1"))
                (("2" (lemma "archimedean" ("px" "py!1"))
                  (("2" (skolem!)
                    (("2" (inst + "1 / n!1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (archimedean formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (square_le3 formula-decl nil prelude_sqrt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_times formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (square_exist_lt3 formula-decl nil prelude_sqrt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil))
 (sqrt_set_nonempty 0
  (sqrt_set_nonempty-1 nil 3507981236
   ("" (skosimp*)
    (("" (expand "sqrt_set")
      (("" (expand "nonempty?")
        (("" (expand "empty?") (("" (inst - "0") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_set const-decl "setof[nnreal]" prelude_sqrt nil)
    (empty? const-decl "bool" sets nil) (restrict const-decl "R" restrict nil)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (sqrt_set_has_UB_TCC1 0
  (sqrt_set_has_UB_TCC1-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "sqrt_set_nonempty" ("nnx" "nnx!1"))
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (skosimp*)
            (("" (inst - "x!1")
              (("" (expand "extend")
                (("" (typepred "x!1")
                  (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_set_nonempty formula-decl nil prelude_sqrt nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (extend const-decl "R" extend nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (sqrt_set_has_UB subtype
    "extend[real, nnreal, booleans.bool, booleans.FALSE].extend(prelude_sqrt.sqrt_set(prelude_sqrt.nnx))"
    "(sets[real].nonempty?)")))
 (sqrt_set_has_UB 0
  (sqrt_set_has_UB-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "sqrt_set_nonempty" ("nnx" "nnx!1"))
      (("" (expand "sqrt_set_UB")
        (("" (expand "upper_bound?")
          (("" (skosimp*)
            (("" (typepred "s!1")
              (("" (expand "sqrt_set" -1)
                (("" (grind)
                  (("1" (lemma "square_le2" ("nnx" "s!1"))
                    (("1" (grind) nil nil)) nil)
                   ("2" (lemma "le_equiv_not_lt" ("x" "nnx!1" "y" "1"))
                    (("2" (lemma "square_le6" ("py" "nnx!1" "nnx" "s!1"))
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_set_nonempty formula-decl nil prelude_sqrt nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (sqrt_set const-decl "setof[nnreal]" prelude_sqrt nil)
    (setof type-eq-decl nil defined_types nil)
    (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (square_le2 formula-decl nil prelude_sqrt nil)
    (square_le6 formula-decl nil prelude_sqrt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_equiv_not_lt formula-decl nil prelude_aux nil)
    (sqrt_set_UB const-decl "nnreal" prelude_sqrt nil))
   nil))
 (sqrt_set_LUB 0
  (sqrt_set_LUB-2 "" 3790105915
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "least_upper_bound?")
          (("1" (split)
            (("1" (expand "upper_bound?")
              (("1" (skosimp*)
                (("1" (typepred "s!1")
                  (("1" (expand "sqrt_set")
                    (("1" (grind)
                      (("1" (lemma "square_le4" ("nnx" "s!1" "nny" "nny!1"))
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "upper_bound?")
                (("2" (inst - "nny!1")
                  (("2" (expand "extend")
                    (("2" (expand "sqrt_set") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "trich_lt" ("x" "nny!1 * nny!1" "y" "nnx!1"))
          (("2" (split -1)
            (("1" (hide 1)
              (("1" (expand "least_upper_bound?")
                (("1" (flatten)
                  (("1" (hide -3)
                    (("1" (expand "upper_bound?")
                      (("1" (rewrite "not_forall" -2)
                        (("1" (typepred "nny!1")
                          (("1" (expand ">=")
                            (("1"
                              (lemma "le_times_le_pos"
                               ("nnx" "0" "y" "nny!1" "nnz" "0" "w" "nny!1"))
                              (("1"
                                (lemma "square_exist_lt3"
                                 ("nny" "nny!1" "px" "nnx!1"))
                                (("1" (replace -4 -1)
                                  (("1" (skolem!)
                                    (("1" (flatten)
                                      (("1"
                                        (inst + "pz!1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "extend")
                                          (("2"
                                            (expand "sqrt_set")
                                            (("2"
                                              (expand "restrict")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (hide 1)
              (("3" (expand "least_upper_bound?")
                (("3" (flatten)
                  (("3" (hide -2)
                    (("3" (rewrite "not_forall" -2)
                      (("1"
                        (lemma "square_exist_gt3"
                         ("nnx" "nnx!1" "py" "nny!1"))
                        (("1" (replace -2 -1)
                          (("1" (skolem!)
                            (("1" (flatten)
                              (("1" (inst + "nnz!1")
                                (("1" (expand "upper_bound?")
                                  (("1" (prop)
                                    (("1" (assert) nil nil)
                                     ("2" (skolem!)
                                      (("2"
                                        (typepred "s!1")
                                        (("2"
                                          (expand "extend")
                                          (("2"
                                            (expand "sqrt_set")
                                            (("2"
                                              (expand "restrict")
                                              (("2"
                                                (lemma
                                                 "square_le3"
                                                 ("nnx" "s!1" "nny" "nnz!1"))
                                                (("1" (grind) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (inst -1 "0") (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sqrt_set_LUB-1 nil 3507981236
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "least_upper_bound?")
          (("1" (split)
            (("1" (expand "upper_bound?")
              (("1" (skosimp*)
                (("1" (typepred "s!1")
                  (("1" (expand "sqrt_set")
                    (("1" (grind)
                      (("1" (lemma "square_le4" ("nnx" "s!1" "nny" "nny!1"))
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "upper_bound?")
                (("2" (inst - "nny!1")
                  (("2" (expand "extend")
                    (("2" (expand "sqrt_set") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "trich_lt" ("x" "nny!1 * nny!1" "y" "nnx!1"))
          (("2" (split -1)
            (("1" (hide 1)
              (("1" (expand "least_upper_bound?")
                (("1" (flatten)
                  (("1" (hide -3)
                    (("1" (expand "upper_bound?")
                      (("1" (rewrite "not_forall" -2)
                        (("1" (typepred "nny!1")
                          (("1" (expand ">=")
                            (("1"
                              (lemma "le_times_le_pos"
                               ("nnx" "0" "y" "nny!1" "nnz" "0" "w" "nny!1"))
                              (("1"
                                (lemma "square_exist_lt3"
                                 ("nny" "nny!1" "px" "nnx!1"))
                                (("1" (replace -4 -1)
                                  (("1" (simplify -1)
                                    (("1" (skolem!)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst + "pz!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "extend")
                                            (("2"
                                              (expand "sqrt_set")
                                              (("2"
                                                (expand "restrict")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (hide 1)
              (("3" (expand "least_upper_bound?")
                (("3" (flatten)
                  (("3" (hide -2)
                    (("3" (rewrite "not_forall" -2)
                      (("1"
                        (lemma "square_exist_gt3"
                         ("nnx" "nnx!1" "py" "nny!1"))
                        (("1" (replace -2 -1)
                          (("1" (simplify -1)
                            (("1" (skolem!)
                              (("1" (flatten)
                                (("1" (inst + "nnz!1")
                                  (("1" (expand "upper_bound?")
                                    (("1" (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (skolem!)
                                        (("2"
                                          (typepred "s!1")
                                          (("2"
                                            (expand "extend")
                                            (("2"
                                              (expand "sqrt_set")
                                              (("2"
                                                (expand "restrict")
                                                (("2"
                                                  (lemma
                                                   "square_le3"
                                                   ("nnx"
                                                    "s!1"
                                                    "nny"
                                                    "nnz!1"))
                                                  (("1" (grind) nil nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (inst -1 "0") (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nny!1 skolem-const-decl "nnreal" prelude_sqrt nil)
    (nnx!1 skolem-const-decl "nnreal" prelude_sqrt nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (sqrt_set const-decl "setof[nnreal]" prelude_sqrt nil)
    (setof type-eq-decl nil defined_types nil)
    (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (restrict const-decl "R" restrict nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (square_le4 formula-decl nil prelude_sqrt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trich_lt formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (square_le3 formula-decl nil prelude_sqrt nil)
    (square_exist_gt3 formula-decl nil prelude_sqrt nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pz!1 skolem-const-decl "posreal" prelude_sqrt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (square_exist_lt3 formula-decl nil prelude_sqrt nil)
    (<= const-decl "bool" reals nil)
    (not_forall formula-decl nil quantifier_props nil))
   nil))
 (square_injective 0
  (square_injective-1 nil 3507981236
   ("" (expand "injective?")
    (("" (expand "square")
      (("" (skosimp*)
        (("" (lemma "square_eq1" ("nnx" "x1!1" "nny" "x2!1"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((square const-decl "nnreal" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_eq1 formula-decl nil prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (injective? const-decl "bool" functions nil))
   nil))
 (square_surjective 0
  (square_surjective-1 nil 3507981236
   ("" (expand "surjective?")
    (("" (expand "square")
      (("" (skosimp*)
        (("" (typepred "y!1")
          (("" (lemma "sqrt_set_nonempty" ("nnx" "y!1"))
            (("" (lemma "sqrt_set_LUB" ("nnx" "y!1"))
              ((""
                (lemma "lub_exists"
                 ("SA" "extend[real, nnreal, bool, FALSE](sqrt_set(y!1))"))
                (("1" (skolem!)
                  (("1" (inst - "x!1")
                    (("1" (inst + "x!1")
                      (("1" (replace -2 1) (("1" (propax) nil nil)) nil)
                       ("2" (replace -2 -1 rl)
                        (("2" (replace -2 -1)
                          (("2" (hide -2)
                            (("2" (expand "least_upper_bound?")
                              (("2" (flatten)
                                (("2" (hide -2)
                                  (("2" (expand "upper_bound?")
                                    (("2" (inst - "0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "extend")
                                        (("2"
                                          (expand "sqrt_set")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "least_upper_bound?")
                      (("2" (flatten)
                        (("2" (expand "upper_bound?")
                          (("2" (inst -1 "0")
                            (("1" (assert) nil nil)
                             ("2" (expand "extend")
                              (("2" (expand "sqrt_set")
                                (("2" (hide-all-but (-3 1))
                                  (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split 1)
                  (("1" (hide (-1 -3 2))
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (skosimp*)
                          (("1" (inst - "x!1") (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "sqrt_set_has_UB" ("nnx" "y!1"))
                    (("2" (expand "bounded_above?")
                      (("2" (inst 1 "sqrt_set_UB(y!1)") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((square const-decl "nnreal" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sqrt_set_LUB formula-decl nil prelude_sqrt nil)
    (member const-decl "bool" sets nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (empty? const-decl "bool" sets nil)
    (sqrt_set_UB const-decl "nnreal" prelude_sqrt nil)
    (sqrt_set_has_UB formula-decl nil prelude_sqrt nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (y!1 skolem-const-decl "nnreal" prelude_sqrt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (restrict const-decl "R" restrict nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (x!1 skolem-const-decl "real" prelude_sqrt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lub_exists formula-decl nil bounded_real_defs nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (setof type-eq-decl nil defined_types nil)
    (sqrt_set const-decl "setof[nnreal]" prelude_sqrt nil)
    (sqrt_set_nonempty formula-decl nil prelude_sqrt nil)
    (surjective? const-decl "bool" functions nil))
   nil))
 (square_bijective 0
  (square_bijective-1 nil 3507981236
   ("" (lemma "square_injective")
    (("" (lemma "square_surjective")
      (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((square_surjective formula-decl nil prelude_sqrt nil)
    (bijective? const-decl "bool" functions nil)
    (square_injective formula-decl nil prelude_sqrt nil))
   nil))
 (square_is 0
  (square_is-1 nil 3507981236
   ("" (expand "square") (("" (propax) nil nil)) nil)
   ((square const-decl "nnreal" prelude_sqrt nil)) nil))
 (sqrt_square1 0
  (sqrt_square1-1 nil 3507981236
   ("" (lemma "square_bijective")
    (("" (skosimp*)
      (("" (lemma "comp_inverse_right" ("f" "square" "y" "nnx!1"))
        (("1" (expand "sqrt") (("1" (propax) nil nil)) nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (bijective? const-decl "bool" functions nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (square_bijective formula-decl nil prelude_sqrt nil))
   nil))
 (sqrt_square2 0
  (sqrt_square2-1 nil 3507981236
   ("" (skosimp)
    (("" (lemma "square_bijective")
      (("" (expand "sqrt")
        (("" (lemma "comp_inverse_left" ("f" "square" "x" "nnx!1"))
          (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((square_bijective formula-decl nil prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (bijective? const-decl "bool" functions nil)
    (comp_inverse_left formula-decl nil function_inverse nil)
    (sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil))
   nil))
 (square_times 0
  (square_times-1 nil 3507981236
   ("" (expand "square") (("" (propax) nil nil)) nil)
   ((square const-decl "nnreal" prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil))
 (sqrt_times 0
  (sqrt_times-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_surjective")
      (("" (expand "surjective?")
        (("" (inst-cp -1 "nnx!1")
          (("" (inst -1 "nny!1")
            (("" (skolem!)
              (("" (skolem!)
                (("" (replace -1 1 rl)
                  (("" (replace -2 1 rl)
                    (("" (lemma "square_times" ("nnx" "x!2" "nny" "x!1"))
                      (("" (replace -1 1 rl)
                        (("" (rewrite "sqrt_square2")
                          (("" (rewrite "sqrt_square2")
                            (("" (rewrite "sqrt_square2") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((square_surjective formula-decl nil prelude_sqrt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (square_times formula-decl nil prelude_sqrt nil)
    (sqrt_square2 formula-decl nil prelude_sqrt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (surjective? const-decl "bool" functions nil))
   nil))
 (sqrt_zero 0
  (sqrt_zero-1 nil 3507981236
   ("" (lemma "square_eq1" ("nnx" "sqrt(0)" "nny" "0"))
    (("" (lemma "square_is" ("nnx" "sqrt(0)"))
      (("" (replace -1 -2 rl)
        (("" (lemma "sqrt_square1" ("nnx" "0")) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((square_is formula-decl nil prelude_sqrt nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (square_eq1 formula-decl nil prelude_sqrt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil))
   nil))
 (sqrt_one 0
  (sqrt_one-1 nil 3507981236
   ("" (lemma "square_eq1" ("nnx" "sqrt(1)" "nny" "1"))
    (("" (lemma "square_is" ("nnx" "sqrt(1)"))
      (("" (replace -1 -2 rl)
        (("" (lemma "sqrt_square1" ("nnx" "1")) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((square_is formula-decl nil prelude_sqrt nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (square_eq1 formula-decl nil prelude_sqrt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil))
   nil))
 (both_sides_sqrt1 0
  (both_sides_sqrt1-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_eq1" ("nnx" "sqrt(nnx!1)" "nny" "nny!1"))
      (("" (lemma "sqrt_square1" ("nnx" "nnx!1"))
        (("" (expand "square") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_eq1 formula-decl nil prelude_sqrt nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (inverse const-decl "D" function_inverse nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt2 0
  (both_sides_sqrt2-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "both_sides_sqrt1" ("nnx" "nnx!1" "nny" "sqrt(nny!1)"))
      (("" (lemma "sqrt_square1" ("nnx" "nny!1"))
        (("" (expand "square") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_sqrt1 formula-decl nil prelude_sqrt nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (inverse const-decl "D" function_inverse nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt_lt1 0
  (both_sides_sqrt_lt1-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_le3" ("nnx" "sqrt(nnx!1)" "nny" "nny!1"))
      (("" (lemma "sqrt_square1" ("nnx" "nnx!1"))
        (("" (expand "square") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_le3 formula-decl nil prelude_sqrt nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (inverse const-decl "D" function_inverse nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt_lt2 0
  (both_sides_sqrt_lt2-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "both_sides_sqrt_lt1" ("nnx" "nnx!1" "nny" "sqrt(nny!1)"))
      (("" (lemma "sqrt_square1" ("nnx" "nny!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_sqrt_lt1 formula-decl nil prelude_sqrt nil)
    (inverse const-decl "D" function_inverse nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt_lt3 0
  (both_sides_sqrt_lt3-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "square_le3" ("nnx" "nnx!1" "nny" "sqrt(nny!1)"))
      (("" (lemma "sqrt_square1" ("nnx" "nny!1"))
        (("" (expand "square") (("" (assert) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (square_le3 formula-decl nil prelude_sqrt nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (inverse const-decl "D" function_inverse nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_square1 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt_le1 0
  (both_sides_sqrt_le1-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "both_sides_sqrt1" ("nnx" "nnx!1" "nny" "nny!1"))
      (("" (lemma "both_sides_sqrt_lt1" ("nnx" "nnx!1" "nny" "nny!1"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_sqrt1 formula-decl nil prelude_sqrt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (inverse const-decl "D" function_inverse nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_sqrt_lt1 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt_le2 0
  (both_sides_sqrt_le2-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "both_sides_sqrt2" ("nnx" "nnx!1" "nny" "nny!1"))
      (("" (lemma "both_sides_sqrt_lt2" ("nnx" "nnx!1" "nny" "nny!1"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_sqrt2 formula-decl nil prelude_sqrt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inverse const-decl "D" function_inverse nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_sqrt_lt2 formula-decl nil prelude_sqrt nil))
   nil))
 (both_sides_sqrt_le3 0
  (both_sides_sqrt_le3-1 nil 3507981236
   ("" (skosimp*)
    (("" (lemma "both_sides_sqrt_lt3" ("nnx" "nnx!1" "nny" "nny!1"))
      (("" (lemma "both_sides_sqrt1" ("nnx" "nny!1" "nny" "nnx!1"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_sqrt_lt3 formula-decl nil prelude_sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inverse const-decl "D" function_inverse nil)
    (square const-decl "nnreal" prelude_sqrt nil)
    (sqrt const-decl "[nnreal -> nnreal]" prelude_sqrt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_sqrt1 formula-decl nil prelude_sqrt nil))
   nil)))


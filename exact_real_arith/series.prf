(series
 (sum_TCC1 0
  (sum_TCC1-1 nil 3676194504 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (sum subtype "(number_fields.-)(series.n, 1)" "nat")))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3676194504 ("" (termination-tcc) nil nil) nil nil
   (sum termination "series.sum(series.xs, (number_fields.-)(series.n, 1))"
    "nil")))
 (sum_lemma1 0
  (sum_lemma1-1 nil 3676194521
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "sum") (("1" (inst? -1) (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "x" "xs" "ys")
          (("2" (expand "sum" +)
            (("2" (split)
              (("1" (replaces -1)
                (("1" (inst -1 "1 + j") (("1" (assert) nil nil)) nil)) nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sum def-decl "real" series nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (geometric_series_TCC1 0
  (geometric_series_TCC1-1 nil 3676194504 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (geometric_series subtype "series.n"
    "{i: integers.int | booleans.OR(series.x /= 0, reals.>=(i, 0))}")))
 (geometric_series_aux1_TCC1 0
  (geometric_series_aux1_TCC1-1 nil 3676194504 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (geometric_series_aux1 subtype "((number_fields.+)(series.n, 1))"
    "{i: integers.int | booleans.OR(series.x /= 0, reals.>=(i, 0))}")))
 (geometric_series_aux1_TCC2 0
  (geometric_series_aux1_TCC2-1 nil 3676194504 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (geometric_series_aux1 subtype "((number_fields.-)(1, series.x))"
    "nznum")))
 (geometric_series_aux1 0
  (geometric_series_aux1-1 nil 3676194655
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "sum")
        (("1" (expand "geometric_series")
          (("1" (cross-mult) (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "x")
          (("2" (split)
            (("1" (expand "sum" +)
              (("1" (replaces -1)
                (("1" (expand "geometric_series")
                  (("1" (mult-by 1 "1 - x")
                    (("1" (lemma "commutative_mult")
                      (("1"
                        (inst -1 "x^(1+j) + (1 - x^(1 + j)) / (1 - x)"
                         "1 - x")
                        (("1" (replaces -1)
                          (("1" (lemma "distributive")
                            (("1"
                              (inst -1 "1 - x" "x ^ (1 + j)"
                               "(1 - x^(1+j)) / (1 - x)")
                              (("1" (replaces -1)
                                (("1" (lemma "div_cancel1")
                                  (("1" (inst -1 "(1 - x)" "(1 - x^(1+j))")
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^")
                                          (("1"
                                            (expand "expt" 1 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil) ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((commutative_mult formula-decl nil number_fields nil)
    (div_cancel1 formula-decl nil real_props nil)
    (distributive formula-decl nil number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (sum def-decl "real" series nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (geometric_series_aux_odd_TCC1 0
  (geometric_series_aux_odd_TCC1-1 nil 3676194504 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil
   (geometric_series_aux_odd subtype
    "number_fields./(((number_fields.-)(series.n, 1)), 2)" "nat")))
 (geometric_series_aux_odd 0
  (geometric_series_aux_odd-1 nil 3676195506
   ("" (skeep)
    (("" (lemma "geometric_series_aux1")
      (("" (inst-cp -1 "n" "x")
        (("" (inst -1 "(n - 1) / 2" "x * x")
          (("1" (assert)
            (("1" (split)
              (("1" (replaces -1)
                (("1" (replaces -1)
                  (("1" (lemma "expt_x2")
                    (("1" (inst -1 "x")
                      (("1" (replaces -1 :dir rl)
                        (("1" (lemma "expt_times")
                          (("1" (inst -1 "2" "1 + (n - 1) / 2" "x")
                            (("1" (replaces -1 :dir rl)
                              (("1" (assert)
                                (("1" (lemma "div_cancel1")
                                  (("1" (inst -1 "2" "(n - 1)")
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "distributive")
                                          (("1"
                                            (inst
                                             -1
                                             "(1 - x^(1+n)) / (1 - x^2)"
                                             "1"
                                             "x")
                                            (("1"
                                              (replaces -1 :dir rl)
                                              (("1"
                                                (case
                                                 "1 - x^2 = (1 + x) * (1 - x)")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma "div_div2")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "1 - x"
                                                       "1 + x"
                                                       "1 - x^(1+n)")
                                                      (("1"
                                                        (replaces -1 :dir rl)
                                                        (("1"
                                                          (lemma
                                                           "div_cancel2")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "1 + x"
                                                             "(1 - x^(1 + n)) / (1 - x)")
                                                            (("1"
                                                              (replaces -1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "^")
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (expand "expt")
                                                        (("2"
                                                          (expand "expt")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (replaces -1)
                                (("2" (case "FORALL (k: posnat): 0 ^ k = 0")
                                  (("1" (grind) nil nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (induct "k")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-1 1))
                              (("3" (expand "odd?")
                                (("3" (grind)
                                  (("3" (lemma "div_cancel2")
                                    (("3" (inst -1 "2" "j!1")
                                      (("3"
                                        (replaces -1)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-3 -4 1))
                (("2" (case "x < 0")
                  (("1" (lemma "both_sides_times_neg_lt1")
                    (("1" (inst -1 "x" "-1" "x")
                      (("1" (flatten) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (case "x = 0")
                    (("1" (grind) nil nil)
                     ("2" (lemma "both_sides_times_pos_lt1")
                      (("2" (inst -1 "x" "x" "1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-2 1))
            (("2" (split)
              (("1" (lemma "odd_div2") (("1" (grind) nil nil)) nil)
               ("2" (typepred "n") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((geometric_series_aux1 formula-decl nil series nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (n skolem-const-decl "nat" series nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (odd? const-decl "bool" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (distributive formula-decl nil number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (div_cancel2 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (x skolem-const-decl "real" series nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil) (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_div2 formula-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (geometric_series_aux_even_TCC1 0
  (geometric_series_aux_even_TCC1-1 nil 3676194504
   ("" (skeep)
    (("" (split)
      (("1" (lemma "even_div2")
        (("1" (inst -1 "n")
          (("1" (assert)
            (("1" (lemma "integers.closed_minus")
              (("1" (inst -1 "n / 2" "1") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (closed_minus formula-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_div2 formula-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (geometric_series_aux_even subtype
    "(number_fields.-)(number_fields./(series.n, 2), 1)" "nat")))
 (geometric_series_aux_even_TCC2 0
  (geometric_series_aux_even_TCC2-1 nil 3676194504 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (geometric_series_aux_even subtype "series.n"
    "{i: integers.int | booleans.OR(series.x /= 0, reals.>=(i, 0))}")))
 (geometric_series_aux_even 0
  (geometric_series_aux_even-1 nil 3676198570
   ("" (skeep)
    (("" (lemma "geometric_series_aux1")
      (("" (inst-cp -1 "n" "x")
        (("" (inst -1 "n / 2 - 1" "x * x")
          (("1" (assert)
            (("1" (split)
              (("1" (replaces -1)
                (("1" (replaces -1)
                  (("1" (lemma "expt_x2")
                    (("1" (inst -1 "x")
                      (("1" (replaces -1 :dir rl)
                        (("1" (lemma "expt_times")
                          (("1" (inst -1 "2" "n / 2" "x")
                            (("1" (replaces -1 :dir rl)
                              (("1" (lemma "div_cancel1")
                                (("1" (inst -1 "2" "n")
                                  (("1" (replaces -1)
                                    (("1" (lemma "distributive")
                                      (("1"
                                        (inst
                                         -1
                                         "(1 - x^n) / (1 - x^2)"
                                         "1"
                                         "x")
                                        (("1"
                                          (lemma "associative_add")
                                          (("1"
                                            (inst
                                             -1
                                             "x^n"
                                             "(1 - x^n) / (1 - x^2)"
                                             "(1 - x^n) / (1 - x^2) * x")
                                            (("1"
                                              (replaces -1 :dir rl)
                                              (("1"
                                                (replaces -1 :dir rl)
                                                (("1"
                                                  (case
                                                   "1 - x^2 = (1 - x) * (1 + x)")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma "div_div2")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "1 - x"
                                                         "1 + x"
                                                         "1 - x^n")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "div_cancel2")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1 + x"
                                                               "(1 - x^n) / (1 - x)")
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (cross-mult)
                                                                  (("1"
                                                                    (lemma
                                                                     "distributive")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "(1 - x^n)/(1 - x)"
                                                                       "1"
                                                                       "-x")
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "div_cancel1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "1 - x"
                                                                             "1 - x^n")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (replaces -1)
                                (("2" (case "FORALL (k: posnat): 0^k = 0")
                                  (("1" (inst-cp -1 "1+n")
                                    (("1" (replaces -2)
                                      (("1"
                                        (inst-cp -1 "2")
                                        (("1"
                                          (replaces -2)
                                          (("1"
                                            (inst-cp -1 "n")
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (inst -1 "n / 2")
                                                (("1"
                                                  (replaces -1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "even_div2")
                                                  (("2"
                                                    (inst -1 "n")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (induct "k")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma "even_div2") (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-4 -5 1))
                (("2" (case "x < 0")
                  (("1" (lemma "both_sides_times_neg_lt1")
                    (("1" (inst -1 "x" "-1" "x")
                      (("1" (grind) nil nil)
                       ("2" (case "x = 0")
                        (("1" (grind) nil nil)
                         ("2" (lemma "both_sides_times_pos_lt1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "x = 0")
                    (("1" (grind) nil nil)
                     ("2" (lemma "both_sides_times_pos_lt1")
                      (("2" (inst -1 "x" "x" "1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-3 -2 1))
            (("2" (split)
              (("1" (lemma "even_div2")
                (("1" (inst -1 "n")
                  (("1" (assert)
                    (("1" (lemma "integers.closed_minus")
                      (("1" (inst -1 "n / 2" "1") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((geometric_series_aux1 formula-decl nil series nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (n skolem-const-decl "nat" series nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (even? const-decl "bool" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_div2 formula-decl nil naturalnumbers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (distributive formula-decl nil number_fields nil)
    (associative_add formula-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (x skolem-const-decl "real" series nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil) (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (closed_minus formula-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (geometric_series_approx_set_contains1 0
  (geometric_series_approx_set_contains1-1 nil 3676199634
   ("" (skeep)
    (("" (expand "member")
      (("" (expand "geometric_series_approx_set")
        (("" (inst 1 "0")
          (("" (expand "sum")
            (("" (expand "geometric_series") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (sum def-decl "real" series nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil))
   shostak))
 (geometric_series_approx_set_nonempty 0
  (geometric_series_approx_set_nonempty-1 nil 3676199714
   ("" (skeep)
    (("" (lemma "geometric_series_approx_set_contains1")
      (("" (inst -1 "x") (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((geometric_series_approx_set_contains1 formula-decl nil series nil)
    (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (geometric_series_approx_set_pos_upper_bound_TCC1 0
  (geometric_series_approx_set_pos_upper_bound_TCC1-1 nil 3676194504
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (geometric_series_approx_set_pos_upper_bound subtype
    "((number_fields.-)(1, series.x))" "nznum")))
 (geometric_series_approx_set_pos_upper_bound_TCC2 0
  (geometric_series_approx_set_pos_upper_bound_TCC2-1 nil 3676194504
   ("" (skeep)
    (("" (lemma "geometric_series_approx_set_nonempty")
      (("" (inst -1 "x") nil nil)) nil))
    nil)
   ((geometric_series_approx_set_nonempty formula-decl nil series nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (geometric_series_approx_set_pos_upper_bound subtype
    "series.geometric_series_approx_set(series.x)" "(sets[real].nonempty?)")))
 (geometric_series_approx_set_pos_upper_bound 0
  (geometric_series_approx_set_pos_upper_bound-1 nil 3676202207
   ("" (skeep)
    (("" (expand "upper_bound?")
      (("" (skeep)
        (("" (typepred "s")
          (("" (expand "geometric_series_approx_set")
            (("" (skeep)
              (("" (lemma "geometric_series_aux1")
                (("" (inst -1 "n" "x")
                  (("" (assert)
                    (("" (replaces -1)
                      (("" (lemma "div_distributes_minus")
                        (("" (inst -1 "1 - x" "1" "x^(1 + n)")
                          (("" (replaces -1 :dir rl)
                            (("" (case "(x ^ (1+n) / (1 - x)) > 0")
                              (("1" (grind) nil nil)
                               ("2" (case "x = 0")
                                (("1" (replaces -1)
                                  (("1" (replaces -1) (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (hide (-1 3))
                                  (("2" (cross-mult)
                                    (("2"
                                      (case
                                       "FORALL (m: nat): x > 0 IMPLIES x^m > 0")
                                      (("1"
                                        (inst -1 "1 + n")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "m")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "expt")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt" +)
                                                  (("2"
                                                    (lemma
                                                     "both_sides_times_pos_lt1")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x"
                                                       "0"
                                                       "expt(x, j)")
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (geometric_series_aux1 formula-decl nil series nil))
   shostak))
 (geometric_series_approx_set_pos_least_upper_bound 0
  (geometric_series_approx_set_pos_least_upper_bound-1 nil 3676200055
   ("" (skeep)
    (("" (case "x = 0")
      (("1" (expand "least_upper_bound?")
        (("1" (split)
          (("1" (lemma "geometric_series_approx_set_pos_upper_bound")
            (("1" (inst -1 "x") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (expand "geometric_series_approx_set")
              (("2" (lemma "geometric_series_aux1")
                (("2" (expand "upper_bound?")
                  (("2" (name "eps" "1 / (1 - x) - y")
                    (("2" (case "eps <= 0")
                      (("1" (assert) nil nil)
                       ("2" (inst -3 "(1 - x) / (1 - x)")
                        (("1" (replaces -4) (("1" (assert) nil nil)) nil)
                         ("2" (inst 1 "0")
                          (("2" (inst -2 "0" "x")
                            (("2" (assert)
                              (("2" (replaces -2)
                                (("2" (expand "^")
                                  (("2" (expand "expt")
                                    (("2" (expand "expt")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "least_upper_bound?")
        (("2" (split)
          (("1" (lemma "geometric_series_approx_set_pos_upper_bound")
            (("1" (inst -1 "x") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (expand "upper_bound?")
              (("2" (name "eps" "1 / (1 - x) - y")
                (("2" (case "eps <= 0")
                  (("1" (grind) nil nil)
                   ("2"
                    (case "eps > 0 IMPLIES EXISTS (k: nat): x^(k+1) / (1 - x) < eps")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst -3 "(1 - x^(k + 1)) / (1 - x)")
                          (("1" (replaces -2 :dir rl)
                            (("1" (lemma "lt_plus_lt1")
                              (("1"
                                (inst -1 "1 / (1 - x) - y"
                                 "(1 - x^(k+1)) / (1 - x)" "y"
                                 "x^(k+1) / (1 - x)")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (expand "geometric_series_approx_set")
                            (("2" (inst 1 "k")
                              (("2" (lemma "geometric_series_aux1")
                                (("2" (inst -1 "k" "x")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 -3 -4 4))
                      (("2" (flatten)
                        (("2" (case "eps < 1")
                          (("1"
                            (inst 1
                             "1 + ceiling(ln(eps * (1 - x)) / ln(x) - 1)")
                            (("1"
                              (name "kk"
                                    "1 + ceiling(ln(eps * (1 - x)) / ln(x) - 1)")
                              (("1"
                                (typepred
                                 "ceiling(ln(eps * (1 - x)) / ln(x) - 1)")
                                (("1"
                                  (case "FORALL (a, b: real): a <= b IMPLIES a < b + 1")
                                  (("1"
                                    (inst -1 "ln(eps - eps * x) / ln(x) - 1"
                                     "ceiling(ln(eps * (1 - x)) / ln(x) - 1)")
                                    (("1" (split)
                                      (("1"
                                        (replaces -4)
                                        (("1"
                                          (hide (-2 -3))
                                          (("1"
                                            (both-sides "+" "1" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "both_sides_times_neg_lt1")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "ln(x)"
                                                   "1 + kk"
                                                   "ln(eps - eps * x) / ln(x)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "div_cancel2")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "ln(x)"
                                                             "ln(eps - eps * x)")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (hide -2)
                                                                (("1"
                                                                  (lemma
                                                                   "exp_strict_increasing")
                                                                  (("1"
                                                                    (expand
                                                                     "strict_increasing?")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "ln(x) + ln(x) * kk"
                                                                       "ln(eps - eps * x)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "distributive")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "ln(x)"
                                                                               "1"
                                                                               "kk")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "exp_scal")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "1 + kk"
                                                                                     "ln(x)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "exp_ln")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "eps - eps * x")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "distributive")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "eps"
                                                                                                     "1"
                                                                                                     "-x")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (div-by
                                                                                                         -1
                                                                                                         "1 - x")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "pos_times_lt")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "eps"
                                                                                                   "1 - x")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "pos_times_lt")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "eps"
                                                                           "1 - x")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "pos_times_lt")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "eps"
                                                                 "1 - x")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "pos_times_lt")
                                                    (("2"
                                                      (inst -1 "eps" "1 - x")
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "ln_strict_increasing")
                                                    (("3"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("3"
                                                        (inst -1 "x" "1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2" (lemma "pos_times_lt")
                                      (("2"
                                        (inst -1 "eps" "1 - x")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil)
                                     ("4" (lemma "pos_times_lt")
                                      (("4"
                                        (inst -1 "eps" "1 - x")
                                        (("4" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil)
                                 ("2" (lemma "pos_times_lt")
                                  (("2" (inst -1 "eps" "1 - x")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (lemma "pos_times_lt")
                                (("3" (inst -1 "eps" "1 - x")
                                  (("3" (grind) nil nil)) nil))
                                nil))
                              nil)
                             ("2"
                              (typepred
                               "ceiling(ln(eps - eps * x) / ln(x) - 1)")
                              (("1" (hide -2)
                                (("1" (both-sides "+" "1" -1)
                                  (("1" (assert)
                                    (("1" (lemma "pos_div_lt")
                                      (("1"
                                        (inst -1 "ln(x)" "ln(eps - eps * x)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (lemma "ln_eq_0")
                                                    (("2"
                                                      (lemma
                                                       "ln_strict_increasing")
                                                      (("2"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "eps - eps * x")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "eps - eps * x"
                                                               "1")
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    2
                                                                    3
                                                                    4))
                                                                  (("2"
                                                                    (case
                                                                     "1 - x <= 1")
                                                                    (("1"
                                                                      (lemma
                                                                       "lt_times_lt_pos1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "eps"
                                                                         "1 - x"
                                                                         "1"
                                                                         "1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "pos_times_lt")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "eps"
                                                                   "1 - x")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "pos_times_lt")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "eps"
                                                                 "1 - x")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-7 1 3))
                                                            (("2"
                                                              (lemma
                                                               "ln_strict_increasing")
                                                              (("2"
                                                                (expand
                                                                 "strict_increasing?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x"
                                                                   "1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "pos_times_lt")
                                          (("2"
                                            (inst -1 "eps" "1 - x")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (lemma "pos_times_lt")
                                (("3" (inst -1 "eps" "1 - x")
                                  (("3" (grind) nil nil)) nil))
                                nil))
                              nil)
                             ("3" (lemma "ln_eq_0")
                              (("3" (inst -1 "x")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (assert) nil nil)
                             ("5" (lemma "pos_times_lt")
                              (("5" (inst -1 "eps" "1 - x")
                                (("5" (grind) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (inst 2 "1 + ceiling(ln(1 - x) / ln(x) - 1)")
                            (("1" (typepred "ceiling(ln(1 - x) / ln(x) - 1)")
                              (("1"
                                (case "FORALL (a, b: real): a <= b IMPLIES a < b + 1")
                                (("1"
                                  (inst -1 "ln(1 - x) / ln(x) - 1"
                                   "ceiling(ln(1 - x) / ln(x) - 1)")
                                  (("1" (split)
                                    (("1" (hide -2)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (name
                                           "kk"
                                           "1 + ceiling(ln(1 - x) / ln(x) - 1)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (both-sides "+" "1" -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_neg_lt1")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "ln(x)"
                                                     "1 + kk"
                                                     "ln(1 - x) / ln(x)")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "div_cancel2")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "ln(x)"
                                                               "ln(1 - x)")
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (lemma
                                                                   "distributive")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "ln(x)"
                                                                     "1"
                                                                     "kk")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "exp_strict_increasing")
                                                                        (("1"
                                                                          (expand
                                                                           "strict_increasing?")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "ln(x) * (1 + kk)"
                                                                             "ln(1 - x)")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (lemma
                                                                                 "exp_scal")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "1 + kk"
                                                                                   "ln(x)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       (-2
                                                                                        -3))
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "exp_ln")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "1 - x")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (div-by
                                                                                                   -1
                                                                                                   "1 - x")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "ln_strict_increasing")
                                                      (("2"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("2"
                                                          (inst -1 "x" "1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil)
                                 ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil) ("3" (assert) nil nil))
                              nil)
                             ("2" (typepred "ceiling(ln(1 - x) / ln(x) - 1)")
                              (("1" (both-sides "+" "1" -1)
                                (("1" (assert)
                                  (("1" (hide -2)
                                    (("1" (lemma "pos_div_lt")
                                      (("1"
                                        (inst -1 "ln(x)" "ln(1 - x)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (lemma
                                                     "ln_strict_increasing")
                                                    (("2"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "1 - x"
                                                           "1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst -1 "x" "1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil) ("3" (assert) nil nil))
                              nil)
                             ("3" (lemma "ln_eq_0")
                              (("3" (inst -1 "x")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (assert) nil nil) ("5" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (geometric_series_approx_set_pos_upper_bound formula-decl nil series nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (x skolem-const-decl "real" series nil) (sum def-decl "real" series nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (geometric_series_aux1 formula-decl nil series nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (pos_div_lt formula-decl nil real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (ln_eq_0 formula-decl nil ln_exp lnexp)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Integral const-decl "real" integral_def analysis)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (exp_strict_increasing formula-decl nil ln_exp lnexp)
    (exp_scal formula-decl nil ln_exp lnexp)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pos_times_lt formula-decl nil real_props nil)
    (exp_ln formula-decl nil ln_exp lnexp)
    (distributive formula-decl nil number_fields nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (ln_1 formula-decl nil ln_exp lnexp)
    (ln_strict_increasing formula-decl nil ln_exp lnexp)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eps skolem-const-decl "real" series nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (div_simp formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (setof type-eq-decl nil defined_types nil)
    (k skolem-const-decl "nat" series nil)
    (lt_plus_lt1 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (geometric_series_pos_limit_TCC1 0
  (geometric_series_pos_limit_TCC1-1 nil 3676194504
   ("" (skeep)
    (("" (split)
      (("1" (lemma "geometric_series_approx_set_nonempty")
        (("1" (inst -1 "x") nil nil)) nil)
       ("2" (expand "bounded_above?")
        (("2" (lemma "geometric_series_approx_set_pos_upper_bound")
          (("2" (inst -1 "x")
            (("2" (inst 1 "1 / (1 - x)")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (geometric_series_approx_set_nonempty formula-decl nil series nil)
    (geometric_series_approx_set_pos_upper_bound formula-decl nil series nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "real" series nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil))
   nil
   (geometric_series_pos_limit subtype
    "series.geometric_series_approx_set(series.x)"
    "(bounded_real_defs.bounded_above?)")))
 (geometric_series_pos_limit 0
  (geometric_series_pos_limit-1 nil 3676199745
   ("" (skeep)
    (("" (typepred "lub(geometric_series_approx_set(x))")
      (("" (lemma "geometric_series_approx_set_pos_least_upper_bound")
        (("" (inst -1 "x")
          (("" (assert)
            (("" (name "a" "1 / (1 - x)")
              (("" (replaces -1)
                (("" (name "b" "lub(geometric_series_approx_set(x))")
                  (("" (replaces -1)
                    (("" (case "a < b")
                      (("1" (expand "least_upper_bound?")
                        (("1" (flatten)
                          (("1" (inst -5 "a") (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (case "b < a")
                        (("1" (expand "least_upper_bound?")
                          (("1" (flatten)
                            (("1" (inst -3 "b") (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((geometric_series_approx_set const-decl "setof[real]" series nil)
    (setof type-eq-decl nil defined_types nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (geometric_series_approx_set_pos_least_upper_bound formula-decl nil series
     nil))
   shostak)))


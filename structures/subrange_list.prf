(subrange_list
 (make_srl_rec_TCC1 0
  (make_srl_rec_TCC1-1 nil 3662121590 ("" (subtype-tcc) nil nil) nil
   nil
   (make_srl_rec subtype
    "(number_fields.-)(subrange_list.j, subrange_list.i)"
    "naturalnumber")))
 (make_srl_rec_TCC2 0
  (make_srl_rec_TCC2-1 nil 3662121590 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props nil)
    (subrange_list? const-decl "bool" subrange_list nil))
   nil
   (make_srl_rec subtype "(: subrange_list.i :)"
    "subrange_list.subrange_list(subrange_list.i, subrange_list.j)")))
 (make_srl_rec_TCC3 0
  (make_srl_rec_TCC3-1 nil 3662121590 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (make_srl_rec subtype "subrange_list.j"
    "integers.upfrom((number_fields.+)(1, subrange_list.i))")))
 (make_srl_rec_TCC4 0
  (make_srl_rec_TCC4-1 nil 3662121590 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (make_srl_rec termination
    "subrange_list.make_srl_rec((number_fields.+)(subrange_list.i, 1), subrange_list.j)"
    "nil")))
 (make_srl_rec_TCC5 0
  (make_srl_rec_TCC5-1 nil 3662121590
   ("" (skeep)
    (("" (expand "subrange_list?")
      (("" (typepred "v(1 + i, j)")
        (("1" (hide -1)
          (("1" (expand "subrange_list?")
            (("1" (flatten)
              (("1" (split 2)
                (("1" (skeep)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (case "k=i")
                        (("1" (replace -1 :hide? t)
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (case "k=i")
                          (("1" (hide -2)
                            (("1" (replace -1 :hide? t)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst -2 "k")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "no_repetitions_append[int]")
                  (("2" (inst -1 "(:i:)" "v(1+i,j)")
                    (("1" (assert)
                      (("1" (expand "append" -1)
                        (("1" (expand "append" -1)
                          (("1" (split 1)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (skeep)
                              (("2"
                                (expand "member" -1)
                                (("2"
                                  (expand "member" -1)
                                  (("2"
                                    (replace -1 :hide? t)
                                    (("2"
                                      (inst -2 "i")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "j") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((subrange_list? const-decl "bool" subrange_list nil)
    (no_repetitions_append formula-decl nil more_list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (j skolem-const-decl "upfrom(i)" subrange_list nil)
    (i skolem-const-decl "int" subrange_list nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange_list type-eq-decl nil subrange_list nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (make_srl_rec subtype
    "list_adt[int].cons(subrange_list.i, subrange_list.make_srl_rec((number_fields.+)(subrange_list.i, 1), subrange_list.j))"
    "subrange_list.subrange_list(subrange_list.i, subrange_list.j)")))
 (make_srl_TCC1 0
  (make_srl_TCC1-1 nil 3662121590 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props nil)
    (subrange_list? const-decl "bool" subrange_list nil))
   nil
   (make_srl subtype "list_adt[int].null"
    "subrange_list.subrange_list(subrange_list.i, subrange_list.j)")))
 (make_srl_TCC2 0
  (make_srl_TCC2-1 nil 3662121590 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (make_srl subtype "subrange_list.j"
    "integers.upfrom(subrange_list.i)")))
 (msrl_nat 0
  (msrl_nat-4 "" 3758574064
   ("" (skeep)
    (("" (rewrite "every_nth")
      (("" (skeep)
        (("" (typepred "make_srl(n,m)")
          (("" (rewrite "every_nth")
            (("" (inst?)
              (("" (flatten)
                (("" (assert)
                  (("" (hide-all-but (-5 1))
                    (("" (expand "subrange_list?")
                      (("" (flatten)
                        (("" (inst -1 "nth(make_srl(n, m), i)")
                          (("" (assert)
                            (("" (rewrite "list_props.member_nth")
                              (("" (inst 1 "i") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (msrl_nat subtype
    "subrange_list.make_srl(subrange_list.n, subrange_list.m)"
    "list[nat]"))
  (msrl_nat-3 "" 3758401870
   ("" (skeep)
    (("" (rewrite "every_nth")
      (("" (skeep)
        (("" (typepred "make_srl(n,m)")
          (("" (rewrite "every_nth")
            (("" (inst?)
              (("" (flatten)
                (("" (assert)
                  (("" (expand "subrange_list?")
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (typepred "n")
                            (("" (hide-all-but (1 -1 -6 -7))
                              ((""
                                (use "nth_overloading[number,int]")
                                (("1"
                                  (typepred "make_srl(n, m)")
                                  (("1"
                                    (expand "subrange_list?")
                                    (("1"
                                      (inst
                                       -2
                                       "nth[int](make_srl(n, m), i)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (use "nth_member[int]")
                                              nil
                                              nil)
                                             ("2"
                                              (typepred "i")
                                              (("2"
                                                (use
                                                 "length_overloading[number,int]")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "nth_member[int]")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "length_overloading[number,int]")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (subrange_list? const-decl "bool" subrange_list nil)
    (subrange_list type-eq-decl nil subrange_list nil)
    (make_srl const-decl "subrange_list(i, j)" subrange_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (member_nth formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (msrl_nat subtype
    "subrange_list.make_srl(subrange_list.n, subrange_list.m)"
    "list[nat]"))
  (msrl_nat-2 "" 3744485580
   ("" (skeep)
    (("" (rewrite "every_nth")
      (("" (skeep)
        (("" (typepred "make_srl(n,m)")
          (("" (rewrite "every_nth")
            (("" (inst?)
              (("" (flatten)
                (("" (assert)
                  (("" (expand "subrange_list?")
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (typepred "n")
                            (("" (hide-all-but (1 -1 -2))
                              ((""
                                (use "nth_overloading[number,int]")
                                ((""
                                  (typepred "make_srl(n, m)")
                                  ((""
                                    (expand "subrange_list?")
                                    ((""
                                      (inst
                                       -2
                                       "nth[int](make_srl(n, m), i)")
                                      ((""
                                        (assert)
                                        ((""
                                          (hide -1)
                                          ((""
                                            (prop)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (name-replace
                                                   "nn"
                                                   "nth[int](make_srl_rec(n, m), i)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "nth_member[int]")
                                              nil
                                              nil)
                                             ("3"
                                              (typepred "i")
                                              (("3"
                                                (use
                                                 "length_overloading[number,int]")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma
                                                     "nth_member[int]")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (int nonempty-type-eq-decl nil integers nil) nil
    (subrange_list? const-decl "bool" subrange_list nil)
    (subrange_list type-eq-decl nil subrange_list nil)
    (make_srl const-decl "subrange_list(i, j)" subrange_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length_overloading formula-decl nil list_exp_ol nil)
    (nth_member formula-decl nil more_list_props nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (make_srl_rec def-decl "subrange_list(i, j)" subrange_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil nil nil
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (nth_overloading formula-decl nil list_exp_ol nil))
   shostak
   (msrl_nat subtype
    "subrange_list.make_srl(subrange_list.n, subrange_list.m)"
    "list[nat]"))
  (msrl_nat-1 nil 3662127641
   ("" (skeep)
    (("" (use "every_nth[number]")
      (("" (assert)
        (("" (hide 2)
          (("" (skeep)
            (("" (typepred "make_srl(n,m)")
              (("" (use "every_nth[number]")
                (("" (assert)
                  (("" (hide -2)
                    (("" (inst?)
                      (("" (flatten)
                        (("" (assert)
                          (("" (expand "subrange_list?")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (assert)
                                  ((""
                                    (typepred "n")
                                    ((""
                                      (hide-all-but (1 -1 -2))
                                      ((""
                                        (use
                                         "nth_overloading[number,int]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (typepred
                                               "make_srl(n, m)")
                                              (("1"
                                                (expand
                                                 "subrange_list?")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "nth[int](make_srl(n, m), i)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use
                                                       "nth_member[int]")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (use
                                             "length_overloading[number,int]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (subrange_list? const-decl "bool" subrange_list nil)
    (subrange_list type-eq-decl nil subrange_list nil)
    (make_srl const-decl "subrange_list(i, j)" subrange_list nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_overloading formula-decl nil list_exp_ol nil)
    (nth_member formula-decl nil more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (make_srl_rec def-decl "subrange_list(i, j)" subrange_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nth_overloading formula-decl nil list_exp_ol nil))
   nil
   (msrl_nat subtype
    "subrange_list.make_srl(subrange_list.n, subrange_list.m)"
    "list[nat]"))))


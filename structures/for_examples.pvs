for_examples : THEORY
BEGIN
  
  IMPORTING for_iterate,
            ints@factorial

  %% //@ assert n >= 0; 
  %% int a = 1;
  %% for (int i=0; i < n; i++) {
  %%   /*@ loop invariant
  %%       a == x^i;
  %%     @ loop variant n-i;
  %%   */
  %%   a = a*x;
  %% }
  %% //@ assert a == x^n;

  expit(x:real,n:nat): real =
    for[real](0,n-1,1,LAMBDA(i:below(n),a:real):
              a*x)

  expit_test : LEMMA
    expit(2,10) = 1024

  %% Invariant with respect to index of loop
  expit_inv(x:real,n:nat)(i:upto(n),a:real) : MACRO bool =
    a = x^i

  %% Postcondition is invariant at n
  expit_post(x:real,n:nat)(a:real) : MACRO bool =
    a = x^n

  %% Proved using for_invariant
  expit_sound : LEMMA
    FORALL(x:real,n:nat): expit_post(x,n)(expit(x,n))

  %% //@ assert n >= 0; 
  %% int a = 1;
  %% for (int i=n; i >= 2; i--) {
  %%   /*@ loop invariant
  %%       a ==  factorial(n)/factorial(i);
  %%     @ loop variant i;
  %%   */
  %%   a = a*i;
  %% }
  %% //@ assert a == factorial(n);

  factit(n:nat) : posnat =
    for_down[posnat](n,2,1,LAMBDA(i:subrange(2,n),a:posnat):
                     a*i)

  factit_test : LEMMA
    factit(10) = 3628800

  %% Invariant with respect to index of loop
  factit_inv(n:nat)(i:subrange(1,n),a:posnat): MACRO bool =
    a = factorial(n)/factorial(i)

  %% Postcondition is invariant at 1
  factit_post(n:nat)(a:posnat): MACRO bool =
    a = factorial(n)

  %% Proved using for_down_invariant 
  factit_sound : LEMMA
    FORALL(n:nat): factit_post(n)(factit(n))

   IMPORTING Maybe[real]

  sum_array_logic(n:nat,A:ARRAY[below(n)->Maybe[real]])(i:upto(n)) : RECURSIVE real =
    IF i=0 THEN 0
    ELSE (IF some?(A(i-1)) THEN val(A(i-1)) ELSE 0 ENDIF) +
          sum_array_logic(n,A)(i-1)
    ENDIF
  MEASURE i

  %% //@ assert n >= 0; 
  %% real a = 0;
  %% for (int i=0; i < n; i++) {
  %%   /*@ loop invariant
  %%       a == sum_array_logic(n,A)(i);
  %%     @ loop variant n-i;
  %%   */
  %%   a = some?(A(i)) ? a+val(A(i)) : 0;
  %% }
  %% //@ assert a == sum_array_logic(n,A)(n) 

  %% Sum elements of array that are Some

  sum_array(n:nat,A:ARRAY[below(n)->Maybe[real]]) : real =
    for[real](0,n-1,0,LAMBDA(i:below(n),a:real):
              IF some?(A(i)) THEN a+val(A(i))
              ELSE a
              ENDIF)

  sum_array_inv(n:nat,A:ARRAY[below(n)->Maybe[real]])(i:upto(n),a:real) : MACRO bool =
    a = sum_array_logic(n,A)(i)

  %% Postcondition is invariant at n
  sum_array_post(n:nat,A:ARRAY[below(n)->Maybe[real]])(a:real) : MACRO bool =
    a = sum_array_logic(n,A)(n)

  %% Proved using for_invariant
  sum_array_sound : LEMMA
    FORALL(n:nat,A:ARRAY[below(n)->Maybe[real]]): sum_array_post(n,A)(sum_array(n,A))

  %% //@ assert length(l) > 0; 
  %% int a = l[0];
  %% for (int i=1; i < length(l); i++) {
  %%   /*@ loop invariant
  %%       FORALL(k:below(i)) : a >= l[k] ;
  %%     @ loop variant length(l)-i;
  %%   */
  %%   a = max(a,l[i]);
  %% }
  %% //@ assert FORALL(k:below(length(l))): a >= l[k] 

  maxit(l:(cons?[real])) : real =
    iterate_left(0,length(l)-1,LAMBDA(i:below(length(l))):nth(l,i),max)
 
  maxit_test : LEMMA
    maxit((:2,3,4,1,2:)) = 4

  maxit_inv(l:(cons?[real]))(i:below(length(l)),a:real): MACRO bool =
    FORALL(k:upto(i)) : a >= nth(l,k)

  %% Postcondition is invariant at length(l)-1
  maxit_post(l:(cons?[real]))(a:real): MACRO bool =
    FORALL(k:below(length(l))) : a >= nth(l,k)

  %% Proved using iterate_left_invariant 
  maxit_sound : LEMMA
    FORALL (l:(cons?[real])) : maxit_post(l)(maxit(l))

  %% //@ assert length(l) > 0; 
  %% int a = l[0];
  %% for (int i=1; i < length(l); i++) {
  %%   /*@ loop invariant
  %%       FORALL(k:below(i)) : a <= l[k] ;
  %%     @ loop variant length(l)-i;
  %%   */
  %%   a = min(a,l[i]);
  %% }
  %% //@ assert FORALL(k:below(length(l))): a <= l[k] 

  minit(l:(cons?[real])) : real =
    iterate_right(0,length(l)-1,LAMBDA(i:below(length(l))):nth(l,i),min)
 
  minit_test : LEMMA
    minit((:2,3,4,1,2:)) = 1

  minit_inv(l:(cons?[real]))(i:below(length(l)),a:real): MACRO bool =
    FORALL(k:subrange(i,length(l)-1)) : a <= nth(l,k)

  %% Postcondition is invariant at 0
  minit_post(l:(cons?[real]))(a:real): MACRO bool =
    FORALL(k:below(length(l))) : a <= nth(l,k)

  %% Proved using iterate_right_invariant
  minit_sound : LEMMA
    FORALL (l:(cons?[real])) : minit_post(l)(minit(l))

  %% The following lemmas transform FORALL and EXISTS of subranges to
  %% computable boolean functions. These lemmas are proved using
  %% iterate_left_induction, which requires invariants on the i-th iteration
  %% of the lopp.

  %% Invariant is LAMBDA(j:upto(n),a:bool):(FORALL(k:upto(j)):P(k)) = a
  forall_and_upto : LEMMA
    FORALL(n:nat,P:[upto(n)->bool]):
      ((FORALL (j:upto(n)) : P(j)) =
        iterate_left[bool](0,n,P,AND))

  forall_and_below : LEMMA
    FORALL(n:posnat,P:[below(n)->bool]):
      ((FORALL (j:below(n)) : P(j)) =
        iterate_left[bool](0,n-1,P,AND))
	
  %% Invariant is LAMBDA(j:upto(n-m),a:bool):(FORALL(k:subrange(m,m+j)):P(k)) = a
  forall_and_subrange : LEMMA
    FORALL(m:int,n:upfrom(m),P:[subrange(m,n)->bool]):
      ((FORALL (j:subrange(m,n)) : P(j)) =
        iterate_left[bool](m,n,P,AND))

  %% Invariant is LAMBDA(j:upto(n),a:bool):(EXISTS(k:upto(j)):P(k)) = a
  exists_and_upto : LEMMA
    FORALL(n:nat,P:[upto(n)->bool]):
      ((EXISTS (j:upto(n)) : P(j)) =
        iterate_left[bool](0,n,P,OR))

  exists_and_below : LEMMA
    FORALL(n:posnat,P:[below(n)->bool]):
      ((EXISTS (j:below(n)) : P(j)) =
        iterate_left[bool](0,n-1,P,OR))
	
  %% Invariant is LAMBDA(j:upto(n-m),a:bool):(EXISTS(k:subrange(m,m+j)):P(k)) = a
  exists_and_subrange : LEMMA
    FORALL(m:int,n:upfrom(m),P:[subrange(m,n)->bool]):
      ((EXISTS (j:subrange(m,n)) : P(j)) =
    iterate_left[bool](m,n,P,OR))


END for_examples

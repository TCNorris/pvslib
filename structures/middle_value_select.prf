(middle_value_select
 (mid_val_singleton 0
  (mid_val_singleton-1 nil 3287920647
   ("" (skosimp*)
    (("" (expand "singleton?")
      (("" (inst + "epsilon(mid_val?(A!1))")
        (("1" (skosimp*)
          (("1" (typepred! "y!1")
            (("1" (expand "mid_val?")
              (("1" (flatten)
                (("1"
                  (name-replace "xx" "epsilon(LAMBDA (v):
                2 * card(l_filter(A!1, v)) > card(A!1) AND
                 2 * card(u_filter(A!1, v)) >= card(A!1))")
                  (("1" (lemma "maj_pigeonhole")
                    (("1"
                      (inst-cp - "l_filter(A!1, y!1)" "u_filter(A!1, xx)"
                       "A!1")
                      (("1"
                        (inst - "l_filter(A!1, xx)" "u_filter(A!1, y!1)"
                         "A!1")
                        (("1" (expand "member")
                          (("1" (typepred! "leq")
                            (("1" (expand "total_order?")
                              (("1" (expand "partial_order?")
                                (("1" (expand "preorder?")
                                  (("1" (flatten)
                                    (("1" (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (split)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (reveal -4)
                                                  (("1"
                                                    (inst - "y!1" "x!1" "xx")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -4)
                                                  (("2"
                                                    (inst - "xx" "x!2" "y!1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "l_filter_subbag")
                                              nil
                                              nil)
                                             ("3"
                                              (hide-all-but (2 1))
                                              (("3"
                                                (expand "xx")
                                                (("3"
                                                  (use "epsilon_ax[T]")
                                                  (("3"
                                                    (split)
                                                    (("1" (flatten) nil nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (use "filter_exists")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (use "u_filter_subbag")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (hide-all-but (1 2))
                                              (("1"
                                                (expand "xx")
                                                (("1"
                                                  (use "epsilon_ax[T]")
                                                  (("1"
                                                    (split)
                                                    (("1" (flatten) nil nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (use "filter_exists")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "l_filter_subbag")
                                            nil
                                            nil)
                                           ("3"
                                            (hide-all-but (1 3))
                                            (("3"
                                              (expand "xx")
                                              (("3"
                                                (use "epsilon_ax[T]")
                                                (("3"
                                                  (split)
                                                  (("1" (flatten) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (use "filter_exists")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (use "u_filter_subbag")
                                            nil
                                            nil))
                                          nil)
                                         ("3" (use "l_filter_subbag") nil nil)
                                         ("4"
                                          (use "u_filter_subbag")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "epsilon_ax[T]")
          (("2" (split)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (expand "mid_val?")
                (("2" (use "filter_exists") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton? const-decl "bool" sets nil)
    (nil application-judgement "finite_bag[T]" middle_value_select nil)
    (nil application-judgement "finite_bag[T]" middle_value_select nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (card const-decl "nat" finite_bags nil)
    (total_order? const-decl "bool" orders nil)
    (leq formal-const-decl "(total_order?[T])" middle_value_select nil)
    (l_filter const-decl "bag" bag_filters nil)
    (u_filter const-decl "bag" bag_filters nil)
    (member const-decl "bool" bags nil)
    (preorder? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (u_filter_subbag formula-decl nil bag_filters nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (filter_exists formula-decl nil bag_filters nil)
    (xx skolem-const-decl "T" middle_value_select nil)
    (l_filter_subbag formula-decl nil bag_filters nil)
    (nil application-judgement "finite_set[T]" middle_value_select nil)
    (nil application-judgement "nat" middle_value_select nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (antisymmetric? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (bag_to_set const-decl "set[T]" bags_to_sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (empty? const-decl "bool" bags nil)
    (partial_order? const-decl "bool" orders nil)
    (maj_pigeonhole formula-decl nil bag_filters nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil middle_value_select nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bag type-eq-decl nil bags nil)
    (is_finite const-decl "bool" finite_bags nil)
    (finite_bag type-eq-decl nil finite_bags nil)
    (mid_val? const-decl "bool" middle_value_select nil)
    (A!1 skolem-const-decl "finite_bag[T]" middle_value_select nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil))
   shostak)))

